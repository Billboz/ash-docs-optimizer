searchData={"content_type":"text/markdown","items":[{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-mutations-action-relay_id_translations","title":"AshGraphql.Domain.graphql.mutations.action.relay_id_translations","type":"DSL"},{"doc":"Inputs to hide in the mutation/query","ref":"dsl-ashgraphql-domain.html#graphql-mutations-action-hide_inputs","title":"AshGraphql.Domain.graphql.mutations.action.hide_inputs","type":"DSL"},{"doc":"The description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-action-description","title":"AshGraphql.Domain.graphql.mutations.action.description","type":"DSL"},{"doc":"The action to use for the query.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-action-action","title":"AshGraphql.Domain.graphql.mutations.action.action","type":"DSL"},{"doc":"The name to use for the query.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-action-name","title":"AshGraphql.Domain.graphql.mutations.action.name","type":"DSL"},{"doc":"The resource that the action is defined on","ref":"dsl-ashgraphql-domain.html#graphql-mutations-action-resource","title":"AshGraphql.Domain.graphql.mutations.action.resource","type":"DSL"},{"doc":"Runs a generic action","ref":"dsl-ashgraphql-domain.html#graphql-mutations-action","title":"AshGraphql.Domain.graphql.mutations.action","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-mutations-destroy-relay_id_translations","title":"AshGraphql.Domain.graphql.mutations.destroy.relay_id_translations","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-destroy-hide_inputs","title":"AshGraphql.Domain.graphql.mutations.destroy.hide_inputs","type":"DSL"},{"doc":"The identity to use to fetch the record to be destroyed. Use `false` if no identity is required.\n","ref":"dsl-ashgraphql-domain.html#graphql-mutations-destroy-identity","title":"AshGraphql.Domain.graphql.mutations.destroy.identity","type":"DSL"},{"doc":"The read action to use to fetch the record to be destroyed. Defaults to the primary read action.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-destroy-read_action","title":"AshGraphql.Domain.graphql.mutations.destroy.read_action","type":"DSL"},{"doc":"The action to use for the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-destroy-action","title":"AshGraphql.Domain.graphql.mutations.destroy.action","type":"DSL"},{"doc":"The name to use for the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-destroy-name","title":"AshGraphql.Domain.graphql.mutations.destroy.name","type":"DSL"},{"doc":"The resource that the action is defined on","ref":"dsl-ashgraphql-domain.html#graphql-mutations-destroy-resource","title":"AshGraphql.Domain.graphql.mutations.destroy.resource","type":"DSL"},{"doc":"A mutation to destroy a record","ref":"dsl-ashgraphql-domain.html#graphql-mutations-destroy","title":"AshGraphql.Domain.graphql.mutations.destroy","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-mutations-update-relay_id_translations","title":"AshGraphql.Domain.graphql.mutations.update.relay_id_translations","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-update-hide_inputs","title":"AshGraphql.Domain.graphql.mutations.update.hide_inputs","type":"DSL"},{"doc":"The read action to use to fetch the record to be updated. Defaults to the primary read action.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-update-read_action","title":"AshGraphql.Domain.graphql.mutations.update.read_action","type":"DSL"},{"doc":"The identity to use to fetch the record to be updated. Use `false` if no identity is required.\n","ref":"dsl-ashgraphql-domain.html#graphql-mutations-update-identity","title":"AshGraphql.Domain.graphql.mutations.update.identity","type":"DSL"},{"doc":"The action to use for the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-update-action","title":"AshGraphql.Domain.graphql.mutations.update.action","type":"DSL"},{"doc":"The name to use for the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-update-name","title":"AshGraphql.Domain.graphql.mutations.update.name","type":"DSL"},{"doc":"The resource that the action is defined on","ref":"dsl-ashgraphql-domain.html#graphql-mutations-update-resource","title":"AshGraphql.Domain.graphql.mutations.update.resource","type":"DSL"},{"doc":"A mutation to update a record","ref":"dsl-ashgraphql-domain.html#graphql-mutations-update","title":"AshGraphql.Domain.graphql.mutations.update","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-mutations-create-relay_id_translations","title":"AshGraphql.Domain.graphql.mutations.create.relay_id_translations","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-create-hide_inputs","title":"AshGraphql.Domain.graphql.mutations.create.hide_inputs","type":"DSL"},{"doc":"An MFA that will be called with the resolution, the query, and the result of the action as the first three arguments. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-mutations-create-modify_resolution","title":"AshGraphql.Domain.graphql.mutations.create.modify_resolution","type":"DSL"},{"doc":"Which identity to use for the upsert","ref":"dsl-ashgraphql-domain.html#graphql-mutations-create-upsert_identity","title":"AshGraphql.Domain.graphql.mutations.create.upsert_identity","type":"DSL"},{"doc":"Whether or not to use the `upsert?: true` option when calling `YourDomain.create/2`.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-create-upsert?","title":"AshGraphql.Domain.graphql.mutations.create.upsert?","type":"DSL"},{"doc":"The mutation description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-create-description","title":"AshGraphql.Domain.graphql.mutations.create.description","type":"DSL"},{"doc":"The action to use for the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-create-action","title":"AshGraphql.Domain.graphql.mutations.create.action","type":"DSL"},{"doc":"The name to use for the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-mutations-create-name","title":"AshGraphql.Domain.graphql.mutations.create.name","type":"DSL"},{"doc":"The resource that the action is defined on","ref":"dsl-ashgraphql-domain.html#graphql-mutations-create-resource","title":"AshGraphql.Domain.graphql.mutations.create.resource","type":"DSL"},{"doc":"A mutation to create a record","ref":"dsl-ashgraphql-domain.html#graphql-mutations-create","title":"AshGraphql.Domain.graphql.mutations.create","type":"DSL"},{"doc":"Mutations (create/update/destroy actions) to expose for the resource.\n","ref":"dsl-ashgraphql-domain.html#graphql-mutations","title":"AshGraphql.Domain.graphql.mutations","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-action-relay_id_translations","title":"AshGraphql.Domain.graphql.queries.action.relay_id_translations","type":"DSL"},{"doc":"Inputs to hide in the mutation/query","ref":"dsl-ashgraphql-domain.html#graphql-queries-action-hide_inputs","title":"AshGraphql.Domain.graphql.queries.action.hide_inputs","type":"DSL"},{"doc":"The description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-domain.html#graphql-queries-action-description","title":"AshGraphql.Domain.graphql.queries.action.description","type":"DSL"},{"doc":"The action to use for the query.","ref":"dsl-ashgraphql-domain.html#graphql-queries-action-action","title":"AshGraphql.Domain.graphql.queries.action.action","type":"DSL"},{"doc":"The name to use for the query.","ref":"dsl-ashgraphql-domain.html#graphql-queries-action-name","title":"AshGraphql.Domain.graphql.queries.action.name","type":"DSL"},{"doc":"The resource that the action is defined on","ref":"dsl-ashgraphql-domain.html#graphql-queries-action-resource","title":"AshGraphql.Domain.graphql.queries.action.resource","type":"DSL"},{"doc":"Runs a generic action","ref":"dsl-ashgraphql-domain.html#graphql-queries-action","title":"AshGraphql.Domain.graphql.queries.action","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-hide_inputs","title":"AshGraphql.Domain.graphql.queries.list.hide_inputs","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-relay_id_translations","title":"AshGraphql.Domain.graphql.queries.list.relay_id_translations","type":"DSL"},{"doc":"Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-as_mutation?","title":"AshGraphql.Domain.graphql.queries.list.as_mutation?","type":"DSL"},{"doc":"The metadata attributes to show. Defaults to all.","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-show_metadata","title":"AshGraphql.Domain.graphql.queries.list.show_metadata","type":"DSL"},{"doc":"Type overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-metadata_types","title":"AshGraphql.Domain.graphql.queries.list.metadata_types","type":"DSL"},{"doc":"Name overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-metadata_names","title":"AshGraphql.Domain.graphql.queries.list.metadata_names","type":"DSL"},{"doc":"The query description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-description","title":"AshGraphql.Domain.graphql.queries.list.description","type":"DSL"},{"doc":"Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-type_name","title":"AshGraphql.Domain.graphql.queries.list.type_name","type":"DSL"},{"doc":"The action to use for the query.","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-action","title":"AshGraphql.Domain.graphql.queries.list.action","type":"DSL"},{"doc":"The name to use for the query.","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-name","title":"AshGraphql.Domain.graphql.queries.list.name","type":"DSL"},{"doc":"Determine the pagination strategy to use, if multiple are available. If `nil`, no pagination is applied, otherwise the given strategy is used.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-paginate_with","title":"AshGraphql.Domain.graphql.queries.list.paginate_with","type":"DSL"},{"doc":"If true, the graphql queries/resolvers for this resource will be built to honor the relay specification. See [the relay guide](/documentation/topics/relay.html) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-relay?","title":"AshGraphql.Domain.graphql.queries.list.relay?","type":"DSL"},{"doc":"The resource that the action is defined on","ref":"dsl-ashgraphql-domain.html#graphql-queries-list-resource","title":"AshGraphql.Domain.graphql.queries.list.resource","type":"DSL"},{"doc":"A query to fetch a list of records","ref":"dsl-ashgraphql-domain.html#graphql-queries-list","title":"AshGraphql.Domain.graphql.queries.list","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-hide_inputs","title":"AshGraphql.Domain.graphql.queries.read_one.hide_inputs","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-relay_id_translations","title":"AshGraphql.Domain.graphql.queries.read_one.relay_id_translations","type":"DSL"},{"doc":"Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-as_mutation?","title":"AshGraphql.Domain.graphql.queries.read_one.as_mutation?","type":"DSL"},{"doc":"The metadata attributes to show. Defaults to all.","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-show_metadata","title":"AshGraphql.Domain.graphql.queries.read_one.show_metadata","type":"DSL"},{"doc":"Type overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-metadata_types","title":"AshGraphql.Domain.graphql.queries.read_one.metadata_types","type":"DSL"},{"doc":"Name overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-metadata_names","title":"AshGraphql.Domain.graphql.queries.read_one.metadata_names","type":"DSL"},{"doc":"The query description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-description","title":"AshGraphql.Domain.graphql.queries.read_one.description","type":"DSL"},{"doc":"Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-type_name","title":"AshGraphql.Domain.graphql.queries.read_one.type_name","type":"DSL"},{"doc":"The action to use for the query.","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-action","title":"AshGraphql.Domain.graphql.queries.read_one.action","type":"DSL"},{"doc":"The name to use for the query.","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-name","title":"AshGraphql.Domain.graphql.queries.read_one.name","type":"DSL"},{"doc":"Whether or not the action can return nil.","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-allow_nil?","title":"AshGraphql.Domain.graphql.queries.read_one.allow_nil?","type":"DSL"},{"doc":"The resource that the action is defined on","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one-resource","title":"AshGraphql.Domain.graphql.queries.read_one.resource","type":"DSL"},{"doc":"A query to fetch a record","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one","title":"AshGraphql.Domain.graphql.queries.read_one","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-hide_inputs","title":"AshGraphql.Domain.graphql.queries.get.hide_inputs","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-relay_id_translations","title":"AshGraphql.Domain.graphql.queries.get.relay_id_translations","type":"DSL"},{"doc":"Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-as_mutation?","title":"AshGraphql.Domain.graphql.queries.get.as_mutation?","type":"DSL"},{"doc":"The metadata attributes to show. Defaults to all.","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-show_metadata","title":"AshGraphql.Domain.graphql.queries.get.show_metadata","type":"DSL"},{"doc":"Type overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-metadata_types","title":"AshGraphql.Domain.graphql.queries.get.metadata_types","type":"DSL"},{"doc":"Name overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-metadata_names","title":"AshGraphql.Domain.graphql.queries.get.metadata_names","type":"DSL"},{"doc":"The query description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-description","title":"AshGraphql.Domain.graphql.queries.get.description","type":"DSL"},{"doc":"Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-type_name","title":"AshGraphql.Domain.graphql.queries.get.type_name","type":"DSL"},{"doc":"The action to use for the query.","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-action","title":"AshGraphql.Domain.graphql.queries.get.action","type":"DSL"},{"doc":"The name to use for the query.","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-name","title":"AshGraphql.Domain.graphql.queries.get.name","type":"DSL"},{"doc":"An MFA that will be called with the resolution, the query, and the result of the action as the first three arguments. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-modify_resolution","title":"AshGraphql.Domain.graphql.queries.get.modify_resolution","type":"DSL"},{"doc":"Whether or not the action can return nil.","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-allow_nil?","title":"AshGraphql.Domain.graphql.queries.get.allow_nil?","type":"DSL"},{"doc":"The identity to use for looking up the record. Pass `false` to not use an identity.","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-identity","title":"AshGraphql.Domain.graphql.queries.get.identity","type":"DSL"},{"doc":"The resource that the action is defined on","ref":"dsl-ashgraphql-domain.html#graphql-queries-get-resource","title":"AshGraphql.Domain.graphql.queries.get.resource","type":"DSL"},{"doc":"A query to fetch a record by primary key","ref":"dsl-ashgraphql-domain.html#graphql-queries-get","title":"AshGraphql.Domain.graphql.queries.get","type":"DSL"},{"doc":"Queries to expose for the resource.\n","ref":"dsl-ashgraphql-domain.html#graphql-queries","title":"AshGraphql.Domain.graphql.queries","type":"DSL"},{"doc":"For security purposes, if an error is *raised* then Ash simply shows a generic error. If you want to show those errors, set this to true.","ref":"dsl-ashgraphql-domain.html#graphql-show_raised_errors?","title":"AshGraphql.Domain.graphql.show_raised_errors?","type":"DSL"},{"doc":"Set an MFA to intercept/handle any errors that are generated.\n","ref":"dsl-ashgraphql-domain.html#graphql-error_handler","title":"AshGraphql.Domain.graphql.error_handler","type":"DSL"},{"doc":"By default, mutation errors are shown in their result object's errors key, but this setting places those errors in the top level errors list","ref":"dsl-ashgraphql-domain.html#graphql-root_level_errors?","title":"AshGraphql.Domain.graphql.root_level_errors?","type":"DSL"},{"doc":"A tracer to use to trace execution in the graphql. Will use `config :ash, :tracer` if it is set.","ref":"dsl-ashgraphql-domain.html#graphql-tracer","title":"AshGraphql.Domain.graphql.tracer","type":"DSL"},{"doc":"Whether or not to perform authorization for this domain","ref":"dsl-ashgraphql-domain.html#graphql-authorize?","title":"AshGraphql.Domain.graphql.authorize?","type":"DSL"},{"doc":"Domain level configuration for GraphQL\n","ref":"dsl-ashgraphql-domain.html#graphql","title":"AshGraphql.Domain.graphql","type":"DSL"},{"doc":"Use this to ignore a given managed relationship, preventing `auto? true` from deriving a type for it.\n","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships-managed_relationship-ignore?","title":"AshGraphql.Resource.graphql.managed_relationships.managed_relationship.ignore?","type":"DSL"},{"doc":"A keyword list of field names to their graphql type identifiers.\n","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships-managed_relationship-types","title":"AshGraphql.Resource.graphql.managed_relationships.managed_relationship.types","type":"DSL"},{"doc":"The name of the input object that will be derived. Defaults to `<action_type>_<resource>_<argument_name>_input`\n","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships-managed_relationship-type_name","title":"AshGraphql.Resource.graphql.managed_relationships.managed_relationship.type_name","type":"DSL"},{"doc":"Determines which identities are provided in the input object for looking up, if there is `on_lookup` behavior. Defalts to the `use_identities` option.\n","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships-managed_relationship-lookup_identities","title":"AshGraphql.Resource.graphql.managed_relationships.managed_relationship.lookup_identities","type":"DSL"},{"doc":"If the managed_relationship has `on_lookup` behavior, this option determines whether or not the primary key is provided in the input object for looking up.\n","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships-managed_relationship-lookup_with_primary_key?","title":"AshGraphql.Resource.graphql.managed_relationships.managed_relationship.lookup_with_primary_key?","type":"DSL"},{"doc":"The action that accepts the argument","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships-managed_relationship-action","title":"AshGraphql.Resource.graphql.managed_relationships.managed_relationship.action","type":"DSL"},{"doc":"The argument for which an input object should be derived.","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships-managed_relationship-argument","title":"AshGraphql.Resource.graphql.managed_relationships.managed_relationship.argument","type":"DSL"},{"doc":"Instructs ash_graphql that a given argument with a `manage_relationship` change should have its input objects derived automatically from the potential actions to be called.\n\nFor example, given an action like:\n\n```elixir\nactions do\n  create :create do\n    argument :comments, {:array, :map}\n\n    change manage_relationship(:comments, type: :direct_control) # <- we look for this change with a matching argument name\n  end\nend\n```\n\nYou could add the following managed_relationship\n\n```elixir\ngraphql do\n  ...\n\n  managed_relationships do\n    managed_relationship :create, :comments\n  end\nend\n```\n\nBy default, the `{:array, :map}` would simply be a `json[]` type. If the argument name\nis placed in this list, all of the potential actions that could be called will be combined\ninto a single input object. If there are type conflicts (for example, if the input could create\nor update a record, and the create and update actions have an argument of the same name but with a different type),\na warning is emitted at compile time and the first one is used. If that is insufficient, you will need to do one of the following:\n\n1.) provide the `:types` option to the `managed_relationship` constructor (see that option for more)\n2.) define a custom type, with a custom input object (see the custom types guide), and use that custom type instead of `:map`\n3.) change your actions to not have overlapping inputs with different types\n\nSince managed relationships can ultimately call multiple actions, there is the possibility\nof field type conflicts. Use the `types` option to determine the type of fields and remove the conflict warnings.\n\nFor `non_null` use `{:non_null, type}`, and for a list, use `{:array, type}`, for example:\n\n`{:non_null, {:array, {:non_null, :string}}}` for a non null list of non null strings.\n\nTo *remove* a key from the input object, simply pass `nil` as the type.\n","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships-managed_relationship","title":"AshGraphql.Resource.graphql.managed_relationships.managed_relationship","type":"DSL"},{"doc":"Automatically derive types for all arguments that have a `manage_relationship` call change.","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships-auto?","title":"AshGraphql.Resource.graphql.managed_relationships.auto?","type":"DSL"},{"doc":"Generates input objects for `manage_relationship` arguments on resource actions.\n","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships","title":"AshGraphql.Resource.graphql.managed_relationships","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-mutations-action-relay_id_translations","title":"AshGraphql.Resource.graphql.mutations.action.relay_id_translations","type":"DSL"},{"doc":"Inputs to hide in the mutation/query","ref":"dsl-ashgraphql-resource.html#graphql-mutations-action-hide_inputs","title":"AshGraphql.Resource.graphql.mutations.action.hide_inputs","type":"DSL"},{"doc":"The description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-action-description","title":"AshGraphql.Resource.graphql.mutations.action.description","type":"DSL"},{"doc":"The action to use for the query.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-action-action","title":"AshGraphql.Resource.graphql.mutations.action.action","type":"DSL"},{"doc":"The name to use for the query.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-action-name","title":"AshGraphql.Resource.graphql.mutations.action.name","type":"DSL"},{"doc":"Runs a generic action","ref":"dsl-ashgraphql-resource.html#graphql-mutations-action","title":"AshGraphql.Resource.graphql.mutations.action","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-mutations-destroy-relay_id_translations","title":"AshGraphql.Resource.graphql.mutations.destroy.relay_id_translations","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-destroy-hide_inputs","title":"AshGraphql.Resource.graphql.mutations.destroy.hide_inputs","type":"DSL"},{"doc":"The identity to use to fetch the record to be destroyed. Use `false` if no identity is required.\n","ref":"dsl-ashgraphql-resource.html#graphql-mutations-destroy-identity","title":"AshGraphql.Resource.graphql.mutations.destroy.identity","type":"DSL"},{"doc":"The read action to use to fetch the record to be destroyed. Defaults to the primary read action.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-destroy-read_action","title":"AshGraphql.Resource.graphql.mutations.destroy.read_action","type":"DSL"},{"doc":"The action to use for the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-destroy-action","title":"AshGraphql.Resource.graphql.mutations.destroy.action","type":"DSL"},{"doc":"The name to use for the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-destroy-name","title":"AshGraphql.Resource.graphql.mutations.destroy.name","type":"DSL"},{"doc":"A mutation to destroy a record","ref":"dsl-ashgraphql-resource.html#graphql-mutations-destroy","title":"AshGraphql.Resource.graphql.mutations.destroy","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-mutations-update-relay_id_translations","title":"AshGraphql.Resource.graphql.mutations.update.relay_id_translations","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-update-hide_inputs","title":"AshGraphql.Resource.graphql.mutations.update.hide_inputs","type":"DSL"},{"doc":"The read action to use to fetch the record to be updated. Defaults to the primary read action.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-update-read_action","title":"AshGraphql.Resource.graphql.mutations.update.read_action","type":"DSL"},{"doc":"The identity to use to fetch the record to be updated. Use `false` if no identity is required.\n","ref":"dsl-ashgraphql-resource.html#graphql-mutations-update-identity","title":"AshGraphql.Resource.graphql.mutations.update.identity","type":"DSL"},{"doc":"The action to use for the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-update-action","title":"AshGraphql.Resource.graphql.mutations.update.action","type":"DSL"},{"doc":"The name to use for the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-update-name","title":"AshGraphql.Resource.graphql.mutations.update.name","type":"DSL"},{"doc":"A mutation to update a record","ref":"dsl-ashgraphql-resource.html#graphql-mutations-update","title":"AshGraphql.Resource.graphql.mutations.update","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-mutations-create-relay_id_translations","title":"AshGraphql.Resource.graphql.mutations.create.relay_id_translations","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-create-hide_inputs","title":"AshGraphql.Resource.graphql.mutations.create.hide_inputs","type":"DSL"},{"doc":"An MFA that will be called with the resolution, the query, and the result of the action as the first three arguments. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-mutations-create-modify_resolution","title":"AshGraphql.Resource.graphql.mutations.create.modify_resolution","type":"DSL"},{"doc":"Which identity to use for the upsert","ref":"dsl-ashgraphql-resource.html#graphql-mutations-create-upsert_identity","title":"AshGraphql.Resource.graphql.mutations.create.upsert_identity","type":"DSL"},{"doc":"Whether or not to use the `upsert?: true` option when calling `YourDomain.create/2`.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-create-upsert?","title":"AshGraphql.Resource.graphql.mutations.create.upsert?","type":"DSL"},{"doc":"The mutation description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-create-description","title":"AshGraphql.Resource.graphql.mutations.create.description","type":"DSL"},{"doc":"The action to use for the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-create-action","title":"AshGraphql.Resource.graphql.mutations.create.action","type":"DSL"},{"doc":"The name to use for the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-mutations-create-name","title":"AshGraphql.Resource.graphql.mutations.create.name","type":"DSL"},{"doc":"A mutation to create a record","ref":"dsl-ashgraphql-resource.html#graphql-mutations-create","title":"AshGraphql.Resource.graphql.mutations.create","type":"DSL"},{"doc":"Mutations (create/update/destroy actions) to expose for the resource.\n","ref":"dsl-ashgraphql-resource.html#graphql-mutations","title":"AshGraphql.Resource.graphql.mutations","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-action-relay_id_translations","title":"AshGraphql.Resource.graphql.queries.action.relay_id_translations","type":"DSL"},{"doc":"Inputs to hide in the mutation/query","ref":"dsl-ashgraphql-resource.html#graphql-queries-action-hide_inputs","title":"AshGraphql.Resource.graphql.queries.action.hide_inputs","type":"DSL"},{"doc":"The description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-resource.html#graphql-queries-action-description","title":"AshGraphql.Resource.graphql.queries.action.description","type":"DSL"},{"doc":"The action to use for the query.","ref":"dsl-ashgraphql-resource.html#graphql-queries-action-action","title":"AshGraphql.Resource.graphql.queries.action.action","type":"DSL"},{"doc":"The name to use for the query.","ref":"dsl-ashgraphql-resource.html#graphql-queries-action-name","title":"AshGraphql.Resource.graphql.queries.action.name","type":"DSL"},{"doc":"Runs a generic action","ref":"dsl-ashgraphql-resource.html#graphql-queries-action","title":"AshGraphql.Resource.graphql.queries.action","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-hide_inputs","title":"AshGraphql.Resource.graphql.queries.list.hide_inputs","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-relay_id_translations","title":"AshGraphql.Resource.graphql.queries.list.relay_id_translations","type":"DSL"},{"doc":"Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-as_mutation?","title":"AshGraphql.Resource.graphql.queries.list.as_mutation?","type":"DSL"},{"doc":"The metadata attributes to show. Defaults to all.","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-show_metadata","title":"AshGraphql.Resource.graphql.queries.list.show_metadata","type":"DSL"},{"doc":"Type overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-metadata_types","title":"AshGraphql.Resource.graphql.queries.list.metadata_types","type":"DSL"},{"doc":"Name overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-metadata_names","title":"AshGraphql.Resource.graphql.queries.list.metadata_names","type":"DSL"},{"doc":"The query description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-description","title":"AshGraphql.Resource.graphql.queries.list.description","type":"DSL"},{"doc":"Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-type_name","title":"AshGraphql.Resource.graphql.queries.list.type_name","type":"DSL"},{"doc":"The action to use for the query.","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-action","title":"AshGraphql.Resource.graphql.queries.list.action","type":"DSL"},{"doc":"The name to use for the query.","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-name","title":"AshGraphql.Resource.graphql.queries.list.name","type":"DSL"},{"doc":"Determine the pagination strategy to use, if multiple are available. If `nil`, no pagination is applied, otherwise the given strategy is used.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-paginate_with","title":"AshGraphql.Resource.graphql.queries.list.paginate_with","type":"DSL"},{"doc":"If true, the graphql queries/resolvers for this resource will be built to honor the relay specification. See [the relay guide](/documentation/topics/relay.html) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-list-relay?","title":"AshGraphql.Resource.graphql.queries.list.relay?","type":"DSL"},{"doc":"A query to fetch a list of records","ref":"dsl-ashgraphql-resource.html#graphql-queries-list","title":"AshGraphql.Resource.graphql.queries.list","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one-hide_inputs","title":"AshGraphql.Resource.graphql.queries.read_one.hide_inputs","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one-relay_id_translations","title":"AshGraphql.Resource.graphql.queries.read_one.relay_id_translations","type":"DSL"},{"doc":"Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one-as_mutation?","title":"AshGraphql.Resource.graphql.queries.read_one.as_mutation?","type":"DSL"},{"doc":"The metadata attributes to show. Defaults to all.","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one-show_metadata","title":"AshGraphql.Resource.graphql.queries.read_one.show_metadata","type":"DSL"},{"doc":"Type overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one-metadata_types","title":"AshGraphql.Resource.graphql.queries.read_one.metadata_types","type":"DSL"},{"doc":"Name overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one-metadata_names","title":"AshGraphql.Resource.graphql.queries.read_one.metadata_names","type":"DSL"},{"doc":"The query description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one-description","title":"AshGraphql.Resource.graphql.queries.read_one.description","type":"DSL"},{"doc":"Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one-type_name","title":"AshGraphql.Resource.graphql.queries.read_one.type_name","type":"DSL"},{"doc":"The action to use for the query.","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one-action","title":"AshGraphql.Resource.graphql.queries.read_one.action","type":"DSL"},{"doc":"The name to use for the query.","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one-name","title":"AshGraphql.Resource.graphql.queries.read_one.name","type":"DSL"},{"doc":"Whether or not the action can return nil.","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one-allow_nil?","title":"AshGraphql.Resource.graphql.queries.read_one.allow_nil?","type":"DSL"},{"doc":"A query to fetch a record","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one","title":"AshGraphql.Resource.graphql.queries.read_one","type":"DSL"},{"doc":"A list of inputs to hide from the mutation.","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-hide_inputs","title":"AshGraphql.Resource.graphql.queries.get.hide_inputs","type":"DSL"},{"doc":"A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-relay_id_translations","title":"AshGraphql.Resource.graphql.queries.get.relay_id_translations","type":"DSL"},{"doc":"Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-as_mutation?","title":"AshGraphql.Resource.graphql.queries.get.as_mutation?","type":"DSL"},{"doc":"The metadata attributes to show. Defaults to all.","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-show_metadata","title":"AshGraphql.Resource.graphql.queries.get.show_metadata","type":"DSL"},{"doc":"Type overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-metadata_types","title":"AshGraphql.Resource.graphql.queries.get.metadata_types","type":"DSL"},{"doc":"Name overrides for metadata fields on the read action.","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-metadata_names","title":"AshGraphql.Resource.graphql.queries.get.metadata_names","type":"DSL"},{"doc":"The query description that gets shown in the Graphql schema. If not provided, the action description will be used.","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-description","title":"AshGraphql.Resource.graphql.queries.get.description","type":"DSL"},{"doc":"Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-type_name","title":"AshGraphql.Resource.graphql.queries.get.type_name","type":"DSL"},{"doc":"The action to use for the query.","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-action","title":"AshGraphql.Resource.graphql.queries.get.action","type":"DSL"},{"doc":"The name to use for the query.","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-name","title":"AshGraphql.Resource.graphql.queries.get.name","type":"DSL"},{"doc":"An MFA that will be called with the resolution, the query, and the result of the action as the first three arguments. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-modify_resolution","title":"AshGraphql.Resource.graphql.queries.get.modify_resolution","type":"DSL"},{"doc":"Whether or not the action can return nil.","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-allow_nil?","title":"AshGraphql.Resource.graphql.queries.get.allow_nil?","type":"DSL"},{"doc":"The identity to use for looking up the record. Pass `false` to not use an identity.","ref":"dsl-ashgraphql-resource.html#graphql-queries-get-identity","title":"AshGraphql.Resource.graphql.queries.get.identity","type":"DSL"},{"doc":"A query to fetch a record by primary key","ref":"dsl-ashgraphql-resource.html#graphql-queries-get","title":"AshGraphql.Resource.graphql.queries.get","type":"DSL"},{"doc":"Queries (read actions) to expose for the resource.\n","ref":"dsl-ashgraphql-resource.html#graphql-queries","title":"AshGraphql.Resource.graphql.queries","type":"DSL"},{"doc":"Mark fields as nullable even if they are required. This is useful when using field policies. See the authorization guide for more.","ref":"dsl-ashgraphql-resource.html#graphql-nullable_fields","title":"AshGraphql.Resource.graphql.nullable_fields","type":"DSL"},{"doc":"A list of fields that are allowed to be filtered on. Defaults to all filterable fields for which a GraphQL type can be created.","ref":"dsl-ashgraphql-resource.html#graphql-filterable_fields","title":"AshGraphql.Resource.graphql.filterable_fields","type":"DSL"},{"doc":"Whether or not to create the GraphQL object, this allows you to manually create the GraphQL object.","ref":"dsl-ashgraphql-resource.html#graphql-generate_object?","title":"AshGraphql.Resource.graphql.generate_object?","type":"DSL"},{"doc":"A simple way to prevent massive queries.\n","ref":"dsl-ashgraphql-resource.html#graphql-depth_limit","title":"AshGraphql.Resource.graphql.depth_limit","type":"DSL"},{"doc":"If a composite primary key exists, this can be set to determine delimiter used in the `id` field value.","ref":"dsl-ashgraphql-resource.html#graphql-primary_key_delimiter","title":"AshGraphql.Resource.graphql.primary_key_delimiter","type":"DSL"},{"doc":"A keyword list of actions and their input type overrides for arguments. The type overrides should refer to types available in the graphql (absinthe) schema. `list_of/1` and `non_null/1` helpers can be used.","ref":"dsl-ashgraphql-resource.html#graphql-argument_input_types","title":"AshGraphql.Resource.graphql.argument_input_types","type":"DSL"},{"doc":"A keyword list of input type overrides for attributes. The type overrides should refer to types available in the graphql (absinthe) schema. `list_of/1` and `non_null/1` helpers can be used.","ref":"dsl-ashgraphql-resource.html#graphql-attribute_input_types","title":"AshGraphql.Resource.graphql.attribute_input_types","type":"DSL"},{"doc":"A keyword list of type overrides for attributes. The type overrides should refer to types available in the graphql (absinthe) schema. `list_of/1` and `non_null/1` helpers can be used.","ref":"dsl-ashgraphql-resource.html#graphql-attribute_types","title":"AshGraphql.Resource.graphql.attribute_types","type":"DSL"},{"doc":"If set, the keyset will be displayed on all read actions in this field.  It will be `nil` unless at least one of the read actions on a resource uses keyset pagination or it is the result of a mutation\n","ref":"dsl-ashgraphql-resource.html#graphql-keyset_field","title":"AshGraphql.Resource.graphql.keyset_field","type":"DSL"},{"doc":"A nested keyword list of action names, to argument name remappings. i.e `create: [arg_name: :new_name]`","ref":"dsl-ashgraphql-resource.html#graphql-argument_names","title":"AshGraphql.Resource.graphql.argument_names","type":"DSL"},{"doc":"A list of attributes to show in the domain. If not specified includes all (excluding `hide_fiels`).","ref":"dsl-ashgraphql-resource.html#graphql-show_fields","title":"AshGraphql.Resource.graphql.show_fields","type":"DSL"},{"doc":"A list of attributes to hide from the domain","ref":"dsl-ashgraphql-resource.html#graphql-hide_fields","title":"AshGraphql.Resource.graphql.hide_fields","type":"DSL"},{"doc":"A keyword list of name overrides for attributes.","ref":"dsl-ashgraphql-resource.html#graphql-field_names","title":"AshGraphql.Resource.graphql.field_names","type":"DSL"},{"doc":"A keyword list indicating which kind of pagination should be used for each `has_many` and `many_to_many` relationships, e.g. `related_things: :keyset, other_related_things: :offset`. Valid pagination values are `nil`, `:offset`, `:keyset` and `:relay`.","ref":"dsl-ashgraphql-resource.html#graphql-paginate_relationship_with","title":"AshGraphql.Resource.graphql.paginate_relationship_with","type":"DSL"},{"doc":"A list of relationships to include on the created type. Defaults to all public relationships where the destination defines a graphql type.","ref":"dsl-ashgraphql-resource.html#graphql-relationships","title":"AshGraphql.Resource.graphql.relationships","type":"DSL"},{"doc":"For resources with composite primary keys, or primary keys not called `:id`, this will cause the id to be encoded as a single `id` attribute, both in the representation of the resource and in get requests","ref":"dsl-ashgraphql-resource.html#graphql-encode_primary_key?","title":"AshGraphql.Resource.graphql.encode_primary_key?","type":"DSL"},{"doc":"Set to false to disable the automatic generation of a sort input for read actions.\n","ref":"dsl-ashgraphql-resource.html#graphql-derive_sort?","title":"AshGraphql.Resource.graphql.derive_sort?","type":"DSL"},{"doc":"Set to false to disable the automatic generation of a filter input for read actions.\n","ref":"dsl-ashgraphql-resource.html#graphql-derive_filter?","title":"AshGraphql.Resource.graphql.derive_filter?","type":"DSL"},{"doc":"The type to use for this entity in the graphql schema. If the resource doesn't have a type, it also needs to have `generate_object? false` and can only expose generic action queries.","ref":"dsl-ashgraphql-resource.html#graphql-type","title":"AshGraphql.Resource.graphql.type","type":"DSL"},{"doc":"Configuration for a given resource in graphql\n","ref":"dsl-ashgraphql-resource.html#graphql","title":"AshGraphql.Resource.graphql","type":"DSL"},{"doc":"Mod docs","ref":"AshGraphql.Domain.Graphql.Mutations.Action.html","title":"AshGraphql.Domain.Graphql.Mutations.Action","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Domain.Graphql.Mutations.Action.html#action/4","title":"AshGraphql.Domain.Graphql.Mutations.Action.action/4","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Domain.Graphql.Mutations.Action.Options.html","title":"AshGraphql.Domain.Graphql.Mutations.Action.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Action.Options.html#description/1","title":"AshGraphql.Domain.Graphql.Mutations.Action.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Action.Options.html#hide_inputs/1","title":"AshGraphql.Domain.Graphql.Mutations.Action.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Action.Options.html#relay_id_translations/1","title":"AshGraphql.Domain.Graphql.Mutations.Action.Options.relay_id_translations/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Domain.Graphql.Mutations.Create.html","title":"AshGraphql.Domain.Graphql.Mutations.Create","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Domain.Graphql.Mutations.Create.html#create/4","title":"AshGraphql.Domain.Graphql.Mutations.Create.create/4","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Domain.Graphql.Mutations.Create.Options.html","title":"AshGraphql.Domain.Graphql.Mutations.Create.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Create.Options.html#description/1","title":"AshGraphql.Domain.Graphql.Mutations.Create.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Create.Options.html#hide_inputs/1","title":"AshGraphql.Domain.Graphql.Mutations.Create.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Create.Options.html#modify_resolution/1","title":"AshGraphql.Domain.Graphql.Mutations.Create.Options.modify_resolution/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Create.Options.html#relay_id_translations/1","title":"AshGraphql.Domain.Graphql.Mutations.Create.Options.relay_id_translations/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Create.Options.html#upsert?/1","title":"AshGraphql.Domain.Graphql.Mutations.Create.Options.upsert?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Create.Options.html#upsert_identity/1","title":"AshGraphql.Domain.Graphql.Mutations.Create.Options.upsert_identity/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Domain.Graphql.Mutations.Destroy.html","title":"AshGraphql.Domain.Graphql.Mutations.Destroy","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Domain.Graphql.Mutations.Destroy.html#destroy/4","title":"AshGraphql.Domain.Graphql.Mutations.Destroy.destroy/4","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Domain.Graphql.Mutations.Destroy.Options.html","title":"AshGraphql.Domain.Graphql.Mutations.Destroy.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Destroy.Options.html#hide_inputs/1","title":"AshGraphql.Domain.Graphql.Mutations.Destroy.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Destroy.Options.html#identity/1","title":"AshGraphql.Domain.Graphql.Mutations.Destroy.Options.identity/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Destroy.Options.html#read_action/1","title":"AshGraphql.Domain.Graphql.Mutations.Destroy.Options.read_action/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Destroy.Options.html#relay_id_translations/1","title":"AshGraphql.Domain.Graphql.Mutations.Destroy.Options.relay_id_translations/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Domain.Graphql.Mutations.Update.html","title":"AshGraphql.Domain.Graphql.Mutations.Update","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Domain.Graphql.Mutations.Update.html#update/4","title":"AshGraphql.Domain.Graphql.Mutations.Update.update/4","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Domain.Graphql.Mutations.Update.Options.html","title":"AshGraphql.Domain.Graphql.Mutations.Update.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Update.Options.html#hide_inputs/1","title":"AshGraphql.Domain.Graphql.Mutations.Update.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Update.Options.html#identity/1","title":"AshGraphql.Domain.Graphql.Mutations.Update.Options.identity/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Update.Options.html#read_action/1","title":"AshGraphql.Domain.Graphql.Mutations.Update.Options.read_action/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Mutations.Update.Options.html#relay_id_translations/1","title":"AshGraphql.Domain.Graphql.Mutations.Update.Options.relay_id_translations/1","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Domain.Graphql.Options.html","title":"AshGraphql.Domain.Graphql.Options","type":"module"},{"doc":"Hello 3","ref":"AshGraphql.Domain.Graphql.Options.html#authorize?/1","title":"AshGraphql.Domain.Graphql.Options.authorize?/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Domain.Graphql.Options.html#error_handler/1","title":"AshGraphql.Domain.Graphql.Options.error_handler/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Domain.Graphql.Options.html#root_level_errors?/1","title":"AshGraphql.Domain.Graphql.Options.root_level_errors?/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Domain.Graphql.Options.html#show_raised_errors?/1","title":"AshGraphql.Domain.Graphql.Options.show_raised_errors?/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Domain.Graphql.Options.html#tracer/1","title":"AshGraphql.Domain.Graphql.Options.tracer/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Domain.Graphql.Queries.Action.html","title":"AshGraphql.Domain.Graphql.Queries.Action","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Domain.Graphql.Queries.Action.html#action/4","title":"AshGraphql.Domain.Graphql.Queries.Action.action/4","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Domain.Graphql.Queries.Action.Options.html","title":"AshGraphql.Domain.Graphql.Queries.Action.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Action.Options.html#description/1","title":"AshGraphql.Domain.Graphql.Queries.Action.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Action.Options.html#hide_inputs/1","title":"AshGraphql.Domain.Graphql.Queries.Action.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Action.Options.html#relay_id_translations/1","title":"AshGraphql.Domain.Graphql.Queries.Action.Options.relay_id_translations/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Domain.Graphql.Queries.Get.html","title":"AshGraphql.Domain.Graphql.Queries.Get","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Domain.Graphql.Queries.Get.html#get/4","title":"AshGraphql.Domain.Graphql.Queries.Get.get/4","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html","title":"AshGraphql.Domain.Graphql.Queries.Get.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html#allow_nil?/1","title":"AshGraphql.Domain.Graphql.Queries.Get.Options.allow_nil?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html#as_mutation?/1","title":"AshGraphql.Domain.Graphql.Queries.Get.Options.as_mutation?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html#description/1","title":"AshGraphql.Domain.Graphql.Queries.Get.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html#hide_inputs/1","title":"AshGraphql.Domain.Graphql.Queries.Get.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html#identity/1","title":"AshGraphql.Domain.Graphql.Queries.Get.Options.identity/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html#metadata_names/1","title":"AshGraphql.Domain.Graphql.Queries.Get.Options.metadata_names/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html#metadata_types/1","title":"AshGraphql.Domain.Graphql.Queries.Get.Options.metadata_types/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html#modify_resolution/1","title":"AshGraphql.Domain.Graphql.Queries.Get.Options.modify_resolution/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html#relay_id_translations/1","title":"AshGraphql.Domain.Graphql.Queries.Get.Options.relay_id_translations/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html#show_metadata/1","title":"AshGraphql.Domain.Graphql.Queries.Get.Options.show_metadata/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.Get.Options.html#type_name/1","title":"AshGraphql.Domain.Graphql.Queries.Get.Options.type_name/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Domain.Graphql.Queries.List.html","title":"AshGraphql.Domain.Graphql.Queries.List","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Domain.Graphql.Queries.List.html#list/4","title":"AshGraphql.Domain.Graphql.Queries.List.list/4","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Domain.Graphql.Queries.List.Options.html","title":"AshGraphql.Domain.Graphql.Queries.List.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.List.Options.html#as_mutation?/1","title":"AshGraphql.Domain.Graphql.Queries.List.Options.as_mutation?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.List.Options.html#description/1","title":"AshGraphql.Domain.Graphql.Queries.List.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.List.Options.html#hide_inputs/1","title":"AshGraphql.Domain.Graphql.Queries.List.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.List.Options.html#metadata_names/1","title":"AshGraphql.Domain.Graphql.Queries.List.Options.metadata_names/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.List.Options.html#metadata_types/1","title":"AshGraphql.Domain.Graphql.Queries.List.Options.metadata_types/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.List.Options.html#paginate_with/1","title":"AshGraphql.Domain.Graphql.Queries.List.Options.paginate_with/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.List.Options.html#relay?/1","title":"AshGraphql.Domain.Graphql.Queries.List.Options.relay?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.List.Options.html#relay_id_translations/1","title":"AshGraphql.Domain.Graphql.Queries.List.Options.relay_id_translations/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.List.Options.html#show_metadata/1","title":"AshGraphql.Domain.Graphql.Queries.List.Options.show_metadata/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.List.Options.html#type_name/1","title":"AshGraphql.Domain.Graphql.Queries.List.Options.type_name/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.html","title":"AshGraphql.Domain.Graphql.Queries.ReadOne","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.html#read_one/4","title":"AshGraphql.Domain.Graphql.Queries.ReadOne.read_one/4","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.html","title":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.html#allow_nil?/1","title":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.allow_nil?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.html#as_mutation?/1","title":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.as_mutation?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.html#description/1","title":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.html#hide_inputs/1","title":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.html#metadata_names/1","title":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.metadata_names/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.html#metadata_types/1","title":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.metadata_types/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.html#relay_id_translations/1","title":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.relay_id_translations/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.html#show_metadata/1","title":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.show_metadata/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.html#type_name/1","title":"AshGraphql.Domain.Graphql.Queries.ReadOne.Options.type_name/1","type":"macro"},{"doc":"MOD DOCS","ref":"AshGraphql.Domain.Mutations.html","title":"AshGraphql.Domain.Mutations","type":"module"},{"doc":"Hello!","ref":"AshGraphql.Domain.Mutations.html#mutations/1","title":"AshGraphql.Domain.Mutations.mutations/1","type":"macro"},{"doc":"MOD DOCS","ref":"AshGraphql.Domain.Queries.html","title":"AshGraphql.Domain.Queries","type":"module"},{"doc":"Hello!","ref":"AshGraphql.Domain.Queries.html#queries/1","title":"AshGraphql.Domain.Queries.queries/1","type":"macro"},{"doc":"Codemods and utilities for working with AshGraphql & Igniter","ref":"AshGraphql.Igniter.html","title":"AshGraphql.Igniter","type":"module"},{"doc":"Returns all modules that `use AshGraphql`","ref":"AshGraphql.Igniter.html#ash_graphql_schemas/1","title":"AshGraphql.Igniter.ash_graphql_schemas/1","type":"function"},{"doc":"Returns the AshGraphql schema containing the domain in question, or a list of all AshGraphql schemas","ref":"AshGraphql.Igniter.html#find_schema/2","title":"AshGraphql.Igniter.find_schema/2","type":"function"},{"doc":"Sets up an absinthe schema for AshGraphql","ref":"AshGraphql.Igniter.html#setup_absinthe_schema/2","title":"AshGraphql.Igniter.setup_absinthe_schema/2","type":"function"},{"doc":"Sets up the phoenix module for AshGraphql","ref":"AshGraphql.Igniter.html#setup_phoenix/2","title":"AshGraphql.Igniter.setup_phoenix/2","type":"function"},{"doc":"Mod docs","ref":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.html","title":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.html#managed_relationship/3","title":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.managed_relationship/3","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options.html","title":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options.html#ignore?/1","title":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options.ignore?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options.html#lookup_identities/1","title":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options.lookup_identities/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options.html#lookup_with_primary_key?/1","title":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options.lookup_with_primary_key?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options.html#type_name/1","title":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options.type_name/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options.html#types/1","title":"AshGraphql.Resource.Graphql.ManagedRelationships.ManagedRelationship.Options.types/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Resource.Graphql.Mutations.Action.html","title":"AshGraphql.Resource.Graphql.Mutations.Action","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Resource.Graphql.Mutations.Action.html#action/3","title":"AshGraphql.Resource.Graphql.Mutations.Action.action/3","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Resource.Graphql.Mutations.Action.Options.html","title":"AshGraphql.Resource.Graphql.Mutations.Action.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Action.Options.html#description/1","title":"AshGraphql.Resource.Graphql.Mutations.Action.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Action.Options.html#hide_inputs/1","title":"AshGraphql.Resource.Graphql.Mutations.Action.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Action.Options.html#relay_id_translations/1","title":"AshGraphql.Resource.Graphql.Mutations.Action.Options.relay_id_translations/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Resource.Graphql.Mutations.Create.html","title":"AshGraphql.Resource.Graphql.Mutations.Create","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Resource.Graphql.Mutations.Create.html#create/3","title":"AshGraphql.Resource.Graphql.Mutations.Create.create/3","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Resource.Graphql.Mutations.Create.Options.html","title":"AshGraphql.Resource.Graphql.Mutations.Create.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Create.Options.html#description/1","title":"AshGraphql.Resource.Graphql.Mutations.Create.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Create.Options.html#hide_inputs/1","title":"AshGraphql.Resource.Graphql.Mutations.Create.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Create.Options.html#modify_resolution/1","title":"AshGraphql.Resource.Graphql.Mutations.Create.Options.modify_resolution/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Create.Options.html#relay_id_translations/1","title":"AshGraphql.Resource.Graphql.Mutations.Create.Options.relay_id_translations/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Create.Options.html#upsert?/1","title":"AshGraphql.Resource.Graphql.Mutations.Create.Options.upsert?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Create.Options.html#upsert_identity/1","title":"AshGraphql.Resource.Graphql.Mutations.Create.Options.upsert_identity/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Resource.Graphql.Mutations.Destroy.html","title":"AshGraphql.Resource.Graphql.Mutations.Destroy","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Resource.Graphql.Mutations.Destroy.html#destroy/3","title":"AshGraphql.Resource.Graphql.Mutations.Destroy.destroy/3","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Resource.Graphql.Mutations.Destroy.Options.html","title":"AshGraphql.Resource.Graphql.Mutations.Destroy.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Destroy.Options.html#hide_inputs/1","title":"AshGraphql.Resource.Graphql.Mutations.Destroy.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Destroy.Options.html#identity/1","title":"AshGraphql.Resource.Graphql.Mutations.Destroy.Options.identity/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Destroy.Options.html#read_action/1","title":"AshGraphql.Resource.Graphql.Mutations.Destroy.Options.read_action/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Destroy.Options.html#relay_id_translations/1","title":"AshGraphql.Resource.Graphql.Mutations.Destroy.Options.relay_id_translations/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Resource.Graphql.Mutations.Update.html","title":"AshGraphql.Resource.Graphql.Mutations.Update","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Resource.Graphql.Mutations.Update.html#update/3","title":"AshGraphql.Resource.Graphql.Mutations.Update.update/3","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Resource.Graphql.Mutations.Update.Options.html","title":"AshGraphql.Resource.Graphql.Mutations.Update.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Update.Options.html#hide_inputs/1","title":"AshGraphql.Resource.Graphql.Mutations.Update.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Update.Options.html#identity/1","title":"AshGraphql.Resource.Graphql.Mutations.Update.Options.identity/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Update.Options.html#read_action/1","title":"AshGraphql.Resource.Graphql.Mutations.Update.Options.read_action/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Mutations.Update.Options.html#relay_id_translations/1","title":"AshGraphql.Resource.Graphql.Mutations.Update.Options.relay_id_translations/1","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Resource.Graphql.Options.html","title":"AshGraphql.Resource.Graphql.Options","type":"module"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#argument_input_types/1","title":"AshGraphql.Resource.Graphql.Options.argument_input_types/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#argument_names/1","title":"AshGraphql.Resource.Graphql.Options.argument_names/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#attribute_input_types/1","title":"AshGraphql.Resource.Graphql.Options.attribute_input_types/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#attribute_types/1","title":"AshGraphql.Resource.Graphql.Options.attribute_types/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#depth_limit/1","title":"AshGraphql.Resource.Graphql.Options.depth_limit/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#derive_filter?/1","title":"AshGraphql.Resource.Graphql.Options.derive_filter?/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#derive_sort?/1","title":"AshGraphql.Resource.Graphql.Options.derive_sort?/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#encode_primary_key?/1","title":"AshGraphql.Resource.Graphql.Options.encode_primary_key?/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#field_names/1","title":"AshGraphql.Resource.Graphql.Options.field_names/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#filterable_fields/1","title":"AshGraphql.Resource.Graphql.Options.filterable_fields/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#generate_object?/1","title":"AshGraphql.Resource.Graphql.Options.generate_object?/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#hide_fields/1","title":"AshGraphql.Resource.Graphql.Options.hide_fields/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#keyset_field/1","title":"AshGraphql.Resource.Graphql.Options.keyset_field/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#nullable_fields/1","title":"AshGraphql.Resource.Graphql.Options.nullable_fields/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#paginate_relationship_with/1","title":"AshGraphql.Resource.Graphql.Options.paginate_relationship_with/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#primary_key_delimiter/1","title":"AshGraphql.Resource.Graphql.Options.primary_key_delimiter/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#relationships/1","title":"AshGraphql.Resource.Graphql.Options.relationships/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#show_fields/1","title":"AshGraphql.Resource.Graphql.Options.show_fields/1","type":"macro"},{"doc":"Hello 3","ref":"AshGraphql.Resource.Graphql.Options.html#type/1","title":"AshGraphql.Resource.Graphql.Options.type/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Resource.Graphql.Queries.Action.html","title":"AshGraphql.Resource.Graphql.Queries.Action","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Resource.Graphql.Queries.Action.html#action/3","title":"AshGraphql.Resource.Graphql.Queries.Action.action/3","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Resource.Graphql.Queries.Action.Options.html","title":"AshGraphql.Resource.Graphql.Queries.Action.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Action.Options.html#description/1","title":"AshGraphql.Resource.Graphql.Queries.Action.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Action.Options.html#hide_inputs/1","title":"AshGraphql.Resource.Graphql.Queries.Action.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Action.Options.html#relay_id_translations/1","title":"AshGraphql.Resource.Graphql.Queries.Action.Options.relay_id_translations/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Resource.Graphql.Queries.Get.html","title":"AshGraphql.Resource.Graphql.Queries.Get","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Resource.Graphql.Queries.Get.html#get/3","title":"AshGraphql.Resource.Graphql.Queries.Get.get/3","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html","title":"AshGraphql.Resource.Graphql.Queries.Get.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html#allow_nil?/1","title":"AshGraphql.Resource.Graphql.Queries.Get.Options.allow_nil?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html#as_mutation?/1","title":"AshGraphql.Resource.Graphql.Queries.Get.Options.as_mutation?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html#description/1","title":"AshGraphql.Resource.Graphql.Queries.Get.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html#hide_inputs/1","title":"AshGraphql.Resource.Graphql.Queries.Get.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html#identity/1","title":"AshGraphql.Resource.Graphql.Queries.Get.Options.identity/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html#metadata_names/1","title":"AshGraphql.Resource.Graphql.Queries.Get.Options.metadata_names/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html#metadata_types/1","title":"AshGraphql.Resource.Graphql.Queries.Get.Options.metadata_types/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html#modify_resolution/1","title":"AshGraphql.Resource.Graphql.Queries.Get.Options.modify_resolution/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html#relay_id_translations/1","title":"AshGraphql.Resource.Graphql.Queries.Get.Options.relay_id_translations/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html#show_metadata/1","title":"AshGraphql.Resource.Graphql.Queries.Get.Options.show_metadata/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.Get.Options.html#type_name/1","title":"AshGraphql.Resource.Graphql.Queries.Get.Options.type_name/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Resource.Graphql.Queries.List.html","title":"AshGraphql.Resource.Graphql.Queries.List","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Resource.Graphql.Queries.List.html#list/3","title":"AshGraphql.Resource.Graphql.Queries.List.list/3","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Resource.Graphql.Queries.List.Options.html","title":"AshGraphql.Resource.Graphql.Queries.List.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.List.Options.html#as_mutation?/1","title":"AshGraphql.Resource.Graphql.Queries.List.Options.as_mutation?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.List.Options.html#description/1","title":"AshGraphql.Resource.Graphql.Queries.List.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.List.Options.html#hide_inputs/1","title":"AshGraphql.Resource.Graphql.Queries.List.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.List.Options.html#metadata_names/1","title":"AshGraphql.Resource.Graphql.Queries.List.Options.metadata_names/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.List.Options.html#metadata_types/1","title":"AshGraphql.Resource.Graphql.Queries.List.Options.metadata_types/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.List.Options.html#paginate_with/1","title":"AshGraphql.Resource.Graphql.Queries.List.Options.paginate_with/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.List.Options.html#relay?/1","title":"AshGraphql.Resource.Graphql.Queries.List.Options.relay?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.List.Options.html#relay_id_translations/1","title":"AshGraphql.Resource.Graphql.Queries.List.Options.relay_id_translations/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.List.Options.html#show_metadata/1","title":"AshGraphql.Resource.Graphql.Queries.List.Options.show_metadata/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.List.Options.html#type_name/1","title":"AshGraphql.Resource.Graphql.Queries.List.Options.type_name/1","type":"macro"},{"doc":"Mod docs","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.html","title":"AshGraphql.Resource.Graphql.Queries.ReadOne","type":"module"},{"doc":"Hello 4","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.html#read_one/3","title":"AshGraphql.Resource.Graphql.Queries.ReadOne.read_one/3","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.html","title":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options","type":"module"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.html#allow_nil?/1","title":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.allow_nil?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.html#as_mutation?/1","title":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.as_mutation?/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.html#description/1","title":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.description/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.html#hide_inputs/1","title":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.hide_inputs/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.html#metadata_names/1","title":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.metadata_names/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.html#metadata_types/1","title":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.metadata_types/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.html#relay_id_translations/1","title":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.relay_id_translations/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.html#show_metadata/1","title":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.show_metadata/1","type":"macro"},{"doc":"Hello 2","ref":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.html#type_name/1","title":"AshGraphql.Resource.Graphql.Queries.ReadOne.Options.type_name/1","type":"macro"},{"doc":"MOD DOCS","ref":"AshGraphql.Resource.ManagedRelationships.html","title":"AshGraphql.Resource.ManagedRelationships","type":"module"},{"doc":"Hello!","ref":"AshGraphql.Resource.ManagedRelationships.html#managed_relationships/1","title":"AshGraphql.Resource.ManagedRelationships.managed_relationships/1","type":"macro"},{"doc":"Mod Docs","ref":"AshGraphql.Resource.ManagedRelationships.Options.html","title":"AshGraphql.Resource.ManagedRelationships.Options","type":"module"},{"doc":"Hello 3","ref":"AshGraphql.Resource.ManagedRelationships.Options.html#auto?/1","title":"AshGraphql.Resource.ManagedRelationships.Options.auto?/1","type":"macro"},{"doc":"MOD DOCS","ref":"AshGraphql.Resource.Mutations.html","title":"AshGraphql.Resource.Mutations","type":"module"},{"doc":"Hello!","ref":"AshGraphql.Resource.Mutations.html#mutations/1","title":"AshGraphql.Resource.Mutations.mutations/1","type":"macro"},{"doc":"MOD DOCS","ref":"AshGraphql.Resource.Queries.html","title":"AshGraphql.Resource.Queries","type":"module"},{"doc":"Hello!","ref":"AshGraphql.Resource.Queries.html#queries/1","title":"AshGraphql.Resource.Queries.queries/1","type":"macro"},{"doc":"Installs AshGraphql. Should be run with `mix igniter.install ash_postgres`","ref":"Mix.Tasks.AshGraphql.Install.html","title":"mix ash_graphql.install","type":"task"},{"doc":"","ref":"Mix.Tasks.AshGraphql.Install.html#igniter/2","title":"Mix.Tasks.AshGraphql.Install.igniter/2","type":"function"},{"doc":"AshGraphql is a GraphQL extension for the Ash framework.\n\nFor more information, see the [getting started guide](/documentation/tutorials/getting-started-with-graphql.md)","ref":"AshGraphql.html","title":"AshGraphql","type":"module"},{"doc":"","ref":"AshGraphql.html#add_context/3","title":"AshGraphql.add_context/3","type":"function"},{"doc":"","ref":"AshGraphql.html#get_embed/1","title":"AshGraphql.get_embed/1","type":"function"},{"doc":"","ref":"AshGraphql.html#get_embedded_types/4","title":"AshGraphql.get_embedded_types/4","type":"function"},{"doc":"","ref":"AshGraphql.html#global_enums/4","title":"AshGraphql.global_enums/4","type":"function"},{"doc":"","ref":"AshGraphql.html#global_maps/4","title":"AshGraphql.global_maps/4","type":"function"},{"doc":"","ref":"AshGraphql.html#global_unions/4","title":"AshGraphql.global_unions/4","type":"function"},{"doc":"","ref":"AshGraphql.html#mutation/1","title":"AshGraphql.mutation/1","type":"macro"},{"doc":"","ref":"AshGraphql.html#relay_queries/4","title":"AshGraphql.relay_queries/4","type":"function"},{"doc":"The entrypoint for adding GraphQL behavior to an Ash domain","ref":"AshGraphql.Domain.html","title":"AshGraphql.Domain","type":"module"},{"doc":"","ref":"AshGraphql.Domain.html#authorize?/1","title":"AshGraphql.Domain.authorize?/1","type":"function"},{"doc":"","ref":"AshGraphql.Domain.html#global_type_definitions/2","title":"AshGraphql.Domain.global_type_definitions/2","type":"function"},{"doc":"Hello!","ref":"AshGraphql.Domain.html#graphql/1","title":"AshGraphql.Domain.graphql/1","type":"macro"},{"doc":"","ref":"AshGraphql.Domain.html#install/5","title":"AshGraphql.Domain.install/5","type":"function"},{"doc":"","ref":"AshGraphql.Domain.html#root_level_errors?/1","title":"AshGraphql.Domain.root_level_errors?/1","type":"function"},{"doc":"","ref":"AshGraphql.Domain.html#show_raised_errors?/1","title":"AshGraphql.Domain.show_raised_errors?/1","type":"function"},{"doc":"Introspection helpers for AshGraphql.Domain","ref":"AshGraphql.Domain.Info.html","title":"AshGraphql.Domain.Info","type":"module"},{"doc":"Whether or not to run authorization on this domain","ref":"AshGraphql.Domain.Info.html#authorize?/1","title":"AshGraphql.Domain.Info.authorize?/1","type":"function"},{"doc":"An error handler for errors produced by the domain","ref":"AshGraphql.Domain.Info.html#error_handler/1","title":"AshGraphql.Domain.Info.error_handler/1","type":"function"},{"doc":"The mutations exposed by the domain","ref":"AshGraphql.Domain.Info.html#mutations/1","title":"AshGraphql.Domain.Info.mutations/1","type":"function"},{"doc":"The queries exposed by the domain","ref":"AshGraphql.Domain.Info.html#queries/1","title":"AshGraphql.Domain.Info.queries/1","type":"function"},{"doc":"Whether or not to surface errors to the root of the response","ref":"AshGraphql.Domain.Info.html#root_level_errors?/1","title":"AshGraphql.Domain.Info.root_level_errors?/1","type":"function"},{"doc":"Whether or not to render raised errors in the GraphQL response","ref":"AshGraphql.Domain.Info.html#show_raised_errors?/1","title":"AshGraphql.Domain.Info.show_raised_errors?/1","type":"function"},{"doc":"The tracer to use for the given schema","ref":"AshGraphql.Domain.Info.html#tracer/1","title":"AshGraphql.Domain.Info.tracer/1","type":"function"},{"doc":"This Ash resource extension adds configuration for exposing a resource in a graphql.","ref":"AshGraphql.Resource.html","title":"AshGraphql.Resource","type":"module"},{"doc":"","ref":"AshGraphql.Resource.html#codegen/1","title":"AshGraphql.Resource.codegen/1","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#decode_id/3","title":"AshGraphql.Resource.decode_id/3","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#decode_primary_key/2","title":"AshGraphql.Resource.decode_primary_key/2","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#decode_relay_id/1","title":"AshGraphql.Resource.decode_relay_id/1","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#define_type?/2","title":"AshGraphql.Resource.define_type?/2","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#embedded?/1","title":"AshGraphql.Resource.embedded?/1","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#encode_id/2","title":"AshGraphql.Resource.encode_id/2","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#encode_primary_key/1","title":"AshGraphql.Resource.encode_primary_key/1","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#encode_relay_id/1","title":"AshGraphql.Resource.encode_relay_id/1","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#enum_definitions/3","title":"AshGraphql.Resource.enum_definitions/3","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#generate_object?/1","title":"AshGraphql.Resource.generate_object?/1","type":"function"},{"doc":"Hello!","ref":"AshGraphql.Resource.html#graphql/1","title":"AshGraphql.Resource.graphql/1","type":"macro"},{"doc":"","ref":"AshGraphql.Resource.html#install/5","title":"AshGraphql.Resource.install/5","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#managed_relationship_definitions/2","title":"AshGraphql.Resource.managed_relationship_definitions/2","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#managed_relationships/1","title":"AshGraphql.Resource.managed_relationships/1","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#map_definitions/4","title":"AshGraphql.Resource.map_definitions/4","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#mutations/0","title":"AshGraphql.Resource.mutations/0","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#mutations/2","title":"AshGraphql.Resource.mutations/2","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#no_graphql_types/2","title":"AshGraphql.Resource.no_graphql_types/2","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#node_type?/1","title":"AshGraphql.Resource.node_type?/1","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#primary_key_delimiter/1","title":"AshGraphql.Resource.primary_key_delimiter/1","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#primary_key_get_query/2","title":"AshGraphql.Resource.primary_key_get_query/2","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#queries/0","title":"AshGraphql.Resource.queries/0","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#queries/2","title":"AshGraphql.Resource.queries/2","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#query_type_definitions/5","title":"AshGraphql.Resource.query_type_definitions/5","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#ref/1","title":"AshGraphql.Resource.ref/1","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#type/1","title":"AshGraphql.Resource.type/1","type":"function"},{"doc":"","ref":"AshGraphql.Resource.html#type_definition/5","title":"AshGraphql.Resource.type_definition/5","type":"function"},{"doc":"Represents a configured generic action","ref":"AshGraphql.Resource.Action.html","title":"AshGraphql.Resource.Action","type":"module"},{"doc":"Introspection helpers for AshGraphql.Resource","ref":"AshGraphql.Resource.Info.html","title":"AshGraphql.Resource.Info","type":"module"},{"doc":"Graphql argument type overrides for the resource","ref":"AshGraphql.Resource.Info.html#argument_input_types/1","title":"AshGraphql.Resource.Info.argument_input_types/1","type":"function"},{"doc":"Graphql argument name overrides for the resource","ref":"AshGraphql.Resource.Info.html#argument_names/1","title":"AshGraphql.Resource.Info.argument_names/1","type":"function"},{"doc":"Graphql attribute input type overrides for the resource","ref":"AshGraphql.Resource.Info.html#attribute_input_types/1","title":"AshGraphql.Resource.Info.attribute_input_types/1","type":"function"},{"doc":"Graphql type overrides for the resource","ref":"AshGraphql.Resource.Info.html#attribute_types/1","title":"AshGraphql.Resource.Info.attribute_types/1","type":"function"},{"doc":"Wether or not to derive a filter input for the resource automatically","ref":"AshGraphql.Resource.Info.html#derive_filter?/1","title":"AshGraphql.Resource.Info.derive_filter?/1","type":"function"},{"doc":"Wether or not to derive a sort input for the resource automatically","ref":"AshGraphql.Resource.Info.html#derive_sort?/1","title":"AshGraphql.Resource.Info.derive_sort?/1","type":"function"},{"doc":"Wether or not to encode the primary key as a single `id` field when reading and getting","ref":"AshGraphql.Resource.Info.html#encode_primary_key?/1","title":"AshGraphql.Resource.Info.encode_primary_key?/1","type":"function"},{"doc":"Graphql field name (attribute/relationship/calculation/arguments) overrides for the resource","ref":"AshGraphql.Resource.Info.html#field_names/1","title":"AshGraphql.Resource.Info.field_names/1","type":"function"},{"doc":"May the specified field be filtered on?","ref":"AshGraphql.Resource.Info.html#filterable_field?/2","title":"AshGraphql.Resource.Info.filterable_field?/2","type":"function"},{"doc":"Fields that may be filtered on","ref":"AshGraphql.Resource.Info.html#filterable_fields/1","title":"AshGraphql.Resource.Info.filterable_fields/1","type":"function"},{"doc":"Wether or not an object should be generated, or if one with the type name for this resource should be used.","ref":"AshGraphql.Resource.Info.html#generate_object?/1","title":"AshGraphql.Resource.Info.generate_object?/1","type":"function"},{"doc":"Fields to hide from the graphql domain","ref":"AshGraphql.Resource.Info.html#hide_fields/1","title":"AshGraphql.Resource.Info.hide_fields/1","type":"function"},{"doc":"The field name to place the keyset of a result in","ref":"AshGraphql.Resource.Info.html#keyset_field/1","title":"AshGraphql.Resource.Info.keyset_field/1","type":"function"},{"doc":"The managed_relationshi configuration for a given action/argument","ref":"AshGraphql.Resource.Info.html#managed_relationship/3","title":"AshGraphql.Resource.Info.managed_relationship/3","type":"function"},{"doc":"The managed_relationship configurations","ref":"AshGraphql.Resource.Info.html#managed_relationships/1","title":"AshGraphql.Resource.Info.managed_relationships/1","type":"function"},{"doc":"","ref":"AshGraphql.Resource.Info.html#managed_relationships_auto?/1","title":"AshGraphql.Resource.Info.managed_relationships_auto?/1","type":"function"},{"doc":"The mutations exposed for the resource","ref":"AshGraphql.Resource.Info.html#mutations/2","title":"AshGraphql.Resource.Info.mutations/2","type":"function"},{"doc":"Graphql nullability overrides for the resource","ref":"AshGraphql.Resource.Info.html#nullable_fields/1","title":"AshGraphql.Resource.Info.nullable_fields/1","type":"function"},{"doc":"Pagination configuration for list relationships","ref":"AshGraphql.Resource.Info.html#paginate_relationship_with/1","title":"AshGraphql.Resource.Info.paginate_relationship_with/1","type":"function"},{"doc":"The delimiter for a resource with a composite primary key","ref":"AshGraphql.Resource.Info.html#primary_key_delimiter/1","title":"AshGraphql.Resource.Info.primary_key_delimiter/1","type":"function"},{"doc":"The queries exposed for the resource","ref":"AshGraphql.Resource.Info.html#queries/2","title":"AshGraphql.Resource.Info.queries/2","type":"function"},{"doc":"Which relationships should be included in the generated type","ref":"AshGraphql.Resource.Info.html#relationships/1","title":"AshGraphql.Resource.Info.relationships/1","type":"function"},{"doc":"Wether or not a given field will be shown","ref":"AshGraphql.Resource.Info.html#show_field?/2","title":"AshGraphql.Resource.Info.show_field?/2","type":"function"},{"doc":"Fields to show in the graphql domain","ref":"AshGraphql.Resource.Info.html#show_fields/1","title":"AshGraphql.Resource.Info.show_fields/1","type":"function"},{"doc":"The graphql type of the resource","ref":"AshGraphql.Resource.Info.html#type/1","title":"AshGraphql.Resource.Info.type/1","type":"function"},{"doc":"Represents a managed relationship configuration on a mutation","ref":"AshGraphql.Resource.ManagedRelationship.html","title":"AshGraphql.Resource.ManagedRelationship","type":"module"},{"doc":"","ref":"AshGraphql.Resource.ManagedRelationship.html#schema/0","title":"AshGraphql.Resource.ManagedRelationship.schema/0","type":"function"},{"doc":"Represents a configured mutation on a resource","ref":"AshGraphql.Resource.Mutation.html","title":"AshGraphql.Resource.Mutation","type":"module"},{"doc":"","ref":"AshGraphql.Resource.Mutation.html#create_schema/0","title":"AshGraphql.Resource.Mutation.create_schema/0","type":"function"},{"doc":"","ref":"AshGraphql.Resource.Mutation.html#destroy_schema/0","title":"AshGraphql.Resource.Mutation.destroy_schema/0","type":"function"},{"doc":"","ref":"AshGraphql.Resource.Mutation.html#update_schema/0","title":"AshGraphql.Resource.Mutation.update_schema/0","type":"function"},{"doc":"Represents a configured query on a resource","ref":"AshGraphql.Resource.Query.html","title":"AshGraphql.Resource.Query","type":"module"},{"doc":"","ref":"AshGraphql.Resource.Query.html#get_schema/0","title":"AshGraphql.Resource.Query.get_schema/0","type":"function"},{"doc":"","ref":"AshGraphql.Resource.Query.html#list_schema/0","title":"AshGraphql.Resource.Query.list_schema/0","type":"function"},{"doc":"","ref":"AshGraphql.Resource.Query.html#read_one_schema/0","title":"AshGraphql.Resource.Query.read_one_schema/0","type":"function"},{"doc":"","ref":"AshGraphql.Error.html","title":"AshGraphql.Error","type":"protocol"},{"doc":"","ref":"AshGraphql.Error.html#to_error/1","title":"AshGraphql.Error.to_error/1","type":"function"},{"doc":"All the types that implement this protocol.","ref":"AshGraphql.Error.html#t:t/0","title":"AshGraphql.Error.t/0","type":"type"},{"doc":"Utilities for working with errors in custom resolvers.","ref":"AshGraphql.Errors.html","title":"AshGraphql.Errors","type":"module"},{"doc":"Transform an error or list of errors into the response for graphql.","ref":"AshGraphql.Errors.html#to_errors/3","title":"AshGraphql.Errors.to_errors/3","type":"function"},{"doc":"Imported helpers for the graphql DSL section","ref":"AshGraphql.Resource.Helpers.html","title":"AshGraphql.Resource.Helpers","type":"module"},{"doc":"A list of a given type, idiomatic for those used to `absinthe` notation.","ref":"AshGraphql.Resource.Helpers.html#list_of/1","title":"AshGraphql.Resource.Helpers.list_of/1","type":"function"},{"doc":"A non nullable type, idiomatic for those used to `absinthe` notation.","ref":"AshGraphql.Resource.Helpers.html#non_null/1","title":"AshGraphql.Resource.Helpers.non_null/1","type":"function"},{"doc":"Helper to extract context from its various locations","ref":"AshGraphql.ContextHelpers.html","title":"AshGraphql.ContextHelpers","type":"module"},{"doc":"","ref":"AshGraphql.ContextHelpers.html#get_context/1","title":"AshGraphql.ContextHelpers.get_context/1","type":"function"},{"doc":"Replaces any text in message or short_message with variables","ref":"AshGraphql.DefaultErrorHandler.html","title":"AshGraphql.DefaultErrorHandler","type":"module"},{"doc":"","ref":"AshGraphql.DefaultErrorHandler.html#handle_error/2","title":"AshGraphql.DefaultErrorHandler.handle_error/2","type":"function"},{"doc":"","ref":"AshGraphql.DefaultErrorHandler.html#stringified_value/1","title":"AshGraphql.DefaultErrorHandler.stringified_value/1","type":"function"},{"doc":"Automatically set up the GraphQL `actor` and `tenant`.\n\nAdding this plug to your pipeline will automatically set the `actor` and\n`tenant` if they were previously put there by `Ash.PlugHelpers.set_actor/2` or\n`Ash.PlugHelpers.set_tenant/2`.","ref":"AshGraphql.Plug.html","title":"AshGraphql.Plug","type":"module"},{"doc":"","ref":"AshGraphql.Plug.html#call/2","title":"AshGraphql.Plug.call/2","type":"function"},{"doc":"","ref":"AshGraphql.Plug.html#init/1","title":"AshGraphql.Plug.init/1","type":"function"},{"doc":"Helpers for working with absinthe subscriptions","ref":"AshGraphql.Subscription.html","title":"AshGraphql.Subscription","type":"module"},{"doc":"Produce a query that will load the correct data for a subscription.","ref":"AshGraphql.Subscription.html#query_for_subscription/3","title":"AshGraphql.Subscription.query_for_subscription/3","type":"function"},{"doc":"Callbacks used to enrich types with GraphQL-specific metadata.","ref":"AshGraphql.Type.html","title":"AshGraphql.Type","type":"behaviour"},{"doc":"Used for maps/enums/unions that *would* define a type automatically, to disable them.","ref":"AshGraphql.Type.html#c:graphql_define_type?/1","title":"AshGraphql.Type.graphql_define_type?/1","type":"callback"},{"doc":"Used for `Ash.Type.Enum` to provide a description for individual values. For example:\n\n```elixir\ndefmodule MyEnum do\nuse Ash.Type.Enum, values: [:foo, :bar, :baz]\n\n  def graphql_describe_enum_value(:baz), do: \"A baz\"\n  def graphql_describe_enum_value(_), do: nil\nend\n```","ref":"AshGraphql.Type.html#c:graphql_describe_enum_value/1","title":"AshGraphql.Type.graphql_describe_enum_value/1","type":"callback"},{"doc":"Sets the name of the graphql input type for a given Ash type. For example: `:weekday`.\n\nThis will do different things depending on the type you're adding it to.","ref":"AshGraphql.Type.html#c:graphql_input_type/1","title":"AshGraphql.Type.graphql_input_type/1","type":"callback"},{"doc":"This expresses that you will define a custom type for representing this input in your graphql","ref":"AshGraphql.Type.html#c:graphql_input_type/1-regular-types","title":"Regular Types - AshGraphql.Type.graphql_input_type/1","type":"callback"},{"doc":"If it is a subtype of a union, or map/keyword with `fields` the type will be *created* with that name.\nSo you can use this to decide what it will be named. Otherwise, it behaves as stated above for\nregular types.","ref":"AshGraphql.Type.html#c:graphql_input_type/1-newtypes","title":"NewTypes - AshGraphql.Type.graphql_input_type/1","type":"callback"},{"doc":"Used for `Ash.Type.Enum` to rename individual values. For example:\n\n```elixir\ndefmodule MyEnum do\n  use Ash.Type.Enum, values: [:foo, :bar, :baz]\n\n  def graphql_rename_value(:baz), do: :buz\n  def graphql_rename_value(other), do: other\nend\n```","ref":"AshGraphql.Type.html#c:graphql_rename_value/1","title":"AshGraphql.Type.graphql_rename_value/1","type":"callback"},{"doc":"Sets the name of the graphql type for a given Ash type. For example: `:weekday`.\n\nThis will do different things depending on the type you're adding it to.","ref":"AshGraphql.Type.html#c:graphql_type/1","title":"AshGraphql.Type.graphql_type/1","type":"callback"},{"doc":"This expresses that you will define a custom type for representing this in your graphql","ref":"AshGraphql.Type.html#c:graphql_type/1-regular-types","title":"Regular Types - AshGraphql.Type.graphql_type/1","type":"callback"},{"doc":"If it is a subtype of a union, or map/keyword with `fields` the type will be *created* with that name.\nSo you can use this to decide what it will be named. Otherwise, it behaves as stated above for\nregular types.","ref":"AshGraphql.Type.html#c:graphql_type/1-newtypes","title":"NewTypes - AshGraphql.Type.graphql_type/1","type":"callback"},{"doc":"Used for map/embedded types embedded in unions, to avoid nesting them in a key by their name.\n\nSee [the unions guide](/documentation/topics/use-unions-with-graphql.md) for more.","ref":"AshGraphql.Type.html#c:graphql_unnested_unions/1","title":"AshGraphql.Type.graphql_unnested_unions/1","type":"callback"},{"doc":"The Json scalar type allows arbitrary JSON values to be passed in and out.","ref":"AshGraphql.Types.JSON.html","title":"AshGraphql.Types.JSON","type":"module"},{"doc":"","ref":"AshGraphql.Types.JSON.html#decode/1","title":"AshGraphql.Types.JSON.decode/1","type":"function"},{"doc":"","ref":"AshGraphql.Types.JSON.html#encode/1","title":"AshGraphql.Types.JSON.encode/1","type":"function"},{"doc":"The Json scalar type allows arbitrary JSON values to be passed in and out.","ref":"AshGraphql.Types.JSONString.html","title":"AshGraphql.Types.JSONString","type":"module"},{"doc":"","ref":"AshGraphql.Types.JSONString.html#decode/1","title":"AshGraphql.Types.JSONString.decode/1","type":"function"},{"doc":"","ref":"AshGraphql.Types.JSONString.html#encode/1","title":"AshGraphql.Types.JSONString.encode/1","type":"function"},{"doc":"![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-black-text.png?raw=true#gh-light-mode-only)\n![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-white-text.png?raw=true#gh-dark-mode-only)\n\n![Elixir CI](https://github.com/ash-project/ash_graphql/workflows/CI/badge.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Hex version badge](https://img.shields.io/hexpm/v/ash_graphql.svg)](https://hex.pm/packages/ash_graphql)\n[![Hexdocs badge](https://img.shields.io/badge/docs-hexdocs-purple)](https://hexdocs.pm/ash_graphql)\n\n# AshGraphql\n\nWelcome! This is the extension for building GraphQL APIs with [Ash](https://hexdocs.pm/ash). The generated GraphQL APIs are powered by [Absinthe](http://hexdocs.pm/absinthe). Generate a powerful Graphql API in minutes!","ref":"readme.html","title":"Home","type":"extras"},{"doc":"- [Getting Started with GraphQL](documentation/tutorials/getting-started-with-graphql.md)","ref":"readme.html#tutorials","title":"Tutorials - Home","type":"extras"},{"doc":"- [Authorize with GraphQL](documentation/topics/authorize-with-graphql.md)\n- [Handle Errors](documentation/topics/handle-errors.md)\n- [Monitoring](documentation/topics/monitoring.md)\n- [Use JSON with GraphQL](documentation/topics/use-json-with-graphql.md)\n- [Use Subscriptions with GraphQL](documentation/topics/use-subscriptions-with-graphql.md)\n- [GraphQL Generation](documentation/topics/graphql-generation.md)\n- [Modifying the Resolution](documentation/topics/modifying-the-resolution.md)\n- [Relay](documentation/topics/relay.md)\n- [Use Enums with GraphQL](documentation/topics/use-enums-with-graphql.md)\n- [Use Maps with GraphQL](documentation/topics/use-maps-with-graphql.md)\n- [Use Unions with GraphQL](documentation/topics/use-unions-with-graphql.md)\n- [Upgrading to 1.0](documentation/topics/upgrade.md)","ref":"readme.html#topics","title":"Topics - Home","type":"extras"},{"doc":"- [AshGraphql.Resource DSL](documentation/dsls/DSL:-AshGraphql.Resource.md)\n- [AshGraphql.Domain DSL](documentation/dsls/DSL:-AshGraphql.Domain.md)","ref":"readme.html#reference","title":"Reference - Home","type":"extras"},{"doc":"# Getting Started With GraphQL","ref":"getting-started-with-graphql.html","title":"Getting Started With GraphQL","type":"extras"},{"doc":"If you haven't already, read the [Ash Getting Started Guide](https://hexdocs.pm/ash/get-started.html). This assumes that you already have resources set up, and only gives you the steps to _add_ AshGraphql to your resources/domains.","ref":"getting-started-with-graphql.html#get-familiar-with-ash-resources","title":"Get familiar with Ash resources - Getting Started With GraphQL","type":"extras"},{"doc":"<!-- tabs-open -->","ref":"getting-started-with-graphql.html#installation","title":"Installation - Getting Started With GraphQL","type":"extras"},{"doc":"```elixir\nmix igniter.install ash_graphql\n```","ref":"getting-started-with-graphql.html#using-igniter-recommended","title":"Using Igniter (recommended) - Getting Started With GraphQL","type":"extras"},{"doc":"#### Bring in the `ash_graphql` dependency\n\n```elixir\ndef deps()\n  [\n    ...\n    {:ash_graphql, \"~> 1.3.3\"}\n  ]\nend\n```\n\n#### Setting up your schema\n\nIf you don't have an absinthe schema, you can create one just for ash.\nReplace `helpdesk` in the examples with your own application name.\n\nSee [the SDL file guide](/documentation/topics/sdl-file.md) for more information on using the SDL file,\nor remove the `generate_sdl_file` option to skip generating it on calls to `mix ash.codegen`.\n\nin `lib/helpdesk/schema.ex`\n\n```elixir\ndefmodule Helpdesk.GraphqlSchema do\n  use Absinthe.Schema\n\n  # Add your domains here\n  use AshGraphql,\n    domains: [Your.Domains]\n\n  query do\n    # Custom absinthe queries can be placed here\n    @desc \"Remove me once you have a query of your own!\"\n    field :remove_me, :string do\n      resolve fn _, _, _ ->\n        {:ok, \"Remove me!\"}\n      end\n    end\n  end\n\n  mutation do\n    # Custom absinthe mutations can be placed here\n  end\nend\n```\n\n#### Connect your schema\n\n##### Using Phoenix\n\nAdd the following code to your Phoenix router. It's useful to set up the Absinthe playground for trying things out, but it's optional.\n\n```elixir\npipeline :graphql do\n  plug AshGraphql.Plug\nend\n\nscope \"/gql\" do\n  pipe_through [:graphql]\n\n  forward \"/\",\n    Absinthe.Plug,\n    schema: Module.concat([\"Helpdesk.GraphqlSchema\"])\n\n  forward \"/playground\",\n          Absinthe.Plug.GraphiQL,\n          schema: Module.concat([\"Helpdesk.GraphqlSchema\"]),\n          interface: :playground\nend\n```\n\n>","ref":"getting-started-with-graphql.html#manual","title":"Manual - Getting Started With GraphQL","type":"extras"},{"doc":">\n> This `Module.concat/1` prevents a [compile-time dependency](https://dashbit.co/blog/speeding-up-re-compilation-of-elixir-projects) from this router module to the schema module. It is an implementation detail of how `forward/2` works that you end up with a compile-time dependency on the schema, but there is no need for this dependency, and that dependency can have _drastic_ impacts on your compile times in certain scenarios.\n\nIf you started with `mix new ...` instead of `mix phx.new ...` and you want to\nstill use Phoenix, the fastest path that way is typically to just create a new\nPhoenix application and copy your resources/config over.\n\n##### Using Plug\n\nIf you are unfamiliar with how plug works, this [guide](https://elixirschool.com/en/lessons/specifics/plug/#dependencies)\nwill be helpful for understanding it. It also guides you through adding plug to your application.\n\nThen you can use a `Plug.Router` and [forward](https://hexdocs.pm/plug/Plug.Router.html#forward/2) to your plugs similar to how it is done for phoenix:\n\n```elixir\nplug AshGraphql.Plug\n\nforward \"/gql\",\n  to: Absinthe.Plug,\n  init_opts: [schema: Module.concat([\"Helpdesk.GraphqlSchema\"])]\n\nforward \"/playground\",\n  to: Absinthe.Plug.GraphiQL,\n  init_opts: [\n    schema: Module.concat([\"Helpdesk.GraphqlSchema\"]),\n    interface: :playground\n  ]\n```\n\nFor information on why we are using `Module.concat/1`, see the note above in the Phoenix section.\n\n<!-- tabs-close -->","ref":"getting-started-with-graphql.html#whats-up-with-module-concat-1-info","title":"Whats up with `Module.concat/1`? {: .info} - Getting Started With GraphQL","type":"extras"},{"doc":"In the `use AshGraphql` call in your schema, you specify which domains you want to expose in your GraphQL API. Add any domains that will have `AshGraphql` queries/mutations to the `domains` list. For example:\n\n```elixir\nuse AshGraphql, domains: [Your.Domain1, Your.Domain2]\n```","ref":"getting-started-with-graphql.html#select-domains-to-show-in-your-graphql","title":"Select domains to show in your GraphQL - Getting Started With GraphQL","type":"extras"},{"doc":"Some example queries/mutations are shown below. If no queries/mutations are added, nothing will show up in the GraphQL API, so be sure to set one up if you want to try it out.","ref":"getting-started-with-graphql.html#adding-queries-and-mutations","title":"Adding Queries and Mutations - Getting Started With GraphQL","type":"extras"},{"doc":"Here we show queries and mutations being added to the resource, but you can also define them on the _domain_. See below for an equivalent definition\n\n```elixir\ndefmodule Helpdesk.Support.Ticket do\n  use Ash.Resource,\n    ...,\n    extensions: [\n      AshGraphql.Resource\n    ]\n\n  graphql do\n    type :ticket\n\n    queries do\n      # Examples\n\n      # create a field called `get_ticket` that uses the `read` read action to fetch a single ticke\n      get :get_ticket, :read\n      # create a field called `most_important_ticket` that uses the `most_important` read action to fetch a single record\n      read_one :most_important_ticket, :most_important\n\n      # create a field called `list_tickets` that uses the `read` read action to fetch a list of tickets\n      list :list_tickets, :read\n    end\n\n    mutations do\n      # Examples\n\n      create :create_ticket, :create\n      update :update_ticket, :update\n      destroy :destroy_ticket, :destroy\n    end\n  end\n\n  ...\nend\n```","ref":"getting-started-with-graphql.html#queries-mutations-on-the-resource","title":"Queries & Mutations on the Resource - Getting Started With GraphQL","type":"extras"},{"doc":"```elixir\ndefmodule Helpdesk.Support.Ticket do\n  use Ash.Resource,\n    ...,\n    extensions: [\n      AshGraphql.Resource\n    ]\n\n  # The resource still determines its type, and any other resource/type-based\n  # configuration\n  graphql do\n    type :ticket\n  end\n\n  ...\nend\n\ndefmodule Helpdesk.Support do\n  use Ash.Domain,\n    extensions: [\n      AshGraphql.Domain\n    ]\n\n  ...\n  graphql do\n    # equivalent queries and mutations, but the first argument\n    # is the resource because the domain can define queries for\n    # any of its resources\n    queries do\n      get Helpdesk.Support.Ticket, :get_ticket, :read\n      read_one Helpdesk.Support.Ticket, :most_important_ticket, :most_important\n      list Helpdesk.Support.Ticket, :list_tickets, :read\n    end\n\n    mutations do\n      create Helpdesk.Support.Ticket, :create_ticket, :create\n      update Helpdesk.Support.Ticket, :update_ticket, :update\n      destroy Helpdesk.Support.Ticket, :destroy_ticket, :destroy\n    end\nend\n```","ref":"getting-started-with-graphql.html#queries-mutations-on-the-domain","title":"Queries & Mutations on the Domain - Getting Started With GraphQL","type":"extras"},{"doc":"Topics:\n\n- [GraphQL Generation](/documentation/topics/graphql-generation.md)\n\nHow Tos:\n\n- [Authorize With GraphQL](/documentation/topics/authorize-with-graphql.md)\n- [Handle Errors](/documentation/topics/handle-errors.md)\n- [Use Enums with GraphQL](/documentation/topics/use-enums-with-graphql.md)\n- [Use JSON with GraphQL](/documentation/topics/use-json-with-graphql.md)","ref":"getting-started-with-graphql.html#what-s-next","title":"What's next? - Getting Started With GraphQL","type":"extras"},{"doc":"# Authorize with GraphQL\n\nAshGraphql uses three special keys in the `absinthe` context:\n\n- `:actor` - the current actor, to be used for authorization/preparations/changes\n- `:tenant` - a tenant when using [multitenancy](https://hexdocs.pm/ash/multitenancy.html).\n- `:ash_context` - a map of arbitrary context to be passed into the changeset/query. Accessible via `changeset.context` and `query.context`\n\nBy default, `authorize?` in the domain is set to true. To disable authorization for a given domain in graphql, use:\n\n```elixir\ngraphql do\n  authorize? false\nend\n```\n\nIf you are doing authorization, you'll need to provide an `actor`.\n\nTo set the `actor` for authorization, you'll need to add an `actor` key to the\nabsinthe context. Typically, you would have a plug that fetches the current user and uses `Ash.PlugHelpers.set_actor/2` to set the actor in the `conn` (likewise with `Ash.PlugHelpers.set_tenant/2`).\n\nJust add `AshGraphql.Plug` somewhere _after_ that in the pipeline and the your\nGraphQL APIs will have the correct authorization.\n\n```elixir\ndefmodule MyAppWeb.Router do\n  pipeline :api do\n    # ...\n    plug :get_actor_from_token\n    plug AshGraphql.Plug\n  end\n\n  scope \"/\" do\n    forward \"/gql\", Absinthe.Plug, schema: YourSchema\n\n    forward \"/playground\",\n          Absinthe.Plug.GraphiQL,\n          schema: YourSchema,\n          interface: :playground\n  end\n\n  def get_actor_from_token(conn, _opts) do\n     with [\"\" <> token] <- get_req_header(conn, \"authorization\"),\n         {:ok, user, _claims} <- MyApp.Guardian.resource_from_token(token) do\n      conn\n      |> set_actor(user)\n    else\n    _ -> conn\n    end\n  end\nend\n```","ref":"authorize-with-graphql.html","title":"Authorize with GraphQL","type":"extras"},{"doc":"By default, unauthorized requests simply return `forbidden` in the message. If you prefer to show policy breakdowns in your GraphQL errors, you can set the config option:\n\n```elixir\nconfig :ash_graphql, :policies, show_policy_breakdowns?: true\n```\n\n```json\n{\n  \"data\": {\n    \"attendanceRecords\": null\n  },\n  \"errors\": [\n    {\n      \"code\": \"forbidden\",\n      \"fields\": [],\n      \"locations\": [\n        {\n          \"column\": 3,\n          \"line\": 2\n        }\n      ],\n      \"message\": \"MyApp.Authentication.User.read\\n\\n\\n\\n\\nPolicy Breakdown\\n  Policy | ⛔:\\n    forbid unless: actor is active | ✓ | ⬇    \\n    authorize if: actor is Executive | ✘ | ⬇\",\n      \"path\": [\"attendanceRecords\"],\n      \"short_message\": \"forbidden\",\n      \"vars\": {}\n    }\n  ]\n}\n```\n\nBe careful, as this can be an attack vector in some systems (i.e \"here is exactly what you need to make true to do what you want to do\").","ref":"authorize-with-graphql.html#policy-breakdowns","title":"Policy Breakdowns - Authorize with GraphQL","type":"extras"},{"doc":"Field policies in AshGraphql work by producing a `null` value for any forbidden field, as well as an error in the errors list.\n\n>","ref":"authorize-with-graphql.html#field-policies","title":"Field Policies - Authorize with GraphQL","type":"extras"},{"doc":">\n> Any fields with field policies on them should be nullable. If they are not nullable, the _parent_ object will also be `null` (and considered in an error state), because `null` is not a valid type for that field.\n\nTo make fields as nullable even if it is not nullable by its definition, use the `nullable_fields` option.\n\n```elixir\ngraphql do\n  type :post\n\n  nullable_fields [:foo, :bar, :baz]\nend\n```","ref":"authorize-with-graphql.html#nullability-warning","title":"nullability {: .warning} - Authorize with GraphQL","type":"extras"},{"doc":"# Handling Errors\n\nThere are various options that can be set on the Domain module to determine how errors behave and/or are shown in the GraphQL.","ref":"handle-errors.html","title":"Handling Errors","type":"extras"},{"doc":"For security purposes, if an error is *raised* as opposed to returned somewhere, the error is hidden. Set this to `true` in dev/test environments for an easier time debugging.\n\n```elixir\ngraphql do\n  show_raised_errors? true\nend\n\n# or it can be done in config\n# make sure you've set `otp_app` in your domain, i.e use Ash.Domain, otp_app: :my_app\n\nconfig :my_app, YourDomain, [\n  graphql: [\n    show_raised_errors?: true\n  ]\n]\n```","ref":"handle-errors.html#showing-raised-errors","title":"Showing raised errors - Handling Errors","type":"extras"},{"doc":"By default, action errors are simply shown in the `errors` field for mutations. Set this to `true` to return them as root level errors instead.\n\n```elixir\ngraphql do\n  root_level_errors? true\nend\n```","ref":"handle-errors.html#root-level-errors","title":"Root level errors - Handling Errors","type":"extras"},{"doc":"Setting an error handler allows you to use things like `gettext` to translate errors and/or modify errors in some way. This error handler will take the error object to be returned, and the context. See the [absinthe docs](https://hexdocs.pm/absinthe/context-and-authentication.html#context-and-plugs) for adding to the absinthe context (i.e for setting a locale).\n\n```elixir\ngraphql do\n  error_handler {MyApp.GraphqlErrorHandler, :handle_error, []}\nend\n```\n\nKeep in mind, that you will want to ensure that any custom error handler you add performs the logic to replace variables in error messages. \n\nThis is what the default error handler looks like, for example:\n\n```elixir\ndefmodule AshGraphql.DefaultErrorHandler do\n  @moduledoc \"Replaces any text in message or short_message with variables\"\n\n  def handle_error(\n        %{message: message, short_message: short_message, vars: vars} = error,\n        _context\n      ) do\n    %{\n      error\n      | message: replace_vars(message, vars),\n        short_message: replace_vars(short_message, vars)\n    }\n  end\n\n  def handle_error(other, _), do: other\n\n  defp replace_vars(string, vars) do\n    vars =\n      if is_map(vars) do\n        vars\n      else\n        List.wrap(vars)\n      end\n\n    Enum.reduce(vars, string, fn {key, value}, acc ->\n      if String.contains?(acc, \"%{#{key}}\") do\n        String.replace(acc, \"%{#{key}}\", to_string(value))\n      else\n        acc\n      end\n    end)\n  end\nend\n```","ref":"handle-errors.html#error-handler","title":"Error Handler - Handling Errors","type":"extras"},{"doc":"If you created your own Errors as described in the [Ash Docs](https://hexdocs.pm/ash/error-handling.html#using-a-custom-exception) you also need to implement\nthe protocol for it to be displayed in the Api.\n\n```elixir\ndefmodule Ash.Error.Action.InvalidArgument do\n  @moduledoc \"Used when an invalid value is provided for an action argument\"\n  use Splode.Error, fields: [:field, :message, :value], class: :invalid\n\n  def message(error) do\n    \"\"\"\n    Invalid value provided#{for_field(error)}#{do_message(error)}\n\n    #{inspect(error.value)}\n    \"\"\"\n  end\n  \n  defimpl AshGraphql.Error, for: Ash.Error.Changes.InvalidArgument do\n    def to_error(error) do\n      %{\n        message: error.message,\n        short_message: error.message,\n        code: \"invalid_argument\",\n        vars: Map.new(error.vars),\n        fields: [error.field]\n      }\n    end\n  end\nend\n```","ref":"handle-errors.html#custom-errors","title":"Custom Errors - Handling Errors","type":"extras"},{"doc":"# Using the SDL File\n\nBy passing the `generate_sdl_file` to `use AshGraphql`, AshGraphql will generate\na schema file when you run `mix ash.codegen`. For example:\n\n```elixir\nuse AshGraphql,\n  domains: [Domain1, Domain2],\n  generate_sdl_file: \"priv/schema.graphql\"\n```\n\n>","ref":"sdl-file.html","title":"Using the SDL File","type":"extras"},{"doc":">\n> We suggest first adding `mix ash.codegen --check` to your CI/CD pipeline to\n> ensure the schema is always up-to-date. Alternatively you can add the file\n> to your `.gitignore`, or you can remove the `generate_sdl_file` option to skip\n> generating the file.\n\nWith the `generate_sdl_file` option, calls to `mix ash.codegen  ` will generate\na `.graphql` file at the specified path.\n\nSome things that you can use this SDL file for:","ref":"sdl-file.html#ensure-your-schema-is-up-to-date-gitignored-or-not-generated-info","title":"Ensure your schema is up to date, gitignored, or not generated {: .info} - Using the SDL File","type":"extras"},{"doc":"The schema file itself represents your entire GraphQL API definition, and examining it can be very useful.","ref":"sdl-file.html#documentation","title":"Documentation - Using the SDL File","type":"extras"},{"doc":"You can use tools like [GraphQL codegen](https://the-guild.dev/graphql/codegen) to generate a client\nfor your GraphQL API.","ref":"sdl-file.html#code-generation","title":"Code Generation - Using the SDL File","type":"extras"},{"doc":"Use the SDL file to check for breaking changes in your schema, especially if you are exposing a public API.\nA plug and play github action for this can be found here: https://the-guild.dev/graphql/inspector/docs/products/action","ref":"sdl-file.html#validating-changes","title":"Validating Changes - Using the SDL File","type":"extras"},{"doc":"# Use Enums with GraphQL\n\nIf you define an `Ash.Type.Enum`, that enum type can be used both in attributes _and_ arguments. You will need to add `graphql_type/0` to your implementation. AshGraphql will ensure that a single type is defined for it, which will be reused across all occurrences. If an enum\ntype is referenced, but does not have `graphql_type/0` defined, it will\nbe treated as a string input.\n\nFor example:\n\n```elixir\ndefmodule AshPostgres.Test.Types.Status do\n  @moduledoc false\n  use Ash.Type.Enum, values: [:open, :closed]\n\n  def graphql_type, do: :ticket_status\n\n  # Optionally, remap the names used in GraphQL, for instance if you have a value like `:\"10\"`\n  # that value is not compatible with GraphQL\n\n  def graphql_rename_value(:\"10\"), do: :ten\n  def graphql_rename_value(value), do: value\n\n  # You can also provide descriptions for the enum values, which will be exposed in the GraphQL\n  # schema.\n  # Remember to have a fallback clause that returns nil if you don't provide descriptions for all\n  # values.\n\n  def graphql_describe_enum_value(:open), do: \"The post is open\"\n  def graphql_describe_enum_value(_), do: nil\nend\n\n```","ref":"use-enums-with-graphql.html","title":"Use Enums with GraphQL","type":"extras"},{"doc":"You can implement a custom enum by first adding the enum type to your absinthe schema (more [here](https://hexdocs.pm/absinthe/Absinthe.Type.Enum.html)). Then you can define a custom Ash type that refers to that absinthe enum type.\n\n```elixir\n# In your absinthe schema:\n\nenum :status do\n  value(:open, description: \"The post is open\")\n  value(:closed, description: \"The post is closed\")\nend\n```\n\n```elixir\n# Your custom Ash Type\ndefmodule AshGraphql.Test.Status do\n  use Ash.Type.Enum, values: [:open, :closed]\n\n  use AshGraphql.Type\n\n  @impl true\n  # tell Ash not to define the type for that enum\n  def graphql_define_type?(_), do: false\nend\n```","ref":"use-enums-with-graphql.html#using-custom-absinthe-types","title":"Using custom absinthe types - Use Enums with GraphQL","type":"extras"},{"doc":"# Use JSON with GraphQL\n\nAshGraphql provides two JSON types that may be used. They are the same except for how the type is serialized in responses.\n\n- `:json_string` - serializes the json to a string, e.g `\"{\\\"foo\\\":1}\"`\n- `:json` - leaves the json as an object, e.g `{foo: 1}`\n\nBy default, `:json_string` is used. The configuration for this is (uncharacteristically) placed in application config, for example:\n\n```elixir\nconfig :ash_graphql, :json_type, :json\n```","ref":"use-json-with-graphql.html","title":"Use JSON with GraphQL","type":"extras"},{"doc":"# Using Subscriptions\n\nThe AshGraphql DSL does not currently support subscriptions. However, you can do this with Absinthe direclty, and use `AshGraphql.Subscription.query_for_subscription/3`. Here is an example of how you could do this for a subscription for a single record. This example could be extended to support lists of records as well.\n\n```elixir\n# in your absinthe schema file\nsubscription do\n  field :field, :type_name do\n    config(fn\n      _args, %{context: %{current_user: %{id: user_id}}} ->\n        {:ok, topic: user_id, context_id: \"user/#{user_id}\"}\n\n      _args, _context ->\n        {:error, :unauthorized}\n    end)\n\n    resolve(fn args, _, resolution ->\n      # loads all the data you need\n      AshGraphql.Subscription.query_for_subscription(\n        YourResource,\n        YourDomain,\n        resolution\n      )\n      |> Ash.Query.filter(id == ^args.id)\n      |> Ash.read(actor: resolution.context.current_user)\n    end)\n  end\nend\n```","ref":"use-subscriptions-with-graphql.html","title":"Using Subscriptions","type":"extras"},{"doc":"# Use Unions with GraphQL\n\nUnions must be defined with `Ash.Type.NewType`:\n\n```elixir\ndefmodule MyApp.Armor do\n  use Ash.Type.NewType, subtype_of: :union, constraints: [\n    types: [\n      plate: [\n        # This is an embedded resource, with its own fields\n        type: :struct,\n        constraints: [MyApp.Armor.Plate]\n      ],\n      chain_mail: [\n        # And so is this\n        type: :struct,\n        constraints: [instance_of: MyApp.Armor.ChainMail]\n      ],\n      custom: [\n        type: :string\n      ]\n    ]\n  ]\n\n  use AshGraphql.Type\n\n  # Add this to define the union in ash_graphql\n  def graphql_type(_), do: :armor\nend\n```\n\nBy default, the type you would get for this on input and output would look something like this:\n\n```\ntype Armor = {plate: {value: Plate}} | {chain_mail: {value: ChainMail}} | {custom: {value: String}}\n```\n\nWe do this by default to solve for potentially ambiguous types. An example of this might be if you had multiple different types of strings in a union, and you wanted the client to be able to tell exactly which type of string they'd been given. i.e `{social: {value: \"555-55-5555\"}} | {phone_number: {value: \"555-5555\"}}`.\n\nHowever, you can clean the type in cases where you have no such conflicts by by providing\n\n```elixir\n# Put anything in here that does not need to be named/nested with `{type_name: {value: value}}`\ndef graphql_unnested_unions(_constraints), do: [:plate, :chain_mail]\n```\n\nWhich, in this case, would yield:\n\n```\ntype Armor = Plate | ChainMail | {custom: {value: String}}\n```","ref":"use-unions-with-graphql.html","title":"Use Unions with GraphQL","type":"extras"},{"doc":"Add the `graphql_define_type?/1` callback, like so, to skip Ash's generation (i.e if you're defining it yourself)\n\n```elixir\n@impl true\ndef graphql_define_type?(_), do: false\n```","ref":"use-unions-with-graphql.html#bypassing-type-generation-for-a-union","title":"Bypassing type generation for a union - Use Unions with GraphQL","type":"extras"},{"doc":"# Use Maps with GraphQL\n\nIf you define an `Ash.Type.NewType` that is a subtype of `:map`, _and_ you add the `fields` constraint which specifies field names and their types, `AshGraphql` will automatically derive an appropriate GraphQL type for it.\n\nFor example:\n\n```elixir\ndefmodule MyApp.Types.Metadata do\n  @moduledoc false\n  use Ash.Type.NewType, subtype_of: :map, constraints: [\n    fields: [\n      title: [\n        type: :string\n      ],\n      description: [\n        type: :string\n      ]\n    ]\n  ]\n\n  def graphql_type, do: :metadata\nend\n\n```","ref":"use-maps-with-graphql.html","title":"Use Maps with GraphQL","type":"extras"},{"doc":"Add the `graphql_define_type?/1` callback, like so, to skip Ash's generation (i.e if you're defining it yourself)\n\n```elixir\n@impl true\ndef graphql_define_type?(_), do: false\n```","ref":"use-maps-with-graphql.html#bypassing-type-generation-for-an-map","title":"Bypassing type generation for an map - Use Maps with GraphQL","type":"extras"},{"doc":"# Monitoring\n\nPlease read [the Ash monitoring guide](https://hexdocs.pm/ash/monitoring.html) for more information. Here we simply cover the additional traces & telemetry events that we publish from this extension.\n\nA tracer can be configured in the domain. It will fallback to the global tracer configuration `config :ash, :tracer, Tracer`\n\n```elixir\ngraphql do\n  trace MyApp.Tracer\nend\n```","ref":"monitoring.html","title":"Monitoring","type":"extras"},{"doc":"Each graphql resolver, and batch resolution of the underlying data loader, will produce a span with an appropriate name. We also set a `source: :graphql` metadata if you want to filter them out or annotate them in some way.","ref":"monitoring.html#traces","title":"Traces - Monitoring","type":"extras"},{"doc":"AshGraphql emits the following telemetry events, suffixed with `:start` and `:stop`. Start events have `system_time` measurements, and stop events have `system_time` and `duration` measurements. All times will be in the native time unit.\n\n- `[:ash,  , :gql_mutation]` - The execution of a mutation. Use `resource_short_name` and `mutation` (or `action`) metadata to break down measurements.\n- `[:ash,  , :gql_query]` - The execution of a mutation. Use `resource_short_name` and `query` (or `action`) metadata to break down measurements.\n\n- `[:ash,  , :gql_relationship]` - The resolution of a relationship. Use `resource_short_name` and `relationship` metadata to break down measurements.\n\n- `[:ash,  , :gql_calculation]` - The resolution of a calculation. Use `resource_short_name` and `calculation` metadata to break down measurements.\n\n- `[:ash,  , :gql_relationship_batch]` - The resolution of a batch of relationships by the data loader. Use `resource_short_name` and `relationship` metadata to break down measurements.\n\n- `[:ash,  , :gql_calculation_batch]` - The resolution of a batch of calculations by the data loader. Use `resource_short_name` and `calculation` metadata to break down measurements.","ref":"monitoring.html#telemetry","title":"Telemetry - Monitoring","type":"extras"},{"doc":"# GraphQL Query Generation\n\nFollowing where we left off from [Getting Started with GraphQL](/documentation/tutorials/getting-started-with-graphql.md), this guide explores what the GraphQL requests and responses look like for different queries defined with the AshGraphql DSL.\n\nAll of the following examples apply to queries & mutations places on the domain as well.","ref":"graphql-generation.html","title":"GraphQL Query Generation","type":"extras"},{"doc":"```elixir\ndefmodule Helpdesk.Support.Ticket do\n  use Ash.Resource,\n    ...,\n    extensions: [\n      AshGraphql.Resource\n    ]\n\n  attributes do\n    # Add an autogenerated UUID primary key called `:id`.\n    uuid_primary_key :id\n\n    # Add a string type attribute called `:subject`\n    attribute :subject, :string\n  end\n\n  actions do\n    # Add a set of simple actions. You'll customize these later.\n    defaults [:read, :update, :destroy]\n  end\n\n  graphql do\n    type :ticket\n\n    queries do\n      # create a field called `get_ticket` that uses the `read` read action to fetch a single ticket\n      get :get_ticket, :read\n    end\n  end\nend\n```\n\nFor the `get_ticket` query defined above, the corresponding GraphQL would look like this:\n\n```graphql\nquery ($id: ID!) {\n  getTicket(id: $id) {\n    id\n    subject\n  }\n}\n```\n\nAnd the response would look similar to this:\n\n```json\n{\n  \"data\": {\n    \"getTicket\": {\n      \"id\": \"\",\n      \"subject\": \"\"\n    }\n  }\n}\n```\n\nLet's look at an example of querying a list of things.\n\n```elixir\n  graphql do\n    type :ticket\n\n    queries do\n      # create a field called `get_ticket` that uses the `read` read action to fetch a single ticket\n      get :get_ticket, :read\n\n      # create a field called `list_tickets` that uses the `read` read action to fetch a list of tickets\n      list :list_tickets, :read\n    end\n  end\n```\n\nThis time, we've added `list :list_tickets, :read`, to generate a GraphQL query for listing tickets.\nThe request would look something like this:\n\n```graphql\nquery {\n  listTickets {\n    id\n    subject\n  }\n}\n```\n\nAnd the response would look similar to this:\n\n```json\n{\n  \"data\": {\n    \"listTickets\": [\n      {\n        \"id\": \"\",\n        \"subject\": \"\"\n      }\n    ]\n  }\n}\n```","ref":"graphql-generation.html#fetch-data-by-id","title":"Fetch Data by ID - GraphQL Query Generation","type":"extras"},{"doc":"Now, let's say we want to add query parameters to `listTickets`. How do we do that?\nConsider `list :list_tickets, :read` and the `actions` section:\n\n```elixir\n  actions do\n    # Add a set of simple actions. You'll customize these later.\n    defaults [:read, :update, :destroy]\n  end\n\n  graphql do\n    type :ticket\n\n    queries do\n      # create a field called `list_tickets` that uses the `read` read action to fetch a list of tickets\n      list :list_tickets, :read\n    end\n  end\n```\n\nThe second argument to `list :list_tickets, :read` is the action that will be called when the query is run.\nIn the current example, the action is `:read`, which is the generic Read action.\nLet's create a custom action in order to define query parameters for the `listTickets` query.\n\nWe'll call this action `:query_tickets`:\n\n```elixir\n  actions do\n    defaults [:read, :update, :destroy]\n\n    read :query_tickets do\n      argument :representative_id, :uuid\n\n      filter(\n        expr do\n          is_nil(^arg(:representative_id)) or representative_id == ^arg(:representative_id)\n        end\n      )\n    end\n  end\n\n  graphql do\n    type :ticket\n\n    queries do\n      # create a field called `list_tickets` that uses the `:query_tickets` read action to fetch a list of tickets\n      list :list_tickets, :query_tickets\n    end\n  end\n```\n\nIn the `graphql` section, the `list/2` call has been changed, replacing the `:read` action with `:query_tickets`.\n\nThe GraphQL request would look something like this:\n\n```graphql\nquery ($representative_id: ID) {\n  list_tickets(representative_id: $representative_id) {\n    id\n    representative_id\n    subject\n  }\n}\n```","ref":"graphql-generation.html#filter-data-with-arguments","title":"Filter Data With Arguments - GraphQL Query Generation","type":"extras"},{"doc":"Now, let's look at how to create a ticket by using a GraphQL mutation.\n\nLet's say you have a Resource that defines an enum-like attribute:\n\n```elixir\ndefmodule Helpdesk.Support.Ticket do\n  use Ash.Resource,\n    ...,\n    extensions: [\n      AshGraphql.Resource\n    ]\n\n\n  attributes do\n    uuid_primary_key :id\n    attribute :subject, :string\n    attribute :status, :atom, constraints: [one_of: [:open, :closed]]\n  end\n\n  actions do\n    defaults [:create, :read, :update, :destroy]\n  end\n\n  graphql do\n    type :ticket\n\n    queries do\n      get :get_ticket, :read\n    end\n\n    mutations do\n      create :create_ticket, :create\n    end\n  end\nend\n```\n\nAbove, the following changes have been added:\n\n1. In the `attributes` section, the `:status` attribute has been added.\n2. In the `actions` section, the `:create` action has been added.\n3. The `:create_ticket` mutation has been defined in the new `graphql.mutations` section.\n\nThe `:status` attribute is an enum that is constrained to the values `[:open, :closed]`.\nWhen used in conjunction with AshGraphql, a GraphQL enum type called `TicketStatus` will be generated for this attribute.\nThe possible GraphQL values for `TicketStatus` are `OPEN` and `CLOSED`.\nSee [Use Enums with GraphQL](/documentation/guides/use-enums-with-graphql.md) for more information.\n\nWe can now create a ticket with the `createTicket` mutation:\n\n```graphql\nmutation ($input: CreateTicketInput!) {\n  createTicket(input: $input) {\n    result {\n      id\n      subject\n      status\n    }\n    errors {\n      code\n      fields\n      message\n      shortMessage\n      vars\n    }\n  }\n}\n```\n\n**Note**\n\n- The resulting ticket data is wrapped in AshGraphql's `result` object.\n- Validation errors are wrapped in a list of error objects under `errors`, also specified in the query.\n  AshGraphql does this by default instead of exposing errors in GraphQL's standard `errors` array.\n  This behavior can be changed by setting `root_level_errors? true` in the `graphql` section\n  of your Ash domain module:\n\n  ```elixir\n  defmodule Helpdesk.Support do\n    use Ash.Domain, extensions: [AshGraphql.Domain]\n\n    graphql do\n      root_level_errors? true\n    end\n  end\n  ```\n\nIf we were to run this mutation in a test, it would look something like this:\n\n```elixir\ninput = %{\n  subject: \"My Ticket\",\n  status: \"OPEN\"\n}\n\nresp_body =\n  post(conn, \"/api/graphql\", %{\n    query: query,\n    variables: %{input: input}\n  })\n  |> json_response(200)\n```\n\nNotice that the `status` attribute is set to `\"OPEN\"` and not `\"open\"`. It is important that the value of the `status` be uppercase.\nThis is required by GraphQL enums. AshGraphql will automatically convert the value to the correct case.\n\nThe response will look something like this:\n\n```json\n{\n  \"data\": {\n    \"createTicket\": {\n      \"result\": {\n        \"id\": \"b771e433-0979-4d07-a280-4d12373849aa\",\n        \"subject\": \"My Ticket\",\n        \"status\": \"OPEN\"\n      }\n    }\n  }\n}\n```\n\nAgain, AshGraphql will automatically convert the `status` value from `:open` to `\"OPEN\"`.","ref":"graphql-generation.html#mutations-and-enums","title":"Mutations and Enums - GraphQL Query Generation","type":"extras"},{"doc":"If you haven't already, please turn on the documentation tag for AshGraphql. Tags can be controlled\nat the top of the left navigation menu, under \"Including Libraries:\".\n\n- [Getting Started With GraphQL](/documentation/tutorials/getting-started-with-graphql.md)\n- `AshGraphql.Domain`","ref":"graphql-generation.html#more-graphql-docs","title":"More GraphQL Docs - GraphQL Query Generation","type":"extras"},{"doc":"# Modifying the Resolution\n\nUsing the `modify_resolution` option, you can alter the `Absinthe.Resolution`.\n\n`modify_resolution` is an MFA that will be called with the resolution, the query, and the result of the action as the first three arguments. Must return a new `Absinthe.Resolution`.\n\nThis can be used to implement things like setting cookies based on resource actions. A method of using resolution context for that is documented [in Absinthe.Plug](https://hexdocs.pm/absinthe_plug/Absinthe.Plug.html#module-before-send)\n\n>","ref":"modifying-the-resolution.html","title":"Modifying the Resolution","type":"extras"},{"doc":">\n> If you are modifying the context in a query, then you should also set `as_mutation?` to true and represent this in your graphql as a mutation. See `as_mutation?` for more.","ref":"modifying-the-resolution.html#as_mutation-warning","title":"as_mutation? {: .warning} - Modifying the Resolution","type":"extras"},{"doc":"# Relay\n\nEnabling Relay for a resource sets it up to follow the [Relay specification](https://relay.dev/graphql/connections.htm).\n\nThe two changes that are made currently are:\n\n- the type for the resource will implement the `Node` interface\n- pagination over that resource will behave as a `Connection`.","ref":"relay.html","title":"Relay","type":"extras"},{"doc":"Set `relay? true` on the resource:\n\n```elixir\ngraphql do\n  relay? true\n\n  ...\nend\n```","ref":"relay.html#using-ash-s-built-in-relay-support","title":"Using Ash's built-in Relay support - Relay","type":"extras"},{"doc":"Use the following option to generate Relay Global IDs (see\n[here](https://relay.dev/graphql/objectidentification.htm)).\n\n```elixir\nuse AshGraphql, relay_ids?: true\n```\n\nThis allows refetching a node using the `node` query and passing its global ID.","ref":"relay.html#relay-global-ids","title":"Relay Global IDs - Relay","type":"extras"},{"doc":"When `relay_ids?: true` is passed, users of the API will have access only to the global IDs, so they\nwill also need to use them when an ID is required as argument. You actions, though, internally use the\nnormal IDs defined by the data layer.\n\nTo handle the translation between the two ID domains, you can use the `relay_id_translations`\noption. With this, you can define a list of arguments that will be translated from Relay global IDs\nto internal IDs.\n\nFor example, if you have a `Post` resource with an action to create a post associated with an\nauthor:\n\n```elixir\ncreate :create do\n  argument :author_id, :uuid\n\n  # Do stuff with author_id\nend\n```\n\nYou can add this to the mutation connected to that action:\n\n```elixir\nmutations do\n  create :create_post, :create do\n    relay_id_translations [input: [author_id: :user]]\n  end\nend\n```","ref":"relay.html#translating-relay-global-ids-passed-as-arguments","title":"Translating Relay Global IDs passed as arguments - Relay","type":"extras"},{"doc":"Use the following option when calling `use AshGraphql`\n\n```elixir\nuse AshGraphql, define_relay_types?: false\n```","ref":"relay.html#using-with-absinthe-relay-instead-of-ash-s-relay-type","title":"Using with Absinthe.Relay instead of Ash's relay type - Relay","type":"extras"},{"doc":"# Upgrading to 1.0\n\nAshGraphql 1.0 is a major release that introduces 3.0 support as well as a few\nbreaking changes for AshGraphql itself.\n\n## `:datetime` is now the default representation for datetimes\n\nFor backwards compatibility, pre-1.0 we had users configure `:utc_datetime_type` to `:datetime` as part of the getting started guide. This is now the default. The configuration remains, but has been renamed. It was improperly `config :ash, :utc_datetime_type`, and it is now `config :ash_graphql, :utc_datetime_type`. If you are a user who is relying on the original behavior that had it default to `:naive_datetime`, you can set the following configuration:\n\n```elixir\nconfig :ash_graphql, :utc_datetime_type, :naive_datetime\n```\n\nOtherwise, if you have the following in your config, you can remove it.\n\n```elixir\nconfig :ash, :utc_datetime_type, :datetime\n```\n\n## `allow_non_null_mutation_arguments?` is now `true` always\n\nYou can remove this code from your config.\n\n```elixir\nconfig :ash_graphql, :allow_non_null_mutation_arguments?, true\n```\n\nPre 1.0, the `input` argument for mutations was always allowed to be `null`. In 1.0, it will be required if there are any non-null inputs inside of the object. You may need to address clients that are expecting to be able to send `null`. Even if they _were_ sending `null` in those cases, it would have been an error, so it is unlikely that you will have to make any changes here.\n\n---","ref":"upgrade.html","title":"Upgrading to 1.0","type":"extras"},{"doc":"Pre 1.0: AshGraphql automatically generated types for attributes/arguments that were atom/union/map types, giving them a name like `postStatus`, for an attribute `status` on a resource `post`. While convenient, this incurred _significant_ internal complexity, and had room for strange ambiguity. For example, if you had two actions, that each had an argument called `:status`, and that `:status` was an enum with different values, you would get a conflict at compile time due to conflicting type names.","ref":"upgrade.html#automagic-atom-union-map-types-are-no-more","title":"Automagic atom/union/map types are no more - Upgrading to 1.0","type":"extras"},{"doc":"AshGraphql will now _only_ generate types for types defined using `Ash.Type.NewType` or `Ash.Type.Enum`. For example, if you had:\n\n```elixir\nattribute :post_status, :atom, constraints: [one_of: [:active, :archived]]\n```\n\nin 3.0 this attribute would display as a `:string`. To fix this, you would define an `Ash.Type.Enum`:\n\n```elixir\ndefmodule MyApp.PostStatus do\n  use Ash.Type.Enum, values: [:active, :archived]\n\n  def graphql_type(_), do: :post_status\n  def graphql_input_type(_), do: :post_status\nend\n```\n\nThen you could use it in your attribute:\n\n```elixir\nattribute :post_status, MyApp.PostStatus\n```\n\nThe same goes for map types with the `:fields` constraint, as well as union types, except you must define those using `Ash.Type.NewType`. For example:\n\n```elixir\nattribute :scale, :union, constraints: [\n  types: [\n    whole: [\n      type: :integer\n    ],\n    fractional: [\n      type: :decimal\n    ]\n  ]\n]\n```\n\nHere you would get a compile error, indicating that we cannot determine a type for `:union`. To resolve this, you would define an `Ash.Type.NewType`, like so:\n\n```elixir\ndefmodule MyApp.Scale do\n  use Ash.Type.NewType, subtype_of: :union, constraints: [\n    types: [\n      whole: [\n        type: :integer\n      ],\n      fractional: [\n        type: :decimal\n      ]\n    ]\n  ]\n\n  def graphql_type(_), do: :scale\n  def graphql_input_type(_), do: :scale\nend\n```\n\nThen you could use it in your application like so:\n\n```elixir\nattribute :scale, MyApp.Scale\n```\n\n---","ref":"upgrade.html#what-you-ll-need-to-change","title":"What you'll need to change - Upgrading to 1.0","type":"extras"},{"doc":"Pre 1.0, you would need to either configure managed_relationships manually, for example:\n\n```elixir\nmanaged_relationships do\n  managed_relationship :create, :comments\nend\n```\n\nOr set `auto?` to `true`, which would derive appropriate configurations for any action that had arguments with corresponding `manage_relationship` changes for them. This is unnecessarily verbose and there isn't really a time where you wouldn't want an input type derived for an argument that uses `change manage_relationship`, so the default for `auto?` is now `true`. This only affects arguments who's type is `:map`, or `{:array, :map}`.\n\nA new option has been added to `managed_relationship` to allow you to bypass this type generation if necessary:\n\n```elixir\nmanaged_relationships do\n  managed_relationship :create, :comments, ignore?: true\nend\n```\n\n## `Ash.Api` is now `Ash.Domain` in Ash 3.0\n\nYour Absinthe schema file (ie. `MyApp.Schema`) will need all references to `api` updated to be `domain`. eg.\n\n```elixir\n@domains [MyApp.Domain1, MyApp.Domain2]\n\nuse AshGraphql, domains: @domains\n```","ref":"upgrade.html#the-managed_relationships-auto-option-now-defaults-to-true","title":"The `managed_relationships.auto?` option now defaults to `true` - Upgrading to 1.0","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: AshGraphql.Domain\n\nThe entrypoint for adding GraphQL behavior to an Ash domain","ref":"dsl-ashgraphql-domain.html","title":"DSL: AshGraphql.Domain","type":"extras"},{"doc":"Domain level configuration for GraphQL","ref":"dsl-ashgraphql-domain.html#graphql","title":"graphql - DSL: AshGraphql.Domain","type":"extras"},{"doc":"* [queries](#graphql-queries)\n   * get\n   * read_one\n   * list\n   * action\n * [mutations](#graphql-mutations)\n   * create\n   * update\n   * destroy\n   * action","ref":"dsl-ashgraphql-domain.html#nested-dsls","title":"Nested DSLs - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```\ngraphql do\n  authorize? false # To skip authorization for this domain\nend\n\n```","ref":"dsl-ashgraphql-domain.html#examples","title":"Examples - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`authorize?`](#graphql-authorize?){: #graphql-authorize? } | `boolean` | `true` | Whether or not to perform authorization for this domain |\n| [`tracer`](#graphql-tracer){: #graphql-tracer } | `atom` |  | A tracer to use to trace execution in the graphql. Will use `config :ash, :tracer` if it is set. |\n| [`root_level_errors?`](#graphql-root_level_errors?){: #graphql-root_level_errors? } | `boolean` | `false` | By default, mutation errors are shown in their result object's errors key, but this setting places those errors in the top level errors list |\n| [`error_handler`](#graphql-error_handler){: #graphql-error_handler } | `mfa` | `{AshGraphql.DefaultErrorHandler, :handle_error, []}` | Set an MFA to intercept/handle any errors that are generated. |\n| [`show_raised_errors?`](#graphql-show_raised_errors?){: #graphql-show_raised_errors? } | `boolean` | `false` | For security purposes, if an error is *raised* then Ash simply shows a generic error. If you want to show those errors, set this to true. |","ref":"dsl-ashgraphql-domain.html#options","title":"Options - DSL: AshGraphql.Domain","type":"extras"},{"doc":"Queries to expose for the resource.","ref":"dsl-ashgraphql-domain.html#graphql-queries","title":"graphql.queries - DSL: AshGraphql.Domain","type":"extras"},{"doc":"* [get](#graphql-queries-get)\n * [read_one](#graphql-queries-read_one)\n * [list](#graphql-queries-list)\n * [action](#graphql-queries-action)","ref":"dsl-ashgraphql-domain.html#nested-dsls","title":"Nested DSLs - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```\nqueries do\n  get Post, :get_post, :read\n  read_one User, :current_user, :current_user\n  list Post, :list_posts, :read\nend\n\n```","ref":"dsl-ashgraphql-domain.html#examples","title":"Examples - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```elixir\nget resource, name, action\n```\n\n\nA query to fetch a record by primary key","ref":"dsl-ashgraphql-domain.html#graphql-queries-get","title":"graphql.queries.get - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```\nget :get_post, :read\n```","ref":"dsl-ashgraphql-domain.html#examples","title":"Examples - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`resource`](#graphql-queries-get-resource){: #graphql-queries-get-resource } | `module` |  | The resource that the action is defined on |\n| [`name`](#graphql-queries-get-name){: #graphql-queries-get-name } | `atom` | `:get` | The name to use for the query. |\n| [`action`](#graphql-queries-get-action){: #graphql-queries-get-action .spark-required} | `atom` |  | The action to use for the query. |","ref":"dsl-ashgraphql-domain.html#arguments","title":"Arguments - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`identity`](#graphql-queries-get-identity){: #graphql-queries-get-identity } | `atom` |  | The identity to use for looking up the record. Pass `false` to not use an identity. |\n| [`allow_nil?`](#graphql-queries-get-allow_nil?){: #graphql-queries-get-allow_nil? } | `boolean` | `true` | Whether or not the action can return nil. |\n| [`modify_resolution`](#graphql-queries-get-modify_resolution){: #graphql-queries-get-modify_resolution } | `mfa` |  | An MFA that will be called with the resolution, the query, and the result of the action as the first three arguments. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more. |\n| [`type_name`](#graphql-queries-get-type_name){: #graphql-queries-get-type_name } | `atom` |  | Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key. |\n| [`description`](#graphql-queries-get-description){: #graphql-queries-get-description } | `String.t` |  | The query description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`metadata_names`](#graphql-queries-get-metadata_names){: #graphql-queries-get-metadata_names } | `keyword` | `[]` | Name overrides for metadata fields on the read action. |\n| [`metadata_types`](#graphql-queries-get-metadata_types){: #graphql-queries-get-metadata_types } | `keyword` | `[]` | Type overrides for metadata fields on the read action. |\n| [`show_metadata`](#graphql-queries-get-show_metadata){: #graphql-queries-get-show_metadata } | `list(atom)` |  | The metadata attributes to show. Defaults to all. |\n| [`as_mutation?`](#graphql-queries-get-as_mutation?){: #graphql-queries-get-as_mutation? } | `boolean` | `false` | Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more. |\n| [`relay_id_translations`](#graphql-queries-get-relay_id_translations){: #graphql-queries-get-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |\n| [`hide_inputs`](#graphql-queries-get-hide_inputs){: #graphql-queries-get-hide_inputs } | `list(atom)` | `[]` | A list of inputs to hide from the mutation. |","ref":"dsl-ashgraphql-domain.html#options","title":"Options - DSL: AshGraphql.Domain","type":"extras"},{"doc":"Target: `AshGraphql.Resource.Query`","ref":"dsl-ashgraphql-domain.html#introspection","title":"Introspection - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```elixir\nread_one resource, name, action\n```\n\n\nA query to fetch a record","ref":"dsl-ashgraphql-domain.html#graphql-queries-read_one","title":"graphql.queries.read_one - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```\nread_one :current_user, :current_user\n```","ref":"dsl-ashgraphql-domain.html#examples","title":"Examples - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`resource`](#graphql-queries-read_one-resource){: #graphql-queries-read_one-resource } | `module` |  | The resource that the action is defined on |\n| [`name`](#graphql-queries-read_one-name){: #graphql-queries-read_one-name } | `atom` | `:get` | The name to use for the query. |\n| [`action`](#graphql-queries-read_one-action){: #graphql-queries-read_one-action .spark-required} | `atom` |  | The action to use for the query. |","ref":"dsl-ashgraphql-domain.html#arguments","title":"Arguments - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`allow_nil?`](#graphql-queries-read_one-allow_nil?){: #graphql-queries-read_one-allow_nil? } | `boolean` | `true` | Whether or not the action can return nil. |\n| [`type_name`](#graphql-queries-read_one-type_name){: #graphql-queries-read_one-type_name } | `atom` |  | Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key. |\n| [`description`](#graphql-queries-read_one-description){: #graphql-queries-read_one-description } | `String.t` |  | The query description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`metadata_names`](#graphql-queries-read_one-metadata_names){: #graphql-queries-read_one-metadata_names } | `keyword` | `[]` | Name overrides for metadata fields on the read action. |\n| [`metadata_types`](#graphql-queries-read_one-metadata_types){: #graphql-queries-read_one-metadata_types } | `keyword` | `[]` | Type overrides for metadata fields on the read action. |\n| [`show_metadata`](#graphql-queries-read_one-show_metadata){: #graphql-queries-read_one-show_metadata } | `list(atom)` |  | The metadata attributes to show. Defaults to all. |\n| [`as_mutation?`](#graphql-queries-read_one-as_mutation?){: #graphql-queries-read_one-as_mutation? } | `boolean` | `false` | Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more. |\n| [`relay_id_translations`](#graphql-queries-read_one-relay_id_translations){: #graphql-queries-read_one-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |\n| [`hide_inputs`](#graphql-queries-read_one-hide_inputs){: #graphql-queries-read_one-hide_inputs } | `list(atom)` | `[]` | A list of inputs to hide from the mutation. |","ref":"dsl-ashgraphql-domain.html#options","title":"Options - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```elixir\nlist resource, name, action\n```\n\n\nA query to fetch a list of records","ref":"dsl-ashgraphql-domain.html#graphql-queries-list","title":"graphql.queries.list - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```\nlist :list_posts, :read\n```\n\n```\nlist :list_posts_paginated, :read, relay?: true\n```","ref":"dsl-ashgraphql-domain.html#examples","title":"Examples - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`resource`](#graphql-queries-list-resource){: #graphql-queries-list-resource } | `module` |  | The resource that the action is defined on |\n| [`name`](#graphql-queries-list-name){: #graphql-queries-list-name } | `atom` | `:get` | The name to use for the query. |\n| [`action`](#graphql-queries-list-action){: #graphql-queries-list-action .spark-required} | `atom` |  | The action to use for the query. |","ref":"dsl-ashgraphql-domain.html#arguments","title":"Arguments - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relay?`](#graphql-queries-list-relay?){: #graphql-queries-list-relay? } | `boolean` | `false` | If true, the graphql queries/resolvers for this resource will be built to honor the relay specification. See [the relay guide](/documentation/topics/relay.html) for more. |\n| [`paginate_with`](#graphql-queries-list-paginate_with){: #graphql-queries-list-paginate_with } | `:keyset \\| :offset \\| nil` | `:keyset` | Determine the pagination strategy to use, if multiple are available. If `nil`, no pagination is applied, otherwise the given strategy is used. |\n| [`type_name`](#graphql-queries-list-type_name){: #graphql-queries-list-type_name } | `atom` |  | Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key. |\n| [`description`](#graphql-queries-list-description){: #graphql-queries-list-description } | `String.t` |  | The query description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`metadata_names`](#graphql-queries-list-metadata_names){: #graphql-queries-list-metadata_names } | `keyword` | `[]` | Name overrides for metadata fields on the read action. |\n| [`metadata_types`](#graphql-queries-list-metadata_types){: #graphql-queries-list-metadata_types } | `keyword` | `[]` | Type overrides for metadata fields on the read action. |\n| [`show_metadata`](#graphql-queries-list-show_metadata){: #graphql-queries-list-show_metadata } | `list(atom)` |  | The metadata attributes to show. Defaults to all. |\n| [`as_mutation?`](#graphql-queries-list-as_mutation?){: #graphql-queries-list-as_mutation? } | `boolean` | `false` | Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more. |\n| [`relay_id_translations`](#graphql-queries-list-relay_id_translations){: #graphql-queries-list-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |\n| [`hide_inputs`](#graphql-queries-list-hide_inputs){: #graphql-queries-list-hide_inputs } | `list(atom)` | `[]` | A list of inputs to hide from the mutation. |","ref":"dsl-ashgraphql-domain.html#options","title":"Options - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```elixir\naction resource, name, action\n```\n\n\nRuns a generic action","ref":"dsl-ashgraphql-domain.html#graphql-queries-action","title":"graphql.queries.action - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```\naction :check_status, :check_status\n```","ref":"dsl-ashgraphql-domain.html#examples","title":"Examples - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`resource`](#graphql-queries-action-resource){: #graphql-queries-action-resource } | `module` |  | The resource that the action is defined on |\n| [`name`](#graphql-queries-action-name){: #graphql-queries-action-name } | `atom` | `:get` | The name to use for the query. |\n| [`action`](#graphql-queries-action-action){: #graphql-queries-action-action .spark-required} | `atom` |  | The action to use for the query. |","ref":"dsl-ashgraphql-domain.html#arguments","title":"Arguments - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#graphql-queries-action-description){: #graphql-queries-action-description } | `String.t` |  | The description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`hide_inputs`](#graphql-queries-action-hide_inputs){: #graphql-queries-action-hide_inputs } | `list(atom)` | `[]` | Inputs to hide in the mutation/query |\n| [`relay_id_translations`](#graphql-queries-action-relay_id_translations){: #graphql-queries-action-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |","ref":"dsl-ashgraphql-domain.html#options","title":"Options - DSL: AshGraphql.Domain","type":"extras"},{"doc":"Target: `AshGraphql.Resource.Action`","ref":"dsl-ashgraphql-domain.html#introspection","title":"Introspection - DSL: AshGraphql.Domain","type":"extras"},{"doc":"Mutations (create/update/destroy actions) to expose for the resource.","ref":"dsl-ashgraphql-domain.html#graphql-mutations","title":"graphql.mutations - DSL: AshGraphql.Domain","type":"extras"},{"doc":"* [create](#graphql-mutations-create)\n * [update](#graphql-mutations-update)\n * [destroy](#graphql-mutations-destroy)\n * [action](#graphql-mutations-action)","ref":"dsl-ashgraphql-domain.html#nested-dsls","title":"Nested DSLs - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```\nmutations do\n  create :create_post, :create\n  update :update_post, :update\n  destroy :destroy_post, :destroy\nend\n\n```","ref":"dsl-ashgraphql-domain.html#examples","title":"Examples - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```elixir\ncreate resource, name, action\n```\n\n\nA mutation to create a record","ref":"dsl-ashgraphql-domain.html#graphql-mutations-create","title":"graphql.mutations.create - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```\ncreate :create_post, :create\n```","ref":"dsl-ashgraphql-domain.html#examples","title":"Examples - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`resource`](#graphql-mutations-create-resource){: #graphql-mutations-create-resource } | `module` |  | The resource that the action is defined on |\n| [`name`](#graphql-mutations-create-name){: #graphql-mutations-create-name } | `atom` | `:get` | The name to use for the mutation. |\n| [`action`](#graphql-mutations-create-action){: #graphql-mutations-create-action .spark-required} | `atom` |  | The action to use for the mutation. |","ref":"dsl-ashgraphql-domain.html#arguments","title":"Arguments - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#graphql-mutations-create-description){: #graphql-mutations-create-description } | `String.t` |  | The mutation description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`upsert?`](#graphql-mutations-create-upsert?){: #graphql-mutations-create-upsert? } | `boolean` | `false` | Whether or not to use the `upsert?: true` option when calling `YourDomain.create/2`. |\n| [`upsert_identity`](#graphql-mutations-create-upsert_identity){: #graphql-mutations-create-upsert_identity } | `atom` | `false` | Which identity to use for the upsert |\n| [`modify_resolution`](#graphql-mutations-create-modify_resolution){: #graphql-mutations-create-modify_resolution } | `mfa` |  | An MFA that will be called with the resolution, the query, and the result of the action as the first three arguments. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more. |\n| [`hide_inputs`](#graphql-mutations-create-hide_inputs){: #graphql-mutations-create-hide_inputs } | `list(atom)` | `[]` | A list of inputs to hide from the mutation. |\n| [`relay_id_translations`](#graphql-mutations-create-relay_id_translations){: #graphql-mutations-create-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |","ref":"dsl-ashgraphql-domain.html#options","title":"Options - DSL: AshGraphql.Domain","type":"extras"},{"doc":"Target: `AshGraphql.Resource.Mutation`","ref":"dsl-ashgraphql-domain.html#introspection","title":"Introspection - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```elixir\nupdate resource, name, action\n```\n\n\nA mutation to update a record","ref":"dsl-ashgraphql-domain.html#graphql-mutations-update","title":"graphql.mutations.update - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```\nupdate :update_post, :update\n```","ref":"dsl-ashgraphql-domain.html#examples","title":"Examples - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`resource`](#graphql-mutations-update-resource){: #graphql-mutations-update-resource } | `module` |  | The resource that the action is defined on |\n| [`name`](#graphql-mutations-update-name){: #graphql-mutations-update-name } | `atom` | `:get` | The name to use for the mutation. |\n| [`action`](#graphql-mutations-update-action){: #graphql-mutations-update-action .spark-required} | `atom` |  | The action to use for the mutation. |","ref":"dsl-ashgraphql-domain.html#arguments","title":"Arguments - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`identity`](#graphql-mutations-update-identity){: #graphql-mutations-update-identity } | `atom` |  | The identity to use to fetch the record to be updated. Use `false` if no identity is required. |\n| [`read_action`](#graphql-mutations-update-read_action){: #graphql-mutations-update-read_action } | `atom` |  | The read action to use to fetch the record to be updated. Defaults to the primary read action. |\n| [`hide_inputs`](#graphql-mutations-update-hide_inputs){: #graphql-mutations-update-hide_inputs } | `list(atom)` |  | A list of inputs to hide from the mutation. |\n| [`relay_id_translations`](#graphql-mutations-update-relay_id_translations){: #graphql-mutations-update-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |","ref":"dsl-ashgraphql-domain.html#options","title":"Options - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```elixir\ndestroy resource, name, action\n```\n\n\nA mutation to destroy a record","ref":"dsl-ashgraphql-domain.html#graphql-mutations-destroy","title":"graphql.mutations.destroy - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```\ndestroy :destroy_post, :destroy\n```","ref":"dsl-ashgraphql-domain.html#examples","title":"Examples - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`resource`](#graphql-mutations-destroy-resource){: #graphql-mutations-destroy-resource } | `module` |  | The resource that the action is defined on |\n| [`name`](#graphql-mutations-destroy-name){: #graphql-mutations-destroy-name } | `atom` | `:get` | The name to use for the mutation. |\n| [`action`](#graphql-mutations-destroy-action){: #graphql-mutations-destroy-action .spark-required} | `atom` |  | The action to use for the mutation. |","ref":"dsl-ashgraphql-domain.html#arguments","title":"Arguments - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`read_action`](#graphql-mutations-destroy-read_action){: #graphql-mutations-destroy-read_action } | `atom` |  | The read action to use to fetch the record to be destroyed. Defaults to the primary read action. |\n| [`identity`](#graphql-mutations-destroy-identity){: #graphql-mutations-destroy-identity } | `atom` |  | The identity to use to fetch the record to be destroyed. Use `false` if no identity is required. |\n| [`hide_inputs`](#graphql-mutations-destroy-hide_inputs){: #graphql-mutations-destroy-hide_inputs } | `list(atom)` |  | A list of inputs to hide from the mutation. |\n| [`relay_id_translations`](#graphql-mutations-destroy-relay_id_translations){: #graphql-mutations-destroy-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |","ref":"dsl-ashgraphql-domain.html#options","title":"Options - DSL: AshGraphql.Domain","type":"extras"},{"doc":"```elixir\naction resource, name, action\n```\n\n\nRuns a generic action","ref":"dsl-ashgraphql-domain.html#graphql-mutations-action","title":"graphql.mutations.action - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`resource`](#graphql-mutations-action-resource){: #graphql-mutations-action-resource } | `module` |  | The resource that the action is defined on |\n| [`name`](#graphql-mutations-action-name){: #graphql-mutations-action-name } | `atom` | `:get` | The name to use for the query. |\n| [`action`](#graphql-mutations-action-action){: #graphql-mutations-action-action .spark-required} | `atom` |  | The action to use for the query. |","ref":"dsl-ashgraphql-domain.html#arguments","title":"Arguments - DSL: AshGraphql.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#graphql-mutations-action-description){: #graphql-mutations-action-description } | `String.t` |  | The description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`hide_inputs`](#graphql-mutations-action-hide_inputs){: #graphql-mutations-action-hide_inputs } | `list(atom)` | `[]` | Inputs to hide in the mutation/query |\n| [`relay_id_translations`](#graphql-mutations-action-relay_id_translations){: #graphql-mutations-action-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |","ref":"dsl-ashgraphql-domain.html#options","title":"Options - DSL: AshGraphql.Domain","type":"extras"},{"doc":"Target: `AshGraphql.Resource.Action`\n\n\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ashgraphql-domain.html#introspection","title":"Introspection - DSL: AshGraphql.Domain","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: AshGraphql.Resource\n\nThis Ash resource extension adds configuration for exposing a resource in a graphql.","ref":"dsl-ashgraphql-resource.html","title":"DSL: AshGraphql.Resource","type":"extras"},{"doc":"Configuration for a given resource in graphql","ref":"dsl-ashgraphql-resource.html#graphql","title":"graphql - DSL: AshGraphql.Resource","type":"extras"},{"doc":"* [queries](#graphql-queries)\n   * get\n   * read_one\n   * list\n   * action\n * [mutations](#graphql-mutations)\n   * create\n   * update\n   * destroy\n   * action\n * [managed_relationships](#graphql-managed_relationships)\n   * managed_relationship","ref":"dsl-ashgraphql-resource.html#nested-dsls","title":"Nested DSLs - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```\ngraphql do\n  type :post\n\n  queries do\n    get :get_post, :read\n    list :list_posts, :read\n  end\n\n  mutations do\n    create :create_post, :create\n    update :update_post, :update\n    destroy :destroy_post, :destroy\n  end\nend\n\n```","ref":"dsl-ashgraphql-resource.html#examples","title":"Examples - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`type`](#graphql-type){: #graphql-type } | `atom` |  | The type to use for this entity in the graphql schema. If the resource doesn't have a type, it also needs to have `generate_object? false` and can only expose generic action queries. |\n| [`derive_filter?`](#graphql-derive_filter?){: #graphql-derive_filter? } | `boolean` | `true` | Set to false to disable the automatic generation of a filter input for read actions. |\n| [`derive_sort?`](#graphql-derive_sort?){: #graphql-derive_sort? } | `boolean` | `true` | Set to false to disable the automatic generation of a sort input for read actions. |\n| [`encode_primary_key?`](#graphql-encode_primary_key?){: #graphql-encode_primary_key? } | `boolean` | `true` | For resources with composite primary keys, or primary keys not called `:id`, this will cause the id to be encoded as a single `id` attribute, both in the representation of the resource and in get requests |\n| [`relationships`](#graphql-relationships){: #graphql-relationships } | `list(atom)` |  | A list of relationships to include on the created type. Defaults to all public relationships where the destination defines a graphql type. |\n| [`paginate_relationship_with`](#graphql-paginate_relationship_with){: #graphql-paginate_relationship_with } | `keyword` | `[]` | A keyword list indicating which kind of pagination should be used for each `has_many` and `many_to_many` relationships, e.g. `related_things: :keyset, other_related_things: :offset`. Valid pagination values are `nil`, `:offset`, `:keyset` and `:relay`. |\n| [`field_names`](#graphql-field_names){: #graphql-field_names } | `keyword` |  | A keyword list of name overrides for attributes. |\n| [`hide_fields`](#graphql-hide_fields){: #graphql-hide_fields } | `list(atom)` |  | A list of attributes to hide from the domain |\n| [`show_fields`](#graphql-show_fields){: #graphql-show_fields } | `list(atom)` |  | A list of attributes to show in the domain. If not specified includes all (excluding `hide_fiels`). |\n| [`argument_names`](#graphql-argument_names){: #graphql-argument_names } | `keyword` |  | A nested keyword list of action names, to argument name remappings. i.e `create: [arg_name: :new_name]` |\n| [`keyset_field`](#graphql-keyset_field){: #graphql-keyset_field } | `atom` |  | If set, the keyset will be displayed on all read actions in this field.  It will be `nil` unless at least one of the read actions on a resource uses keyset pagination or it is the result of a mutation |\n| [`attribute_types`](#graphql-attribute_types){: #graphql-attribute_types } | `keyword` |  | A keyword list of type overrides for attributes. The type overrides should refer to types available in the graphql (absinthe) schema. `list_of/1` and `non_null/1` helpers can be used. |\n| [`attribute_input_types`](#graphql-attribute_input_types){: #graphql-attribute_input_types } | `keyword` |  | A keyword list of input type overrides for attributes. The type overrides should refer to types available in the graphql (absinthe) schema. `list_of/1` and `non_null/1` helpers can be used. |\n| [`argument_input_types`](#graphql-argument_input_types){: #graphql-argument_input_types } | `keyword` |  | A keyword list of actions and their input type overrides for arguments. The type overrides should refer to types available in the graphql (absinthe) schema. `list_of/1` and `non_null/1` helpers can be used. |\n| [`primary_key_delimiter`](#graphql-primary_key_delimiter){: #graphql-primary_key_delimiter } | `String.t` | `\"~\"` | If a composite primary key exists, this can be set to determine delimiter used in the `id` field value. |\n| [`depth_limit`](#graphql-depth_limit){: #graphql-depth_limit } | `integer` |  | A simple way to prevent massive queries. |\n| [`generate_object?`](#graphql-generate_object?){: #graphql-generate_object? } | `boolean` | `true` | Whether or not to create the GraphQL object, this allows you to manually create the GraphQL object. |\n| [`filterable_fields`](#graphql-filterable_fields){: #graphql-filterable_fields } | `list(atom)` |  | A list of fields that are allowed to be filtered on. Defaults to all filterable fields for which a GraphQL type can be created. |\n| [`nullable_fields`](#graphql-nullable_fields){: #graphql-nullable_fields } | `atom \\| list(atom)` |  | Mark fields as nullable even if they are required. This is useful when using field policies. See the authorization guide for more. |","ref":"dsl-ashgraphql-resource.html#options","title":"Options - DSL: AshGraphql.Resource","type":"extras"},{"doc":"Queries (read actions) to expose for the resource.","ref":"dsl-ashgraphql-resource.html#graphql-queries","title":"graphql.queries - DSL: AshGraphql.Resource","type":"extras"},{"doc":"* [get](#graphql-queries-get)\n * [read_one](#graphql-queries-read_one)\n * [list](#graphql-queries-list)\n * [action](#graphql-queries-action)","ref":"dsl-ashgraphql-resource.html#nested-dsls","title":"Nested DSLs - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```\nqueries do\n  get :get_post, :read\n  read_one :current_user, :current_user\n  list :list_posts, :read\nend\n\n```","ref":"dsl-ashgraphql-resource.html#examples","title":"Examples - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```elixir\nget name, action\n```\n\n\nA query to fetch a record by primary key","ref":"dsl-ashgraphql-resource.html#graphql-queries-get","title":"graphql.queries.get - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```\nget :get_post, :read\n```","ref":"dsl-ashgraphql-resource.html#examples","title":"Examples - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#graphql-queries-get-name){: #graphql-queries-get-name } | `atom` | `:get` | The name to use for the query. |\n| [`action`](#graphql-queries-get-action){: #graphql-queries-get-action .spark-required} | `atom` |  | The action to use for the query. |","ref":"dsl-ashgraphql-resource.html#arguments","title":"Arguments - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`identity`](#graphql-queries-get-identity){: #graphql-queries-get-identity } | `atom` |  | The identity to use for looking up the record. Pass `false` to not use an identity. |\n| [`allow_nil?`](#graphql-queries-get-allow_nil?){: #graphql-queries-get-allow_nil? } | `boolean` | `true` | Whether or not the action can return nil. |\n| [`modify_resolution`](#graphql-queries-get-modify_resolution){: #graphql-queries-get-modify_resolution } | `mfa` |  | An MFA that will be called with the resolution, the query, and the result of the action as the first three arguments. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more. |\n| [`type_name`](#graphql-queries-get-type_name){: #graphql-queries-get-type_name } | `atom` |  | Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key. |\n| [`description`](#graphql-queries-get-description){: #graphql-queries-get-description } | `String.t` |  | The query description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`metadata_names`](#graphql-queries-get-metadata_names){: #graphql-queries-get-metadata_names } | `keyword` | `[]` | Name overrides for metadata fields on the read action. |\n| [`metadata_types`](#graphql-queries-get-metadata_types){: #graphql-queries-get-metadata_types } | `keyword` | `[]` | Type overrides for metadata fields on the read action. |\n| [`show_metadata`](#graphql-queries-get-show_metadata){: #graphql-queries-get-show_metadata } | `list(atom)` |  | The metadata attributes to show. Defaults to all. |\n| [`as_mutation?`](#graphql-queries-get-as_mutation?){: #graphql-queries-get-as_mutation? } | `boolean` | `false` | Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more. |\n| [`relay_id_translations`](#graphql-queries-get-relay_id_translations){: #graphql-queries-get-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |\n| [`hide_inputs`](#graphql-queries-get-hide_inputs){: #graphql-queries-get-hide_inputs } | `list(atom)` | `[]` | A list of inputs to hide from the mutation. |","ref":"dsl-ashgraphql-resource.html#options","title":"Options - DSL: AshGraphql.Resource","type":"extras"},{"doc":"Target: `AshGraphql.Resource.Query`","ref":"dsl-ashgraphql-resource.html#introspection","title":"Introspection - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```elixir\nread_one name, action\n```\n\n\nA query to fetch a record","ref":"dsl-ashgraphql-resource.html#graphql-queries-read_one","title":"graphql.queries.read_one - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```\nread_one :current_user, :current_user\n```","ref":"dsl-ashgraphql-resource.html#examples","title":"Examples - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#graphql-queries-read_one-name){: #graphql-queries-read_one-name } | `atom` | `:get` | The name to use for the query. |\n| [`action`](#graphql-queries-read_one-action){: #graphql-queries-read_one-action .spark-required} | `atom` |  | The action to use for the query. |","ref":"dsl-ashgraphql-resource.html#arguments","title":"Arguments - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`allow_nil?`](#graphql-queries-read_one-allow_nil?){: #graphql-queries-read_one-allow_nil? } | `boolean` | `true` | Whether or not the action can return nil. |\n| [`type_name`](#graphql-queries-read_one-type_name){: #graphql-queries-read_one-type_name } | `atom` |  | Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key. |\n| [`description`](#graphql-queries-read_one-description){: #graphql-queries-read_one-description } | `String.t` |  | The query description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`metadata_names`](#graphql-queries-read_one-metadata_names){: #graphql-queries-read_one-metadata_names } | `keyword` | `[]` | Name overrides for metadata fields on the read action. |\n| [`metadata_types`](#graphql-queries-read_one-metadata_types){: #graphql-queries-read_one-metadata_types } | `keyword` | `[]` | Type overrides for metadata fields on the read action. |\n| [`show_metadata`](#graphql-queries-read_one-show_metadata){: #graphql-queries-read_one-show_metadata } | `list(atom)` |  | The metadata attributes to show. Defaults to all. |\n| [`as_mutation?`](#graphql-queries-read_one-as_mutation?){: #graphql-queries-read_one-as_mutation? } | `boolean` | `false` | Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more. |\n| [`relay_id_translations`](#graphql-queries-read_one-relay_id_translations){: #graphql-queries-read_one-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |\n| [`hide_inputs`](#graphql-queries-read_one-hide_inputs){: #graphql-queries-read_one-hide_inputs } | `list(atom)` | `[]` | A list of inputs to hide from the mutation. |","ref":"dsl-ashgraphql-resource.html#options","title":"Options - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```elixir\nlist name, action\n```\n\n\nA query to fetch a list of records","ref":"dsl-ashgraphql-resource.html#graphql-queries-list","title":"graphql.queries.list - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```\nlist :list_posts, :read\n```\n\n```\nlist :list_posts_paginated, :read, relay?: true\n```","ref":"dsl-ashgraphql-resource.html#examples","title":"Examples - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#graphql-queries-list-name){: #graphql-queries-list-name } | `atom` | `:get` | The name to use for the query. |\n| [`action`](#graphql-queries-list-action){: #graphql-queries-list-action .spark-required} | `atom` |  | The action to use for the query. |","ref":"dsl-ashgraphql-resource.html#arguments","title":"Arguments - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relay?`](#graphql-queries-list-relay?){: #graphql-queries-list-relay? } | `boolean` | `false` | If true, the graphql queries/resolvers for this resource will be built to honor the relay specification. See [the relay guide](/documentation/topics/relay.html) for more. |\n| [`paginate_with`](#graphql-queries-list-paginate_with){: #graphql-queries-list-paginate_with } | `:keyset \\| :offset \\| nil` | `:keyset` | Determine the pagination strategy to use, if multiple are available. If `nil`, no pagination is applied, otherwise the given strategy is used. |\n| [`type_name`](#graphql-queries-list-type_name){: #graphql-queries-list-type_name } | `atom` |  | Override the type name returned by this query. Must be set if the read action has `metadata` that is not hidden via the `show_metadata` key. |\n| [`description`](#graphql-queries-list-description){: #graphql-queries-list-description } | `String.t` |  | The query description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`metadata_names`](#graphql-queries-list-metadata_names){: #graphql-queries-list-metadata_names } | `keyword` | `[]` | Name overrides for metadata fields on the read action. |\n| [`metadata_types`](#graphql-queries-list-metadata_types){: #graphql-queries-list-metadata_types } | `keyword` | `[]` | Type overrides for metadata fields on the read action. |\n| [`show_metadata`](#graphql-queries-list-show_metadata){: #graphql-queries-list-show_metadata } | `list(atom)` |  | The metadata attributes to show. Defaults to all. |\n| [`as_mutation?`](#graphql-queries-list-as_mutation?){: #graphql-queries-list-as_mutation? } | `boolean` | `false` | Places the query in the `mutations` key instead. Not typically necessary, but is often paired with `as_mutation?`. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more. |\n| [`relay_id_translations`](#graphql-queries-list-relay_id_translations){: #graphql-queries-list-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |\n| [`hide_inputs`](#graphql-queries-list-hide_inputs){: #graphql-queries-list-hide_inputs } | `list(atom)` | `[]` | A list of inputs to hide from the mutation. |","ref":"dsl-ashgraphql-resource.html#options","title":"Options - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```elixir\naction name, action\n```\n\n\nRuns a generic action","ref":"dsl-ashgraphql-resource.html#graphql-queries-action","title":"graphql.queries.action - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```\naction :check_status, :check_status\n```","ref":"dsl-ashgraphql-resource.html#examples","title":"Examples - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#graphql-queries-action-name){: #graphql-queries-action-name } | `atom` | `:get` | The name to use for the query. |\n| [`action`](#graphql-queries-action-action){: #graphql-queries-action-action .spark-required} | `atom` |  | The action to use for the query. |","ref":"dsl-ashgraphql-resource.html#arguments","title":"Arguments - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#graphql-queries-action-description){: #graphql-queries-action-description } | `String.t` |  | The description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`hide_inputs`](#graphql-queries-action-hide_inputs){: #graphql-queries-action-hide_inputs } | `list(atom)` | `[]` | Inputs to hide in the mutation/query |\n| [`relay_id_translations`](#graphql-queries-action-relay_id_translations){: #graphql-queries-action-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |","ref":"dsl-ashgraphql-resource.html#options","title":"Options - DSL: AshGraphql.Resource","type":"extras"},{"doc":"Target: `AshGraphql.Resource.Action`","ref":"dsl-ashgraphql-resource.html#introspection","title":"Introspection - DSL: AshGraphql.Resource","type":"extras"},{"doc":"Mutations (create/update/destroy actions) to expose for the resource.","ref":"dsl-ashgraphql-resource.html#graphql-mutations","title":"graphql.mutations - DSL: AshGraphql.Resource","type":"extras"},{"doc":"* [create](#graphql-mutations-create)\n * [update](#graphql-mutations-update)\n * [destroy](#graphql-mutations-destroy)\n * [action](#graphql-mutations-action)","ref":"dsl-ashgraphql-resource.html#nested-dsls","title":"Nested DSLs - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```\nmutations do\n  create :create_post, :create\n  update :update_post, :update\n  destroy :destroy_post, :destroy\nend\n\n```","ref":"dsl-ashgraphql-resource.html#examples","title":"Examples - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```elixir\ncreate name, action\n```\n\n\nA mutation to create a record","ref":"dsl-ashgraphql-resource.html#graphql-mutations-create","title":"graphql.mutations.create - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```\ncreate :create_post, :create\n```","ref":"dsl-ashgraphql-resource.html#examples","title":"Examples - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#graphql-mutations-create-name){: #graphql-mutations-create-name } | `atom` | `:get` | The name to use for the mutation. |\n| [`action`](#graphql-mutations-create-action){: #graphql-mutations-create-action .spark-required} | `atom` |  | The action to use for the mutation. |","ref":"dsl-ashgraphql-resource.html#arguments","title":"Arguments - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#graphql-mutations-create-description){: #graphql-mutations-create-description } | `String.t` |  | The mutation description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`upsert?`](#graphql-mutations-create-upsert?){: #graphql-mutations-create-upsert? } | `boolean` | `false` | Whether or not to use the `upsert?: true` option when calling `YourDomain.create/2`. |\n| [`upsert_identity`](#graphql-mutations-create-upsert_identity){: #graphql-mutations-create-upsert_identity } | `atom` | `false` | Which identity to use for the upsert |\n| [`modify_resolution`](#graphql-mutations-create-modify_resolution){: #graphql-mutations-create-modify_resolution } | `mfa` |  | An MFA that will be called with the resolution, the query, and the result of the action as the first three arguments. See the [the guide](/documentation/topics/modifying-the-resolution.html) for more. |\n| [`hide_inputs`](#graphql-mutations-create-hide_inputs){: #graphql-mutations-create-hide_inputs } | `list(atom)` | `[]` | A list of inputs to hide from the mutation. |\n| [`relay_id_translations`](#graphql-mutations-create-relay_id_translations){: #graphql-mutations-create-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |","ref":"dsl-ashgraphql-resource.html#options","title":"Options - DSL: AshGraphql.Resource","type":"extras"},{"doc":"Target: `AshGraphql.Resource.Mutation`","ref":"dsl-ashgraphql-resource.html#introspection","title":"Introspection - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```elixir\nupdate name, action\n```\n\n\nA mutation to update a record","ref":"dsl-ashgraphql-resource.html#graphql-mutations-update","title":"graphql.mutations.update - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```\nupdate :update_post, :update\n```","ref":"dsl-ashgraphql-resource.html#examples","title":"Examples - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#graphql-mutations-update-name){: #graphql-mutations-update-name } | `atom` | `:get` | The name to use for the mutation. |\n| [`action`](#graphql-mutations-update-action){: #graphql-mutations-update-action .spark-required} | `atom` |  | The action to use for the mutation. |","ref":"dsl-ashgraphql-resource.html#arguments","title":"Arguments - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`identity`](#graphql-mutations-update-identity){: #graphql-mutations-update-identity } | `atom` |  | The identity to use to fetch the record to be updated. Use `false` if no identity is required. |\n| [`read_action`](#graphql-mutations-update-read_action){: #graphql-mutations-update-read_action } | `atom` |  | The read action to use to fetch the record to be updated. Defaults to the primary read action. |\n| [`hide_inputs`](#graphql-mutations-update-hide_inputs){: #graphql-mutations-update-hide_inputs } | `list(atom)` |  | A list of inputs to hide from the mutation. |\n| [`relay_id_translations`](#graphql-mutations-update-relay_id_translations){: #graphql-mutations-update-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |","ref":"dsl-ashgraphql-resource.html#options","title":"Options - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```elixir\ndestroy name, action\n```\n\n\nA mutation to destroy a record","ref":"dsl-ashgraphql-resource.html#graphql-mutations-destroy","title":"graphql.mutations.destroy - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```\ndestroy :destroy_post, :destroy\n```","ref":"dsl-ashgraphql-resource.html#examples","title":"Examples - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#graphql-mutations-destroy-name){: #graphql-mutations-destroy-name } | `atom` | `:get` | The name to use for the mutation. |\n| [`action`](#graphql-mutations-destroy-action){: #graphql-mutations-destroy-action .spark-required} | `atom` |  | The action to use for the mutation. |","ref":"dsl-ashgraphql-resource.html#arguments","title":"Arguments - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`read_action`](#graphql-mutations-destroy-read_action){: #graphql-mutations-destroy-read_action } | `atom` |  | The read action to use to fetch the record to be destroyed. Defaults to the primary read action. |\n| [`identity`](#graphql-mutations-destroy-identity){: #graphql-mutations-destroy-identity } | `atom` |  | The identity to use to fetch the record to be destroyed. Use `false` if no identity is required. |\n| [`hide_inputs`](#graphql-mutations-destroy-hide_inputs){: #graphql-mutations-destroy-hide_inputs } | `list(atom)` |  | A list of inputs to hide from the mutation. |\n| [`relay_id_translations`](#graphql-mutations-destroy-relay_id_translations){: #graphql-mutations-destroy-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |","ref":"dsl-ashgraphql-resource.html#options","title":"Options - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```elixir\naction name, action\n```\n\n\nRuns a generic action","ref":"dsl-ashgraphql-resource.html#graphql-mutations-action","title":"graphql.mutations.action - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#graphql-mutations-action-name){: #graphql-mutations-action-name } | `atom` | `:get` | The name to use for the query. |\n| [`action`](#graphql-mutations-action-action){: #graphql-mutations-action-action .spark-required} | `atom` |  | The action to use for the query. |","ref":"dsl-ashgraphql-resource.html#arguments","title":"Arguments - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#graphql-mutations-action-description){: #graphql-mutations-action-description } | `String.t` |  | The description that gets shown in the Graphql schema. If not provided, the action description will be used. |\n| [`hide_inputs`](#graphql-mutations-action-hide_inputs){: #graphql-mutations-action-hide_inputs } | `list(atom)` | `[]` | Inputs to hide in the mutation/query |\n| [`relay_id_translations`](#graphql-mutations-action-relay_id_translations){: #graphql-mutations-action-relay_id_translations } | `keyword` | `[]` | A keyword list indicating arguments or attributes that have to be translated from global Relay IDs to internal IDs. See the [Relay guide](/documentation/topics/relay.md#translating-relay-global-ids-passed-as-arguments) for more. |","ref":"dsl-ashgraphql-resource.html#options","title":"Options - DSL: AshGraphql.Resource","type":"extras"},{"doc":"Generates input objects for `manage_relationship` arguments on resource actions.","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships","title":"graphql.managed_relationships - DSL: AshGraphql.Resource","type":"extras"},{"doc":"* [managed_relationship](#graphql-managed_relationships-managed_relationship)","ref":"dsl-ashgraphql-resource.html#nested-dsls","title":"Nested DSLs - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```\nmanaged_relationships do\n  manage_relationship :create_post, :comments\nend\n\n```","ref":"dsl-ashgraphql-resource.html#examples","title":"Examples - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`auto?`](#graphql-managed_relationships-auto?){: #graphql-managed_relationships-auto? } | `boolean` | `true` | Automatically derive types for all arguments that have a `manage_relationship` call change. |","ref":"dsl-ashgraphql-resource.html#options","title":"Options - DSL: AshGraphql.Resource","type":"extras"},{"doc":"```elixir\nmanaged_relationship action, argument\n```\n\n\nInstructs ash_graphql that a given argument with a `manage_relationship` change should have its input objects derived automatically from the potential actions to be called.\n\nFor example, given an action like:\n\n```elixir\nactions do\ncreate :create do\nargument :comments, {:array, :map}\n\nchange manage_relationship(:comments, type: :direct_control) # <- we look for this change with a matching argument name\nend\nend\n```\n\nYou could add the following managed_relationship\n\n```elixir\ngraphql do\n...\n\nmanaged_relationships do\nmanaged_relationship :create, :comments\nend\nend\n```\n\nBy default, the `{:array, :map}` would simply be a `json[]` type. If the argument name\nis placed in this list, all of the potential actions that could be called will be combined\ninto a single input object. If there are type conflicts (for example, if the input could create\nor update a record, and the create and update actions have an argument of the same name but with a different type),\na warning is emitted at compile time and the first one is used. If that is insufficient, you will need to do one of the following:\n\n1.) provide the `:types` option to the `managed_relationship` constructor (see that option for more)\n2.) define a custom type, with a custom input object (see the custom types guide), and use that custom type instead of `:map`\n3.) change your actions to not have overlapping inputs with different types\n\nSince managed relationships can ultimately call multiple actions, there is the possibility\nof field type conflicts. Use the `types` option to determine the type of fields and remove the conflict warnings.\n\nFor `non_null` use `{:non_null, type}`, and for a list, use `{:array, type}`, for example:\n\n`{:non_null, {:array, {:non_null, :string}}}` for a non null list of non null strings.\n\nTo *remove* a key from the input object, simply pass `nil` as the type.","ref":"dsl-ashgraphql-resource.html#graphql-managed_relationships-managed_relationship","title":"graphql.managed_relationships.managed_relationship - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`action`](#graphql-managed_relationships-managed_relationship-action){: #graphql-managed_relationships-managed_relationship-action } | `atom` |  | The action that accepts the argument |\n| [`argument`](#graphql-managed_relationships-managed_relationship-argument){: #graphql-managed_relationships-managed_relationship-argument .spark-required} | `atom` |  | The argument for which an input object should be derived. |","ref":"dsl-ashgraphql-resource.html#arguments","title":"Arguments - DSL: AshGraphql.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`lookup_with_primary_key?`](#graphql-managed_relationships-managed_relationship-lookup_with_primary_key?){: #graphql-managed_relationships-managed_relationship-lookup_with_primary_key? } | `boolean` |  | If the managed_relationship has `on_lookup` behavior, this option determines whether or not the primary key is provided in the input object for looking up. |\n| [`lookup_identities`](#graphql-managed_relationships-managed_relationship-lookup_identities){: #graphql-managed_relationships-managed_relationship-lookup_identities } | `list(atom)` |  | Determines which identities are provided in the input object for looking up, if there is `on_lookup` behavior. Defalts to the `use_identities` option. |\n| [`type_name`](#graphql-managed_relationships-managed_relationship-type_name){: #graphql-managed_relationships-managed_relationship-type_name } | `atom` |  | The name of the input object that will be derived. Defaults to ` _ _ _input` |\n| [`types`](#graphql-managed_relationships-managed_relationship-types){: #graphql-managed_relationships-managed_relationship-types } | `any` |  | A keyword list of field names to their graphql type identifiers. |\n| [`ignore?`](#graphql-managed_relationships-managed_relationship-ignore?){: #graphql-managed_relationships-managed_relationship-ignore? } | `boolean` | `false` | Use this to ignore a given managed relationship, preventing `auto? true` from deriving a type for it. |","ref":"dsl-ashgraphql-resource.html#options","title":"Options - DSL: AshGraphql.Resource","type":"extras"},{"doc":"Target: `AshGraphql.Resource.ManagedRelationship`\n\n\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ashgraphql-resource.html#introspection","title":"Introspection - DSL: AshGraphql.Resource","type":"extras"},{"doc":"# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](Https://conventionalcommits.org) for commit guidelines.\n\n<!-- changelog -->\n\n## [v1.3.3](https://github.com/ash-project/ash_graphql/compare/v1.3.2...v1.3.3) (2024-08-26)","ref":"changelog.html","title":"Change Log","type":"extras"},{"doc":"* append new domain to list when extending\n\n## [v1.3.2](https://github.com/ash-project/ash_graphql/compare/v1.3.1...v1.3.2) (2024-08-16)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* match on action in error message properly","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* add schema codegen features & guide\n\n* support new struct types in type generation\n\n* support new struct fields constraint\n\n* Set up GraphQL schema file in the web module namespace (#205)\n\n## [v1.3.1](https://github.com/ash-project/ash_graphql/compare/v1.3.0...v1.3.1) (2024-08-02)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"* use `.has_expression?/0` instead of `function_exported?/3`\n\n* error handling list of atoms (#204)\n\n* error handling list of atoms\r\n\n## [v1.3.0](https://github.com/ash-project/ash_graphql/compare/v1.2.1...v1.3.0) (2024-08-01)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* `Ash.Type.File` compatibility (#202)","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"* try to resolve compilation issues w/ `Code.ensure_compiled!`\n\n## [v1.2.1](https://github.com/ash-project/ash_graphql/compare/v1.2.0...v1.2.1) (2024-07-18)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* upgrade ash dependency for bulk action bug fix\n\n* use checked constraints (#187)\n\n* don't assume `filter` is non-nil for gets\n\n* properly interpolate action in conflict messages\n\n* add resource query to action struct (#178)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* add extension installation code\n\n* add igniter-backed installer\n\n* add `nullable_fields?` for easily marking fields as nullable\n\n* only define `managed_relationship` mutations when necessary\n\n## [v1.2.0](https://github.com/ash-project/ash_graphql/compare/v1.1.1...v1.2.0) (2024-06-17)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"* argument_input_types (#176)\n\n* argument_input_types","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"* better type handling around empty types\n\n* don't generate empty input objects for embeds\n\n## [v1.1.1](https://github.com/ash-project/ash_graphql/compare/v1.1.0...v1.1.1) (2024-06-02)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* relationship pagination (#166)","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"* honor read_action for update/destroy mutations\n\n## [v1.1.0](https://github.com/ash-project/ash_graphql/compare/v1.0.1...v1.1.0) (2024-05-24)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [AshGraphql.Domain] support queries/mutations on the domain\n\n## [v1.0.1](https://github.com/ash-project/ash_graphql/compare/v1.0.0...v1.0.1) (2024-05-23)","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"- allow passing custom descriptions to queries and mutations (#138)","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"- don't deduplicate argument types by argument name (#162)\n\n- use Ash.EmbeddableType.ShadowDomain (#156)\n\n- accepted attributes don't have to be `public?`","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- deduplicate map types across domains (#164)\n\n- Implement AshGraphql.Error for Ash.Error.Query.ReadActionRequiresActor (#154)\n\n- make mutation result errors list non-nullable (#144)\n\n- make mutation result errors list non-nullable\n\n## [v1.0.0](https://github.com/ash-project/ash_graphql/compare/v1.0.0-rc.4...v0.28.0) (2024-04-27)\n\nThe changelog is being restarted. See `/documentation/1.0-CHANGELOG.md` for previous changelogs.","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [AshGraphql.Resource] `managed_relationship` arguments automatically get rich types derived for them\n- [AshGraphql.Type] No longer automagically derive types. Only types defined in `Ash.Type.NewType` that implement `AshGrahql.Type` will get types derived for them.","ref":"changelog.html#breaking-changes","title":"Breaking Changes: - Change Log","type":"extras"},{"doc":"- [AshGraphql.Resolver] Bulk actions are automatically used for create/update/destroy actions. This means far fewer queries made in general.\n- [AshGraphql.Type] add `graphql_define_type?/1` callback for graphql types\n- [AshGrapqhl.Resource] support generic actions with no return type","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"}],"producer":{"name":"ex_doc","version":[48,46,51,49,46,50]}}