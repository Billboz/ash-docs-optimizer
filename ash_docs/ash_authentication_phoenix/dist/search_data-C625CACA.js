searchData={"items":[{"type":"module","title":"AshAuthentication.Phoenix","doc":"Welcome to `AshAuthentication.Pheonix`.\n\nThe `ash_authentication_phoenix` package extends\n[`ash_authentication`](https://github.com/team-alembic/ash_authentication) by\nadding router helpers, plugs and behaviours that makes adding authentication\nto an existing Ash-based Phoenix application dead easy.","ref":"AshAuthentication.Phoenix.html"},{"type":"module","title":"Where to start. - AshAuthentication.Phoenix","doc":"Presuming that you already have [Phoenix](https://phoenixframework.org/),\n[Ash](https://ash-hq.org/) and\n[AshAuthentication](https://github.com/team-alembic/ash_authentication)\ninstalled and configured, start by adding plugs and routes to your router\nusing `AshAuthentication.Phoenix.Router` and customising your sign-in page as\nneeded.\n\n#","ref":"AshAuthentication.Phoenix.html#module-where-to-start"},{"type":"module","title":"Customisation - AshAuthentication.Phoenix","doc":"There are several methods of customisation available depending on the level of\ncontrol you would like:\n\n  1. Use the generic sign-in liveview -\n     `AshAuthentication.Phoenix.SignInLive`.\n  2. Apply overrides using `AshAuthentication.Phoenix.Overrides` to set your\n     own CSS classes for all components.\n  3. Build your own sign-in pages using the pre-defined components.\n  4. Build your own sign-in pages using the generated `auth` routes.","ref":"AshAuthentication.Phoenix.html#module-customisation"},{"type":"behaviour","title":"AshAuthentication.Phoenix.Controller","doc":"The authentication controller generator.\n\nSince authentication often requires explicit HTTP requests to do things like\nset cookies or return Authorization headers, use this module to create an\n`AuthController` in your Phoenix application.","ref":"AshAuthentication.Phoenix.Controller.html"},{"type":"behaviour","title":"Example - AshAuthentication.Phoenix.Controller","doc":"Handling the registration or authentication of a normal web-based user.\n\n```elixir\ndefmodule MyAppWeb.AuthController do\n  use MyAppWeb, :controller\n  use AshAuthentication.Phoenix.Controller\n\n  def success(conn, _activity, user, _token) do\n    conn\n    |> store_in_session(user)\n    |> assign(:current_user, user)\n    |> redirect(to: Routes.page_path(conn, :index))\n  end\n\n  def failure(conn, _activity, _reason) do\n    conn\n    |> put_status(401)\n    |> render(\"failure.html\")\n  end\n\n  def sign_out(conn, _params) do\n    conn\n    |> clear_session()\n    |> render(\"sign_out.html\")\n  end\nend\n```\n\nHandling registration or authentication of an API user.\n\n```elixir\ndefmodule MyAppWeb.ApiAuthController do\n  use MyAppWeb, :controller\n  use AshAuthentication.Phoenix.Controller\n  alias AshAuthentication.TokenRevocation\n\n  def success(conn, _activity, _user, token) do\n    conn\n    |> put_status(200)\n    |> json(%{\n      authentication: %{\n        status: :success,\n        bearer: token}\n    })\n  end\n\n  def failure(conn, _activity, _reason) do\n    conn\n    |> put_status(401)\n    |> json(%{\n      authentication: %{\n        status: :failed\n      }\n    })\n  end\n\n  def sign_out(conn, _params) do\n    conn\n    |> revoke_bearer_tokens()\n    |> json(%{\n      status: :ok\n    })\n  end\nend\n```","ref":"AshAuthentication.Phoenix.Controller.html#module-example"},{"type":"callback","title":"AshAuthentication.Phoenix.Controller.failure/3","doc":"Called when authentication fails.","ref":"AshAuthentication.Phoenix.Controller.html#c:failure/3"},{"type":"callback","title":"AshAuthentication.Phoenix.Controller.sign_out/2","doc":"Called when a request to sign out is received.","ref":"AshAuthentication.Phoenix.Controller.html#c:sign_out/2"},{"type":"callback","title":"AshAuthentication.Phoenix.Controller.success/4","doc":"Called when authentication (or registration, depending on the provider) has been successful.","ref":"AshAuthentication.Phoenix.Controller.html#c:success/4"},{"type":"type","title":"AshAuthentication.Phoenix.Controller.activity/0","doc":"","ref":"AshAuthentication.Phoenix.Controller.html#t:activity/0"},{"type":"type","title":"AshAuthentication.Phoenix.Controller.t/0","doc":"","ref":"AshAuthentication.Phoenix.Controller.html#t:t/0"},{"type":"type","title":"AshAuthentication.Phoenix.Controller.token/0","doc":"","ref":"AshAuthentication.Phoenix.Controller.html#t:token/0"},{"type":"type","title":"AshAuthentication.Phoenix.Controller.user/0","doc":"","ref":"AshAuthentication.Phoenix.Controller.html#t:user/0"},{"type":"module","title":"AshAuthentication.Phoenix.LiveSession","doc":"Ensures that any loaded users which are present in a conn's assigns are also\npresent in a live view socket's assigns.\n\nTypical usage is via the `ash_authentication_live_session/2` macro, but can also\nmanually called like so:\n\n```elixir\nscope \"/\", ExampleWeb do\n  pipe_through(:browser)\n\n  live_session :authenticated, on_mount: LiveSession, session: {LiveSession, :generate_session, []} do\n    live \"/\", ExampleLive\n  end\nend\n```","ref":"AshAuthentication.Phoenix.LiveSession.html"},{"type":"macro","title":"AshAuthentication.Phoenix.LiveSession.ash_authentication_live_session/3","doc":"Generate a live session wherein all subject assigns are copied from the conn\ninto the socket.\n\nOptions:\n  * `:otp_app` - Set the otp app in which to search for authenticated resources.\n\nAll other options are passed through to `live_session`, but with session and on_mount hooks\nadded to set assigns for authenticated resources. Unlike `live_session`, this supports\nmultiple MFAs provided for the `session` option. The produced sessions will be merged.","ref":"AshAuthentication.Phoenix.LiveSession.html#ash_authentication_live_session/3"},{"type":"function","title":"AshAuthentication.Phoenix.LiveSession.generate_session/3","doc":"Supplements the session with any `current_X` assigns which are authenticated\nresource records from the conn.","ref":"AshAuthentication.Phoenix.LiveSession.html#generate_session/3"},{"type":"function","title":"AshAuthentication.Phoenix.LiveSession.on_mount/4","doc":"Inspects the incoming session for any subject_name -> subject values and loads\nthem into the socket's assigns.\n\nFor example a session containing `{\"user\",\n\"user?id=aa6c179c-ee75-4d49-8796-528c2981b396\"}` becomes an assign called\n`current_user` with the loaded user as the value.","ref":"AshAuthentication.Phoenix.LiveSession.html#on_mount/4"},{"type":"module","title":"AshAuthentication.Phoenix.Plug","doc":"Helper plugs mixed in to your router.\n\nWhen you `use AshAuthentication.Phoenix.Router` this module is included, so\nthat you can use these plugs in your pipelines.","ref":"AshAuthentication.Phoenix.Plug.html"},{"type":"function","title":"AshAuthentication.Phoenix.Plug.load_from_bearer/2","doc":"Attempt to retrieve actors from the `Authorization` header(s).\n\nA wrapper around `AshAuthentication.Plug.Helpers.retrieve_from_bearer/2` with\nthe `otp_app` as extracted from the endpoint.","ref":"AshAuthentication.Phoenix.Plug.html#load_from_bearer/2"},{"type":"function","title":"AshAuthentication.Phoenix.Plug.load_from_session/2","doc":"Attempt to retrieve all actors from the connections' session.\n\nA wrapper around `AshAuthentication.Plug.Helpers.retrieve_from_session/2`\nwith the `otp_app` as extracted from the endpoint.","ref":"AshAuthentication.Phoenix.Plug.html#load_from_session/2"},{"type":"function","title":"AshAuthentication.Phoenix.Plug.revoke_bearer_tokens/2","doc":"Revoke all token(s) in the `Authorization` header(s).\n\nA wrapper around `AshAuthentication.Plug.Helpers.revoke_bearer_tokens/2` with\nthe `otp_app` as extracted from the endpoint.","ref":"AshAuthentication.Phoenix.Plug.html#revoke_bearer_tokens/2"},{"type":"function","title":"AshAuthentication.Phoenix.Plug.store_in_session/2","doc":"Store the actor in the connections' session.","ref":"AshAuthentication.Phoenix.Plug.html#store_in_session/2"},{"type":"module","title":"AshAuthentication.Phoenix.Router","doc":"Phoenix route generation for AshAuthentication.\n\nUsing this module imports the macros in this module and the plug functions\nfrom `AshAuthentication.Phoenix.Plug`.","ref":"AshAuthentication.Phoenix.Router.html"},{"type":"module","title":"Usage - AshAuthentication.Phoenix.Router","doc":"Adding authentication to your live-view router is very simple:\n\n```elixir\ndefmodule MyAppWeb.Router do\n  use MyAppWeb, :router\n  use AshAuthentication.Phoenix.Router\n\n  pipeline :browser do\n    # ...\n    plug(:load_from_session)\n  end\n\n  pipeline :api do\n    # ...\n    plug(:load_from_bearer)\n  end\n\n  scope \"/\", MyAppWeb do\n    pipe_through :browser\n    sign_in_route\n    sign_out_route AuthController\n    auth_routes_for MyApp.Accounts.User, to: AuthController\n    reset_route\n  end\n```","ref":"AshAuthentication.Phoenix.Router.html#module-usage"},{"type":"macro","title":"AshAuthentication.Phoenix.Router.auth_routes/3","doc":"Generates the routes needed for the various strategies for a given\nAshAuthentication resource.\n\nThis matches *all* routes at the provided `path`, which defaults to `/auth`. This means that\nif you have any other routes that begin with `/auth`, you will need to make sure this\nappears after them.","ref":"AshAuthentication.Phoenix.Router.html#auth_routes/3"},{"type":"macro","title":"Upgrading from `auth_routes_for/2` - AshAuthentication.Phoenix.Router.auth_routes/3","doc":"If you are using route helpers anywhere in your application, typically looks like `Routes.auth_path/3`\nor `Helpers.auth_path/3` you will need to update them to use verified routes. To see what routes are\navailable to you, use `mix ash_authentication.phoenix.routes`.\n\nIf you are using any of the components provided by `AshAuthenticationPhoenix`, you will need to supply\nthem with the `auth_routes_prefix` assign, set to the `path` you provide here (set to `/auth` by default).","ref":"AshAuthentication.Phoenix.Router.html#auth_routes/3-upgrading-from-auth_routes_for-2"},{"type":"macro","title":"Options - AshAuthentication.Phoenix.Router.auth_routes/3","doc":"* `path` - the path to mount auth routes at. Defaults to `/auth`. If changed, you will also want\n  to change the `auth_routes_prefix` option in `sign_in_route` to match.\n  routes.\n* `not_found_plug` - a plug to call if no route is found. By default, it renders a simple JSON\n  response with a 404 status code.\n* `as` - the alias to use for the generated scope. Defaults to `:auth`.","ref":"AshAuthentication.Phoenix.Router.html#auth_routes/3-options"},{"type":"macro","title":"AshAuthentication.Phoenix.Router.auth_routes_for/2","doc":"Generates the routes needed for the various strategies for a given\nAshAuthentication resource.\n\nThis is required if you wish to use authentication.","ref":"AshAuthentication.Phoenix.Router.html#auth_routes_for/2"},{"type":"macro","title":"Options - AshAuthentication.Phoenix.Router.auth_routes_for/2","doc":"* `to` - a module which implements the\n    `AshAuthentication.Phoenix.Controller` behaviour.  This is required.\n  * `path` - a string (starting with \"/\") wherein to mount the generated\n    routes.\n  * `scope_opts` - any options to pass to the generated scope.","ref":"AshAuthentication.Phoenix.Router.html#auth_routes_for/2-options"},{"type":"macro","title":"Example - AshAuthentication.Phoenix.Router.auth_routes_for/2","doc":"```elixir\nscope \"/\", DevWeb do\n  auth_routes_for(MyApp.Accounts.User,\n    to: AuthController,\n    path: \"/authentication\",\n    scope_opts: [host: \"auth.example.com\"]\n  )\nend\n```","ref":"AshAuthentication.Phoenix.Router.html#auth_routes_for/2-example"},{"type":"macro","title":"AshAuthentication.Phoenix.Router.reset_route/1","doc":"Generates a generic, white-label password reset page using LiveView and the\ncomponents in `AshAuthentication.Phoenix.Components`.\n\nAvailable options are:\n\n  * `path` the path under which to mount the live-view. Defaults to\n    `\"/password-reset\"`.\n  * `live_view` the name of the live view to render. Defaults to\n    `AshAuthentication.Phoenix.ResetLive`.\n  * `as` which is passed to the generated `live` route. Defaults to `:auth`.\n  * `overrides` specify any override modules for customisation.  See\n    `AshAuthentication.Phoenix.Overrides` for more information. all other\n    options are passed to the generated `scope`.\n\nThis is completely optional, in particular, if the `reset_path` option is passed to the\n`sign_in_route` helper, using the `reset_route` helper is redundant.","ref":"AshAuthentication.Phoenix.Router.html#reset_route/1"},{"type":"macro","title":"AshAuthentication.Phoenix.Router.sign_in_route/1","doc":"Generates a generic, white-label sign-in page using LiveView and the\ncomponents in `AshAuthentication.Phoenix.Components`.\n\nThis is completely optional.\n\nAvailable options are:\n\n* `path` the path under which to mount the sign-in live-view. Defaults to `\"/sign-in\"` within the current router scope.\n* `auth_routes_prefix` if set, this will be used instead of route helpers when determining routes.\n  Allows disabling `helpers: true`.\n  If a tuple {:unscoped, path} is provided, the path prefix will not inherit the current route scope.\n* `register_path` - the path under which to mount the password strategy's registration live-view.\n   If not set, and registration is supported, registration will use a dynamic toggle and will not be routeable to.\n   If a tuple {:unscoped, path} is provided, the registration path will not inherit the current route scope.\n* `reset_path` - the path under which to mount the password strategy's password reset live-view.\n  If not set, and password reset is supported, password reset will use a dynamic toggle and will not be routeable to.\n  If a tuple {:unscoped, path} is provided, the reset path will not inherit the current route scope.\n* `live_view` the name of the live view to render. Defaults to\n  `AshAuthentication.Phoenix.SignInLive`.\n* `auth_routes_prefix` the prefix to use for the auth routes. Defaults to `\"/auth\"`.\n* `as` which is used to prefix the generated `live_session` and `live` route name. Defaults to `:auth`.\n* `otp_app` the otp app or apps to find authentication resources in. Pulls from the socket by default.\n* `overrides` specify any override modules for customisation.  See\n  `AshAuthentication.Phoenix.Overrides` for more information.\n\n  all other options are passed to the generated `scope`.","ref":"AshAuthentication.Phoenix.Router.html#sign_in_route/1"},{"type":"macro","title":"AshAuthentication.Phoenix.Router.sign_out_route/3","doc":"Generates a sign-out route which points to the `sign_out` action in your auth\ncontroller.\n\nThis is optional, but you probably want it.","ref":"AshAuthentication.Phoenix.Router.html#sign_out_route/3"},{"type":"type","title":"AshAuthentication.Phoenix.Router.auth_route_options/0","doc":"Options that can be passed to `auth_routes_for`.","ref":"AshAuthentication.Phoenix.Router.html#t:auth_route_options/0"},{"type":"type","title":"AshAuthentication.Phoenix.Router.path_option/0","doc":"A sub-path if required.  Defaults to `/auth`.","ref":"AshAuthentication.Phoenix.Router.html#t:path_option/0"},{"type":"type","title":"AshAuthentication.Phoenix.Router.scope_opts_option/0","doc":"Any options which should be passed to the generated scope.","ref":"AshAuthentication.Phoenix.Router.html#t:scope_opts_option/0"},{"type":"type","title":"AshAuthentication.Phoenix.Router.to_option/0","doc":"The controller which will handle success and failure.","ref":"AshAuthentication.Phoenix.Router.html#t:to_option/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.Apple","doc":"Generates a sign-in button for Apple.","ref":"AshAuthentication.Phoenix.Components.Apple.html"},{"type":"module","title":"Component hierarchy - AshAuthentication.Phoenix.Components.Apple","doc":"This is the top-most strategy-specific component, nested below\n`AshAuthentication.Phoenix.Components.SignIn`.","ref":"AshAuthentication.Phoenix.Components.Apple.html#module-component-hierarchy"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.Apple","doc":"* `strategy` - The strategy configuration as per\n    `AshAuthentication.Info.strategy/2`.  Required.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.Apple.html#module-props"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.Apple","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS classes for the root `div` element.\n  * `:link_class` - CSS classes for the `a` element.\n  * `:icon_class` - CSS classes for the icon SVG.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.Apple.html#module-overrides"},{"type":"function","title":"AshAuthentication.Phoenix.Components.Apple.icon/1","doc":"","ref":"AshAuthentication.Phoenix.Components.Apple.html#icon/1"},{"type":"type","title":"AshAuthentication.Phoenix.Components.Apple.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.Apple.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.Banner","doc":"Renders a very simple banner at the top of the sign-in component.\n\nCan show either an image or some text, depending on the provided overrides.","ref":"AshAuthentication.Phoenix.Components.Banner.html"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.Banner","doc":"* `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.Banner.html#module-props"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.Banner","doc":"This component provides the following overrides:\n\n  * `:text` - Banner text. Set to `nil` to disable.\n  * `:root_class` - CSS class for the root `div` element.\n  * `:href_class` - CSS class for the `a` tag.\n  * `:href_url` - A URL for the banner image to link to. Set to `nil` to disable.\n  * `:image_class` - CSS class for the `img` tag.\n  * `:dark_image_class` - Css class for the `img` tag in dark mode.\n  * `:image_url` - A URL for the `img` `src` attribute. Set to `nil` to disable.\n  * `:dark_image_url` - A URL for the `img` `src` attribute in dark mode. Set to `nil` to disable.\n  * `:text_class` - CSS class for the text `div`.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.Banner.html#module-overrides"},{"type":"type","title":"AshAuthentication.Phoenix.Components.Banner.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.Banner.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.Helpers","doc":"Helpers which are commonly needed inside the various components.","ref":"AshAuthentication.Phoenix.Components.Helpers.html"},{"type":"function","title":"AshAuthentication.Phoenix.Components.Helpers.auth_path/6","doc":"","ref":"AshAuthentication.Phoenix.Components.Helpers.html#auth_path/6"},{"type":"function","title":"AshAuthentication.Phoenix.Components.Helpers.otp_app_from_socket/1","doc":"The LiveView `Socket` contains a reference to the Phoenix endpoint, and from\nthere we can extract the `otp_app` of the current request.\n\nThis is pulled from `assigns[:otp_app]`, or inferred\nfrom the socket if that is not set.","ref":"AshAuthentication.Phoenix.Components.Helpers.html#otp_app_from_socket/1"},{"type":"function","title":"AshAuthentication.Phoenix.Components.Helpers.route_helpers/1","doc":"The LiveView `Socket` contains a refererence to the Phoenix router, and from\nthere we can generate the name of the route helpers module.","ref":"AshAuthentication.Phoenix.Components.Helpers.html#route_helpers/1"},{"type":"module","title":"AshAuthentication.Phoenix.Components.HorizontalRule","doc":"A horizontal rule with text.\n\nThis component is pretty tailwind-specific, but I (@jimsynz) really wanted a\ncertain look.  If you think I'm wrong then please let me know.","ref":"AshAuthentication.Phoenix.Components.HorizontalRule.html"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.HorizontalRule","doc":"This component provides the following overrides:\n\n  * `:text` - Text to display in front of the horizontal rule.\n  * `:root_class` - CSS class for the root `div` element.\n  * `:hr_outer_class` - CSS class for the outer `div` element of the horizontal rule.\n  * `:hr_inner_class` - CSS class for the inner `div` element of the horizontal rule.\n  * `:text_outer_class` - CSS class for the outer `div` element of the text area.\n  * `:text_inner_class` - CSS class for the inner `div` element of the text area.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.HorizontalRule.html#module-overrides"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.HorizontalRule","doc":"* `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.HorizontalRule.html#module-props"},{"type":"type","title":"AshAuthentication.Phoenix.Components.HorizontalRule.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.HorizontalRule.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.MagicLink","doc":"Generates a sign-in for for a resource using the \"Magic link\" strategy.","ref":"AshAuthentication.Phoenix.Components.MagicLink.html"},{"type":"module","title":"Component hierarchy - AshAuthentication.Phoenix.Components.MagicLink","doc":"This is the top-most strategy-specific component, nested below\n`AshAuthentication.Phoenix.Components.SignIn`.\n\nChildren:\n\n  * `AshAuthentication.Phoenix.Components.Password.Input.identity_field/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.submit/1`","ref":"AshAuthentication.Phoenix.Components.MagicLink.html#module-component-hierarchy"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.MagicLink","doc":"* `strategy` - the strategy configuration as per\n    `AshAuthentication.Info.strategy/2`.  Required.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.MagicLink.html#module-props"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.MagicLink","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS class for the root `div` element.\n  * `:label_class` - CSS class for the `h2` element.\n  * `:form_class` - CSS class for the `form` element.\n  * `:disable_button_text` - Text for the submit button when the request is happening.\n  * `:request_flash_text` - Text for the flash message when a request is received.  Set to `nil` to disable.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.MagicLink.html#module-overrides"},{"type":"type","title":"AshAuthentication.Phoenix.Components.MagicLink.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.MagicLink.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.OAuth2","doc":"Generates a sign-in button for OAuth2.","ref":"AshAuthentication.Phoenix.Components.OAuth2.html"},{"type":"module","title":"Component hierarchy - AshAuthentication.Phoenix.Components.OAuth2","doc":"This is the top-most strategy-specific component, nested below\n`AshAuthentication.Phoenix.Components.SignIn`.","ref":"AshAuthentication.Phoenix.Components.OAuth2.html#module-component-hierarchy"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.OAuth2","doc":"* `strategy` - The strategy configuration as per\n    `AshAuthentication.Info.strategy/2`.  Required.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.OAuth2.html#module-props"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.OAuth2","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS classes for the root `div` element.\n  * `:link_class` - CSS classes for the `a` element.\n  * `:icon_class` - CSS classes for the icon SVG.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.OAuth2.html#module-overrides"},{"type":"function","title":"AshAuthentication.Phoenix.Components.OAuth2.icon/1","doc":"","ref":"AshAuthentication.Phoenix.Components.OAuth2.html#icon/1"},{"type":"type","title":"AshAuthentication.Phoenix.Components.OAuth2.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.OAuth2.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.Password","doc":"Generates sign in, registration and reset forms for a resource.","ref":"AshAuthentication.Phoenix.Components.Password.html"},{"type":"module","title":"Component hierarchy - AshAuthentication.Phoenix.Components.Password","doc":"This is the top-most strategy-specific component, nested below\n`AshAuthentication.Phoenix.Components.SignIn`.\n\nChildren:\n\n  * `AshAuthentication.Phoenix.Components.Password.SignInForm`\n  * `AshAuthentication.Phoenix.Components.Password.RegisterForm`\n  * `AshAuthentication.Phoenix.Components.Password.ResetForm`","ref":"AshAuthentication.Phoenix.Components.Password.html#module-component-hierarchy"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.Password","doc":"* `strategy` - The strategy configuration as per\n    `AshAuthentication.Info.strategy/2`.  Required.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.Password.html#module-props"},{"type":"module","title":"Slots - AshAuthentication.Phoenix.Components.Password","doc":"* `sign_in_extra` - rendered inside the sign-in form with the form passed as\n    a slot argument.\n  * `register_extra` - rendered inside the registration form with the form\n    passed as a slot argument.\n  * `reset_extra` - rendered inside the reset form with the form passed as a\n    slot argument.\n  * `path` - used as the base for links to other pages.\n  * `reset_path` - the path to use for reset links.\n  * `register_path` - the path to use for register links.\n\n```heex\n<.live_component\n  module={AshAuthentication.Phoenix.Components.Password}\n  strategy={AshAuthentication.Info.strategy!(Example.User, :password)}\n  id=\"user-with-password\"\n  socket={@socket}\n  overrides={[AshAuthentication.Phoenix.Overrides.Default]}>\n\n  <:sign_in_extra :let={form}>\n    <.input field={form[:capcha]} />\n  </:sign_in_extra>\n\n  <:register_extra :let={form}>\n    <.input field={form[:name]} />\n  </:register_extra>\n\n  <:reset_extra :let={form}>\n    <.input field={form[:capcha]} />\n  </:reset_extra>\n</.live_component>\n```","ref":"AshAuthentication.Phoenix.Components.Password.html#module-slots"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.Password","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS class for the root `div` element.\n  * `:interstitial_class` - CSS class for the `div` element between the form and the button.\n  * `:toggler_class` - CSS class for the toggler `a` element.\n  * `:sign_in_toggle_text` - Toggle text to display when the sign in form is not showing (or `nil` to disable).\n  * `:register_toggle_text` - Toggle text to display when the register form is not showing (or `nil` to disable).\n  * `:reset_toggle_text` - Toggle text to display when the reset form is not showing (or `nil` to disable).\n  * `:show_first` - The form to show on first load.  Either `:sign_in` or `:register`. Only relevant if paths aren't set for them in the router.\n  * `:hide_class` - CSS class to apply to hide an element.\n  * `:slot_class` - CSS class for the `div` surrounding the slot.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.Password.html#module-overrides"},{"type":"type","title":"AshAuthentication.Phoenix.Components.Password.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.Password.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.Password.Input","doc":"Function components for dealing with form input during password\nauthentication.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html"},{"type":"module","title":"Component hierarchy - AshAuthentication.Phoenix.Components.Password.Input","doc":"These function components are consumed by\n`AshAuthentication.Phoenix.Components.Password.SignInForm`,\n`AshAuthentication.Phoenix.Components.Password.RegisterForm` and\n`AshAuthentication.Phoenix.Components.ResetForm`.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#module-component-hierarchy"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.Password.Input","doc":"This component provides the following overrides:\n\n  * `:label_class` - CSS class for `label` elements.\n  * `:field_class` - CSS class for `div` elements surrounding the fields.\n  * `:input_class` - CSS class for text/password `input` elements.\n  * `:identity_input_label` - Label for identity field.\n  * `:password_input_label` - Label for password field.\n  * `:password_confirmation_input_label` - Label for password confirmation field.\n  * `:input_class_with_error` - CSS class for text/password `input` elements when there is a validation error.\n  * `:submit_class` - CSS class for the form submit `input` element.\n  * `:error_ul` - CSS class for the `ul` element on error lists.\n  * `:error_li` - CSS class for the `li` elements on error lists.\n  * `:input_debounce` - Number of milliseconds to debounce input by (or `nil` to disable).\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#module-overrides"},{"type":"function","title":"AshAuthentication.Phoenix.Components.Password.Input.error/1","doc":"Generate a list of errors for a field (if there are any).","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#error/1"},{"type":"function","title":"Props - AshAuthentication.Phoenix.Components.Password.Input.error/1","doc":"* `socket` - Phoenix LiveView socket.  This is needed to be able to retrieve\n    the correct CSS configuration.  Required.\n  * `form` - An `AshPhoenix.Form`.  Required.\n  * `field` - The field for which to retrieve the errors.  Required.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#error/1-props"},{"type":"function","title":"AshAuthentication.Phoenix.Components.Password.Input.identity_field/1","doc":"Generate a form field for the configured identity field.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#identity_field/1"},{"type":"function","title":"Props - AshAuthentication.Phoenix.Components.Password.Input.identity_field/1","doc":"* `socket` - Phoenix LiveView socket.\n    This is needed to be able to retrieve the correct CSS configuration.\n    Required.\n  * `strategy` - The configuration map as per\n    `AshAuthentication.authenticated_resources/1`.\n    Required.\n  * `form` - An `AshPhoenix.Form`.\n    Required.\n  * `input_type` - Either `:text` or `:email`.\n    If not set it will try and guess based on the name of the identity field.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#identity_field/1-props"},{"type":"function","title":"AshAuthentication.Phoenix.Components.Password.Input.password_confirmation_field/1","doc":"Generate a form field for the configured password confirmation entry field.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#password_confirmation_field/1"},{"type":"function","title":"Props - AshAuthentication.Phoenix.Components.Password.Input.password_confirmation_field/1","doc":"* `socket` - Phoenix LiveView socket.  This is needed to be able to retrieve\n    the correct CSS configuration.  Required.\n  * `strategy` - The configuration map as per\n    `AshAuthentication.authenticated_resources/1`.  Required.\n  * `form` - An `AshPhoenix.Form`.  Required.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#password_confirmation_field/1-props"},{"type":"function","title":"AshAuthentication.Phoenix.Components.Password.Input.password_field/1","doc":"Generate a form field for the configured password entry field.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#password_field/1"},{"type":"function","title":"Props - AshAuthentication.Phoenix.Components.Password.Input.password_field/1","doc":"* `socket` - Phoenix LiveView socket.  This is needed to be able to retrieve\n    the correct CSS configuration.  Required.\n  * `strategy` - The configuration map as per\n    `AshAuthentication.authenticated_resources/1`.  Required.\n  * `form` - An `AshPhoenix.Form`.  Required.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#password_field/1-props"},{"type":"function","title":"AshAuthentication.Phoenix.Components.Password.Input.submit/1","doc":"Generate an form submit button.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#submit/1"},{"type":"function","title":"Props - AshAuthentication.Phoenix.Components.Password.Input.submit/1","doc":"* `socket` - Phoenix LiveView socket.  This is needed to be able to retrieve\n    the correct CSS configuration.  Required.\n  * `strategy` - The configuration map as per\n    `AshAuthentication.authenticated_resources/1`.  Required.\n  * `form` - An `AshPhoenix.Form`.  Required.\n  * `action` - Either `:sign_in` or `:register`.  Required.\n  * `label` - The text to show in the submit label.  Generated from the\n    configured action name (via `Phoenix.Naming.humanize/1`) if not supplied.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.Password.Input.html#submit/1-props"},{"type":"module","title":"AshAuthentication.Phoenix.Components.Password.RegisterForm","doc":"Generates a default registration form.","ref":"AshAuthentication.Phoenix.Components.Password.RegisterForm.html"},{"type":"module","title":"Component hierarchy - AshAuthentication.Phoenix.Components.Password.RegisterForm","doc":"This is a child of `AshAuthentication.Phoenix.Components.Password`.\n\nChildren:\n\n  * `AshAuthentication.Phoenix.Components.Password.Input.identity_field/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.password_field/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.password_confirmation_field/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.submit/1`","ref":"AshAuthentication.Phoenix.Components.Password.RegisterForm.html#module-component-hierarchy"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.Password.RegisterForm","doc":"* `strategy` - The strategy configuration as per\n    `AshAuthentication.Info.strategy/2`.  Required.\n  * `socket` - Needed to infer the otp-app from the Phoenix endpoint.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.Password.RegisterForm.html#module-props"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.Password.RegisterForm","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS class for the root `div` element.\n  * `:label_class` - CSS class for the `h2` element.\n  * `:form_class` - CSS class for the `form` element.\n  * `:disable_button_text` - Text for the submit button when the request is happening.\n  * `:slot_class` - CSS class for the `div` surrounding the slot.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.Password.RegisterForm.html#module-overrides"},{"type":"type","title":"AshAuthentication.Phoenix.Components.Password.RegisterForm.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.Password.RegisterForm.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.Password.ResetForm","doc":"Generates a default password reset form.","ref":"AshAuthentication.Phoenix.Components.Password.ResetForm.html"},{"type":"module","title":"Component hierarchy - AshAuthentication.Phoenix.Components.Password.ResetForm","doc":"This is a child of `AshAuthentication.Phoenix.Components.Password`.\n\nChildren:\n\n  * `AshAuthentication.Phoenix.Components.Password.Input.identity_field/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.submit/1`","ref":"AshAuthentication.Phoenix.Components.Password.ResetForm.html#module-component-hierarchy"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.Password.ResetForm","doc":"* `strategy` - The configuration map as per\n    `AshAuthentication.Info.strategy/2`. Required.\n  * `label` - The text to show in the submit label.  Generated from the\n    configured action name (via `Phoenix.Naming.humanize/1`) if not supplied.\n    Set to `false` to disable.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.Password.ResetForm.html#module-props"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.Password.ResetForm","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS class for the root `div` element.\n  * `:label_class` - CSS class for the `h2` element.\n  * `:form_class` - CSS class for the `form` element.\n  * `:disable_button_text` - Text for the submit button when the request is happening.\n  * `:slot_class` - CSS class for the `div` surrounding the slot.\n  * `:reset_flash_text` - Text for the flash message when a request is received.  Set to `nil` to disable.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.Password.ResetForm.html#module-overrides"},{"type":"type","title":"AshAuthentication.Phoenix.Components.Password.ResetForm.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.Password.ResetForm.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.Password.SignInForm","doc":"Generates a default sign in form.","ref":"AshAuthentication.Phoenix.Components.Password.SignInForm.html"},{"type":"module","title":"Component hierarchy - AshAuthentication.Phoenix.Components.Password.SignInForm","doc":"This is a child of `AshAuthentication.Phoenix.Components.Password`.\n\nChildren:\n\n  * `AshAuthentication.Phoenix.Components.Password.Input.identity_field/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.password_field/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.submit/1`","ref":"AshAuthentication.Phoenix.Components.Password.SignInForm.html#module-component-hierarchy"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.Password.SignInForm","doc":"* `strategy` - The configuration map as per\n    `AshAuthentication.Info.strategy/2`. Required.\n  * `label` - The text to show in the submit label. Generated from the\n    configured action name (via `Phoenix.Naming.humanize/1`) if not supplied.\n    Set to `false` to disable.\n  * `overrides` - A list of override modules.","ref":"AshAuthentication.Phoenix.Components.Password.SignInForm.html#module-props"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.Password.SignInForm","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS class for the root `div` element.\n  * `:label_class` - CSS class for the `h2` element.\n  * `:form_class` - CSS class for the `form` element.\n  * `:disable_button_text` - Text for the submit button when the request is happening.\n  * `:slot_class` - CSS class for the `div` surrounding the slot.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.Password.SignInForm.html#module-overrides"},{"type":"type","title":"AshAuthentication.Phoenix.Components.Password.SignInForm.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.Password.SignInForm.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.Reset","doc":"Renders a password-reset form.","ref":"AshAuthentication.Phoenix.Components.Reset.html"},{"type":"module","title":"Component hierarchy - AshAuthentication.Phoenix.Components.Reset","doc":"Children:\n\n  * `AshAuthentication.Phoenix.Components.Password.Input.password_field/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.password_confirmation_field/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.submit/1`","ref":"AshAuthentication.Phoenix.Components.Reset.html#module-component-hierarchy"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.Reset","doc":"* `token` - The reset token.\n  * `overrides` - A list of override modules.\n  * `otp_app` - The otp app to look for authenticated resources in","ref":"AshAuthentication.Phoenix.Components.Reset.html#module-props"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.Reset","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS class for the root `div` element.\n  * `:strategy_class` - CSS class for a `div` surrounding each strategy component.\n  * `:show_banner` - Whether or not to show the banner.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.Reset.html#module-overrides"},{"type":"type","title":"AshAuthentication.Phoenix.Components.Reset.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.Reset.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.Reset.Form","doc":"Generates a default password reset form.","ref":"AshAuthentication.Phoenix.Components.Reset.Form.html"},{"type":"module","title":"Component hierarchy - AshAuthentication.Phoenix.Components.Reset.Form","doc":"This is a child of `AshAuthentication.Phoenix.Components.Reset`.\n\nChildren:\n\n  * `AshAuthentication.Phoenix.Components.Password.Input.identity_field/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.password_field/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.submit/1`\n  * `AshAuthentication.Phoenix.Components.Password.Input.error/1`","ref":"AshAuthentication.Phoenix.Components.Reset.Form.html#module-component-hierarchy"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.Reset.Form","doc":"* `token` - The reset token.\n  * `socket` - Phoenix LiveView socket.  This is needed to be able to retrieve\n    the correct CSS configuration. Required.\n  * `strategy` - The configuration map as per\n    `AshAuthentication.Info.strategy/2`. Required.\n  * `label` - The text to show in the submit label. Generated from the\n    configured action name (via `Phoenix.Naming.humanize/1`) if not\n    supplied. Set to `false` to disable.","ref":"AshAuthentication.Phoenix.Components.Reset.Form.html#module-props"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.Reset.Form","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS class for the root `div` element.\n  * `:label_class` - CSS class for the `h2` element.\n  * `:form_class` - CSS class for the `form` element.\n  * `:spacer_class` - CSS classes for space between the password input and submit elements.\n  * `:disable_button_text` - Text for the submit button when the request is happening.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.Reset.Form.html#module-overrides"},{"type":"type","title":"AshAuthentication.Phoenix.Components.Reset.Form.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.Reset.Form.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Components.SignIn","doc":"Renders sign in mark-up for an authenticated resource.\n\nThis means that it will render sign-in UI for all of the authentication\nstrategies for a resource.\n\nFor each strategy configured on the resource a component name is inferred\n(e.g. `AshAuthentication.Strategy.Password` becomes\n`AshAuthentication.Phoenix.Components.Password`) and is rendered into the\noutput.","ref":"AshAuthentication.Phoenix.Components.SignIn.html"},{"type":"module","title":"Component hierarchy - AshAuthentication.Phoenix.Components.SignIn","doc":"This is the top-most authentication component.\n\nChildren:\n\n  * `AshAuthentication.Phoenix.Components.Password`.\n  * `AshAuthentication.Phoenix.Components.OAuth2`.","ref":"AshAuthentication.Phoenix.Components.SignIn.html#module-component-hierarchy"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.Components.SignIn","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS class for the root `div` element.\n  * `:strategy_class` - CSS class for a `div` surrounding each strategy component.\n  * `:show_banner` - Whether or not to show the banner.\n  * `:authentication_error_container_class` - CSS class for the container for the text of the authentication error.\n  * `:authentication_error_text_class` - CSS class for the authentication error text.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.Components.SignIn.html#module-overrides"},{"type":"module","title":"Props - AshAuthentication.Phoenix.Components.SignIn","doc":"* `overrides` - A list of override modules.\n  * `otp_app` - The otp app to look for authenticated resources in\n  * `live_action` - The live_action being routed to\n  * `path` - The path to use as the base for links\n  * `reset_path` - The path to use for reset links\n  * `register_path` - The path to use for register links","ref":"AshAuthentication.Phoenix.Components.SignIn.html#module-props"},{"type":"type","title":"AshAuthentication.Phoenix.Components.SignIn.props/0","doc":"","ref":"AshAuthentication.Phoenix.Components.SignIn.html#t:props/0"},{"type":"module","title":"AshAuthentication.Phoenix.Overrides","doc":"Behaviour for overriding component styles and attributes in your application.\n\nThe default implementation is `AshAuthentication.Phoenix.Overrides.Default`\nwhich uses [TailwindCSS](https://tailwindcss.com/) to generate a fairly\ngeneric looking user interface.\n\nYou can override this by adding your own override modules to the\n`AshAuthentication.Phoenix.Router.sign_in_route/1` macro in your router:\n\n```elixir\nsign_in_route overrides: [MyAppWeb.AuthOverrides, AshAuthentication.Phoenix.Overrides.Default]\n```\n\nand defining `lib/my_app_web/auth_overrides.ex` within which you can set any\noverrides.\n\nThe `use` macro defines overridable versions of all callbacks which return\n`nil`, so you only need to define the functions that you care about.\n\nEach of the override modules specified in the config will be called in the\norder that they're specified, so you can still use the defaults if you just\noverride some properties.\n\n```elixir\ndefmodule MyAppWeb.AuthOverrides do\n  use AshAuthentication.Phoenix.Overrides\n  alias AshAuthentication.Phoenix.Components\n\n  override Components.Banner do\n    set :image_url, \"/images/sign_in_logo.png\"\n  end\nend\n```","ref":"AshAuthentication.Phoenix.Overrides.html"},{"type":"macro","title":"AshAuthentication.Phoenix.Overrides.override/2","doc":"Define overrides for a specific component.","ref":"AshAuthentication.Phoenix.Overrides.html#override/2"},{"type":"macro","title":"AshAuthentication.Phoenix.Overrides.set/2","doc":"Override a setting within a component.","ref":"AshAuthentication.Phoenix.Overrides.html#set/2"},{"type":"module","title":"AshAuthentication.Phoenix.Overrides.Default","doc":"This is the default overrides for our component UI.\n\nThe CSS styles are based on [TailwindCSS](https://tailwindcss.com/).","ref":"AshAuthentication.Phoenix.Overrides.Default.html"},{"type":"function","title":"AshAuthentication.Phoenix.Overrides.Default.overrides/0","doc":"","ref":"AshAuthentication.Phoenix.Overrides.Default.html#overrides/0"},{"type":"module","title":"AshAuthentication.Phoenix.Overrides.Info","doc":"Override introspection.","ref":"AshAuthentication.Phoenix.Overrides.Info.html"},{"type":"function","title":"AshAuthentication.Phoenix.Overrides.Info.all_overridable_modules/0","doc":"Returns a map of all known overridable modules and their overrides.","ref":"AshAuthentication.Phoenix.Overrides.Info.html#all_overridable_modules/0"},{"type":"behaviour","title":"AshAuthentication.Phoenix.Overrides.Overridable","doc":"Auto generates documentation and helpers for components.","ref":"AshAuthentication.Phoenix.Overrides.Overridable.html"},{"type":"callback","title":"AshAuthentication.Phoenix.Overrides.Overridable.__overrides__/0","doc":"","ref":"AshAuthentication.Phoenix.Overrides.Overridable.html#c:__overrides__/0"},{"type":"macro","title":"AshAuthentication.Phoenix.Overrides.Overridable.override_for/3","doc":"Retrieve configuration for a potentially overriden value.","ref":"AshAuthentication.Phoenix.Overrides.Overridable.html#override_for/3"},{"type":"module","title":"AshAuthentication.Phoenix.ResetLive","doc":"A generic, white-label password reset page.\n\nThis live-view can be rendered into your app using the\n`AshAuthentication.Phoenix.Router.reset_route/1` macro in your router (or by\nusing `Phoenix.LiveView.Controller.live_render/3` directly in your markup).\n\nThis live-view looks for the `token` URL parameter, and if found passes it to\n`AshAuthentication.Phoenix.Components.Reset`.","ref":"AshAuthentication.Phoenix.ResetLive.html"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.ResetLive","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS class for the root `div` element.\n  * `:reset_id` - Element ID for the `Reset` LiveComponent.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.ResetLive.html#module-overrides"},{"type":"module","title":"AshAuthentication.Phoenix.SignInLive","doc":"A generic, white-label sign-in page.\n\nThis live-view can be rendered into your app using the\n`AshAuthentication.Phoenix.Router.sign_in_route/1` macro in your router (or by\nusing `Phoenix.LiveView.Controller.live_render/3` directly in your markup).\n\nThis live-view finds all Ash resources with an authentication configuration\n(via `AshAuthentication.authenticated_resources/1`) and renders the\nappropriate UI for their providers using\n`AshAuthentication.Phoenix.Components.SignIn`.","ref":"AshAuthentication.Phoenix.SignInLive.html"},{"type":"module","title":"Overrides - AshAuthentication.Phoenix.SignInLive","doc":"This component provides the following overrides:\n\n  * `:root_class` - CSS class for the root `div` element.\n  * `:sign_in_id` - Element ID for the `SignIn` LiveComponent.\n\n\nSee `AshAuthentication.Phoenix.Overrides` for more information.","ref":"AshAuthentication.Phoenix.SignInLive.html#module-overrides"},{"type":"module","title":"AshAuthentication.Phoenix.Utils.Flash","doc":"Utility functions for sending and receiving flash messages.","ref":"AshAuthentication.Phoenix.Utils.Flash.html"},{"type":"function","title":"AshAuthentication.Phoenix.Utils.Flash.on_mount/4","doc":"Attach a hook to receive flash messages sent from components, for rendering in\nthe top-level liveview.","ref":"AshAuthentication.Phoenix.Utils.Flash.html#on_mount/4"},{"type":"function","title":"AshAuthentication.Phoenix.Utils.Flash.put_flash!/3","doc":"Send flash messages from components, to be rendered in their parent liveview.","ref":"AshAuthentication.Phoenix.Utils.Flash.html#put_flash!/3"},{"type":"extras","title":"README","doc":"![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-black-text.png?raw=true#gh-light-mode-only)\n![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-white-text.png?raw=true#gh-dark-mode-only)\n\n![Elixir CI](https://github.com/team-alembic/ash_authentication_phoenix/workflows/Elixir%20Library/badge.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Hex version badge](https://img.shields.io/hexpm/v/ash_authentication_phoenix.svg)](https://hex.pm/packages/ash_authentication_phoenix)\n[![Hexdocs badge](https://img.shields.io/badge/docs-hexdocs-purple)](https://hexdocs.pm/ash_authentication_phoenix)\n\n# Ash Authentication Phoenix\n\nWelcome! Here you will find everything you need to know to get started with Ash Authentication and Phoenix. This documentation is best viewed on [hexdocs](https://hexdocs.pm/ash_authentication_phoenix)","ref":"readme.html"},{"type":"extras","title":"About the Documentation - README","doc":"[**Tutorials**](#tutorials) walk you through a series of steps to accomplish a goal. These are **learning-oriented**, and are a great place for beginners to start.\n\n---\n\n[**Topics**](#topics) provide a high level overview of a specific concept or feature. These are **understanding-oriented**, and are perfect for discovering design patterns, features, and tools related to a given topic.\n\n---\n\n[**How-to**](#how-to) guides are **goal-oriented** recipes for accomplishing specific tasks. These are also good to browse to get an idea of how Ash Authentication works and what is possible with it.\n\n---\n\n[**Reference**](#reference) documentation is produced automatically from our source code. It comes in the form of module documentation and DSL documentation. This documentation is **information-oriented**. Use the sidebar and the search bar to find relevant reference information.","ref":"readme.html#about-the-documentation"},{"type":"extras","title":"Tutorials - README","doc":"- [Get Started](documentation/tutorials/get-started.md)\n- [Using with LiveView](documentation/tutorials/liveview.md)\n- [Overriding UI](documentation/tutorials/ui-overrides.md)","ref":"readme.html#tutorials"},{"type":"extras","title":"Related packages - README","doc":"- [Ash Framework](https://hexdocs.pm/ash)\n- [Ash Authentication](https://hexdocs.pm/ash_authentication)\n\n---\n\n[![Alembic](logos/alembic.png)](https://alembic.com.au)\n\nProudly written and maintained by the team at [Alembic](https://alembic.com.au) for the Ash community.","ref":"readme.html#related-packages"},{"type":"extras","title":"Getting Started Ash Authentication Phoenix","doc":"# Getting Started Ash Authentication Phoenix\n\nIn this step-by-step tutorial we create a new empty `Example` Phoenix + Ash application which provides the functionality for authentication. For beginners it is the best to follow the tutorial in the given order. For more advanced users it is a good reference to pick and choose from.\n\nWe assumes that you have [Elixir](https://elixir-lang.org) version 1.14.x (check with `elixir -v`) and Phoenix 1.7 (check with `mix phx.new --version`) installed. We also assume that you have a [PostgreSQL](https://www.postgresql.org) database running which we use to persist the user data.","ref":"get-started.html"},{"type":"extras","title":"Green Field Phoenix Application - Getting Started Ash Authentication Phoenix","doc":"We start with a new Phoenix application:\n\n```bash\n$ mix phx.new example\n$ cd example\n```","ref":"get-started.html#green-field-phoenix-application"},{"type":"extras","title":"Basic Ash Setup - Getting Started Ash Authentication Phoenix","doc":"#","ref":"get-started.html#basic-ash-setup"},{"type":"extras","title":"Application Dependencies - Getting Started Ash Authentication Phoenix","doc":"We need to add the following dependencies. Use `mix hex.info dependency_name` to get the latest version of each dependency.\n\n**mix.exs**\n\n```elixir\ndefmodule Example.MixProject do\n  use Mix.Project\n  # ...\n\n    defp deps do\n    [\n      # ...\n      # add these lines -->\n      {:ash, \"~> x.x\"},\n      {:ash_authentication, \"~> x.x\"},\n      {:ash_authentication_phoenix, \"~> x.x\"},\n      {:ash_postgres, \"~> x.x\"},\n      {:picosat_elixir, \"~> x.x\"}\n      # <-- add these lines\n    ]\n  end\n  # ...\n```\n\nLet's fetch everything:\n\n```bash\n$ mix deps.get\n```\n\n> #","ref":"get-started.html#application-dependencies"},{"type":"extras","title":"Picosat installation issues? {: .info} - Getting Started Ash Authentication Phoenix","doc":">\n> If you have trouble compiling `picosat_elixir`, then replace `{:picosat_elixir, \"~> x.x\"}` with `{:simple_sat, \"~> x.x\"}` to use a simpler (but mildly slower) solver. You can always switch back to `picosat_elixir` later once you're done with the tutorial.\n\n#","ref":"get-started.html#picosat-installation-issues-info"},{"type":"extras","title":"Formatter - Getting Started Ash Authentication Phoenix","doc":"We can make our life easier and the code more consistent by adding formatters to the project. We will use [Elixir's built-in formatter](https://hexdocs.pm/mix/Mix.Tasks.Format.html) for this.\n\n**.formatter.exs**\n\n```elixir\n[\n  import_deps: [\n    :phoenix,\n    # add these lines -->\n    :ash,\n    :ash_authentication,\n    :ash_authentication_phoenix,\n    :ash_postgres\n    # <-- add these lines\n    ],\n  plugins: [Phoenix.LiveView.HTMLFormatter],\n  inputs: [\"*.{heex,ex,exs}\", \"{config,lib,test}/**/*.{heex,ex,exs}\"]\n]\n```\n\n#","ref":"get-started.html#formatter"},{"type":"extras","title":"Tailwind - Getting Started Ash Authentication Phoenix","doc":"If you plan on using our default [Tailwind](https://tailwindcss.com/)-based\ncomponents without overriding them you will need to modify your\n`assets/tailwind.config.js` to include the `ash_authentication_phoenix`\ndependency:\n\n**assets/tailwind.config.js**\n\n```javascript\n// See the Tailwind configuration guide for advanced usage\n// https://tailwindcss.com/docs/configuration\n\nconst plugin = require(\"tailwindcss/plugin\");\n\nmodule.exports = {\n  content: [\n    \"./js/**/*.js\",\n    \"../lib/*_web.ex\",\n    \"../lib/*_web/**/*.*ex\",\n    \"../deps/ash_authentication_phoenix/**/*.*ex\", // <-- Add this line\n  ],\n  theme: {\n    extend: {\n      colors: {\n        brand: \"#FD4F00\",\n      },\n    },\n  },\n  plugins: [\n    require(\"@tailwindcss/forms\"),\n    plugin(({ addVariant }) =>\n      addVariant(\"phx-no-feedback\", [\n        \".phx-no-feedback&\",\n        \".phx-no-feedback &\",\n      ]),\n    ),\n    plugin(({ addVariant }) =>\n      addVariant(\"phx-click-loading\", [\n        \".phx-click-loading&\",\n        \".phx-click-loading &\",\n      ]),\n    ),\n    plugin(({ addVariant }) =>\n      addVariant(\"phx-submit-loading\", [\n        \".phx-submit-loading&\",\n        \".phx-submit-loading &\",\n      ]),\n    ),\n    plugin(({ addVariant }) =>\n      addVariant(\"phx-change-loading\", [\n        \".phx-change-loading&\",\n        \".phx-change-loading &\",\n      ]),\n    ),\n  ],\n};\n```","ref":"get-started.html#tailwind"},{"type":"extras","title":"AshPostgres.Repo Setup - Getting Started Ash Authentication Phoenix","doc":"We use [AshPostgres](https://hexdocs.pm/ash_postgres/AshPostgres.html) to handle the database tables for our application. We need to replace the content of the `Repo` module with the following code:\n\n**lib/example/repo.ex**\n\n```elixir\ndefmodule Example.Repo do\n  use AshPostgres.Repo, otp_app: :example\n\n  def installed_extensions do\n    [\"uuid-ossp\", \"citext\", \"ash-functions\"]\n  end\nend\n```\n\nWe have to configure the Repo in `config/config.exs`. While doing that we also configure other stuff which we need later.\n\n**config/config.exs**\n\n```elixir\n# ...\n\nimport Config\n\n# add these lines -->\nconfig :example,\n  ash_domains: [Example.Accounts]\n# ...\n```\n\nWe need to add `AshAuthentication.Supervisor` to the supervision tree in `lib/example/application.ex`:\n\n`** lib/example/application.ex **`\n\n```elixir\ndefmodule Example.Application do\n  # ...\n\n  @impl true\n  def start(_type, _args) do\n    children = [\n      # ...\n      # add this line -->\n      {AshAuthentication.Supervisor, otp_app: :example}\n      # <-- add this line\n    ]\n  # ...\n```","ref":"get-started.html#ashpostgres-repo-setup"},{"type":"extras","title":"Accounts Domain and Resources - Getting Started Ash Authentication Phoenix","doc":"We need to create an `Accounts` domain in our application to provide a `User` and a `Token` resource. Strictly speaking we don't need the `Token` resource for just the login with a password. But we'll need it later (e.g. for the password reset) so we just create it now while we are here.\n\nAlthough we are using User in the example, you can name your resource anything you need, for instance Admin.\nThe `current_*` assign will be inferred from it. User will make `current_user` available, Admin will make `current_admin` available.\n\nAt the end we should have the following directory structure:\n\n```bash\nlib/example\n├── accounts\n|   ├── accounts.ex\n|   ├── secrets.ex\n│   ├── token.ex\n|   └── user.ex\n...\n```\n\n**lib/example/accounts/user.ex**\n\n```elixir\ndefmodule Example.Accounts.User do\n  use Ash.Resource,\n    domain: Example.Accounts,\n    data_layer: AshPostgres.DataLayer,\n    # If using policies, enable the policy authorizer:\n    # authorizers: [Ash.Policy.Authorizer],\n    extensions: [AshAuthentication]\n\n  attributes do\n    uuid_primary_key :id\n\n    attribute :email, :ci_string do\n      allow_nil? false\n      public? true\n    end\n\n    attribute :hashed_password, :string, allow_nil?: false, sensitive?: true\n  end\n\n  authentication do\n    strategies do\n      password :password do\n        identity_field :email\n      end\n    end\n\n    tokens do\n      enabled? true\n      token_resource Example.Accounts.Token\n      signing_secret Example.Accounts.Secrets\n    end\n  end\n\n  postgres do\n    table \"users\"\n    repo Example.Repo\n  end\n\n  identities do\n    identity :unique_email, [:email]\n  end\n\n  # If using policies, add the following bypass:\n  # policies do\n  #   bypass AshAuthentication.Checks.AshAuthenticationInteraction do\n  #     authorize_if always()\n  #   end\n  # end\nend\n```\n\n**lib/example/accounts/secrets.ex**\n\n```elixir\ndefmodule Example.Accounts.Secrets do\n  use AshAuthentication.Secret\n\n\n  def secret_for([:authentication, :tokens, :signing_secret], Example.Accounts.User, _) do\n    case Application.fetch_env(:example, ExampleWeb.Endpoint) do\n      {:ok, endpoint_config} ->\n        Keyword.fetch(endpoint_config, :secret_key_base)\n      :error ->\n        :error\n    end\n  end\nend\n```\n\n**lib/example/accounts/token.ex**\n\n```elixir\ndefmodule Example.Accounts.Token do\n  use Ash.Resource,\n    domain: Example.Accounts,\n    data_layer: AshPostgres.DataLayer,\n    # If using policies, enable the policy authorizer:\n    # authorizers: [Ash.Policy.Authorizer],\n    extensions: [AshAuthentication.TokenResource]\n\n  postgres do\n    table \"tokens\"\n    repo Example.Repo\n  end\n\n  # If using policies, add the following bypass:\n  # policies do\n  #   bypass AshAuthentication.Checks.AshAuthenticationInteraction do\n  #     authorize_if always()\n  #   end\n  # end\nend\n```\n\n**lib/example/accounts/accounts.ex**\n\n```elixir\ndefmodule Example.Accounts do\n  use Ash.Domain\n\n  resources do\n    resource Example.Accounts.User\n    resource Example.Accounts.Token\n  end\nend\n```\n\n#","ref":"get-started.html#accounts-domain-and-resources"},{"type":"extras","title":"Add to config - Getting Started Ash Authentication Phoenix","doc":"Although mentioned in a step at the top, a common mistake here is not to add the new domain into your `ash_domains` config in `config/config.exs`. It should look like this:\n\n```elixir\nconfig :example,\n  ash_domains: [..., Example.Accounts]\n```\n\n#","ref":"get-started.html#add-to-config"},{"type":"extras","title":"Create and Migration - Getting Started Ash Authentication Phoenix","doc":"Now is a good time to create the database and run the migrations. You have to use specific `ash_postgres` mix tasks for that:\n\n```bash\n$ mix ash_postgres.create\n$ mix ash_postgres.generate_migrations --name add_user_and_token\n$ mix ash_postgres.migrate\n```\n\n> In case you want to drop the database and start over again during development you can use `mix ash_postgres.drop` followed by `mix ash_postgres.create` and `mix ash_postgres.migrate`.","ref":"get-started.html#create-and-migration"},{"type":"extras","title":"Router Setup - Getting Started Ash Authentication Phoenix","doc":"`ash_authentication_phoenix` includes several helper macros which can generate\nPhoenix routes for you. For that you need to add 6 lines in the router module or just replace the whole file with the following code:\n\n**lib/example_web/router.ex**\n\n```elixir\ndefmodule ExampleWeb.Router do\n  use ExampleWeb, :router\n  # Add this line\n  use AshAuthentication.Phoenix.Router\n\n  pipeline :browser do\n    plug :accepts, [\"html\"]\n    plug :fetch_session\n    plug :fetch_live_flash\n    plug :put_root_layout, {ExampleWeb.Layouts, :root}\n    plug :protect_from_forgery\n    plug :put_secure_browser_headers\n    # Add the next line\n    plug :load_from_session\n  end\n\n  pipeline :api do\n    plug :accepts, [\"json\"]\n    # Add the next line\n    plug :load_from_bearer\n  end\n\n  scope \"/\", ExampleWeb do\n    pipe_through :browser\n\n    get \"/\", PageController, :home\n\n    # add these lines -->\n\n    # Standard controller-backed routes\n    auth_routes AuthController, Example.Accounts.User, path: \"/auth\"\n    sign_out_route AuthController\n\n    # Prebuilt LiveViews for signing in, registration, resetting, etc.\n    # Leave out `register_path` and `reset_path` if you don't want to support\n    # user registration and/or password resets respectively.\n    sign_in_route(register_path: \"/register\", reset_path: \"/reset\", auth_routes_prefix: \"/auth\")\n    reset_route []\n\n    # <-- add these lines\n  end\n\n  # Other scopes may use custom stacks.\n  # scope \"/api\", ExampleWeb do\n  #   pipe_through :api\n  # end\n\n  # Enable LiveDashboard and Swoosh mailbox preview in development\n  if Application.compile_env(:example, :dev_routes) do\n    # If you want to use the LiveDashboard in production, you should put\n    # it behind authentication and allow only admins to access it.\n    # If your application does not have an admins-only section yet,\n    # you can use Plug.BasicAuth to set up some basic authentication\n    # as long as you are also using SSL (which you should anyway).\n    import Phoenix.LiveDashboard.Router\n\n    scope \"/dev\" do\n      pipe_through :browser\n\n      live_dashboard \"/dashboard\", metrics: ExampleWeb.Telemetry\n      forward \"/mailbox\", Plug.Swoosh.MailboxPreview\n    end\n  end\nend\n```\n\n#","ref":"get-started.html#router-setup"},{"type":"extras","title":"Generated routes - Getting Started Ash Authentication Phoenix","doc":"Given the above configuration you should see the following in your routes:\n\n```\n# mix phx.routes\n\nGenerated example app\n          auth_path  GET  /sign-in                               AshAuthentication.Phoenix.SignInLive :sign_in\n          auth_path  GET  /sign-out                              ExampleWeb.AuthController :sign_out\n          auth_path  *    /auth/user/password/register           ExampleWeb.AuthController {:user, :password, :register}\n          auth_path  *    /auth/user/password/sign_in            ExampleWeb.AuthController {:user, :password, :sign_in}\n          page_path  GET  /                                      ExampleWeb.PageController :home\n...\n```\n\n#","ref":"get-started.html#generated-routes"},{"type":"extras","title":"Customizing the generated routes - Getting Started Ash Authentication Phoenix","doc":"If you're integrating AshAuthentication into an existing app, you probably already have existing HTML layouts you want to use, to wrap the provided sign in/forgot password/etc. forms.\n\nLiveviews provided by AshAuthentication.Phoenix will use the same root layout configured in your router's `:browser` pipeline, but it includes its own layout file primarily for rendering flash messages.\n\nIf you would like to use your own layout file instead, you can specify this as an option to the route helpers, eg.\n\n```elixir\nreset_route(layout: {MyAppWeb, :live})\n```","ref":"get-started.html#customizing-the-generated-routes"},{"type":"extras","title":"AuthController - Getting Started Ash Authentication Phoenix","doc":"While running `mix phx.routes` you probably saw the warning message that the `ExampleWeb.AuthController.init/1 is undefined`. Let's fix that by creating a new controller:\n\n**lib/example_web/controllers/auth_controller.ex**\n\n```elixir\ndefmodule ExampleWeb.AuthController do\n  use ExampleWeb, :controller\n  use AshAuthentication.Phoenix.Controller\n\n  def success(conn, _activity, user, _token) do\n    return_to = get_session(conn, :return_to) || ~p\"/\"\n\n    conn\n    |> delete_session(:return_to)\n    |> store_in_session(user)\n    # If your resource has a different name, update the assign name here (i.e :current_admin)\n    |> assign(:current_user, user)\n    |> redirect(to: return_to)\n  end\n\n  def failure(conn, _activity, _reason) do\n    conn\n    |> put_flash(:error, \"Incorrect email or password\")\n    |> redirect(to: ~p\"/sign-in\")\n  end\n\n  def sign_out(conn, _params) do\n    return_to = get_session(conn, :return_to) || ~p\"/\"\n\n    conn\n    |> clear_session()\n    |> redirect(to: return_to)\n  end\nend\n```\n\n**lib/example_web/controllers/auth_html.ex**\n\n```elixir\ndefmodule ExampleWeb.AuthHTML do\n  use ExampleWeb, :html\n\n  embed_templates \"auth_html/*\"\nend\n```\n\n**lib/example_web/controllers/auth_html/failure.html.heex**\n\n```html\n Authentication Error \n```","ref":"get-started.html#authcontroller"},{"type":"extras","title":"Example home.html.heex - Getting Started Ash Authentication Phoenix","doc":"To see how the authentication works we replace the default Phoenix `home.html.eex` with a minimal example which has a top navbar. On the right side it shows the `@current_user` and a sign out button. If you are not signed in you will see a sign in button.\n\n**lib/example_web/controllers/page_html/home.html.heex**\n\n```html\n \n   \n     \n       \n         \n           \n             \n              Ash Demo\n             \n           \n         \n       \n       \n        <%= if @current_user do %>\n         \n          <%= @current_user.email %>\n         \n         \n          Sign out\n         \n        <% else %>\n         \n          Sign In\n         \n        <% end %>\n       \n     \n   \n \n\n \n   \n     \n       \n        Demo\n       \n     \n   \n   \n     \n       \n          \n       \n     \n   \n \n```\n\n#","ref":"get-started.html#example-home-html-heex"},{"type":"extras","title":"If you are using LiveView - Getting Started Ash Authentication Phoenix","doc":"If you are using LiveView, jump over to the [Use AshAuthentication with LiveView](/documentation/tutorials/liveview.md)\nsection and set up your LiveView routes for `AshAuthentication`. Once that is done, you can proceed with the following steps.\n\n#","ref":"get-started.html#if-you-are-using-liveview"},{"type":"extras","title":"Start Phoenix - Getting Started Ash Authentication Phoenix","doc":"You can now start Phoenix and visit\n[`localhost:4000`](http://localhost:4000) from your browser.\n\n```bash\n$ mix phx.server\n```\n\n#","ref":"get-started.html#start-phoenix"},{"type":"extras","title":"Sign In - Getting Started Ash Authentication Phoenix","doc":"Visit [`localhost:4000/sign-in`](http://localhost:4000/sign-in) from your browser.\n\nThe sign in page shows a link to register a new account.\n\n#","ref":"get-started.html#sign-in"},{"type":"extras","title":"Sign Out - Getting Started Ash Authentication Phoenix","doc":"Visit [`localhost:4000/sign-out`](http://localhost:4000/sign-out) from your browser.\n\n#","ref":"get-started.html#sign-out"},{"type":"extras","title":"Debugging the Authentication flow - Getting Started Ash Authentication Phoenix","doc":"The default authentication view shows a generic error message to users if their sign-in fails, like \"Email or password was incorrect\". This is for security purposes - you don't want potentially malicious people to know if an email address definitively exists in your system.\n\nHowever, if you're having issues setting up AshAuthentication, or trying to debug issues with your implementation, that error message isn't super useful to figure out what's going wrong.\n\nTo that end, AshAuthentication comes with debug functionality that can be enabled in dev:\n\n**config/dev.exs**\n\n```elixir\nconfig :ash_authentication, debug_authentication_failures?: true\n```\n\n> ##","ref":"get-started.html#debugging-the-authentication-flow"},{"type":"extras","title":"Don't enable debugging outside `dev` environments! {: .warning} - Getting Started Ash Authentication Phoenix","doc":">\n> This could leak users' personally-identifiable information (PII) into your logs on failed sign-in attempts - a security issue!\n\nOnce the config is added, you can restart your dev server and test what happens when you visit the sign-in page and submit invalid credentials. You should see log messages like -\n\n```text\n[timestamp] [warning] Authentication failed: Query returned no users\n\nDetails: %AshAuthentication.Errors.AuthenticationFailed{\n  field: nil,\n  strategy: %AshAuthentication.Strategy.Password{\n    confirmation_required?: true,\n    ...\n```","ref":"get-started.html#don-t-enable-debugging-outside-dev-environments-warning"},{"type":"extras","title":"Reset Password - Getting Started Ash Authentication Phoenix","doc":"In this section we add a reset password functionality. Which is triggered by adding `resettable` in the `User` resource. Please replace the `strategies` block in `lib/example/accounts/user.ex` with the following code:\n\n**lib/example/accounts/user.ex**\n\n```elixir\n# [...]\nstrategies do\n  password :password do\n    identity_field :email\n\n    resettable do\n      sender Example.Accounts.User.Senders.SendPasswordResetEmail\n    end\n  end\nend\n# [...]\n```\n\nTo make this work we need to create a new module `Example.Accounts.User.Senders.SendPasswordResetEmail`:\n\n**lib/example/accounts/user/senders/send_password_reset_email.ex**\n\n```elixir\ndefmodule Example.Accounts.User.Senders.SendPasswordResetEmail do\n  @moduledoc \"\"\"\n  Sends a password reset email\n  \"\"\"\n  use AshAuthentication.Sender\n  use ExampleWeb, :verified_routes\n\n  @impl AshAuthentication.Sender\n  def send(user, token, _) do\n    Example.Accounts.Emails.deliver_reset_password_instructions(\n      user,\n      url(~p\"/password-reset/#{token}\")\n    )\n  end\nend\n```\n\nWe also need to create a new email template:\n\n**lib/example/accounts/emails.ex**\n\n```elixir\ndefmodule Example.Accounts.Emails do\n  @moduledoc \"\"\"\n  Delivers emails.\n  \"\"\"\n\n  import Swoosh.Email\n\n  def deliver_reset_password_instructions(user, url) do\n    if !url do\n      raise \"Cannot deliver reset instructions without a url\"\n    end\n\n    deliver(user.email, \"Reset Your Password\", \"\"\"\n     \n       \n        Hi #{user.email},\n       \n\n       \n         Click here  to reset your password.\n       \n\n       \n        If you didn't request this change, please ignore this.\n       \n     \n    \"\"\")\n  end\n\n  # For simplicity, this module simply logs messages to the terminal.\n  # You should replace it by a proper email or notification tool, such as:\n  #\n  #   * Swoosh - https://hexdocs.pm/swoosh\n  #   * Bamboo - https://hexdocs.pm/bamboo\n  #\n  defp deliver(to, subject, body) do\n    IO.puts(\"Sending email to #{to} with subject #{subject} and body #{body}\")\n\n    new()\n    |> from({\"Zach\", \"zach@ash-hq.org\"}) # TODO: Replace with your email\n    |> to(to_string(to))\n    |> subject(subject)\n    |> put_provider_option(:track_links, \"None\")\n    |> html_body(body)\n    |> Example.Mailer.deliver!()\n  end\nend\n```\n\nYour new reset password functionality is active. Visit [`localhost:4000/sign-in`](http://localhost:4000/sign-in) with your browser and click on the `Forgot your password?` link to trigger the reset password workflow.","ref":"get-started.html#reset-password"},{"type":"extras","title":"Setting up your routes for LiveView","doc":"# Setting up your routes for LiveView\n\nA built in live session wrapper is provided that will set the user assigns for you. To use it, wrap your live routes like so:\n\n```elixir\nash_authentication_live_session :session_name do\n  live \"/route\", ProjectLive.Index, :index\nend\n```\n\nThere are two problems with the above, however.\n\n1. If there is no user present, it will not set `current_user: nil`.\n2. You may want a way to require that a user is present for some routes, and not for others.","ref":"liveview.html"},{"type":"extras","title":"Authentication helper - Setting up your routes for LiveView","doc":"To accomplish this, we use standard Phoenix [`on_mount` hooks](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#on_mount/1-examples). Lets define a hook that gives us three potential behaviors, one for optionally having a user signed in, one for requiring a signed in user, and one for requiring that there is no signed in user.\n\n\n```elixir\n# lib/my_app_web/live_user_auth.ex\ndefmodule MyAppWeb.LiveUserAuth do\n  @moduledoc \"\"\"\n  Helpers for authenticating users in LiveViews.\n  \"\"\"\n\n  import Phoenix.Component\n  use MyAppWeb, :verified_routes\n\n  def on_mount(:live_user_optional, _params, _session, socket) do\n    if socket.assigns[:current_user] do\n      {:cont, socket}\n    else\n      {:cont, assign(socket, :current_user, nil)}\n    end\n  end\n\n  def on_mount(:live_user_required, _params, _session, socket) do\n    if socket.assigns[:current_user] do\n      {:cont, socket}\n    else\n      {:halt, Phoenix.LiveView.redirect(socket, to: ~p\"/sign-in\")}\n    end\n  end\n\n  def on_mount(:live_no_user, _params, _session, socket) do\n    if socket.assigns[:current_user] do\n      {:halt, Phoenix.LiveView.redirect(socket, to: ~p\"/\")}\n    else\n      {:cont, assign(socket, :current_user, nil)}\n    end\n  end\nend\n```\n\nAnd we can use this as follows:\n\n```elixir\n# lib/my_app_web/router.ex\n  # ...\n  scope \"/\", MyAppWeb do\n    # ...\n    ash_authentication_live_session :authentication_required,\n      on_mount: {MyAppWeb.LiveUserAuth, :live_user_required} do\n      live \"/protected_route\", ProjectLive.Index, :index\n    end\n\n    ash_authentication_live_session :authentication_optional,\n      on_mount: {MyAppWeb.LiveUserAuth, :live_user_optional} do\n      live \"/\", ProjectLive.Index, :index\n    end\n  end\n  # ...\n```\n\nYou can also use this to prevent users from visiting the auto generated `sign_in` route:\n\n```elixir\nsign_in_route(on_mount: [{MyAppWeb.LiveUserAuth, :live_no_user}])\n```","ref":"liveview.html#authentication-helper"},{"type":"extras","title":"Overriding Ash Authentication Phoenix's default UI","doc":"# Overriding Ash Authentication Phoenix's default UI\n\nAsh Authentication Phoenix provides a default UI implementation to get you started, however we wanted there to be a middle road between \"you gets what you gets\" and \"¯\\\\_(ツ)_/¯ make your own\". Thus AAP's system of UI overrides were born.\n\nEvery one of our LiveView components (and there are [quite a few of them](https://github.com/team-alembic/ash_authentication_phoenix/tree/main/lib/ash_authentication_phoenix/components)) has a number of hooks where you can override either the CSS styles, text or images.","ref":"ui-overrides.html"},{"type":"extras","title":"Understanding overrides - Overriding Ash Authentication Phoenix's default UI","doc":"Let's start by looking at `AshAuthentication.Phoenix.Components.SignIn`, which introspects your authenticatable resources and renders the components for each of strategies with sign-in enabled.\n\nThe [component documentation](`AshAuthentication.Phoenix.Components.SignIn`) describes it's known overrides, expected properties and even which components are likely to be rendered within it.\n\nBy default, if the `overrides` prop is not set, then the defaults will be taken from [`AshAuthentication.Phoenix.Overrides.Default`](https://github.com/team-alembic/ash_authentication_phoenix/blob/main/lib/ash_authentication_phoenix/overrides/default.ex).","ref":"ui-overrides.html#understanding-overrides"},{"type":"extras","title":"Defining your own override module - Overriding Ash Authentication Phoenix's default UI","doc":"If you find that the default overrides don't quite cut it for your application you can define your own override module with the `AshAuthentication.Phoenix.Overrides` module.\n\nFor example, if we wanted to change the default banner used on the sign-in page:\n\n```elixir\ndefmodule MyAppWeb.AuthOverrides do\n  use AshAuthentication.Phoenix.Overrides\n\n  override AshAuthentication.Phoenix.Components.Banner do\n    set :image_url, \"/images/rickroll.gif\"\n  end\nend\n```\n\nYou don't have to define all overrides for all components - although you can - only the ones you actually want to change. This is why the `overrides` component property takes a list - each override module will be searched in the order they're provided until an override is found. Therefore to render the sign-in UI with only the banner image changed you could render the sign-in component with the `overrides` prop set to `[MyAppWeb.AuthOverrides, AshAuthentication.Phoenix.Overrides.Default]`.","ref":"ui-overrides.html#defining-your-own-override-module"},{"type":"extras","title":"Overriding at the router - Overriding Ash Authentication Phoenix's default UI","doc":"So far we have discussed how to override individual components when placing them in your own LiveView pages, however if you plan to re-use the default UI wholesale with only some overrides, then you can also provide your override options to the `AshAuthentication.Phoenix.Router.sign_in_route/1` and `AshAuthentication.Phoenix.Router.reset_route/1` route helpers in your Phoenix router:\n\n```elixir\ndefmodule MyAppWeb.Router do\n  use MyAppWeb, :router\n  use AshAuthentication.Phoenix.Router\n\n  # ...\n\n  scope \"/\", MyAppWeb do\n    sign_in_route(overrides: [MyAppWeb.AuthOverrides, AshAuthentication.Phoenix.Overrides.Default])\n  end\nend\n```","ref":"ui-overrides.html#overriding-at-the-router"}],"content_type":"text/markdown"}