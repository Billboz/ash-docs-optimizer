searchData={"content_type":"text/markdown","items":[{"doc":"A list of fields to add to the translation fields\n","ref":"dsl-ashtrans-resource.html#translations-fields","title":"AshTrans.Resource.translations.fields","type":"DSL"},{"doc":"The locales to add to the translations resource\n","ref":"dsl-ashtrans-resource.html#translations-locales","title":"AshTrans.Resource.translations.locales","type":"DSL"},{"doc":"Whether the embedded resource should be public or not\n","ref":"dsl-ashtrans-resource.html#translations-public?","title":"AshTrans.Resource.translations.public?","type":"DSL"},{"doc":"","ref":"dsl-ashtrans-resource.html#translations","title":"AshTrans.Resource.translations","type":"DSL"},{"doc":"","ref":"AshTrans.Resource.html","title":"AshTrans.Resource","type":"module"},{"doc":"","ref":"AshTrans.Resource.Info.html","title":"AshTrans.Resource.Info","type":"module"},{"doc":"A list of fields to add to the translation fields","ref":"AshTrans.Resource.Info.html#translations_fields/1","title":"AshTrans.Resource.Info.translations_fields/1","type":"function"},{"doc":"A list of fields to add to the translation fields","ref":"AshTrans.Resource.Info.html#translations_fields!/1","title":"AshTrans.Resource.Info.translations_fields!/1","type":"function"},{"doc":"The locales to add to the translations resource","ref":"AshTrans.Resource.Info.html#translations_locales/1","title":"AshTrans.Resource.Info.translations_locales/1","type":"function"},{"doc":"The locales to add to the translations resource","ref":"AshTrans.Resource.Info.html#translations_locales!/1","title":"AshTrans.Resource.Info.translations_locales!/1","type":"function"},{"doc":"translations DSL options\n\nReturns a map containing the and any configured or default values.","ref":"AshTrans.Resource.Info.html#translations_options/1","title":"AshTrans.Resource.Info.translations_options/1","type":"function"},{"doc":"Whether the embedded resource should be public or not","ref":"AshTrans.Resource.Info.html#translations_public?/1","title":"AshTrans.Resource.Info.translations_public?/1","type":"function"},{"doc":"# AshTrans\n\nAshTrans is an [Ash](https://hexdocs.pm/ash) extension that provides translations to a resource.","ref":"readme.html","title":"Home","type":"extras"},{"doc":"- [Get Started with AshTrans](documentation/tutorials/get-started-with-ash-trans.md)","ref":"readme.html#tutorials","title":"Tutorials - Home","type":"extras"},{"doc":"- [AshTrans DSL](documentation/dsls/DSL:-AshTrans.Resource.md)","ref":"readme.html#reference","title":"Reference - Home","type":"extras"},{"doc":"# Get Started with AshTrans","ref":"get-started-with-ash-trans.html","title":"Get Started with AshTrans","type":"extras"},{"doc":"Add the dependency to your `mix.exs` file and include `:ash_trans` in your `.formatter.exs`:\n\n```elixir\n# In mix.exs\n{:ash_trans, \"~> 0.1.0\"}\n\n# In .formatter.exs\nimport_deps: [..., :ash_trans]\n```\n\nIf you are using Cldr, add AshTrans to your providers:\n\n```elixir\nuse Cldr,\n  providers: [AshTrans],\n  locales: [\"it\", \"en\"]\n```","ref":"get-started-with-ash-trans.html#installation","title":"Installation - Get Started with AshTrans","type":"extras"},{"doc":"To add translations to a resource, add the extension to the resource:\n\n```elixir\nuse Ash.Resource,\n  extensions: [..., AshTrans.Resource]\n\ntranslations do\n  # Set `public?` to true or add `:translations` to the action's accept list for public access\n  public? true\n  # Add the fields you want to translate\n  fields [:name, :description]\n  # Add the locales, except the default locale since it will be directly on the resource\n  locales [:it]\n  # If you are using Cldr\n  locales MyApp.Cldr.AshTrans.locale_names()\nend\n```","ref":"get-started-with-ash-trans.html#adding-to-a-resource","title":"Adding to a resource - Get Started with AshTrans","type":"extras"},{"doc":"First, we need to create a domain:\n\n```elixir\ndefmodule MyApp.Domain do\n  use Ash.Domain\n\n  resources do\n    resource MyApp.Post\n  end\nend\n```\n\nThen let's create a resource for it:\n\n```elixir\ndefmodule MyApp.Post do\n  @moduledoc false\n\n  use Ash.Resource,\n    domain: MyApp.Domain,\n    data_layer: Ash.DataLayer.Ets,\n    extensions: [AshTrans.Resource]\n\n  attributes do\n    uuid_v7_primary_key :id\n    attribute :title, :string, public?: true\n    attribute :body, :string, public?: true\n  end\n\n  actions do\n    defaults [:read, :destroy, update: :*, create: :*]\n  end\n\n  translations do\n    public? true\n    fields [:title, :body]\n    locales [:it]\n  end\nend\n```\n\nWith the setup complete, let's explore how to manage translations.\nThe extension will define two embedded resources, Translations and Translations.Fields that will look like this:\n\n```elixir\ndefmodule MyApp.Post.Translations do\n  use Ash.Resource, data_layer: :embedded\n\n  attributes do\n    attribute :it, MyApp.Post.Translations.Fields\n  end\nend\n\ndefmodule MyApp.Post.Translations.Fields do\n  use Ash.Resource, data_layer: :embedded\n\n  attributes do\n    attribute :title, :string, public?: true\n    attribute :body, :string, public?: true\n  end\nend\n```\n\nThe extension adds these to the original resource as an attribute:\n\n```elixir\ndefmodule MyApp.Post do\n  ...\n  attributes do\n    ...\n    attribute :translations, MyApp.Post.Translations, public?: true\n  end\n  ...\nend\n```\n\nBy doing so, we can leverage the Ash framework to do the validation, storage and casting of the translation data.\n\nNow we can use our resource like any other and have translations added by passing a map composed of locale keys and as values another map having the fields we want translated.\n\n```elixir\npost =\n  Ash.Changeset.for_create(MyApp.Post, :create, %{\n    title: \"Title\",\n    body: \"Body\",\n    # Like so\n    translations: %{\n      it: %{\n        title: \"Titolo\",\n        body: \"Corpo\"\n      }\n    }\n  })\n  |> Ash.create!()\n```\n\nTo translate our struct, we can call `translate/2` or to translate just a field and have it returned `translate_field/3`\n\n```elixir\npost_it = AshTrans.translate(post, :it)\n%{title: \"Titolo\", body: \"Corpo\"} = post_it\n\n\"Titolo\" = AshTrans.translate_field(post, :title, :it)\n```\n\n# Full example with Phoenix Liveview, Ash and Cldr\n\nFirst we need to install and configure Cldr, then add to the Cldr module the AshTrans provider:\n\n```elixir\ndefmodule MyApp.Cldr do\n  use Cldr,\n    providers: [AshTrans],\n    locales: [\"it\", \"en\"]\nend\n```\n\nThis allows us to leverage Cldr for managing available locales and the current locale, rather than handling it manually.\n\nLet's use the resource we have defined above, and replace in translations the locales with:\n\n```elixir\ntranslations do\n  locales MyApp.Cldr.AshTrans.locale_names()\nend\n```\n\nNow let's create a form to create/update the Post resource:\n\n```elixir\ndefmodule MyAppWeb.Post.FormComponent do\n  @moduledoc false\n  use MyAppWeb, :live_component\n\n  alias AshPhoenix.Form\n  alias MyApp.Cldr\n  alias MyApp.Post\n\n  @impl true\n  def render(assigns) do\n    ~H\"\"\"\n     \n      <.simple_form\n        for={@form}\n        id=\"post-form\"\n        phx-target={@myself}\n        phx-change=\"validate\"\n        phx-submit=\"save\"\n      >\n        <.input\n          type=\"select\"\n          label={gettext(\"Language\")}\n          field={@form[:locale]}\n          options={locale_options()}\n        />\n        <.input\n          class={hide_input?(@form[:locale]) && \"hidden\"}\n          label={gettext(\"Title\")}\n          field={@form[:title]}\n        />\n\n        <.inputs_for :let={translations} field={@form[:translations]}>\n          <.inputs_for\n            :let={field}\n            :for={locale <- Cldr.AshTrans.locale_names()}\n            field={translations[locale]}\n          >\n            <.input\n              class={hide_translation_input?(@form[:locale], locale) && \"hidden\"}\n              label={gettext(\"Title\")}\n              field={field[:title]}\n            />\n          </.inputs_for>\n        </.inputs_for>\n        <.input\n          class={hide_input?(@form[:locale]) && \"hidden\"}\n          type=\"textarea\"\n          label={gettext(\"Body\")}\n          field={@form[:body]}\n        />\n\n        <.inputs_for :let={translations} field={@form[:translations]}>\n          <.inputs_for\n            :let={field}\n            :for={locale <- Cldr.AshTrans.locale_names()}\n            field={translations[locale]}\n          >\n            <.input\n              class={hide_translation_input?(@form[:locale], locale) && \"hidden\"}\n              type=\"textarea\"\n              label={gettext(\"Body\")}\n              field={field[:body]}\n            />\n          </.inputs_for>\n        </.inputs_for>\n      </.simple_form>\n     \n    \"\"\"\n  end\n\n  @impl true\n  def update(%{post: post} = assigns, socket) do\n    {:ok,\n     socket\n     |> assign(assigns)\n     |> assign_form(assigns.live_action, post)}\n  end\n\n  @impl true\n  def handle_event(\"validate\", %{\"post\" => params}, socket) do\n    form = Form.validate(socket.assigns.form, params)\n    {:noreply, assign(socket, :form, form)}\n  end\n\n  def handle_event(\"save\", %{\"post\" => params}, socket) do\n    save_post(socket, socket.assigns.live_action, params)\n  end\n\n  defp save_post(socket, :edit, params) do\n    case Form.submit(socket.assigns.form, params: params) do\n      {:ok, post} ->\n        notify_parent({:saved, post})\n\n        {:noreply,\n         socket\n         |> put_flash(:info, gettext(\"Post updated successfully\"))\n         |> push_patch(to: socket.assigns.patch, replace: true)}\n\n      {:error, form} ->\n        {:noreply, assign(socket, :form, form)}\n    end\n  end\n\n  defp save_post(socket, :new, params) do\n    case Form.submit(socket.assigns.form, params: params) do\n      {:ok, post} ->\n        notify_parent({:saved, post})\n\n        {:noreply,\n         socket\n         |> put_flash(:info, gettext(\"Post created successfully\"))\n         |> push_navigate(to: socket.assigns.patch.(post))}\n\n      {:error, form} ->\n        {:noreply, assign(socket, :form, form)}\n    end\n  end\n\n  defp assign_form(socket, :new, _) do\n    form =\n      Form.for_create(Post, :create,\n        as: \"post\",\n        forms: [auto?: true],\n        prepare_source: fn changeset ->\n          Ash.Changeset.set_argument(changeset, :locale, current_locale())\n        end\n      )\n      |> AshTrans.add_forms(Cldr.AshTrans.locale_names())\n\n    assign(socket, :form, to_form(form))\n  end\n\n  defp assign_form(socket, :edit, post) do\n    form =\n      Form.for_update(post, :update,\n        as: \"post\",\n        forms: [auto?: true],\n        prepare_source: fn changeset ->\n          Ash.Changeset.set_argument(changeset, :locale, current_locale())\n        end\n      )\n      |> AshTrans.add_forms(Cldr.AshTrans.locale_names())\n\n    assign(socket, :form, to_form(form))\n  end\n\n  defp hide_input?(field) do\n    field.value && to_string(field.value) != to_string(default_locale())\n  end\n\n  defp hide_translation_input?(field, locale) do\n    !field.value || to_string(field.value) != to_string(locale)\n  end\n\n  defp default_locale do\n    Cldr.default_locale().cldr_locale_name\n  end\n\n  defp current_locale do\n    Cldr.get_locale().cldr_locale_name\n  end\n\n  defp locale_options do\n    Enum.map(Cldr.known_locale_names(), &{Cldr.LocaleDisplay.display_name!(&1), &1})\n  end\n\n  defp notify_parent(msg), do: send(self(), {__MODULE__, msg})\nend\n```\n\nHere we have used the Phoenix `.inputs_for` component to manage the nested embedded resource translations, then when creating the form we used the helper in AshTrans `add_forms/1` to add the necessary forms.\n\nWe use CSS to hide translation inputs rather than conditional rendering to preserve input data when switching languages.\n\nThe form component can now be used to create or update posts, along with the translations.\n\nNow we can make a LiveView to display a post:\n\n```elixir\ndefmodule MyAppWeb.PostLive.Show do\n  use MyAppWeb, :live_view\n\n  alias MyApp.Cldr\n  alias MyApp.Post\n\n  @impl true\n  def render(assigns) do\n    ~H\"\"\"\n     \n      <%= @post.title %>\n     \n     \n      <%= @post.body %>\n     \n    \"\"\"\n  end\n\n  @impl true\n  def mount(%{\"id\" => id}, _session, socket) do\n    post =\n      Ash.get!(Post, id)\n      |> Cldr.AshTrans.translate(post)\n\n    {:ok, socket |> assign(:post, post)}\n  end\nend\n```\n\nCldr handles passing the current locale to AshTrans, which can be set using various strategies, such as [Cldr.Plug](https://hexdocs.pm/ex_cldr_plugs/readme.html).","ref":"get-started-with-ash-trans.html#example-usage","title":"Example usage - Get Started with AshTrans","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: AshTrans.Resource","ref":"dsl-ashtrans-resource.html","title":"DSL: AshTrans.Resource","type":"extras"},{"doc":"","ref":"dsl-ashtrans-resource.html#translations","title":"translations - DSL: AshTrans.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`public?`](#translations-public?){: #translations-public? } | `boolean` | `false` | Whether the embedded resource should be public or not |\n| [`locales`](#translations-locales){: #translations-locales } | `list(atom)` | `[]` | The locales to add to the translations resource |\n| [`fields`](#translations-fields){: #translations-fields } | `list(atom)` | `[]` | A list of fields to add to the translation fields |\n\n\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ashtrans-resource.html#options","title":"Options - DSL: AshTrans.Resource","type":"extras"}],"producer":{"name":"ex_doc","version":[48,46,51,52,46,50]}}