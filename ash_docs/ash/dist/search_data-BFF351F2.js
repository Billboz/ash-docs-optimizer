searchData={"content_type":"text/markdown","items":[{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-update-wait_for-names","title":"Ash.Reactor.reactor.update.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-update-wait_for","title":"Ash.Reactor.reactor.update.wait_for","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the tenant before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-update-tenant-transform","title":"Ash.Reactor.reactor.update.tenant.transform","type":"DSL"},{"doc":"What to use as the source of the tenant.","ref":"dsl-ash-reactor.html#reactor-update-tenant-source","title":"Ash.Reactor.reactor.update.tenant.source","type":"DSL"},{"doc":"Specifies the action tenant","ref":"dsl-ash-reactor.html#reactor-update-tenant","title":"Ash.Reactor.reactor.update.tenant","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the load before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-update-load-transform","title":"Ash.Reactor.reactor.update.load.transform","type":"DSL"},{"doc":"What to use as the source of the load","ref":"dsl-ash-reactor.html#reactor-update-load-source","title":"Ash.Reactor.reactor.update.load.source","type":"DSL"},{"doc":"Allows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-update-load","title":"Ash.Reactor.reactor.update.load","type":"DSL"},{"doc":"An optional transformation function which will transform the inputs before executing the action.","ref":"dsl-ash-reactor.html#reactor-update-inputs-transform","title":"Ash.Reactor.reactor.update.inputs.transform","type":"DSL"},{"doc":"","ref":"dsl-ash-reactor.html#reactor-update-inputs-template","title":"Ash.Reactor.reactor.update.inputs.template","type":"DSL"},{"doc":"Specify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-update-inputs","title":"Ash.Reactor.reactor.update.inputs","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the actor before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-update-actor-transform","title":"Ash.Reactor.reactor.update.actor.transform","type":"DSL"},{"doc":"What to use as the source of the actor.","ref":"dsl-ash-reactor.html#reactor-update-actor-source","title":"Ash.Reactor.reactor.update.actor.source","type":"DSL"},{"doc":"Specifies the action actor","ref":"dsl-ash-reactor.html#reactor-update-actor","title":"Ash.Reactor.reactor.update.actor","type":"DSL"},{"doc":"How to handle undoing this action","ref":"dsl-ash-reactor.html#reactor-update-undo","title":"Ash.Reactor.reactor.update.undo","type":"DSL"},{"doc":"The name of the action to call on the resource when the step is to be undone.\n","ref":"dsl-ash-reactor.html#reactor-update-undo_action","title":"Ash.Reactor.reactor.update.undo_action","type":"DSL"},{"doc":"The resource to call the action on.\n","ref":"dsl-ash-reactor.html#reactor-update-resource","title":"Ash.Reactor.reactor.update.resource","type":"DSL"},{"doc":"A unique name for the step.","ref":"dsl-ash-reactor.html#reactor-update-name","title":"Ash.Reactor.reactor.update.name","type":"DSL"},{"doc":"A description for the step","ref":"dsl-ash-reactor.html#reactor-update-description","title":"Ash.Reactor.reactor.update.description","type":"DSL"},{"doc":"Explicitly enable or disable authorization for the action.","ref":"dsl-ash-reactor.html#reactor-update-authorize?","title":"Ash.Reactor.reactor.update.authorize?","type":"DSL"},{"doc":"When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`.","ref":"dsl-ash-reactor.html#reactor-update-async?","title":"Ash.Reactor.reactor.update.async?","type":"DSL"},{"doc":"The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section.","ref":"dsl-ash-reactor.html#reactor-update-domain","title":"Ash.Reactor.reactor.update.domain","type":"DSL"},{"doc":"The name of the action to call on the resource.\n","ref":"dsl-ash-reactor.html#reactor-update-action","title":"Ash.Reactor.reactor.update.action","type":"DSL"},{"doc":"The record to update.","ref":"dsl-ash-reactor.html#reactor-update-initial","title":"Ash.Reactor.reactor.update.initial","type":"DSL"},{"doc":"Declares a step that will call an update action on a resource.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.\n\n","ref":"dsl-ash-reactor.html#reactor-update","title":"Ash.Reactor.reactor.update","type":"DSL"},{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-transaction-wait_for-names","title":"Ash.Reactor.reactor.transaction.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-transaction-wait_for","title":"Ash.Reactor.reactor.transaction.wait_for","type":"DSL"},{"doc":"How long to allow the transaction to run before timing out.\n","ref":"dsl-ash-reactor.html#reactor-transaction-timeout","title":"Ash.Reactor.reactor.transaction.timeout","type":"DSL"},{"doc":"The name of the step whose result will be returned as the return value of the transaction.\n","ref":"dsl-ash-reactor.html#reactor-transaction-return","title":"Ash.Reactor.reactor.transaction.return","type":"DSL"},{"doc":"A resource or list of resources to consider in the transaction.\n","ref":"dsl-ash-reactor.html#reactor-transaction-resources","title":"Ash.Reactor.reactor.transaction.resources","type":"DSL"},{"doc":"A unique name for the step.","ref":"dsl-ash-reactor.html#reactor-transaction-name","title":"Ash.Reactor.reactor.transaction.name","type":"DSL"},{"doc":"Creates a group of steps which will be executed inside a data layer transaction.","ref":"dsl-ash-reactor.html#reactor-transaction","title":"Ash.Reactor.reactor.transaction","type":"DSL"},{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-read-wait_for-names","title":"Ash.Reactor.reactor.read.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-read-wait_for","title":"Ash.Reactor.reactor.read.wait_for","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the tenant before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-read-tenant-transform","title":"Ash.Reactor.reactor.read.tenant.transform","type":"DSL"},{"doc":"What to use as the source of the tenant.","ref":"dsl-ash-reactor.html#reactor-read-tenant-source","title":"Ash.Reactor.reactor.read.tenant.source","type":"DSL"},{"doc":"Specifies the action tenant","ref":"dsl-ash-reactor.html#reactor-read-tenant","title":"Ash.Reactor.reactor.read.tenant","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the load before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-read-load-transform","title":"Ash.Reactor.reactor.read.load.transform","type":"DSL"},{"doc":"What to use as the source of the load","ref":"dsl-ash-reactor.html#reactor-read-load-source","title":"Ash.Reactor.reactor.read.load.source","type":"DSL"},{"doc":"Allows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-read-load","title":"Ash.Reactor.reactor.read.load","type":"DSL"},{"doc":"An optional transformation function which will transform the inputs before executing the action.","ref":"dsl-ash-reactor.html#reactor-read-inputs-transform","title":"Ash.Reactor.reactor.read.inputs.transform","type":"DSL"},{"doc":"","ref":"dsl-ash-reactor.html#reactor-read-inputs-template","title":"Ash.Reactor.reactor.read.inputs.template","type":"DSL"},{"doc":"Specify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-read-inputs","title":"Ash.Reactor.reactor.read.inputs","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the actor before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-read-actor-transform","title":"Ash.Reactor.reactor.read.actor.transform","type":"DSL"},{"doc":"What to use as the source of the actor.","ref":"dsl-ash-reactor.html#reactor-read-actor-source","title":"Ash.Reactor.reactor.read.actor.source","type":"DSL"},{"doc":"Specifies the action actor","ref":"dsl-ash-reactor.html#reactor-read-actor","title":"Ash.Reactor.reactor.read.actor","type":"DSL"},{"doc":"The resource to call the action on.\n","ref":"dsl-ash-reactor.html#reactor-read-resource","title":"Ash.Reactor.reactor.read.resource","type":"DSL"},{"doc":"A unique name for the step.","ref":"dsl-ash-reactor.html#reactor-read-name","title":"Ash.Reactor.reactor.read.name","type":"DSL"},{"doc":"A description for the step","ref":"dsl-ash-reactor.html#reactor-read-description","title":"Ash.Reactor.reactor.read.description","type":"DSL"},{"doc":"Explicitly enable or disable authorization for the action.","ref":"dsl-ash-reactor.html#reactor-read-authorize?","title":"Ash.Reactor.reactor.read.authorize?","type":"DSL"},{"doc":"When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`.","ref":"dsl-ash-reactor.html#reactor-read-async?","title":"Ash.Reactor.reactor.read.async?","type":"DSL"},{"doc":"The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section.","ref":"dsl-ash-reactor.html#reactor-read-domain","title":"Ash.Reactor.reactor.read.domain","type":"DSL"},{"doc":"The name of the action to call on the resource.\n","ref":"dsl-ash-reactor.html#reactor-read-action","title":"Ash.Reactor.reactor.read.action","type":"DSL"},{"doc":"Declares a step that will call a read action on a resource.","ref":"dsl-ash-reactor.html#reactor-read","title":"Ash.Reactor.reactor.read","type":"DSL"},{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-read_one-wait_for-names","title":"Ash.Reactor.reactor.read_one.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-read_one-wait_for","title":"Ash.Reactor.reactor.read_one.wait_for","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the tenant before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-read_one-tenant-transform","title":"Ash.Reactor.reactor.read_one.tenant.transform","type":"DSL"},{"doc":"What to use as the source of the tenant.","ref":"dsl-ash-reactor.html#reactor-read_one-tenant-source","title":"Ash.Reactor.reactor.read_one.tenant.source","type":"DSL"},{"doc":"Specifies the action tenant","ref":"dsl-ash-reactor.html#reactor-read_one-tenant","title":"Ash.Reactor.reactor.read_one.tenant","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the load before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-read_one-load-transform","title":"Ash.Reactor.reactor.read_one.load.transform","type":"DSL"},{"doc":"What to use as the source of the load","ref":"dsl-ash-reactor.html#reactor-read_one-load-source","title":"Ash.Reactor.reactor.read_one.load.source","type":"DSL"},{"doc":"Allows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-read_one-load","title":"Ash.Reactor.reactor.read_one.load","type":"DSL"},{"doc":"An optional transformation function which will transform the inputs before executing the action.","ref":"dsl-ash-reactor.html#reactor-read_one-inputs-transform","title":"Ash.Reactor.reactor.read_one.inputs.transform","type":"DSL"},{"doc":"","ref":"dsl-ash-reactor.html#reactor-read_one-inputs-template","title":"Ash.Reactor.reactor.read_one.inputs.template","type":"DSL"},{"doc":"Specify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-read_one-inputs","title":"Ash.Reactor.reactor.read_one.inputs","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the actor before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-read_one-actor-transform","title":"Ash.Reactor.reactor.read_one.actor.transform","type":"DSL"},{"doc":"What to use as the source of the actor.","ref":"dsl-ash-reactor.html#reactor-read_one-actor-source","title":"Ash.Reactor.reactor.read_one.actor.source","type":"DSL"},{"doc":"Specifies the action actor","ref":"dsl-ash-reactor.html#reactor-read_one-actor","title":"Ash.Reactor.reactor.read_one.actor","type":"DSL"},{"doc":"The resource to call the action on.\n","ref":"dsl-ash-reactor.html#reactor-read_one-resource","title":"Ash.Reactor.reactor.read_one.resource","type":"DSL"},{"doc":"A unique name for the step.","ref":"dsl-ash-reactor.html#reactor-read_one-name","title":"Ash.Reactor.reactor.read_one.name","type":"DSL"},{"doc":"A description for the step","ref":"dsl-ash-reactor.html#reactor-read_one-description","title":"Ash.Reactor.reactor.read_one.description","type":"DSL"},{"doc":"Explicitly enable or disable authorization for the action.","ref":"dsl-ash-reactor.html#reactor-read_one-authorize?","title":"Ash.Reactor.reactor.read_one.authorize?","type":"DSL"},{"doc":"When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`.","ref":"dsl-ash-reactor.html#reactor-read_one-async?","title":"Ash.Reactor.reactor.read_one.async?","type":"DSL"},{"doc":"The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section.","ref":"dsl-ash-reactor.html#reactor-read_one-domain","title":"Ash.Reactor.reactor.read_one.domain","type":"DSL"},{"doc":"The name of the action to call on the resource.\n","ref":"dsl-ash-reactor.html#reactor-read_one-action","title":"Ash.Reactor.reactor.read_one.action","type":"DSL"},{"doc":"When set to true the step will fail if the resource is not found.","ref":"dsl-ash-reactor.html#reactor-read_one-fail_on_not_found?","title":"Ash.Reactor.reactor.read_one.fail_on_not_found?","type":"DSL"},{"doc":"Declares a step that will call a read action on a resource returning a single record.","ref":"dsl-ash-reactor.html#reactor-read_one","title":"Ash.Reactor.reactor.read_one","type":"DSL"},{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-load-wait_for-names","title":"Ash.Reactor.reactor.load.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-load-wait_for","title":"Ash.Reactor.reactor.load.wait_for","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the tenant before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-load-tenant-transform","title":"Ash.Reactor.reactor.load.tenant.transform","type":"DSL"},{"doc":"What to use as the source of the tenant.","ref":"dsl-ash-reactor.html#reactor-load-tenant-source","title":"Ash.Reactor.reactor.load.tenant.source","type":"DSL"},{"doc":"Specifies the action tenant","ref":"dsl-ash-reactor.html#reactor-load-tenant","title":"Ash.Reactor.reactor.load.tenant","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the actor before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-load-actor-transform","title":"Ash.Reactor.reactor.load.actor.transform","type":"DSL"},{"doc":"What to use as the source of the actor.","ref":"dsl-ash-reactor.html#reactor-load-actor-source","title":"Ash.Reactor.reactor.load.actor.source","type":"DSL"},{"doc":"Specifies the action actor","ref":"dsl-ash-reactor.html#reactor-load-actor","title":"Ash.Reactor.reactor.load.actor","type":"DSL"},{"doc":"If set to true, only specified attributes will be loaded when passing a list of fields to fetch on a relationship, which allows for more optimized data-fetching.","ref":"dsl-ash-reactor.html#reactor-load-strict?","title":"Ash.Reactor.reactor.load.strict?","type":"DSL"},{"doc":"Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer.","ref":"dsl-ash-reactor.html#reactor-load-reuse_values?","title":"Ash.Reactor.reactor.load.reuse_values?","type":"DSL"},{"doc":"If set to true, values will only be loaded if the related value isn't currently loaded.","ref":"dsl-ash-reactor.html#reactor-load-lazy?","title":"Ash.Reactor.reactor.load.lazy?","type":"DSL"},{"doc":"An Ash load statement","ref":"dsl-ash-reactor.html#reactor-load-load","title":"Ash.Reactor.reactor.load.load","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the load statement before it is passed to the load.","ref":"dsl-ash-reactor.html#reactor-load-transform","title":"Ash.Reactor.reactor.load.transform","type":"DSL"},{"doc":"The records upon which to add extra loaded data","ref":"dsl-ash-reactor.html#reactor-load-records","title":"Ash.Reactor.reactor.load.records","type":"DSL"},{"doc":"A unique name for the step.","ref":"dsl-ash-reactor.html#reactor-load-name","title":"Ash.Reactor.reactor.load.name","type":"DSL"},{"doc":"A description for the step","ref":"dsl-ash-reactor.html#reactor-load-description","title":"Ash.Reactor.reactor.load.description","type":"DSL"},{"doc":"Explicitly enable or disable authorization for the action.","ref":"dsl-ash-reactor.html#reactor-load-authorize?","title":"Ash.Reactor.reactor.load.authorize?","type":"DSL"},{"doc":"When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`.","ref":"dsl-ash-reactor.html#reactor-load-async?","title":"Ash.Reactor.reactor.load.async?","type":"DSL"},{"doc":"The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section.","ref":"dsl-ash-reactor.html#reactor-load-domain","title":"Ash.Reactor.reactor.load.domain","type":"DSL"},{"doc":"Declares a step that will load additional data on a resource.","ref":"dsl-ash-reactor.html#reactor-load","title":"Ash.Reactor.reactor.load","type":"DSL"},{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-destroy-wait_for-names","title":"Ash.Reactor.reactor.destroy.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-destroy-wait_for","title":"Ash.Reactor.reactor.destroy.wait_for","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the tenant before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-destroy-tenant-transform","title":"Ash.Reactor.reactor.destroy.tenant.transform","type":"DSL"},{"doc":"What to use as the source of the tenant.","ref":"dsl-ash-reactor.html#reactor-destroy-tenant-source","title":"Ash.Reactor.reactor.destroy.tenant.source","type":"DSL"},{"doc":"Specifies the action tenant","ref":"dsl-ash-reactor.html#reactor-destroy-tenant","title":"Ash.Reactor.reactor.destroy.tenant","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the load before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-destroy-load-transform","title":"Ash.Reactor.reactor.destroy.load.transform","type":"DSL"},{"doc":"What to use as the source of the load","ref":"dsl-ash-reactor.html#reactor-destroy-load-source","title":"Ash.Reactor.reactor.destroy.load.source","type":"DSL"},{"doc":"Allows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-destroy-load","title":"Ash.Reactor.reactor.destroy.load","type":"DSL"},{"doc":"An optional transformation function which will transform the inputs before executing the action.","ref":"dsl-ash-reactor.html#reactor-destroy-inputs-transform","title":"Ash.Reactor.reactor.destroy.inputs.transform","type":"DSL"},{"doc":"","ref":"dsl-ash-reactor.html#reactor-destroy-inputs-template","title":"Ash.Reactor.reactor.destroy.inputs.template","type":"DSL"},{"doc":"Specify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-destroy-inputs","title":"Ash.Reactor.reactor.destroy.inputs","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the actor before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-destroy-actor-transform","title":"Ash.Reactor.reactor.destroy.actor.transform","type":"DSL"},{"doc":"What to use as the source of the actor.","ref":"dsl-ash-reactor.html#reactor-destroy-actor-source","title":"Ash.Reactor.reactor.destroy.actor.source","type":"DSL"},{"doc":"Specifies the action actor","ref":"dsl-ash-reactor.html#reactor-destroy-actor","title":"Ash.Reactor.reactor.destroy.actor","type":"DSL"},{"doc":"How to handle undoing this action","ref":"dsl-ash-reactor.html#reactor-destroy-undo","title":"Ash.Reactor.reactor.destroy.undo","type":"DSL"},{"doc":"The name of the action to call on the resource when the step is to be undone.\n","ref":"dsl-ash-reactor.html#reactor-destroy-undo_action","title":"Ash.Reactor.reactor.destroy.undo_action","type":"DSL"},{"doc":"The resource to call the action on.\n","ref":"dsl-ash-reactor.html#reactor-destroy-resource","title":"Ash.Reactor.reactor.destroy.resource","type":"DSL"},{"doc":"A unique name for the step.","ref":"dsl-ash-reactor.html#reactor-destroy-name","title":"Ash.Reactor.reactor.destroy.name","type":"DSL"},{"doc":"A description for the step","ref":"dsl-ash-reactor.html#reactor-destroy-description","title":"Ash.Reactor.reactor.destroy.description","type":"DSL"},{"doc":"Explicitly enable or disable authorization for the action.","ref":"dsl-ash-reactor.html#reactor-destroy-authorize?","title":"Ash.Reactor.reactor.destroy.authorize?","type":"DSL"},{"doc":"When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`.","ref":"dsl-ash-reactor.html#reactor-destroy-async?","title":"Ash.Reactor.reactor.destroy.async?","type":"DSL"},{"doc":"The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section.","ref":"dsl-ash-reactor.html#reactor-destroy-domain","title":"Ash.Reactor.reactor.destroy.domain","type":"DSL"},{"doc":"The name of the action to call on the resource.\n","ref":"dsl-ash-reactor.html#reactor-destroy-action","title":"Ash.Reactor.reactor.destroy.action","type":"DSL"},{"doc":"Whether or not the step should return the destroyed record upon completion.","ref":"dsl-ash-reactor.html#reactor-destroy-return_destroyed?","title":"Ash.Reactor.reactor.destroy.return_destroyed?","type":"DSL"},{"doc":"The record to update.","ref":"dsl-ash-reactor.html#reactor-destroy-initial","title":"Ash.Reactor.reactor.destroy.initial","type":"DSL"},{"doc":"Declares a step that will call a destroy action on a resource.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.\n\n","ref":"dsl-ash-reactor.html#reactor-destroy","title":"Ash.Reactor.reactor.destroy","type":"DSL"},{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-create-wait_for-names","title":"Ash.Reactor.reactor.create.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-create-wait_for","title":"Ash.Reactor.reactor.create.wait_for","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the tenant before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-create-tenant-transform","title":"Ash.Reactor.reactor.create.tenant.transform","type":"DSL"},{"doc":"What to use as the source of the tenant.","ref":"dsl-ash-reactor.html#reactor-create-tenant-source","title":"Ash.Reactor.reactor.create.tenant.source","type":"DSL"},{"doc":"Specifies the action tenant","ref":"dsl-ash-reactor.html#reactor-create-tenant","title":"Ash.Reactor.reactor.create.tenant","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the load before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-create-load-transform","title":"Ash.Reactor.reactor.create.load.transform","type":"DSL"},{"doc":"What to use as the source of the load","ref":"dsl-ash-reactor.html#reactor-create-load-source","title":"Ash.Reactor.reactor.create.load.source","type":"DSL"},{"doc":"Allows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-create-load","title":"Ash.Reactor.reactor.create.load","type":"DSL"},{"doc":"An optional transformation function which will transform the inputs before executing the action.","ref":"dsl-ash-reactor.html#reactor-create-inputs-transform","title":"Ash.Reactor.reactor.create.inputs.transform","type":"DSL"},{"doc":"","ref":"dsl-ash-reactor.html#reactor-create-inputs-template","title":"Ash.Reactor.reactor.create.inputs.template","type":"DSL"},{"doc":"Specify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-create-inputs","title":"Ash.Reactor.reactor.create.inputs","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the actor before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-create-actor-transform","title":"Ash.Reactor.reactor.create.actor.transform","type":"DSL"},{"doc":"What to use as the source of the actor.","ref":"dsl-ash-reactor.html#reactor-create-actor-source","title":"Ash.Reactor.reactor.create.actor.source","type":"DSL"},{"doc":"Specifies the action actor","ref":"dsl-ash-reactor.html#reactor-create-actor","title":"Ash.Reactor.reactor.create.actor","type":"DSL"},{"doc":"How to handle undoing this action","ref":"dsl-ash-reactor.html#reactor-create-undo","title":"Ash.Reactor.reactor.create.undo","type":"DSL"},{"doc":"The name of the action to call on the resource when the step is to be undone.\n","ref":"dsl-ash-reactor.html#reactor-create-undo_action","title":"Ash.Reactor.reactor.create.undo_action","type":"DSL"},{"doc":"The resource to call the action on.\n","ref":"dsl-ash-reactor.html#reactor-create-resource","title":"Ash.Reactor.reactor.create.resource","type":"DSL"},{"doc":"A unique name for the step.","ref":"dsl-ash-reactor.html#reactor-create-name","title":"Ash.Reactor.reactor.create.name","type":"DSL"},{"doc":"A description for the step","ref":"dsl-ash-reactor.html#reactor-create-description","title":"Ash.Reactor.reactor.create.description","type":"DSL"},{"doc":"Explicitly enable or disable authorization for the action.","ref":"dsl-ash-reactor.html#reactor-create-authorize?","title":"Ash.Reactor.reactor.create.authorize?","type":"DSL"},{"doc":"When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`.","ref":"dsl-ash-reactor.html#reactor-create-async?","title":"Ash.Reactor.reactor.create.async?","type":"DSL"},{"doc":"The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section.","ref":"dsl-ash-reactor.html#reactor-create-domain","title":"Ash.Reactor.reactor.create.domain","type":"DSL"},{"doc":"The name of the action to call on the resource.\n","ref":"dsl-ash-reactor.html#reactor-create-action","title":"Ash.Reactor.reactor.create.action","type":"DSL"},{"doc":"Whether or not this action should be executed as an upsert.","ref":"dsl-ash-reactor.html#reactor-create-upsert?","title":"Ash.Reactor.reactor.create.upsert?","type":"DSL"},{"doc":"The identity to use for the upsert","ref":"dsl-ash-reactor.html#reactor-create-upsert_identity","title":"Ash.Reactor.reactor.create.upsert_identity","type":"DSL"},{"doc":"The initial value passed into the action.","ref":"dsl-ash-reactor.html#reactor-create-initial","title":"Ash.Reactor.reactor.create.initial","type":"DSL"},{"doc":"Declares a step that will call a create action on a resource.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.\n\n","ref":"dsl-ash-reactor.html#reactor-create","title":"Ash.Reactor.reactor.create","type":"DSL"},{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-change-wait_for-names","title":"Ash.Reactor.reactor.change.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-change-wait_for","title":"Ash.Reactor.reactor.change.wait_for","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the argument before it is passed to the step.\n","ref":"dsl-ash-reactor.html#reactor-change-argument-transform","title":"Ash.Reactor.reactor.change.argument.transform","type":"DSL"},{"doc":"What to use as the source of the argument. See `Reactor.Dsl.Argument` for more information.\n","ref":"dsl-ash-reactor.html#reactor-change-argument-source","title":"Ash.Reactor.reactor.change.argument.source","type":"DSL"},{"doc":"The name of the argument which will be used as the key in the `arguments` map passed to the implementation.\n","ref":"dsl-ash-reactor.html#reactor-change-argument-name","title":"Ash.Reactor.reactor.change.argument.name","type":"DSL"},{"doc":"Specifies an argument to a Reactor step.\n\nEach argument is a value which is either the result of another step, or an input value.\n\nIndividual arguments can be transformed with an arbitrary function before\nbeing passed to any steps.\n","ref":"dsl-ash-reactor.html#reactor-change-argument","title":"Ash.Reactor.reactor.change.argument","type":"DSL"},{"doc":"Fail if the result of the change is an invalid changeset","ref":"dsl-ash-reactor.html#reactor-change-fail_if_invalid?","title":"Ash.Reactor.reactor.change.fail_if_invalid?","type":"DSL"},{"doc":"Validations that should pass in order for this change to apply. These validations failing will result in this change being ignored.\n","ref":"dsl-ash-reactor.html#reactor-change-where","title":"Ash.Reactor.reactor.change.where","type":"DSL"},{"doc":"The module and options for a change. Also accepts a function that takes the changeset and the context. See `Ash.Resource.Change.Builtins` for builtin changes.\n","ref":"dsl-ash-reactor.html#reactor-change-change","title":"Ash.Reactor.reactor.change.change","type":"DSL"},{"doc":"If the change should only be run on valid changes. By default, all changes are run unless stated otherwise here.\n","ref":"dsl-ash-reactor.html#reactor-change-only_when_valid?","title":"Ash.Reactor.reactor.change.only_when_valid?","type":"DSL"},{"doc":"An optional description for the change","ref":"dsl-ash-reactor.html#reactor-change-description","title":"Ash.Reactor.reactor.change.description","type":"DSL"},{"doc":"The initial value to work from, either a resource or a changeset","ref":"dsl-ash-reactor.html#reactor-change-initial","title":"Ash.Reactor.reactor.change.initial","type":"DSL"},{"doc":"A unique name for this step.","ref":"dsl-ash-reactor.html#reactor-change-name","title":"Ash.Reactor.reactor.change.name","type":"DSL"},{"doc":"Declares a step that will modify a changeset.","ref":"dsl-ash-reactor.html#reactor-change","title":"Ash.Reactor.reactor.change","type":"DSL"},{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-bulk_update-wait_for-names","title":"Ash.Reactor.reactor.bulk_update.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-bulk_update-wait_for","title":"Ash.Reactor.reactor.bulk_update.wait_for","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the tenant before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-bulk_update-tenant-transform","title":"Ash.Reactor.reactor.bulk_update.tenant.transform","type":"DSL"},{"doc":"What to use as the source of the tenant.","ref":"dsl-ash-reactor.html#reactor-bulk_update-tenant-source","title":"Ash.Reactor.reactor.bulk_update.tenant.source","type":"DSL"},{"doc":"Specifies the action tenant","ref":"dsl-ash-reactor.html#reactor-bulk_update-tenant","title":"Ash.Reactor.reactor.bulk_update.tenant","type":"DSL"},{"doc":"An optional transformation function which will transform the inputs before executing the action.","ref":"dsl-ash-reactor.html#reactor-bulk_update-inputs-transform","title":"Ash.Reactor.reactor.bulk_update.inputs.transform","type":"DSL"},{"doc":"","ref":"dsl-ash-reactor.html#reactor-bulk_update-inputs-template","title":"Ash.Reactor.reactor.bulk_update.inputs.template","type":"DSL"},{"doc":"Specify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-bulk_update-inputs","title":"Ash.Reactor.reactor.bulk_update.inputs","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the actor before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-bulk_update-actor-transform","title":"Ash.Reactor.reactor.bulk_update.actor.transform","type":"DSL"},{"doc":"What to use as the source of the actor.","ref":"dsl-ash-reactor.html#reactor-bulk_update-actor-source","title":"Ash.Reactor.reactor.bulk_update.actor.source","type":"DSL"},{"doc":"Specifies the action actor","ref":"dsl-ash-reactor.html#reactor-bulk_update-actor","title":"Ash.Reactor.reactor.bulk_update.actor","type":"DSL"},{"doc":"How to handle undoing this action","ref":"dsl-ash-reactor.html#reactor-bulk_update-undo","title":"Ash.Reactor.reactor.bulk_update.undo","type":"DSL"},{"doc":"The name of the action to call on the resource when the step is to be undone.\n","ref":"dsl-ash-reactor.html#reactor-bulk_update-undo_action","title":"Ash.Reactor.reactor.bulk_update.undo_action","type":"DSL"},{"doc":"The resource to call the action on.\n","ref":"dsl-ash-reactor.html#reactor-bulk_update-resource","title":"Ash.Reactor.reactor.bulk_update.resource","type":"DSL"},{"doc":"A unique name for the step.","ref":"dsl-ash-reactor.html#reactor-bulk_update-name","title":"Ash.Reactor.reactor.bulk_update.name","type":"DSL"},{"doc":"A description for the step","ref":"dsl-ash-reactor.html#reactor-bulk_update-description","title":"Ash.Reactor.reactor.bulk_update.description","type":"DSL"},{"doc":"Explicitly enable or disable authorization for the action.","ref":"dsl-ash-reactor.html#reactor-bulk_update-authorize?","title":"Ash.Reactor.reactor.bulk_update.authorize?","type":"DSL"},{"doc":"When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`.","ref":"dsl-ash-reactor.html#reactor-bulk_update-async?","title":"Ash.Reactor.reactor.bulk_update.async?","type":"DSL"},{"doc":"The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section.","ref":"dsl-ash-reactor.html#reactor-bulk_update-domain","title":"Ash.Reactor.reactor.bulk_update.domain","type":"DSL"},{"doc":"The name of the action to call on the resource.\n","ref":"dsl-ash-reactor.html#reactor-bulk_update-action","title":"Ash.Reactor.reactor.bulk_update.action","type":"DSL"},{"doc":"Whether or not to wrap the entire execution in a transaction, each batch, or not at all.","ref":"dsl-ash-reactor.html#reactor-bulk_update-transaction","title":"Ash.Reactor.reactor.bulk_update.transaction","type":"DSL"},{"doc":"If none is provided, the timeout configured on the domain is used (which defaults to `30_000`).","ref":"dsl-ash-reactor.html#reactor-bulk_update-timeout","title":"Ash.Reactor.reactor.bulk_update.timeout","type":"DSL"},{"doc":"Bulk results can be entirely or partially successful. Chooses the `Ash.BulkResult` state to consider the step a success.","ref":"dsl-ash-reactor.html#reactor-bulk_update-success_state","title":"Ash.Reactor.reactor.bulk_update.success_state","type":"DSL"},{"doc":"The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"dsl-ash-reactor.html#reactor-bulk_update-stream_with","title":"Ash.Reactor.reactor.bulk_update.stream_with","type":"DSL"},{"doc":"Batch size to use if provided a query and the query must be streamed.","ref":"dsl-ash-reactor.html#reactor-bulk_update-stream_batch_size","title":"Ash.Reactor.reactor.bulk_update.stream_batch_size","type":"DSL"},{"doc":"The strategy or strategies to enable. `:stream` is used in all cases if the data layer does not support atomics.","ref":"dsl-ash-reactor.html#reactor-bulk_update-strategy","title":"Ash.Reactor.reactor.bulk_update.strategy","type":"DSL"},{"doc":"If `true`, the first encountered error will stop the action and be returned. Otherwise, errors will be skipped.","ref":"dsl-ash-reactor.html#reactor-bulk_update-stop_on_error?","title":"Ash.Reactor.reactor.bulk_update.stop_on_error?","type":"DSL"},{"doc":"Whether or not to sort results by their input position, in cases where `return_records?` is set to `true`.","ref":"dsl-ash-reactor.html#reactor-bulk_update-sorted?","title":"Ash.Reactor.reactor.bulk_update.sorted?","type":"DSL"},{"doc":"A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.","ref":"dsl-ash-reactor.html#reactor-bulk_update-skip_unknown_inputs","title":"Ash.Reactor.reactor.bulk_update.skip_unknown_inputs","type":"DSL"},{"doc":"A select statement to apply to records. Ignored if `return_records?` is not `true`.","ref":"dsl-ash-reactor.html#reactor-bulk_update-select","title":"Ash.Reactor.reactor.bulk_update.select","type":"DSL"},{"doc":"Whether or not to rollback the transaction on error, if the resource is in a transaction.","ref":"dsl-ash-reactor.html#reactor-bulk_update-rollback_on_error?","title":"Ash.Reactor.reactor.bulk_update.rollback_on_error?","type":"DSL"},{"doc":"Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer.","ref":"dsl-ash-reactor.html#reactor-bulk_update-reuse_values?","title":"Ash.Reactor.reactor.bulk_update.reuse_values?","type":"DSL"},{"doc":"If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.","ref":"dsl-ash-reactor.html#reactor-bulk_update-return_stream?","title":"Ash.Reactor.reactor.bulk_update.return_stream?","type":"DSL"},{"doc":"Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts.","ref":"dsl-ash-reactor.html#reactor-bulk_update-return_records?","title":"Ash.Reactor.reactor.bulk_update.return_records?","type":"DSL"},{"doc":"Whether or not to return all of the errors that occur. Defaults to false to account for large inserts.","ref":"dsl-ash-reactor.html#reactor-bulk_update-return_errors?","title":"Ash.Reactor.reactor.bulk_update.return_errors?","type":"DSL"},{"doc":"The action to use when building the read query.","ref":"dsl-ash-reactor.html#reactor-bulk_update-read_action","title":"Ash.Reactor.reactor.bulk_update.read_action","type":"DSL"},{"doc":"Pagination options, see [the pagination docs for more](read-actions.md#pagination).","ref":"dsl-ash-reactor.html#reactor-bulk_update-page","title":"Ash.Reactor.reactor.bulk_update.page","type":"DSL"},{"doc":"Whether or not to generate any notifications. This may be intensive for large bulk actions.","ref":"dsl-ash-reactor.html#reactor-bulk_update-notify?","title":"Ash.Reactor.reactor.bulk_update.notify?","type":"DSL"},{"doc":"Metadata to be merged into the metadata field for all notifications sent from this operation.","ref":"dsl-ash-reactor.html#reactor-bulk_update-notification_metadata","title":"Ash.Reactor.reactor.bulk_update.notification_metadata","type":"DSL"},{"doc":"If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously.","ref":"dsl-ash-reactor.html#reactor-bulk_update-max_concurrency","title":"Ash.Reactor.reactor.bulk_update.max_concurrency","type":"DSL"},{"doc":"A lock statement to add onto the query.","ref":"dsl-ash-reactor.html#reactor-bulk_update-lock","title":"Ash.Reactor.reactor.bulk_update.lock","type":"DSL"},{"doc":"A collection of inputs to pass to the create action. Must implement the `Enumerable` protocol.","ref":"dsl-ash-reactor.html#reactor-bulk_update-initial","title":"Ash.Reactor.reactor.bulk_update.initial","type":"DSL"},{"doc":"A filter to apply to records. This is also applied to a stream of inputs.","ref":"dsl-ash-reactor.html#reactor-bulk_update-filter","title":"Ash.Reactor.reactor.bulk_update.filter","type":"DSL"},{"doc":"The number of records to include in each batch. Defaults to the `default_limit` or `max_page_size` of the action, or 100.","ref":"dsl-ash-reactor.html#reactor-bulk_update-batch_size","title":"Ash.Reactor.reactor.bulk_update.batch_size","type":"DSL"},{"doc":"If a query is given, determines whether or not authorization is run on that query.","ref":"dsl-ash-reactor.html#reactor-bulk_update-authorize_query?","title":"Ash.Reactor.reactor.bulk_update.authorize_query?","type":"DSL"},{"doc":"If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error","ref":"dsl-ash-reactor.html#reactor-bulk_update-authorize_query_with","title":"Ash.Reactor.reactor.bulk_update.authorize_query_with","type":"DSL"},{"doc":"If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error","ref":"dsl-ash-reactor.html#reactor-bulk_update-authorize_changeset_with","title":"Ash.Reactor.reactor.bulk_update.authorize_changeset_with","type":"DSL"},{"doc":"A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.","ref":"dsl-ash-reactor.html#reactor-bulk_update-atomic_update","title":"Ash.Reactor.reactor.bulk_update.atomic_update","type":"DSL"},{"doc":"Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting","ref":"dsl-ash-reactor.html#reactor-bulk_update-assume_casted?","title":"Ash.Reactor.reactor.bulk_update.assume_casted?","type":"DSL"},{"doc":"The 'worst' strategy allowed to be used to fetch records if the :stream strategy is chosen. See the `Ash.stream!/2` docs for more.","ref":"dsl-ash-reactor.html#reactor-bulk_update-allow_stream_with","title":"Ash.Reactor.reactor.bulk_update.allow_stream_with","type":"DSL"},{"doc":"Declares a step which will call an update action on a resource with a collection of inputs.\n\n> ### Check the docs! {: .warning}\n>\n> Make sure to thoroughly read and understand the documentation in `Ash.bulk_update/4` before using.  Read each option and note the default values.  By default, bulk updates don't return records or errors, and don't emit notifications.\n\nCaveats/differences from `Ash.bulk_update/4`:\n\n1. `max_concurrency` specifies the number of tasks that Ash will start to process batches, and has no effect on Reactor concurrency targets.  It's could be possible to create a very large number of processes if a number of steps are running bulk actions with a high degree of concurrency.\n2. Setting `notify?` to `true` will cause both `notify?` and `return_notifications?` to be set to true in the underlying call to `Ash.bulk_create/4`. Notifications will then be managed by the `Ash.Reactor.Notifications` Reactor middleware.\n3. If you specify an undo action it must be a generic action which takes the bulk result as it's only argument.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.\n\n","ref":"dsl-ash-reactor.html#reactor-bulk_update","title":"Ash.Reactor.reactor.bulk_update","type":"DSL"},{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-bulk_create-wait_for-names","title":"Ash.Reactor.reactor.bulk_create.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-bulk_create-wait_for","title":"Ash.Reactor.reactor.bulk_create.wait_for","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the tenant before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-bulk_create-tenant-transform","title":"Ash.Reactor.reactor.bulk_create.tenant.transform","type":"DSL"},{"doc":"What to use as the source of the tenant.","ref":"dsl-ash-reactor.html#reactor-bulk_create-tenant-source","title":"Ash.Reactor.reactor.bulk_create.tenant.source","type":"DSL"},{"doc":"Specifies the action tenant","ref":"dsl-ash-reactor.html#reactor-bulk_create-tenant","title":"Ash.Reactor.reactor.bulk_create.tenant","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the load before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-bulk_create-load-transform","title":"Ash.Reactor.reactor.bulk_create.load.transform","type":"DSL"},{"doc":"What to use as the source of the load","ref":"dsl-ash-reactor.html#reactor-bulk_create-load-source","title":"Ash.Reactor.reactor.bulk_create.load.source","type":"DSL"},{"doc":"Allows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-bulk_create-load","title":"Ash.Reactor.reactor.bulk_create.load","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the actor before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-bulk_create-actor-transform","title":"Ash.Reactor.reactor.bulk_create.actor.transform","type":"DSL"},{"doc":"What to use as the source of the actor.","ref":"dsl-ash-reactor.html#reactor-bulk_create-actor-source","title":"Ash.Reactor.reactor.bulk_create.actor.source","type":"DSL"},{"doc":"Specifies the action actor","ref":"dsl-ash-reactor.html#reactor-bulk_create-actor","title":"Ash.Reactor.reactor.bulk_create.actor","type":"DSL"},{"doc":"How to handle undoing this action","ref":"dsl-ash-reactor.html#reactor-bulk_create-undo","title":"Ash.Reactor.reactor.bulk_create.undo","type":"DSL"},{"doc":"The name of the action to call on the resource when the step is to be undone.\n","ref":"dsl-ash-reactor.html#reactor-bulk_create-undo_action","title":"Ash.Reactor.reactor.bulk_create.undo_action","type":"DSL"},{"doc":"The resource to call the action on.\n","ref":"dsl-ash-reactor.html#reactor-bulk_create-resource","title":"Ash.Reactor.reactor.bulk_create.resource","type":"DSL"},{"doc":"A unique name for the step.","ref":"dsl-ash-reactor.html#reactor-bulk_create-name","title":"Ash.Reactor.reactor.bulk_create.name","type":"DSL"},{"doc":"A description for the step","ref":"dsl-ash-reactor.html#reactor-bulk_create-description","title":"Ash.Reactor.reactor.bulk_create.description","type":"DSL"},{"doc":"Explicitly enable or disable authorization for the action.","ref":"dsl-ash-reactor.html#reactor-bulk_create-authorize?","title":"Ash.Reactor.reactor.bulk_create.authorize?","type":"DSL"},{"doc":"When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`.","ref":"dsl-ash-reactor.html#reactor-bulk_create-async?","title":"Ash.Reactor.reactor.bulk_create.async?","type":"DSL"},{"doc":"The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section.","ref":"dsl-ash-reactor.html#reactor-bulk_create-domain","title":"Ash.Reactor.reactor.bulk_create.domain","type":"DSL"},{"doc":"The name of the action to call on the resource.\n","ref":"dsl-ash-reactor.html#reactor-bulk_create-action","title":"Ash.Reactor.reactor.bulk_create.action","type":"DSL"},{"doc":"Whether or not this action should be executed as an upsert.","ref":"dsl-ash-reactor.html#reactor-bulk_create-upsert?","title":"Ash.Reactor.reactor.bulk_create.upsert?","type":"DSL"},{"doc":"The identity to use for the upsert","ref":"dsl-ash-reactor.html#reactor-bulk_create-upsert_identity","title":"Ash.Reactor.reactor.bulk_create.upsert_identity","type":"DSL"},{"doc":"The fields to upsert. If not set, the action's `upsert_fields` is used.","ref":"dsl-ash-reactor.html#reactor-bulk_create-upsert_fields","title":"Ash.Reactor.reactor.bulk_create.upsert_fields","type":"DSL"},{"doc":"Whether or not to wrap the entire execution in a transaction, each batch, or not at all.","ref":"dsl-ash-reactor.html#reactor-bulk_create-transaction","title":"Ash.Reactor.reactor.bulk_create.transaction","type":"DSL"},{"doc":"If none is provided, the timeout configured on the domain is used (which defaults to `30_000`).","ref":"dsl-ash-reactor.html#reactor-bulk_create-timeout","title":"Ash.Reactor.reactor.bulk_create.timeout","type":"DSL"},{"doc":"Bulk results can be entirely or partially successful. Chooses the `Ash.BulkResult` state to consider the step a success.","ref":"dsl-ash-reactor.html#reactor-bulk_create-success_state","title":"Ash.Reactor.reactor.bulk_create.success_state","type":"DSL"},{"doc":"If `true`, the first encountered error will stop the action and be returned. Otherwise, errors will be skipped.","ref":"dsl-ash-reactor.html#reactor-bulk_create-stop_on_error?","title":"Ash.Reactor.reactor.bulk_create.stop_on_error?","type":"DSL"},{"doc":"Whether or not to sort results by their input position, in cases where `return_records?` is set to `true`.","ref":"dsl-ash-reactor.html#reactor-bulk_create-sorted?","title":"Ash.Reactor.reactor.bulk_create.sorted?","type":"DSL"},{"doc":"A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.","ref":"dsl-ash-reactor.html#reactor-bulk_create-skip_unknown_inputs","title":"Ash.Reactor.reactor.bulk_create.skip_unknown_inputs","type":"DSL"},{"doc":"A select statement to apply to records. Ignored if `return_records?` is not `true`.","ref":"dsl-ash-reactor.html#reactor-bulk_create-select","title":"Ash.Reactor.reactor.bulk_create.select","type":"DSL"},{"doc":"Whether or not to rollback the transaction on error, if the resource is in a transaction.","ref":"dsl-ash-reactor.html#reactor-bulk_create-rollback_on_error?","title":"Ash.Reactor.reactor.bulk_create.rollback_on_error?","type":"DSL"},{"doc":"If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.","ref":"dsl-ash-reactor.html#reactor-bulk_create-return_stream?","title":"Ash.Reactor.reactor.bulk_create.return_stream?","type":"DSL"},{"doc":"Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts.","ref":"dsl-ash-reactor.html#reactor-bulk_create-return_records?","title":"Ash.Reactor.reactor.bulk_create.return_records?","type":"DSL"},{"doc":"Whether or not to return all of the errors that occur. Defaults to false to account for large inserts.","ref":"dsl-ash-reactor.html#reactor-bulk_create-return_errors?","title":"Ash.Reactor.reactor.bulk_create.return_errors?","type":"DSL"},{"doc":"The action to use when building the read query.","ref":"dsl-ash-reactor.html#reactor-bulk_create-read_action","title":"Ash.Reactor.reactor.bulk_create.read_action","type":"DSL"},{"doc":"Whether or not to generate any notifications. This may be intensive for large bulk actions.","ref":"dsl-ash-reactor.html#reactor-bulk_create-notify?","title":"Ash.Reactor.reactor.bulk_create.notify?","type":"DSL"},{"doc":"Metadata to be merged into the metadata field for all notifications sent from this operation.","ref":"dsl-ash-reactor.html#reactor-bulk_create-notification_metadata","title":"Ash.Reactor.reactor.bulk_create.notification_metadata","type":"DSL"},{"doc":"If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously.","ref":"dsl-ash-reactor.html#reactor-bulk_create-max_concurrency","title":"Ash.Reactor.reactor.bulk_create.max_concurrency","type":"DSL"},{"doc":"A collection of inputs to pass to the create action. Must implement the `Enumerable` protocol.","ref":"dsl-ash-reactor.html#reactor-bulk_create-initial","title":"Ash.Reactor.reactor.bulk_create.initial","type":"DSL"},{"doc":"The number of records to include in each batch. Defaults to the `default_limit` or `max_page_size` of the action, or 100.","ref":"dsl-ash-reactor.html#reactor-bulk_create-batch_size","title":"Ash.Reactor.reactor.bulk_create.batch_size","type":"DSL"},{"doc":"If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error","ref":"dsl-ash-reactor.html#reactor-bulk_create-authorize_query_with","title":"Ash.Reactor.reactor.bulk_create.authorize_query_with","type":"DSL"},{"doc":"If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error","ref":"dsl-ash-reactor.html#reactor-bulk_create-authorize_changeset_with","title":"Ash.Reactor.reactor.bulk_create.authorize_changeset_with","type":"DSL"},{"doc":"Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting","ref":"dsl-ash-reactor.html#reactor-bulk_create-assume_casted?","title":"Ash.Reactor.reactor.bulk_create.assume_casted?","type":"DSL"},{"doc":"Declares a step which will call a create action on a resource with a collection of inputs.\n\n> ### Check the docs! {: .warning}\n>\n> Make sure to thoroughly read and understand the documentation in `Ash.bulk_create/4` before using. Read each option and note the default values. By default, bulk creates don't return records or errors, and don't emit notifications.\n\nCaveats/differences from `Ash.bulk_create/4`:\n\n1. `max_concurrency` specifies the number of tasks that Ash will start to process batches, and has no effect on Reactor concurrency targets.  It's could be possible to create a very large number of processes if a number of steps are running bulk actions with a high degree of concurrency.\n2. Setting `notify?` to `true` will cause both `notify?` and `return_notifications?` to be set to true in the underlying call to `Ash.bulk_create/4`. Notifications will then be managed by the `Ash.Reactor.Notifications` Reactor middleware.\n3. If you specify an undo action it must be a generic action which takes the bulk result as it's only argument.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.\n\n","ref":"dsl-ash-reactor.html#reactor-bulk_create","title":"Ash.Reactor.reactor.bulk_create","type":"DSL"},{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-wait_for-names","title":"Ash.Reactor.reactor.ash_step.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-ash_step-wait_for","title":"Ash.Reactor.reactor.ash_step.wait_for","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the argument before it is passed to the step.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-argument-transform","title":"Ash.Reactor.reactor.ash_step.argument.transform","type":"DSL"},{"doc":"What to use as the source of the argument. See `Reactor.Dsl.Argument` for more information.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-argument-source","title":"Ash.Reactor.reactor.ash_step.argument.source","type":"DSL"},{"doc":"The name of the argument which will be used as the key in the `arguments` map passed to the implementation.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-argument-name","title":"Ash.Reactor.reactor.ash_step.argument.name","type":"DSL"},{"doc":"Specifies an argument to a Reactor step.\n\nEach argument is a value which is either the result of another step, or an input value.\n\nIndividual arguments can be transformed with an arbitrary function before\nbeing passed to any steps.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-argument","title":"Ash.Reactor.reactor.ash_step.argument","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the entire argument map before it is passed to the step.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-transform","title":"Ash.Reactor.reactor.ash_step.transform","type":"DSL"},{"doc":"When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-async?","title":"Ash.Reactor.reactor.ash_step.async?","type":"DSL"},{"doc":"The maximum number of times that the step can be retried before failing. Only used when the result of the `compensate/4` callback is `:retry`.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-max_retries","title":"Ash.Reactor.reactor.ash_step.max_retries","type":"DSL"},{"doc":"Provide an anonymous function which implements the `undo/4` callback. Cannot be provided at the same time as the `impl` argument.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-compensate","title":"Ash.Reactor.reactor.ash_step.compensate","type":"DSL"},{"doc":"Provide an anonymous function which implements the `undo/4` callback. Cannot be provided at the same time as the `impl` argument.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-undo","title":"Ash.Reactor.reactor.ash_step.undo","type":"DSL"},{"doc":"Provide an anonymous function which implements the `run/3` callback. Cannot be provided at the same time as the `impl` argument.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-run","title":"Ash.Reactor.reactor.ash_step.run","type":"DSL"},{"doc":"A module that implements the `Reactor.Step` behaviour that provides the implementation.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-impl","title":"Ash.Reactor.reactor.ash_step.impl","type":"DSL"},{"doc":"A unique name for the step. Used when choosing the return value of the Reactor and for arguments into other steps.\n","ref":"dsl-ash-reactor.html#reactor-ash_step-name","title":"Ash.Reactor.reactor.ash_step.name","type":"DSL"},{"doc":"Specifies a Ash.Reactor step.\n\nThis is basically a wrapper around `Reactor.step`, in order to handle\nany returned notifications from the run step/function.\n\nSee the `Reactor.Step` behaviour for more information.\n","ref":"dsl-ash-reactor.html#reactor-ash_step","title":"Ash.Reactor.reactor.ash_step","type":"DSL"},{"doc":"The name of the step to wait for.\n","ref":"dsl-ash-reactor.html#reactor-action-wait_for-names","title":"Ash.Reactor.reactor.action.wait_for.names","type":"DSL"},{"doc":"Wait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`\n","ref":"dsl-ash-reactor.html#reactor-action-wait_for","title":"Ash.Reactor.reactor.action.wait_for","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the tenant before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-action-tenant-transform","title":"Ash.Reactor.reactor.action.tenant.transform","type":"DSL"},{"doc":"What to use as the source of the tenant.","ref":"dsl-ash-reactor.html#reactor-action-tenant-source","title":"Ash.Reactor.reactor.action.tenant.source","type":"DSL"},{"doc":"Specifies the action tenant","ref":"dsl-ash-reactor.html#reactor-action-tenant","title":"Ash.Reactor.reactor.action.tenant","type":"DSL"},{"doc":"An optional transformation function which will transform the inputs before executing the action.","ref":"dsl-ash-reactor.html#reactor-action-inputs-transform","title":"Ash.Reactor.reactor.action.inputs.transform","type":"DSL"},{"doc":"","ref":"dsl-ash-reactor.html#reactor-action-inputs-template","title":"Ash.Reactor.reactor.action.inputs.template","type":"DSL"},{"doc":"Specify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-action-inputs","title":"Ash.Reactor.reactor.action.inputs","type":"DSL"},{"doc":"An optional transformation function which can be used to modify the actor before it is passed to the action.","ref":"dsl-ash-reactor.html#reactor-action-actor-transform","title":"Ash.Reactor.reactor.action.actor.transform","type":"DSL"},{"doc":"What to use as the source of the actor.","ref":"dsl-ash-reactor.html#reactor-action-actor-source","title":"Ash.Reactor.reactor.action.actor.source","type":"DSL"},{"doc":"Specifies the action actor","ref":"dsl-ash-reactor.html#reactor-action-actor","title":"Ash.Reactor.reactor.action.actor","type":"DSL"},{"doc":"How to handle undoing this action","ref":"dsl-ash-reactor.html#reactor-action-undo","title":"Ash.Reactor.reactor.action.undo","type":"DSL"},{"doc":"The name of the action to call on the resource when the step is to be undone.\n","ref":"dsl-ash-reactor.html#reactor-action-undo_action","title":"Ash.Reactor.reactor.action.undo_action","type":"DSL"},{"doc":"The resource to call the action on.\n","ref":"dsl-ash-reactor.html#reactor-action-resource","title":"Ash.Reactor.reactor.action.resource","type":"DSL"},{"doc":"A unique name for the step.","ref":"dsl-ash-reactor.html#reactor-action-name","title":"Ash.Reactor.reactor.action.name","type":"DSL"},{"doc":"A description for the step","ref":"dsl-ash-reactor.html#reactor-action-description","title":"Ash.Reactor.reactor.action.description","type":"DSL"},{"doc":"Explicitly enable or disable authorization for the action.","ref":"dsl-ash-reactor.html#reactor-action-authorize?","title":"Ash.Reactor.reactor.action.authorize?","type":"DSL"},{"doc":"When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`.","ref":"dsl-ash-reactor.html#reactor-action-async?","title":"Ash.Reactor.reactor.action.async?","type":"DSL"},{"doc":"The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section.","ref":"dsl-ash-reactor.html#reactor-action-domain","title":"Ash.Reactor.reactor.action.domain","type":"DSL"},{"doc":"The name of the action to call on the resource.\n","ref":"dsl-ash-reactor.html#reactor-action-action","title":"Ash.Reactor.reactor.action.action","type":"DSL"},{"doc":"Declares a step that will call a generic action on a resource.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.\n\n","ref":"dsl-ash-reactor.html#reactor-action","title":"Ash.Reactor.reactor.action","type":"DSL"},{"doc":"A domain to use by default when calling actions","ref":"dsl-ash-reactor.html#ash-default_domain","title":"Ash.Reactor.ash.default_domain","type":"DSL"},{"doc":"Ash-related configuration for the `Ash.Reactor` extension","ref":"dsl-ash-reactor.html#ash","title":"Ash.Reactor.ash","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-forbid_unless-name","title":"Ash.Policy.Authorizer.field_policies.field_policy.forbid_unless.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-forbid_unless-check","title":"Ash.Policy.Authorizer.field_policies.field_policy.forbid_unless.check","type":"DSL"},{"doc":"If the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-forbid_unless","title":"Ash.Policy.Authorizer.field_policies.field_policy.forbid_unless","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-authorize_unless-name","title":"Ash.Policy.Authorizer.field_policies.field_policy.authorize_unless.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-authorize_unless-check","title":"Ash.Policy.Authorizer.field_policies.field_policy.authorize_unless.check","type":"DSL"},{"doc":"If the check is false, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-authorize_unless","title":"Ash.Policy.Authorizer.field_policies.field_policy.authorize_unless","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-forbid_if-name","title":"Ash.Policy.Authorizer.field_policies.field_policy.forbid_if.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-forbid_if-check","title":"Ash.Policy.Authorizer.field_policies.field_policy.forbid_if.check","type":"DSL"},{"doc":"If the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-forbid_if","title":"Ash.Policy.Authorizer.field_policies.field_policy.forbid_if","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-authorize_if-name","title":"Ash.Policy.Authorizer.field_policies.field_policy.authorize_if.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-authorize_if-check","title":"Ash.Policy.Authorizer.field_policies.field_policy.authorize_if.check","type":"DSL"},{"doc":"If the check is true, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-authorize_if","title":"Ash.Policy.Authorizer.field_policies.field_policy.authorize_if","type":"DSL"},{"doc":"A check or list of checks that must be true in order for this field policy to apply. If not specified, it always applies.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-condition","title":"Ash.Policy.Authorizer.field_policies.field_policy.condition","type":"DSL"},{"doc":"The field or fields that the policy applies to.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-fields","title":"Ash.Policy.Authorizer.field_policies.field_policy.fields","type":"DSL"},{"doc":"A description for the policy, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-description","title":"Ash.Policy.Authorizer.field_policies.field_policy.description","type":"DSL"},{"doc":"Field policies behave similarly to policies. See `d:Ash.Policy.Authorizer.field_policies`\nfor more.\n","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy","title":"Ash.Policy.Authorizer.field_policies.field_policy","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-forbid_unless-name","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.forbid_unless.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-forbid_unless-check","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.forbid_unless.check","type":"DSL"},{"doc":"If the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-forbid_unless","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.forbid_unless","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-authorize_unless-name","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.authorize_unless.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-authorize_unless-check","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.authorize_unless.check","type":"DSL"},{"doc":"If the check is false, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-authorize_unless","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.authorize_unless","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-forbid_if-name","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.forbid_if.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-forbid_if-check","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.forbid_if.check","type":"DSL"},{"doc":"If the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-forbid_if","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.forbid_if","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-authorize_if-name","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.authorize_if.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-authorize_if-check","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.authorize_if.check","type":"DSL"},{"doc":"If the check is true, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-authorize_if","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.authorize_if","type":"DSL"},{"doc":"A check or list of checks that must be true in order for this field policy to apply. If not specified, it always applies.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-condition","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.condition","type":"DSL"},{"doc":"The field or fields that the policy applies to.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-fields","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.fields","type":"DSL"},{"doc":"A description for the policy, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-description","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass.description","type":"DSL"},{"doc":"A field policy that, if passed, will skip all following field policies for that field or fields. If failed, field authorization moves on to the next policy","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass","title":"Ash.Policy.Authorizer.field_policies.field_policy_bypass","type":"DSL"},{"doc":"How private fields should be handeled by field policies in internal functions. See the [Policies guide](documentation/topics/security/policies.md#field-policies) for more.\n","ref":"dsl-ash-policy-authorizer.html#field_policies-private_fields","title":"Ash.Policy.Authorizer.field_policies.private_fields","type":"DSL"},{"doc":"Authorize access to specific fields via policies scoped to fields.\n\nIf *any* field policies exist then *all* fields must be authorized by a field policy.\nIf you want a \"deny-list\" style, then you can add policies for specific fields\nand add a catch-all policy using the special field name `:*`. All policies that apply\nto a field must be authorized.\n\nThe only exception to the above behavior is primary keys, which can always be read by everyone.\n\nAdditionally, keep in mind that adding `Ash.Policy.Authorizer` will require that all actions\npass policies. If you want to just add field policies, you will need to add a policy that allows\nall access explicitly, i.e\n\n```elixir\npolicies do\n  policy always() do\n    authorize_if always()\n  end\nend\n```\n\nUsing expressions: unlike in regular policies, expressions in field policies cannot refer\nto related entities currently. Instead, you will need to create aggregates or expression calculations\nthat return the results you want to reference.\n\nIn results, forbidden fields will be replaced with a special value: `%Ash.ForbiddenField{}`.\n\nWhen these fields are referred to in filters, they will be replaced with an expression that evaluates\nto `nil`. To support this behavior, only expression/filter checks are allowed in field policies.\n","ref":"dsl-ash-policy-authorizer.html#field_policies","title":"Ash.Policy.Authorizer.field_policies","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-bypass-forbid_unless-name","title":"Ash.Policy.Authorizer.policies.bypass.forbid_unless.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-bypass-forbid_unless-check","title":"Ash.Policy.Authorizer.policies.bypass.forbid_unless.check","type":"DSL"},{"doc":"If the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-bypass-forbid_unless","title":"Ash.Policy.Authorizer.policies.bypass.forbid_unless","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-bypass-authorize_unless-name","title":"Ash.Policy.Authorizer.policies.bypass.authorize_unless.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-bypass-authorize_unless-check","title":"Ash.Policy.Authorizer.policies.bypass.authorize_unless.check","type":"DSL"},{"doc":"If the check is false, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-bypass-authorize_unless","title":"Ash.Policy.Authorizer.policies.bypass.authorize_unless","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-bypass-forbid_if-name","title":"Ash.Policy.Authorizer.policies.bypass.forbid_if.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-bypass-forbid_if-check","title":"Ash.Policy.Authorizer.policies.bypass.forbid_if.check","type":"DSL"},{"doc":"If the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-bypass-forbid_if","title":"Ash.Policy.Authorizer.policies.bypass.forbid_if","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-bypass-authorize_if-name","title":"Ash.Policy.Authorizer.policies.bypass.authorize_if.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-bypass-authorize_if-check","title":"Ash.Policy.Authorizer.policies.bypass.authorize_if.check","type":"DSL"},{"doc":"If the check is true, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-bypass-authorize_if","title":"Ash.Policy.Authorizer.policies.bypass.authorize_if","type":"DSL"},{"doc":"A check or list of checks that must be true in order for this policy to apply.\n","ref":"dsl-ash-policy-authorizer.html#policies-bypass-condition","title":"Ash.Policy.Authorizer.policies.bypass.condition","type":"DSL"},{"doc":"Determines how the policy is applied. See the guide for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-bypass-access_type","title":"Ash.Policy.Authorizer.policies.bypass.access_type","type":"DSL"},{"doc":"A description for the policy, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-bypass-description","title":"Ash.Policy.Authorizer.policies.bypass.description","type":"DSL"},{"doc":"A policy that, if passed, will skip all following policies. If failed, authorization moves on to the next policy","ref":"dsl-ash-policy-authorizer.html#policies-bypass","title":"Ash.Policy.Authorizer.policies.bypass","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-forbid_unless-name","title":"Ash.Policy.Authorizer.policies.policy_group.policy.forbid_unless.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-forbid_unless-check","title":"Ash.Policy.Authorizer.policies.policy_group.policy.forbid_unless.check","type":"DSL"},{"doc":"If the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-forbid_unless","title":"Ash.Policy.Authorizer.policies.policy_group.policy.forbid_unless","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-authorize_unless-name","title":"Ash.Policy.Authorizer.policies.policy_group.policy.authorize_unless.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-authorize_unless-check","title":"Ash.Policy.Authorizer.policies.policy_group.policy.authorize_unless.check","type":"DSL"},{"doc":"If the check is false, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-authorize_unless","title":"Ash.Policy.Authorizer.policies.policy_group.policy.authorize_unless","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-forbid_if-name","title":"Ash.Policy.Authorizer.policies.policy_group.policy.forbid_if.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-forbid_if-check","title":"Ash.Policy.Authorizer.policies.policy_group.policy.forbid_if.check","type":"DSL"},{"doc":"If the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-forbid_if","title":"Ash.Policy.Authorizer.policies.policy_group.policy.forbid_if","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-authorize_if-name","title":"Ash.Policy.Authorizer.policies.policy_group.policy.authorize_if.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-authorize_if-check","title":"Ash.Policy.Authorizer.policies.policy_group.policy.authorize_if.check","type":"DSL"},{"doc":"If the check is true, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-authorize_if","title":"Ash.Policy.Authorizer.policies.policy_group.policy.authorize_if","type":"DSL"},{"doc":"A check or list of checks that must be true in order for this policy to apply.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-condition","title":"Ash.Policy.Authorizer.policies.policy_group.policy.condition","type":"DSL"},{"doc":"Determines how the policy is applied. See the guide for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-access_type","title":"Ash.Policy.Authorizer.policies.policy_group.policy.access_type","type":"DSL"},{"doc":"A description for the policy, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-description","title":"Ash.Policy.Authorizer.policies.policy_group.policy.description","type":"DSL"},{"doc":"A policy has a name, a condition, and a list of checks.\n\nChecks apply logically in the order they are specified, from top to bottom.\nIf no check explicitly authorizes the request, then the request is forbidden.\nThis means that, if you want to \"blacklist\" instead of \"whitelist\", you likely\nwant to add an `authorize_if always()` at the bottom of your policy, like so:\n\n```elixir\npolicy action_type(:read) do\n  forbid_if not_logged_in()\n  forbid_if user_is_denylisted()\n  forbid_if user_is_in_denylisted_group()\n\n  authorize_if always()\nend\n```\n\nIf the policy should always run, use the `always()` check, like so:\n\n```elixir\npolicy always() do\n  ...\nend\n```\n\nSee the [policies guide](/documentation/topics/security/policies.md) for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy","title":"Ash.Policy.Authorizer.policies.policy_group.policy","type":"DSL"},{"doc":"A check or list of checks that must be true in order for this policy to apply.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-condition","title":"Ash.Policy.Authorizer.policies.policy_group.condition","type":"DSL"},{"doc":"Groups a set of policies together by some condition.\n\nIf the condition on the policy group does not apply, then none of the policies within it apply.\n\nThis is primarily syntactic sugar. At compile time, the conditions from the policy group are\nadded to each policy it contains, and the list is flattened out. This exists primarily to make it\neasier to reason about and write policies.\n\nThe following are equivalent:\n\n```elixir\npolicy_group condition1 do\n  policy condition2 do\n    ...\n  end\n\n  policy condition3 do\n    ...\n  end\nend\n```\n\nand\n\n```elixir\npolicy [condition1, condition2] do\n  ...\nend\n\npolicy [condition1, condition3] do\n  ...\nend\n```\n","ref":"dsl-ash-policy-authorizer.html#policies-policy_group","title":"Ash.Policy.Authorizer.policies.policy_group","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-policy-forbid_unless-name","title":"Ash.Policy.Authorizer.policies.policy.forbid_unless.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy-forbid_unless-check","title":"Ash.Policy.Authorizer.policies.policy.forbid_unless.check","type":"DSL"},{"doc":"If the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy-forbid_unless","title":"Ash.Policy.Authorizer.policies.policy.forbid_unless","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-policy-authorize_unless-name","title":"Ash.Policy.Authorizer.policies.policy.authorize_unless.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy-authorize_unless-check","title":"Ash.Policy.Authorizer.policies.policy.authorize_unless.check","type":"DSL"},{"doc":"If the check is false, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy-authorize_unless","title":"Ash.Policy.Authorizer.policies.policy.authorize_unless","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-policy-forbid_if-name","title":"Ash.Policy.Authorizer.policies.policy.forbid_if.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy-forbid_if-check","title":"Ash.Policy.Authorizer.policies.policy.forbid_if.check","type":"DSL"},{"doc":"If the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy-forbid_if","title":"Ash.Policy.Authorizer.policies.policy.forbid_if","type":"DSL"},{"doc":"A short name or description for the check, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-policy-authorize_if-name","title":"Ash.Policy.Authorizer.policies.policy.authorize_if.name","type":"DSL"},{"doc":"The check to run. See `Ash.Policy.Check` for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy-authorize_if-check","title":"Ash.Policy.Authorizer.policies.policy.authorize_if.check","type":"DSL"},{"doc":"If the check is true, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy-authorize_if","title":"Ash.Policy.Authorizer.policies.policy.authorize_if","type":"DSL"},{"doc":"A check or list of checks that must be true in order for this policy to apply.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy-condition","title":"Ash.Policy.Authorizer.policies.policy.condition","type":"DSL"},{"doc":"Determines how the policy is applied. See the guide for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy-access_type","title":"Ash.Policy.Authorizer.policies.policy.access_type","type":"DSL"},{"doc":"A description for the policy, used when explaining authorization results","ref":"dsl-ash-policy-authorizer.html#policies-policy-description","title":"Ash.Policy.Authorizer.policies.policy.description","type":"DSL"},{"doc":"A policy has a name, a condition, and a list of checks.\n\nChecks apply logically in the order they are specified, from top to bottom.\nIf no check explicitly authorizes the request, then the request is forbidden.\nThis means that, if you want to \"blacklist\" instead of \"whitelist\", you likely\nwant to add an `authorize_if always()` at the bottom of your policy, like so:\n\n```elixir\npolicy action_type(:read) do\n  forbid_if not_logged_in()\n  forbid_if user_is_denylisted()\n  forbid_if user_is_in_denylisted_group()\n\n  authorize_if always()\nend\n```\n\nIf the policy should always run, use the `always()` check, like so:\n\n```elixir\npolicy always() do\n  ...\nend\n```\n\nSee the [policies guide](/documentation/topics/security/policies.md) for more.\n","ref":"dsl-ash-policy-authorizer.html#policies-policy","title":"Ash.Policy.Authorizer.policies.policy","type":"DSL"},{"doc":"The default access type of policies for this resource.\n","ref":"dsl-ash-policy-authorizer.html#policies-default_access_type","title":"Ash.Policy.Authorizer.policies.default_access_type","type":"DSL"},{"doc":"A section for declaring authorization policies.\n\nEach policy that applies must pass independently in order for the\nrequest to be authorized.\n\nSee the [policies guide](/documentation/topics/security/policies.md) for more.\n","ref":"dsl-ash-policy-authorizer.html#policies","title":"Ash.Policy.Authorizer.policies","type":"DSL"},{"doc":"The module to use as a dispatcher. If none is set, the pubsub module provided is used.","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish_all-dispatcher","title":"Ash.Notifier.PubSub.pub_sub.publish_all.dispatcher","type":"DSL"},{"doc":"The name of the event to publish. Defaults to the action name","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish_all-event","title":"Ash.Notifier.PubSub.pub_sub.publish_all.event","type":"DSL"},{"doc":"The topic to publish","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish_all-topic","title":"Ash.Notifier.PubSub.pub_sub.publish_all.topic","type":"DSL"},{"doc":"Whether or not to publish messages with both the new values and the old values for referencing changed attributes","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish_all-previous_values?","title":"Ash.Notifier.PubSub.pub_sub.publish_all.previous_values?","type":"DSL"},{"doc":"The name of the action that should be published","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish_all-action","title":"Ash.Notifier.PubSub.pub_sub.publish_all.action","type":"DSL"},{"doc":"Publish on all actions of a given type","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish_all-type","title":"Ash.Notifier.PubSub.pub_sub.publish_all.type","type":"DSL"},{"doc":"Works the same as `publish`, except that it takes a type and publishes all actions of that type.\n","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish_all","title":"Ash.Notifier.PubSub.pub_sub.publish_all","type":"DSL"},{"doc":"The module to use as a dispatcher. If none is set, the pubsub module provided is used.","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish-dispatcher","title":"Ash.Notifier.PubSub.pub_sub.publish.dispatcher","type":"DSL"},{"doc":"The name of the event to publish. Defaults to the action name","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish-event","title":"Ash.Notifier.PubSub.pub_sub.publish.event","type":"DSL"},{"doc":"The topic to publish","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish-topic","title":"Ash.Notifier.PubSub.pub_sub.publish.topic","type":"DSL"},{"doc":"Whether or not to publish messages with both the new values and the old values for referencing changed attributes","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish-previous_values?","title":"Ash.Notifier.PubSub.pub_sub.publish.previous_values?","type":"DSL"},{"doc":"The name of the action that should be published","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish-action","title":"Ash.Notifier.PubSub.pub_sub.publish.action","type":"DSL"},{"doc":"Configure a given action to publish its results over a given topic.","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish","title":"Ash.Notifier.PubSub.pub_sub.publish","type":"DSL"},{"doc":"A named pub sub to pass as the first argument to broadcast.","ref":"dsl-ash-notifier-pubsub.html#pub_sub-name","title":"Ash.Notifier.PubSub.pub_sub.name","type":"DSL"},{"doc":"What shape the event payloads will be in. See\n","ref":"dsl-ash-notifier-pubsub.html#pub_sub-broadcast_type","title":"Ash.Notifier.PubSub.pub_sub.broadcast_type","type":"DSL"},{"doc":"A delimiter for building topics. Default is a colon (:)","ref":"dsl-ash-notifier-pubsub.html#pub_sub-delimiter","title":"Ash.Notifier.PubSub.pub_sub.delimiter","type":"DSL"},{"doc":"A prefix for all pubsub messages, e.g `users`. A message with `created` would be published as `users:created`","ref":"dsl-ash-notifier-pubsub.html#pub_sub-prefix","title":"Ash.Notifier.PubSub.pub_sub.prefix","type":"DSL"},{"doc":"The module to call `broadcast/3` on e.g module.broadcast(topic, event, message).","ref":"dsl-ash-notifier-pubsub.html#pub_sub-module","title":"Ash.Notifier.PubSub.pub_sub.module","type":"DSL"},{"doc":"A section for configuring how resource actions are published over pubsub\n","ref":"dsl-ash-notifier-pubsub.html#pub_sub","title":"Ash.Notifier.PubSub.pub_sub","type":"DSL"},{"doc":"The table name to use, defaults to the name of the resource","ref":"dsl-ash-datalayer-mnesia.html#mnesia-table","title":"Ash.DataLayer.Mnesia.mnesia.table","type":"DSL"},{"doc":"A section for configuring the mnesia data layer\n","ref":"dsl-ash-datalayer-mnesia.html#mnesia","title":"Ash.DataLayer.Mnesia.mnesia","type":"DSL"},{"doc":"The name of the table. Defaults to the resource name.\n","ref":"dsl-ash-datalayer-ets.html#ets-table","title":"Ash.DataLayer.Ets.ets.table","type":"DSL"},{"doc":"Sets the ets table protection to private, and scopes it to only this process. The table name will not be used directly if this is true, to allow multiple processes to use this resource separately.","ref":"dsl-ash-datalayer-ets.html#ets-private?","title":"Ash.DataLayer.Ets.ets.private?","type":"DSL"},{"doc":"A section for configuring the ets data layer\n","ref":"dsl-ash-datalayer-ets.html#ets","title":"Ash.DataLayer.Ets.ets","type":"DSL"},{"doc":"When to run authorization for a given request.\n","ref":"dsl-ash-domain.html#authorization-authorize","title":"Ash.Domain.authorization.authorize","type":"DSL"},{"doc":"Requires that an actor has been supplied.","ref":"dsl-ash-domain.html#authorization-require_actor?","title":"Ash.Domain.authorization.require_actor?","type":"DSL"},{"doc":"Options for how requests are authorized using this domain. See the [Sensitive Data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-domain.html#authorization","title":"Ash.Domain.authorization","type":"DSL"},{"doc":"The name to use in traces. Defaults to the last part of the module. See the [monitoring guide](/documentation/topics/monitoring.md) for more\n","ref":"dsl-ash-domain.html#execution-trace_name","title":"Ash.Domain.execution.trace_name","type":"DSL"},{"doc":"The default timeout in milliseconds to use for requests using this domain. See the [timeouts guide](/documentation/topics/timeouts.md) for more.\n","ref":"dsl-ash-domain.html#execution-timeout","title":"Ash.Domain.execution.timeout","type":"DSL"},{"doc":"Options for how requests are executed using this domain","ref":"dsl-ash-domain.html#execution","title":"Ash.Domain.execution","type":"DSL"},{"doc":"Supply field or argument values referenced by the calculation, in the form of :name, `{:arg, :name}` and/or `{:ref, :name}`. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.\n","ref":"dsl-ash-domain.html#resources-resource-define_calculation-args","title":"Ash.Domain.resources.resource.define_calculation.args","type":"DSL"},{"doc":"The name of the calculation that will be evaluated. Defaults to the same name as the function.","ref":"dsl-ash-domain.html#resources-resource-define_calculation-calculation","title":"Ash.Domain.resources.resource.define_calculation.calculation","type":"DSL"},{"doc":"The name of the function that will be defined","ref":"dsl-ash-domain.html#resources-resource-define_calculation-name","title":"Ash.Domain.resources.resource.define_calculation.name","type":"DSL"},{"doc":"Defines a function with the corresponding name and arguments, that evaluates a calculation. Use `:_record` to take an instance of a record. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.\n","ref":"dsl-ash-domain.html#resources-resource-define_calculation","title":"Ash.Domain.resources.resource.define_calculation","type":"DSL"},{"doc":"Takes an identity, gets its field list, and performs the same logic as `get_by` with those fields. Adds filters for read, update and destroy actions, replacing the `record` first argument.\n","ref":"dsl-ash-domain.html#resources-resource-define-get_by_identity","title":"Ash.Domain.resources.resource.define.get_by_identity","type":"DSL"},{"doc":"Takes a list of fields and adds those fields as arguments, which will then be used to filter. Sets `get?` to true and `require_reference?` to false automatically. Adds filters for read, update and destroy actions, replacing the `record` first argument.\n","ref":"dsl-ash-domain.html#resources-resource-define-get_by","title":"Ash.Domain.resources.resource.define.get_by","type":"DSL"},{"doc":"Expects to only receive a single result from a read action or a bulk update/destroy, and returns a single result instead of a list. Sets `require_reference?` to false automatically.\n","ref":"dsl-ash-domain.html#resources-resource-define-get?","title":"Ash.Domain.resources.resource.define.get?","type":"DSL"},{"doc":"For update and destroy actions, require a resource or identifier to be passed in as the first argument. Not relevant for other action types.","ref":"dsl-ash-domain.html#resources-resource-define-require_reference?","title":"Ash.Domain.resources.resource.define.require_reference?","type":"DSL"},{"doc":"If the action or interface is configured with `get?: true`, this determines whether or not an error is raised or `nil` is returned.","ref":"dsl-ash-domain.html#resources-resource-define-not_found_error?","title":"Ash.Domain.resources.resource.define.not_found_error?","type":"DSL"},{"doc":"Map specific arguments to named inputs. Can provide any argument/attributes that the action allows.\n","ref":"dsl-ash-domain.html#resources-resource-define-args","title":"Ash.Domain.resources.resource.define.args","type":"DSL"},{"doc":"The name of the action that will be called. Defaults to the same name as the function.","ref":"dsl-ash-domain.html#resources-resource-define-action","title":"Ash.Domain.resources.resource.define.action","type":"DSL"},{"doc":"The name of the function that will be defined","ref":"dsl-ash-domain.html#resources-resource-define-name","title":"Ash.Domain.resources.resource.define.name","type":"DSL"},{"doc":"Defines a function with the corresponding name and arguments. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.\n","ref":"dsl-ash-domain.html#resources-resource-define","title":"Ash.Domain.resources.resource.define","type":"DSL"},{"doc":"","ref":"dsl-ash-domain.html#resources-resource-resource","title":"Ash.Domain.resources.resource.resource","type":"DSL"},{"doc":"A resource present in the domain","ref":"dsl-ash-domain.html#resources-resource","title":"Ash.Domain.resources.resource","type":"DSL"},{"doc":"Whether the domain will support only registered entries or not.\n","ref":"dsl-ash-domain.html#resources-allow_unregistered?","title":"Ash.Domain.resources.allow_unregistered?","type":"DSL"},{"doc":"Support a dynamic resource list by providing a callback that checks whether or not the resource should be allowed.\n","ref":"dsl-ash-domain.html#resources-allow","title":"Ash.Domain.resources.allow","type":"DSL"},{"doc":"List the resources of this domain","ref":"dsl-ash-domain.html#resources","title":"Ash.Domain.resources","type":"DSL"},{"doc":"A description for the domain.\n","ref":"dsl-ash-domain.html#domain-description","title":"Ash.Domain.domain.description","type":"DSL"},{"doc":"General domain configuration","ref":"dsl-ash-domain.html#domain","title":"Ash.Domain.domain","type":"DSL"},{"doc":"An mfa ({module, function, args}) pointing to a function that takes a tenant and returns the attribute value","ref":"dsl-ash-resource.html#multitenancy-parse_attribute","title":"Ash.Resource.multitenancy.parse_attribute","type":"DSL"},{"doc":"Whether or not the data may be accessed without setting a tenant. For example, with attribute multitenancy, this allows accessing without filtering by the tenant attribute.\n","ref":"dsl-ash-resource.html#multitenancy-global?","title":"Ash.Resource.multitenancy.global?","type":"DSL"},{"doc":"If using the `attribute` strategy, the attribute to use, e.g `org_id`\n","ref":"dsl-ash-resource.html#multitenancy-attribute","title":"Ash.Resource.multitenancy.attribute","type":"DSL"},{"doc":"Determine if multitenancy is performed with attribute filters or using data layer features.\n","ref":"dsl-ash-resource.html#multitenancy-strategy","title":"Ash.Resource.multitenancy.strategy","type":"DSL"},{"doc":"Options for configuring the multitenancy behavior of a resource.\n\nTo specify a tenant, use `Ash.Query.set_tenant/2` or\n`Ash.Changeset.set_tenant/2` before passing it to an operation.\n\nSee the [multitenancy guide](/documentation/topics/advanced/multitenancy.md)\n","ref":"dsl-ash-resource.html#multitenancy","title":"Ash.Resource.multitenancy","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. See the type's documentation and `Ash.Type` for more.","ref":"dsl-ash-resource.html#calculations-calculate-argument-constraints","title":"Ash.Resource.calculations.calculate.argument.constraints","type":"DSL"},{"doc":"Allow passing expressions as argument values. Expressions cannot be type validated.","ref":"dsl-ash-resource.html#calculations-calculate-argument-allow_expr?","title":"Ash.Resource.calculations.calculate.argument.allow_expr?","type":"DSL"},{"doc":"Whether or not the argument value may be nil (or may be not provided)","ref":"dsl-ash-resource.html#calculations-calculate-argument-allow_nil?","title":"Ash.Resource.calculations.calculate.argument.allow_nil?","type":"DSL"},{"doc":"A default value to use for the argument if not provided","ref":"dsl-ash-resource.html#calculations-calculate-argument-default","title":"Ash.Resource.calculations.calculate.argument.default","type":"DSL"},{"doc":"The type of the argument. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#calculations-calculate-argument-type","title":"Ash.Resource.calculations.calculate.argument.type","type":"DSL"},{"doc":"The name of the argument","ref":"dsl-ash-resource.html#calculations-calculate-argument-name","title":"Ash.Resource.calculations.calculate.argument.name","type":"DSL"},{"doc":"An argument to be passed into the calculation's arguments map\n\nSee the [calculations guide](/documentation/topics/resources/calculations.md) for more.\n","ref":"dsl-ash-resource.html#calculations-calculate-argument","title":"Ash.Resource.calculations.calculate.argument","type":"DSL"},{"doc":"Whether or not the calculation can be referenced in sorts.\n","ref":"dsl-ash-resource.html#calculations-calculate-sortable?","title":"Ash.Resource.calculations.calculate.sortable?","type":"DSL"},{"doc":"Whether or not the calculation should be usable in filters.","ref":"dsl-ash-resource.html#calculations-calculate-filterable?","title":"Ash.Resource.calculations.calculate.filterable?","type":"DSL"},{"doc":"Whether or not the calculation can return nil.","ref":"dsl-ash-resource.html#calculations-calculate-allow_nil?","title":"Ash.Resource.calculations.calculate.allow_nil?","type":"DSL"},{"doc":"A load statement to be applied if the calculation is used.","ref":"dsl-ash-resource.html#calculations-calculate-load","title":"Ash.Resource.calculations.calculate.load","type":"DSL"},{"doc":"Whether or not references to the calculation will be considered sensitive.\n","ref":"dsl-ash-resource.html#calculations-calculate-sensitive?","title":"Ash.Resource.calculations.calculate.sensitive?","type":"DSL"},{"doc":"Whether or not the calculation will appear in public interfaces.\n","ref":"dsl-ash-resource.html#calculations-calculate-public?","title":"Ash.Resource.calculations.calculate.public?","type":"DSL"},{"doc":"An optional description for the calculation","ref":"dsl-ash-resource.html#calculations-calculate-description","title":"Ash.Resource.calculations.calculate.description","type":"DSL"},{"doc":"The `module`, `{module, opts}` or `expr(...)` to use for the calculation. Also accepts a function that takes *a list of records* and produces a result for each record.\n","ref":"dsl-ash-resource.html#calculations-calculate-calculation","title":"Ash.Resource.calculations.calculate.calculation","type":"DSL"},{"doc":"Constraints to provide to the type. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#calculations-calculate-constraints","title":"Ash.Resource.calculations.calculate.constraints","type":"DSL"},{"doc":"","ref":"dsl-ash-resource.html#calculations-calculate-async?","title":"Ash.Resource.calculations.calculate.async?","type":"DSL"},{"doc":"The type of the calculation. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#calculations-calculate-type","title":"Ash.Resource.calculations.calculate.type","type":"DSL"},{"doc":"The field name to use for the calculation value","ref":"dsl-ash-resource.html#calculations-calculate-name","title":"Ash.Resource.calculations.calculate.name","type":"DSL"},{"doc":"Declares a named calculation on the resource.\n\nTakes a module that must adopt the `Ash.Resource.Calculation` behaviour. See that module\nfor more information.\n\nTo ensure that the necessary fields are selected:\n\n1.) Specifying the `select` option on a calculation in the resource.\n2.) Define a `select/2` callback in the calculation module\n3.) Set `always_select?` on the attribute in question\n\nSee the [calculations guide](/documentation/topics/resources/calculations.md) for more.\n","ref":"dsl-ash-resource.html#calculations-calculate","title":"Ash.Resource.calculations.calculate","type":"DSL"},{"doc":"Declare named calculations on the resource.\n\nThese are calculations that can be loaded only by name using `Ash.Query.load/2`.\nThey are also available as top level fields on the resource.\n\nSee the [calculations guide](/documentation/topics/resources/calculations.md) for more.\n","ref":"dsl-ash-resource.html#calculations","title":"Ash.Resource.calculations","type":"DSL"},{"doc":"The filter to apply. Can be an expression or a filter template.","ref":"dsl-ash-resource.html#aggregates-custom-join_filter-filter","title":"Ash.Resource.aggregates.custom.join_filter.filter","type":"DSL"},{"doc":"The relationship path on which to apply the join filter","ref":"dsl-ash-resource.html#aggregates-custom-join_filter-relationship_path","title":"Ash.Resource.aggregates.custom.join_filter.relationship_path","type":"DSL"},{"doc":"Declares a join filter on an aggregate. See the aggregates guide for more.\n","ref":"dsl-ash-resource.html#aggregates-custom-join_filter","title":"Ash.Resource.aggregates.custom.join_filter","type":"DSL"},{"doc":"Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action.\n","ref":"dsl-ash-resource.html#aggregates-custom-authorize?","title":"Ash.Resource.aggregates.custom.authorize?","type":"DSL"},{"doc":"Whether or not the aggregate should be considered sensitive.","ref":"dsl-ash-resource.html#aggregates-custom-sensitive?","title":"Ash.Resource.aggregates.custom.sensitive?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in sorts.","ref":"dsl-ash-resource.html#aggregates-custom-sortable?","title":"Ash.Resource.aggregates.custom.sortable?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in filters.","ref":"dsl-ash-resource.html#aggregates-custom-filterable?","title":"Ash.Resource.aggregates.custom.filterable?","type":"DSL"},{"doc":"Whether or not the aggregate will appear in public interfaces","ref":"dsl-ash-resource.html#aggregates-custom-public?","title":"Ash.Resource.aggregates.custom.public?","type":"DSL"},{"doc":"A default value to use in cases where nil would be used. Count defaults to `0`.","ref":"dsl-ash-resource.html#aggregates-custom-default","title":"Ash.Resource.aggregates.custom.default","type":"DSL"},{"doc":"An optional description for the aggregate","ref":"dsl-ash-resource.html#aggregates-custom-description","title":"Ash.Resource.aggregates.custom.description","type":"DSL"},{"doc":"A sort to be applied to the aggregate","ref":"dsl-ash-resource.html#aggregates-custom-sort","title":"Ash.Resource.aggregates.custom.sort","type":"DSL"},{"doc":"A filter to apply to the aggregate","ref":"dsl-ash-resource.html#aggregates-custom-filter","title":"Ash.Resource.aggregates.custom.filter","type":"DSL"},{"doc":"The field to aggregate. Defaults to the first field in the primary key of the resource","ref":"dsl-ash-resource.html#aggregates-custom-field","title":"Ash.Resource.aggregates.custom.field","type":"DSL"},{"doc":"The kind of the aggregate. Pre-set when using the `Ash.Resource` DSL.","ref":"dsl-ash-resource.html#aggregates-custom-kind","title":"Ash.Resource.aggregates.custom.kind","type":"DSL"},{"doc":"The relationship or relationship path to use for the aggregate","ref":"dsl-ash-resource.html#aggregates-custom-relationship_path","title":"Ash.Resource.aggregates.custom.relationship_path","type":"DSL"},{"doc":"The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments.\n","ref":"dsl-ash-resource.html#aggregates-custom-read_action","title":"Ash.Resource.aggregates.custom.read_action","type":"DSL"},{"doc":"The field to place the aggregate in","ref":"dsl-ash-resource.html#aggregates-custom-name","title":"Ash.Resource.aggregates.custom.name","type":"DSL"},{"doc":"The type of the value returned by the aggregate","ref":"dsl-ash-resource.html#aggregates-custom-type","title":"Ash.Resource.aggregates.custom.type","type":"DSL"},{"doc":"The module that implements the relevant data layer callbacks","ref":"dsl-ash-resource.html#aggregates-custom-implementation","title":"Ash.Resource.aggregates.custom.implementation","type":"DSL"},{"doc":"Declares a named `custom` aggregate on the resource\n\nSupports `filter` and `sort`.\n\nCustom aggregates provide an `implementation` which must implement data layer specific callbacks.\n\nSee the relevant data layer documentation and the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.\n","ref":"dsl-ash-resource.html#aggregates-custom","title":"Ash.Resource.aggregates.custom","type":"DSL"},{"doc":"The filter to apply. Can be an expression or a filter template.","ref":"dsl-ash-resource.html#aggregates-avg-join_filter-filter","title":"Ash.Resource.aggregates.avg.join_filter.filter","type":"DSL"},{"doc":"The relationship path on which to apply the join filter","ref":"dsl-ash-resource.html#aggregates-avg-join_filter-relationship_path","title":"Ash.Resource.aggregates.avg.join_filter.relationship_path","type":"DSL"},{"doc":"Declares a join filter on an aggregate. See the aggregates guide for more.\n","ref":"dsl-ash-resource.html#aggregates-avg-join_filter","title":"Ash.Resource.aggregates.avg.join_filter","type":"DSL"},{"doc":"Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action.\n","ref":"dsl-ash-resource.html#aggregates-avg-authorize?","title":"Ash.Resource.aggregates.avg.authorize?","type":"DSL"},{"doc":"Whether or not the aggregate should be considered sensitive.","ref":"dsl-ash-resource.html#aggregates-avg-sensitive?","title":"Ash.Resource.aggregates.avg.sensitive?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in sorts.","ref":"dsl-ash-resource.html#aggregates-avg-sortable?","title":"Ash.Resource.aggregates.avg.sortable?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in filters.","ref":"dsl-ash-resource.html#aggregates-avg-filterable?","title":"Ash.Resource.aggregates.avg.filterable?","type":"DSL"},{"doc":"Whether or not the aggregate will appear in public interfaces","ref":"dsl-ash-resource.html#aggregates-avg-public?","title":"Ash.Resource.aggregates.avg.public?","type":"DSL"},{"doc":"A default value to use in cases where nil would be used. Count defaults to `0`.","ref":"dsl-ash-resource.html#aggregates-avg-default","title":"Ash.Resource.aggregates.avg.default","type":"DSL"},{"doc":"An optional description for the aggregate","ref":"dsl-ash-resource.html#aggregates-avg-description","title":"Ash.Resource.aggregates.avg.description","type":"DSL"},{"doc":"A filter to apply to the aggregate","ref":"dsl-ash-resource.html#aggregates-avg-filter","title":"Ash.Resource.aggregates.avg.filter","type":"DSL"},{"doc":"The field to aggregate. Defaults to the first field in the primary key of the resource","ref":"dsl-ash-resource.html#aggregates-avg-field","title":"Ash.Resource.aggregates.avg.field","type":"DSL"},{"doc":"The kind of the aggregate. Pre-set when using the `Ash.Resource` DSL.","ref":"dsl-ash-resource.html#aggregates-avg-kind","title":"Ash.Resource.aggregates.avg.kind","type":"DSL"},{"doc":"The relationship or relationship path to use for the aggregate","ref":"dsl-ash-resource.html#aggregates-avg-relationship_path","title":"Ash.Resource.aggregates.avg.relationship_path","type":"DSL"},{"doc":"The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments.\n","ref":"dsl-ash-resource.html#aggregates-avg-read_action","title":"Ash.Resource.aggregates.avg.read_action","type":"DSL"},{"doc":"The field to place the aggregate in","ref":"dsl-ash-resource.html#aggregates-avg-name","title":"Ash.Resource.aggregates.avg.name","type":"DSL"},{"doc":"Declares a named `avg` aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect the avg)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.\n","ref":"dsl-ash-resource.html#aggregates-avg","title":"Ash.Resource.aggregates.avg","type":"DSL"},{"doc":"The filter to apply. Can be an expression or a filter template.","ref":"dsl-ash-resource.html#aggregates-min-join_filter-filter","title":"Ash.Resource.aggregates.min.join_filter.filter","type":"DSL"},{"doc":"The relationship path on which to apply the join filter","ref":"dsl-ash-resource.html#aggregates-min-join_filter-relationship_path","title":"Ash.Resource.aggregates.min.join_filter.relationship_path","type":"DSL"},{"doc":"Declares a join filter on an aggregate. See the aggregates guide for more.\n","ref":"dsl-ash-resource.html#aggregates-min-join_filter","title":"Ash.Resource.aggregates.min.join_filter","type":"DSL"},{"doc":"Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action.\n","ref":"dsl-ash-resource.html#aggregates-min-authorize?","title":"Ash.Resource.aggregates.min.authorize?","type":"DSL"},{"doc":"Whether or not the aggregate should be considered sensitive.","ref":"dsl-ash-resource.html#aggregates-min-sensitive?","title":"Ash.Resource.aggregates.min.sensitive?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in sorts.","ref":"dsl-ash-resource.html#aggregates-min-sortable?","title":"Ash.Resource.aggregates.min.sortable?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in filters.","ref":"dsl-ash-resource.html#aggregates-min-filterable?","title":"Ash.Resource.aggregates.min.filterable?","type":"DSL"},{"doc":"Whether or not the aggregate will appear in public interfaces","ref":"dsl-ash-resource.html#aggregates-min-public?","title":"Ash.Resource.aggregates.min.public?","type":"DSL"},{"doc":"A default value to use in cases where nil would be used. Count defaults to `0`.","ref":"dsl-ash-resource.html#aggregates-min-default","title":"Ash.Resource.aggregates.min.default","type":"DSL"},{"doc":"An optional description for the aggregate","ref":"dsl-ash-resource.html#aggregates-min-description","title":"Ash.Resource.aggregates.min.description","type":"DSL"},{"doc":"A filter to apply to the aggregate","ref":"dsl-ash-resource.html#aggregates-min-filter","title":"Ash.Resource.aggregates.min.filter","type":"DSL"},{"doc":"The field to aggregate. Defaults to the first field in the primary key of the resource","ref":"dsl-ash-resource.html#aggregates-min-field","title":"Ash.Resource.aggregates.min.field","type":"DSL"},{"doc":"The kind of the aggregate. Pre-set when using the `Ash.Resource` DSL.","ref":"dsl-ash-resource.html#aggregates-min-kind","title":"Ash.Resource.aggregates.min.kind","type":"DSL"},{"doc":"The relationship or relationship path to use for the aggregate","ref":"dsl-ash-resource.html#aggregates-min-relationship_path","title":"Ash.Resource.aggregates.min.relationship_path","type":"DSL"},{"doc":"The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments.\n","ref":"dsl-ash-resource.html#aggregates-min-read_action","title":"Ash.Resource.aggregates.min.read_action","type":"DSL"},{"doc":"The field to place the aggregate in","ref":"dsl-ash-resource.html#aggregates-min-name","title":"Ash.Resource.aggregates.min.name","type":"DSL"},{"doc":"Declares a named `min` aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect the min)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.\n","ref":"dsl-ash-resource.html#aggregates-min","title":"Ash.Resource.aggregates.min","type":"DSL"},{"doc":"The filter to apply. Can be an expression or a filter template.","ref":"dsl-ash-resource.html#aggregates-max-join_filter-filter","title":"Ash.Resource.aggregates.max.join_filter.filter","type":"DSL"},{"doc":"The relationship path on which to apply the join filter","ref":"dsl-ash-resource.html#aggregates-max-join_filter-relationship_path","title":"Ash.Resource.aggregates.max.join_filter.relationship_path","type":"DSL"},{"doc":"Declares a join filter on an aggregate. See the aggregates guide for more.\n","ref":"dsl-ash-resource.html#aggregates-max-join_filter","title":"Ash.Resource.aggregates.max.join_filter","type":"DSL"},{"doc":"Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action.\n","ref":"dsl-ash-resource.html#aggregates-max-authorize?","title":"Ash.Resource.aggregates.max.authorize?","type":"DSL"},{"doc":"Whether or not the aggregate should be considered sensitive.","ref":"dsl-ash-resource.html#aggregates-max-sensitive?","title":"Ash.Resource.aggregates.max.sensitive?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in sorts.","ref":"dsl-ash-resource.html#aggregates-max-sortable?","title":"Ash.Resource.aggregates.max.sortable?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in filters.","ref":"dsl-ash-resource.html#aggregates-max-filterable?","title":"Ash.Resource.aggregates.max.filterable?","type":"DSL"},{"doc":"Whether or not the aggregate will appear in public interfaces","ref":"dsl-ash-resource.html#aggregates-max-public?","title":"Ash.Resource.aggregates.max.public?","type":"DSL"},{"doc":"A default value to use in cases where nil would be used. Count defaults to `0`.","ref":"dsl-ash-resource.html#aggregates-max-default","title":"Ash.Resource.aggregates.max.default","type":"DSL"},{"doc":"An optional description for the aggregate","ref":"dsl-ash-resource.html#aggregates-max-description","title":"Ash.Resource.aggregates.max.description","type":"DSL"},{"doc":"A filter to apply to the aggregate","ref":"dsl-ash-resource.html#aggregates-max-filter","title":"Ash.Resource.aggregates.max.filter","type":"DSL"},{"doc":"The field to aggregate. Defaults to the first field in the primary key of the resource","ref":"dsl-ash-resource.html#aggregates-max-field","title":"Ash.Resource.aggregates.max.field","type":"DSL"},{"doc":"The kind of the aggregate. Pre-set when using the `Ash.Resource` DSL.","ref":"dsl-ash-resource.html#aggregates-max-kind","title":"Ash.Resource.aggregates.max.kind","type":"DSL"},{"doc":"The relationship or relationship path to use for the aggregate","ref":"dsl-ash-resource.html#aggregates-max-relationship_path","title":"Ash.Resource.aggregates.max.relationship_path","type":"DSL"},{"doc":"The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments.\n","ref":"dsl-ash-resource.html#aggregates-max-read_action","title":"Ash.Resource.aggregates.max.read_action","type":"DSL"},{"doc":"The field to place the aggregate in","ref":"dsl-ash-resource.html#aggregates-max-name","title":"Ash.Resource.aggregates.max.name","type":"DSL"},{"doc":"Declares a named `max` aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect the max)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.\n","ref":"dsl-ash-resource.html#aggregates-max","title":"Ash.Resource.aggregates.max","type":"DSL"},{"doc":"The filter to apply. Can be an expression or a filter template.","ref":"dsl-ash-resource.html#aggregates-list-join_filter-filter","title":"Ash.Resource.aggregates.list.join_filter.filter","type":"DSL"},{"doc":"The relationship path on which to apply the join filter","ref":"dsl-ash-resource.html#aggregates-list-join_filter-relationship_path","title":"Ash.Resource.aggregates.list.join_filter.relationship_path","type":"DSL"},{"doc":"Declares a join filter on an aggregate. See the aggregates guide for more.\n","ref":"dsl-ash-resource.html#aggregates-list-join_filter","title":"Ash.Resource.aggregates.list.join_filter","type":"DSL"},{"doc":"Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action.\n","ref":"dsl-ash-resource.html#aggregates-list-authorize?","title":"Ash.Resource.aggregates.list.authorize?","type":"DSL"},{"doc":"Whether or not the aggregate should be considered sensitive.","ref":"dsl-ash-resource.html#aggregates-list-sensitive?","title":"Ash.Resource.aggregates.list.sensitive?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in sorts.","ref":"dsl-ash-resource.html#aggregates-list-sortable?","title":"Ash.Resource.aggregates.list.sortable?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in filters.","ref":"dsl-ash-resource.html#aggregates-list-filterable?","title":"Ash.Resource.aggregates.list.filterable?","type":"DSL"},{"doc":"Whether or not the aggregate will appear in public interfaces","ref":"dsl-ash-resource.html#aggregates-list-public?","title":"Ash.Resource.aggregates.list.public?","type":"DSL"},{"doc":"A default value to use in cases where nil would be used. Count defaults to `0`.","ref":"dsl-ash-resource.html#aggregates-list-default","title":"Ash.Resource.aggregates.list.default","type":"DSL"},{"doc":"An optional description for the aggregate","ref":"dsl-ash-resource.html#aggregates-list-description","title":"Ash.Resource.aggregates.list.description","type":"DSL"},{"doc":"A sort to be applied to the aggregate","ref":"dsl-ash-resource.html#aggregates-list-sort","title":"Ash.Resource.aggregates.list.sort","type":"DSL"},{"doc":"A filter to apply to the aggregate","ref":"dsl-ash-resource.html#aggregates-list-filter","title":"Ash.Resource.aggregates.list.filter","type":"DSL"},{"doc":"The field to aggregate. Defaults to the first field in the primary key of the resource","ref":"dsl-ash-resource.html#aggregates-list-field","title":"Ash.Resource.aggregates.list.field","type":"DSL"},{"doc":"The kind of the aggregate. Pre-set when using the `Ash.Resource` DSL.","ref":"dsl-ash-resource.html#aggregates-list-kind","title":"Ash.Resource.aggregates.list.kind","type":"DSL"},{"doc":"The relationship or relationship path to use for the aggregate","ref":"dsl-ash-resource.html#aggregates-list-relationship_path","title":"Ash.Resource.aggregates.list.relationship_path","type":"DSL"},{"doc":"The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments.\n","ref":"dsl-ash-resource.html#aggregates-list-read_action","title":"Ash.Resource.aggregates.list.read_action","type":"DSL"},{"doc":"The field to place the aggregate in","ref":"dsl-ash-resource.html#aggregates-list-name","title":"Ash.Resource.aggregates.list.name","type":"DSL"},{"doc":"Whether or not to count unique values only","ref":"dsl-ash-resource.html#aggregates-list-uniq?","title":"Ash.Resource.aggregates.list.uniq?","type":"DSL"},{"doc":"Whether or not to include `nil` values in the aggregate. Only relevant for `list` and `first` aggregates.","ref":"dsl-ash-resource.html#aggregates-list-include_nil?","title":"Ash.Resource.aggregates.list.include_nil?","type":"DSL"},{"doc":"Declares a named `list` aggregate on the resource.\n\nA list aggregate selects the list of all values for the given field\nand relationship combination.\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.\n","ref":"dsl-ash-resource.html#aggregates-list","title":"Ash.Resource.aggregates.list","type":"DSL"},{"doc":"The filter to apply. Can be an expression or a filter template.","ref":"dsl-ash-resource.html#aggregates-sum-join_filter-filter","title":"Ash.Resource.aggregates.sum.join_filter.filter","type":"DSL"},{"doc":"The relationship path on which to apply the join filter","ref":"dsl-ash-resource.html#aggregates-sum-join_filter-relationship_path","title":"Ash.Resource.aggregates.sum.join_filter.relationship_path","type":"DSL"},{"doc":"Declares a join filter on an aggregate. See the aggregates guide for more.\n","ref":"dsl-ash-resource.html#aggregates-sum-join_filter","title":"Ash.Resource.aggregates.sum.join_filter","type":"DSL"},{"doc":"Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action.\n","ref":"dsl-ash-resource.html#aggregates-sum-authorize?","title":"Ash.Resource.aggregates.sum.authorize?","type":"DSL"},{"doc":"Whether or not the aggregate should be considered sensitive.","ref":"dsl-ash-resource.html#aggregates-sum-sensitive?","title":"Ash.Resource.aggregates.sum.sensitive?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in sorts.","ref":"dsl-ash-resource.html#aggregates-sum-sortable?","title":"Ash.Resource.aggregates.sum.sortable?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in filters.","ref":"dsl-ash-resource.html#aggregates-sum-filterable?","title":"Ash.Resource.aggregates.sum.filterable?","type":"DSL"},{"doc":"Whether or not the aggregate will appear in public interfaces","ref":"dsl-ash-resource.html#aggregates-sum-public?","title":"Ash.Resource.aggregates.sum.public?","type":"DSL"},{"doc":"A default value to use in cases where nil would be used. Count defaults to `0`.","ref":"dsl-ash-resource.html#aggregates-sum-default","title":"Ash.Resource.aggregates.sum.default","type":"DSL"},{"doc":"An optional description for the aggregate","ref":"dsl-ash-resource.html#aggregates-sum-description","title":"Ash.Resource.aggregates.sum.description","type":"DSL"},{"doc":"A filter to apply to the aggregate","ref":"dsl-ash-resource.html#aggregates-sum-filter","title":"Ash.Resource.aggregates.sum.filter","type":"DSL"},{"doc":"The field to aggregate. Defaults to the first field in the primary key of the resource","ref":"dsl-ash-resource.html#aggregates-sum-field","title":"Ash.Resource.aggregates.sum.field","type":"DSL"},{"doc":"The kind of the aggregate. Pre-set when using the `Ash.Resource` DSL.","ref":"dsl-ash-resource.html#aggregates-sum-kind","title":"Ash.Resource.aggregates.sum.kind","type":"DSL"},{"doc":"The relationship or relationship path to use for the aggregate","ref":"dsl-ash-resource.html#aggregates-sum-relationship_path","title":"Ash.Resource.aggregates.sum.relationship_path","type":"DSL"},{"doc":"The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments.\n","ref":"dsl-ash-resource.html#aggregates-sum-read_action","title":"Ash.Resource.aggregates.sum.read_action","type":"DSL"},{"doc":"The field to place the aggregate in","ref":"dsl-ash-resource.html#aggregates-sum-name","title":"Ash.Resource.aggregates.sum.name","type":"DSL"},{"doc":"Declares a named `sum` aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect the sum)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.\n","ref":"dsl-ash-resource.html#aggregates-sum","title":"Ash.Resource.aggregates.sum","type":"DSL"},{"doc":"The filter to apply. Can be an expression or a filter template.","ref":"dsl-ash-resource.html#aggregates-first-join_filter-filter","title":"Ash.Resource.aggregates.first.join_filter.filter","type":"DSL"},{"doc":"The relationship path on which to apply the join filter","ref":"dsl-ash-resource.html#aggregates-first-join_filter-relationship_path","title":"Ash.Resource.aggregates.first.join_filter.relationship_path","type":"DSL"},{"doc":"Declares a join filter on an aggregate. See the aggregates guide for more.\n","ref":"dsl-ash-resource.html#aggregates-first-join_filter","title":"Ash.Resource.aggregates.first.join_filter","type":"DSL"},{"doc":"Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action.\n","ref":"dsl-ash-resource.html#aggregates-first-authorize?","title":"Ash.Resource.aggregates.first.authorize?","type":"DSL"},{"doc":"Whether or not the aggregate should be considered sensitive.","ref":"dsl-ash-resource.html#aggregates-first-sensitive?","title":"Ash.Resource.aggregates.first.sensitive?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in sorts.","ref":"dsl-ash-resource.html#aggregates-first-sortable?","title":"Ash.Resource.aggregates.first.sortable?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in filters.","ref":"dsl-ash-resource.html#aggregates-first-filterable?","title":"Ash.Resource.aggregates.first.filterable?","type":"DSL"},{"doc":"Whether or not the aggregate will appear in public interfaces","ref":"dsl-ash-resource.html#aggregates-first-public?","title":"Ash.Resource.aggregates.first.public?","type":"DSL"},{"doc":"A default value to use in cases where nil would be used. Count defaults to `0`.","ref":"dsl-ash-resource.html#aggregates-first-default","title":"Ash.Resource.aggregates.first.default","type":"DSL"},{"doc":"An optional description for the aggregate","ref":"dsl-ash-resource.html#aggregates-first-description","title":"Ash.Resource.aggregates.first.description","type":"DSL"},{"doc":"A sort to be applied to the aggregate","ref":"dsl-ash-resource.html#aggregates-first-sort","title":"Ash.Resource.aggregates.first.sort","type":"DSL"},{"doc":"A filter to apply to the aggregate","ref":"dsl-ash-resource.html#aggregates-first-filter","title":"Ash.Resource.aggregates.first.filter","type":"DSL"},{"doc":"The field to aggregate. Defaults to the first field in the primary key of the resource","ref":"dsl-ash-resource.html#aggregates-first-field","title":"Ash.Resource.aggregates.first.field","type":"DSL"},{"doc":"The kind of the aggregate. Pre-set when using the `Ash.Resource` DSL.","ref":"dsl-ash-resource.html#aggregates-first-kind","title":"Ash.Resource.aggregates.first.kind","type":"DSL"},{"doc":"The relationship or relationship path to use for the aggregate","ref":"dsl-ash-resource.html#aggregates-first-relationship_path","title":"Ash.Resource.aggregates.first.relationship_path","type":"DSL"},{"doc":"The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments.\n","ref":"dsl-ash-resource.html#aggregates-first-read_action","title":"Ash.Resource.aggregates.first.read_action","type":"DSL"},{"doc":"The field to place the aggregate in","ref":"dsl-ash-resource.html#aggregates-first-name","title":"Ash.Resource.aggregates.first.name","type":"DSL"},{"doc":"Whether or not to include `nil` values in the aggregate. Only relevant for `list` and `first` aggregates.","ref":"dsl-ash-resource.html#aggregates-first-include_nil?","title":"Ash.Resource.aggregates.first.include_nil?","type":"DSL"},{"doc":"Declares a named `first` aggregate on the resource\n\nFirst aggregates return the first value of the related record\nthat matches. Supports both `filter` and `sort`.\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.\n","ref":"dsl-ash-resource.html#aggregates-first","title":"Ash.Resource.aggregates.first","type":"DSL"},{"doc":"The filter to apply. Can be an expression or a filter template.","ref":"dsl-ash-resource.html#aggregates-exists-join_filter-filter","title":"Ash.Resource.aggregates.exists.join_filter.filter","type":"DSL"},{"doc":"The relationship path on which to apply the join filter","ref":"dsl-ash-resource.html#aggregates-exists-join_filter-relationship_path","title":"Ash.Resource.aggregates.exists.join_filter.relationship_path","type":"DSL"},{"doc":"Declares a join filter on an aggregate. See the aggregates guide for more.\n","ref":"dsl-ash-resource.html#aggregates-exists-join_filter","title":"Ash.Resource.aggregates.exists.join_filter","type":"DSL"},{"doc":"Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action.\n","ref":"dsl-ash-resource.html#aggregates-exists-authorize?","title":"Ash.Resource.aggregates.exists.authorize?","type":"DSL"},{"doc":"Whether or not the aggregate should be considered sensitive.","ref":"dsl-ash-resource.html#aggregates-exists-sensitive?","title":"Ash.Resource.aggregates.exists.sensitive?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in sorts.","ref":"dsl-ash-resource.html#aggregates-exists-sortable?","title":"Ash.Resource.aggregates.exists.sortable?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in filters.","ref":"dsl-ash-resource.html#aggregates-exists-filterable?","title":"Ash.Resource.aggregates.exists.filterable?","type":"DSL"},{"doc":"Whether or not the aggregate will appear in public interfaces","ref":"dsl-ash-resource.html#aggregates-exists-public?","title":"Ash.Resource.aggregates.exists.public?","type":"DSL"},{"doc":"A default value to use in cases where nil would be used. Count defaults to `0`.","ref":"dsl-ash-resource.html#aggregates-exists-default","title":"Ash.Resource.aggregates.exists.default","type":"DSL"},{"doc":"An optional description for the aggregate","ref":"dsl-ash-resource.html#aggregates-exists-description","title":"Ash.Resource.aggregates.exists.description","type":"DSL"},{"doc":"A filter to apply to the aggregate","ref":"dsl-ash-resource.html#aggregates-exists-filter","title":"Ash.Resource.aggregates.exists.filter","type":"DSL"},{"doc":"The kind of the aggregate. Pre-set when using the `Ash.Resource` DSL.","ref":"dsl-ash-resource.html#aggregates-exists-kind","title":"Ash.Resource.aggregates.exists.kind","type":"DSL"},{"doc":"The relationship or relationship path to use for the aggregate","ref":"dsl-ash-resource.html#aggregates-exists-relationship_path","title":"Ash.Resource.aggregates.exists.relationship_path","type":"DSL"},{"doc":"The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments.\n","ref":"dsl-ash-resource.html#aggregates-exists-read_action","title":"Ash.Resource.aggregates.exists.read_action","type":"DSL"},{"doc":"The field to place the aggregate in","ref":"dsl-ash-resource.html#aggregates-exists-name","title":"Ash.Resource.aggregates.exists.name","type":"DSL"},{"doc":"Declares a named `exists` aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect if something exists)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.\n","ref":"dsl-ash-resource.html#aggregates-exists","title":"Ash.Resource.aggregates.exists","type":"DSL"},{"doc":"The filter to apply. Can be an expression or a filter template.","ref":"dsl-ash-resource.html#aggregates-count-join_filter-filter","title":"Ash.Resource.aggregates.count.join_filter.filter","type":"DSL"},{"doc":"The relationship path on which to apply the join filter","ref":"dsl-ash-resource.html#aggregates-count-join_filter-relationship_path","title":"Ash.Resource.aggregates.count.join_filter.relationship_path","type":"DSL"},{"doc":"Declares a join filter on an aggregate. See the aggregates guide for more.\n","ref":"dsl-ash-resource.html#aggregates-count-join_filter","title":"Ash.Resource.aggregates.count.join_filter","type":"DSL"},{"doc":"Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action.\n","ref":"dsl-ash-resource.html#aggregates-count-authorize?","title":"Ash.Resource.aggregates.count.authorize?","type":"DSL"},{"doc":"Whether or not the aggregate should be considered sensitive.","ref":"dsl-ash-resource.html#aggregates-count-sensitive?","title":"Ash.Resource.aggregates.count.sensitive?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in sorts.","ref":"dsl-ash-resource.html#aggregates-count-sortable?","title":"Ash.Resource.aggregates.count.sortable?","type":"DSL"},{"doc":"Whether or not the aggregate should be usable in filters.","ref":"dsl-ash-resource.html#aggregates-count-filterable?","title":"Ash.Resource.aggregates.count.filterable?","type":"DSL"},{"doc":"Whether or not the aggregate will appear in public interfaces","ref":"dsl-ash-resource.html#aggregates-count-public?","title":"Ash.Resource.aggregates.count.public?","type":"DSL"},{"doc":"A default value to use in cases where nil would be used. Count defaults to `0`.","ref":"dsl-ash-resource.html#aggregates-count-default","title":"Ash.Resource.aggregates.count.default","type":"DSL"},{"doc":"An optional description for the aggregate","ref":"dsl-ash-resource.html#aggregates-count-description","title":"Ash.Resource.aggregates.count.description","type":"DSL"},{"doc":"A filter to apply to the aggregate","ref":"dsl-ash-resource.html#aggregates-count-filter","title":"Ash.Resource.aggregates.count.filter","type":"DSL"},{"doc":"The field to aggregate. Defaults to the first field in the primary key of the resource","ref":"dsl-ash-resource.html#aggregates-count-field","title":"Ash.Resource.aggregates.count.field","type":"DSL"},{"doc":"The kind of the aggregate. Pre-set when using the `Ash.Resource` DSL.","ref":"dsl-ash-resource.html#aggregates-count-kind","title":"Ash.Resource.aggregates.count.kind","type":"DSL"},{"doc":"The relationship or relationship path to use for the aggregate","ref":"dsl-ash-resource.html#aggregates-count-relationship_path","title":"Ash.Resource.aggregates.count.relationship_path","type":"DSL"},{"doc":"The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments.\n","ref":"dsl-ash-resource.html#aggregates-count-read_action","title":"Ash.Resource.aggregates.count.read_action","type":"DSL"},{"doc":"The field to place the aggregate in","ref":"dsl-ash-resource.html#aggregates-count-name","title":"Ash.Resource.aggregates.count.name","type":"DSL"},{"doc":"Whether or not to count unique values only","ref":"dsl-ash-resource.html#aggregates-count-uniq?","title":"Ash.Resource.aggregates.count.uniq?","type":"DSL"},{"doc":"Declares a named count aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect the count)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.\n","ref":"dsl-ash-resource.html#aggregates-count","title":"Ash.Resource.aggregates.count","type":"DSL"},{"doc":"Declare named aggregates on the resource.\n\nThese are aggregates that can be loaded only by name using `Ash.Query.load/2`.\nThey are also available as top level fields on the resource.\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.\n","ref":"dsl-ash-resource.html#aggregates","title":"Ash.Resource.aggregates","type":"DSL"},{"doc":"By default, validations are only run atomically if all changes will be run atomically or if there is no `validate/3` callback defined. Set this to `true` to run it atomically always.","ref":"dsl-ash-resource.html#validations-validate-always_atomic?","title":"Ash.Resource.validations.validate.always_atomic?","type":"DSL"},{"doc":"If set to `true`, the validation will be run in a before_action hook","ref":"dsl-ash-resource.html#validations-validate-before_action?","title":"Ash.Resource.validations.validate.before_action?","type":"DSL"},{"doc":"An optional description for the validation","ref":"dsl-ash-resource.html#validations-validate-description","title":"Ash.Resource.validations.validate.description","type":"DSL"},{"doc":"If provided, overrides any message set by the validation error","ref":"dsl-ash-resource.html#validations-validate-message","title":"Ash.Resource.validations.validate.message","type":"DSL"},{"doc":"If the validation should only run on valid changes. Useful for expensive validations or validations that depend on valid data.","ref":"dsl-ash-resource.html#validations-validate-only_when_valid?","title":"Ash.Resource.validations.validate.only_when_valid?","type":"DSL"},{"doc":"The action types the validation should run on. Many validations don't make sense in the context of deletion, so by default it is not included.\n","ref":"dsl-ash-resource.html#validations-validate-on","title":"Ash.Resource.validations.validate.on","type":"DSL"},{"doc":"Validations that should pass in order for this validation to apply. Any of these validations failing will result in this validation being ignored.\n","ref":"dsl-ash-resource.html#validations-validate-where","title":"Ash.Resource.validations.validate.where","type":"DSL"},{"doc":"The module (or module and opts) that implements the `Ash.Resource.Validation` behaviour. Also accepts a function that receives the changeset and its context.","ref":"dsl-ash-resource.html#validations-validate-validation","title":"Ash.Resource.validations.validate.validation","type":"DSL"},{"doc":"Declares a validation for creates and updates.\n\nSee `Ash.Resource.Change` for more.\n","ref":"dsl-ash-resource.html#validations-validate","title":"Ash.Resource.validations.validate","type":"DSL"},{"doc":"Declare validations prior to performing actions against the resource\n","ref":"dsl-ash-resource.html#validations","title":"Ash.Resource.validations","type":"DSL"},{"doc":"The module and options for a preparation. Also accepts functions take the query and the context.\n","ref":"dsl-ash-resource.html#preparations-prepare-preparation","title":"Ash.Resource.preparations.prepare.preparation","type":"DSL"},{"doc":"Declares a preparation, which can be used to prepare a query for a read action.\n","ref":"dsl-ash-resource.html#preparations-prepare","title":"Ash.Resource.preparations.prepare","type":"DSL"},{"doc":"Declare preparations that occur on all read actions for a given resource\n","ref":"dsl-ash-resource.html#preparations","title":"Ash.Resource.preparations","type":"DSL"},{"doc":"By default, changes are only run atomically if all changes will be run atomically or if there is no `change/3` callback defined. Set this to `true` to run it atomically always.","ref":"dsl-ash-resource.html#changes-change-always_atomic?","title":"Ash.Resource.changes.change.always_atomic?","type":"DSL"},{"doc":"Validations that should pass in order for this change to apply. These validations failing will result in this change being ignored.\n","ref":"dsl-ash-resource.html#changes-change-where","title":"Ash.Resource.changes.change.where","type":"DSL"},{"doc":"The module and options for a change. Also accepts a function that takes the changeset and the context. See `Ash.Resource.Change.Builtins` for builtin changes.\n","ref":"dsl-ash-resource.html#changes-change-change","title":"Ash.Resource.changes.change.change","type":"DSL"},{"doc":"An optional description for the change","ref":"dsl-ash-resource.html#changes-change-description","title":"Ash.Resource.changes.change.description","type":"DSL"},{"doc":"If the change should only be run on valid changes. By default, all changes are run unless stated otherwise here.\n","ref":"dsl-ash-resource.html#changes-change-only_when_valid?","title":"Ash.Resource.changes.change.only_when_valid?","type":"DSL"},{"doc":"The action types the change should run on. Destroy actions are omitted by default as most changes don't make sense for a destroy.\n","ref":"dsl-ash-resource.html#changes-change-on","title":"Ash.Resource.changes.change.on","type":"DSL"},{"doc":"A change to be applied to the changeset.\n\nSee `Ash.Resource.Change` for more.\n","ref":"dsl-ash-resource.html#changes-change","title":"Ash.Resource.changes.change","type":"DSL"},{"doc":"Declare changes that occur on create/update/destroy actions against the resource\n\nSee `Ash.Resource.Change` for more.\n","ref":"dsl-ash-resource.html#changes","title":"Ash.Resource.changes","type":"DSL"},{"doc":"Whether or not this identity is unique across all tenants. If the resource is not multitenant, has no effect.","ref":"dsl-ash-resource.html#identities-identity-all_tenants?","title":"Ash.Resource.identities.identity.all_tenants?","type":"DSL"},{"doc":"An error message to use when the unique identity would be violated","ref":"dsl-ash-resource.html#identities-identity-message","title":"Ash.Resource.identities.identity.message","type":"DSL"},{"doc":"An optional description for the identity","ref":"dsl-ash-resource.html#identities-identity-description","title":"Ash.Resource.identities.identity.description","type":"DSL"},{"doc":"Validates that the unique identity provided is unique in a before_action hook.\n","ref":"dsl-ash-resource.html#identities-identity-pre_check_with","title":"Ash.Resource.identities.identity.pre_check_with","type":"DSL"},{"doc":"Whether or not this identity is validated to be unique in a before_action hook.","ref":"dsl-ash-resource.html#identities-identity-pre_check?","title":"Ash.Resource.identities.identity.pre_check?","type":"DSL"},{"doc":"Validates that the unique identity provided is unique at validation time, outside of any transactions, using the domain module provided. Will default to resource's domain.\n","ref":"dsl-ash-resource.html#identities-identity-eager_check_with","title":"Ash.Resource.identities.identity.eager_check_with","type":"DSL"},{"doc":"Whether or not this identity is validated to be unique at validation time.","ref":"dsl-ash-resource.html#identities-identity-eager_check?","title":"Ash.Resource.identities.identity.eager_check?","type":"DSL"},{"doc":"Whether or not `nil` values are considered always distinct from eachother. `nil` values won't conflict with eachother unless you set this option to `false`.","ref":"dsl-ash-resource.html#identities-identity-nils_distinct?","title":"Ash.Resource.identities.identity.nils_distinct?","type":"DSL"},{"doc":"A filter that expresses only matching records are unique on the provided keys. Ignored on embedded resources.","ref":"dsl-ash-resource.html#identities-identity-where","title":"Ash.Resource.identities.identity.where","type":"DSL"},{"doc":"The names of the attributes that uniquely identify this resource.","ref":"dsl-ash-resource.html#identities-identity-keys","title":"Ash.Resource.identities.identity.keys","type":"DSL"},{"doc":"The name of the identity.","ref":"dsl-ash-resource.html#identities-identity-name","title":"Ash.Resource.identities.identity.name","type":"DSL"},{"doc":"Represents a unique constraint on the resource.\n\nSee the [identities guide](/documentation/topics/resources/identities.md) for more.\n","ref":"dsl-ash-resource.html#identities-identity","title":"Ash.Resource.identities.identity","type":"DSL"},{"doc":"Unique identifiers for the resource\n","ref":"dsl-ash-resource.html#identities","title":"Ash.Resource.identities","type":"DSL"},{"doc":"Allow the resource to be used without any primary key fields. Warning: this option is experimental, and should not be used unless you know what you're doing.\n","ref":"dsl-ash-resource.html#resource-require_primary_key?","title":"Ash.Resource.resource.require_primary_key?","type":"DSL"},{"doc":"A pluralized version of the resource short_name. May be used by generators or automated tooling.\n","ref":"dsl-ash-resource.html#resource-plural_name","title":"Ash.Resource.resource.plural_name","type":"DSL"},{"doc":"A short identifier for the resource, which should be unique. See the [monitoring guide](/documentation/topics/monitoring.md) for more.\n","ref":"dsl-ash-resource.html#resource-short_name","title":"Ash.Resource.resource.short_name","type":"DSL"},{"doc":"The name to use in traces. Defaults to the short_name stringified. See the [monitoring guide](/documentation/topics/monitoring.md) for more.\n","ref":"dsl-ash-resource.html#resource-trace_name","title":"Ash.Resource.resource.trace_name","type":"DSL"},{"doc":"Default context to apply to any queries/changesets generated for this resource.","ref":"dsl-ash-resource.html#resource-default_context","title":"Ash.Resource.resource.default_context","type":"DSL"},{"doc":"A filter statement to be applied to any queries on the resource","ref":"dsl-ash-resource.html#resource-base_filter","title":"Ash.Resource.resource.base_filter","type":"DSL"},{"doc":"A human readable description of the resource, to be used in generated documentation","ref":"dsl-ash-resource.html#resource-description","title":"Ash.Resource.resource.description","type":"DSL"},{"doc":"General resource configuration\n","ref":"dsl-ash-resource.html#resource","title":"Ash.Resource.resource","type":"DSL"},{"doc":"Supply field or argument values referenced by the calculation, in the form of :name, `{:arg, :name}` and/or `{:ref, :name}`. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.\n","ref":"dsl-ash-resource.html#code_interface-define_calculation-args","title":"Ash.Resource.code_interface.define_calculation.args","type":"DSL"},{"doc":"The name of the calculation that will be evaluated. Defaults to the same name as the function.","ref":"dsl-ash-resource.html#code_interface-define_calculation-calculation","title":"Ash.Resource.code_interface.define_calculation.calculation","type":"DSL"},{"doc":"The name of the function that will be defined","ref":"dsl-ash-resource.html#code_interface-define_calculation-name","title":"Ash.Resource.code_interface.define_calculation.name","type":"DSL"},{"doc":"Defines a function with the corresponding name and arguments, that evaluates a calculation. Use `:_record` to take an instance of a record. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.\n","ref":"dsl-ash-resource.html#code_interface-define_calculation","title":"Ash.Resource.code_interface.define_calculation","type":"DSL"},{"doc":"Takes an identity, gets its field list, and performs the same logic as `get_by` with those fields. Adds filters for read, update and destroy actions, replacing the `record` first argument.\n","ref":"dsl-ash-resource.html#code_interface-define-get_by_identity","title":"Ash.Resource.code_interface.define.get_by_identity","type":"DSL"},{"doc":"Takes a list of fields and adds those fields as arguments, which will then be used to filter. Sets `get?` to true and `require_reference?` to false automatically. Adds filters for read, update and destroy actions, replacing the `record` first argument.\n","ref":"dsl-ash-resource.html#code_interface-define-get_by","title":"Ash.Resource.code_interface.define.get_by","type":"DSL"},{"doc":"Expects to only receive a single result from a read action or a bulk update/destroy, and returns a single result instead of a list. Sets `require_reference?` to false automatically.\n","ref":"dsl-ash-resource.html#code_interface-define-get?","title":"Ash.Resource.code_interface.define.get?","type":"DSL"},{"doc":"For update and destroy actions, require a resource or identifier to be passed in as the first argument. Not relevant for other action types.","ref":"dsl-ash-resource.html#code_interface-define-require_reference?","title":"Ash.Resource.code_interface.define.require_reference?","type":"DSL"},{"doc":"If the action or interface is configured with `get?: true`, this determines whether or not an error is raised or `nil` is returned.","ref":"dsl-ash-resource.html#code_interface-define-not_found_error?","title":"Ash.Resource.code_interface.define.not_found_error?","type":"DSL"},{"doc":"Map specific arguments to named inputs. Can provide any argument/attributes that the action allows.\n","ref":"dsl-ash-resource.html#code_interface-define-args","title":"Ash.Resource.code_interface.define.args","type":"DSL"},{"doc":"The name of the action that will be called. Defaults to the same name as the function.","ref":"dsl-ash-resource.html#code_interface-define-action","title":"Ash.Resource.code_interface.define.action","type":"DSL"},{"doc":"The name of the function that will be defined","ref":"dsl-ash-resource.html#code_interface-define-name","title":"Ash.Resource.code_interface.define.name","type":"DSL"},{"doc":"Defines a function with the corresponding name and arguments. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.\n","ref":"dsl-ash-resource.html#code_interface-define","title":"Ash.Resource.code_interface.define","type":"DSL"},{"doc":"Whether or not to define the code interface in the resource.","ref":"dsl-ash-resource.html#code_interface-define?","title":"Ash.Resource.code_interface.define?","type":"DSL"},{"doc":"Use the provided Domain instead of the resources configured domain when calling actions.","ref":"dsl-ash-resource.html#code_interface-domain","title":"Ash.Resource.code_interface.domain","type":"DSL"},{"doc":"Functions that will be defined on the resource. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.\n","ref":"dsl-ash-resource.html#code_interface","title":"Ash.Resource.code_interface","type":"DSL"},{"doc":"The default value for the argument to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value","ref":"dsl-ash-resource.html#actions-destroy-argument-default","title":"Ash.Resource.actions.destroy.argument.default","type":"DSL"},{"doc":"Whether or not the argument value contains sensitive information, like PII. See the [security guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#actions-destroy-argument-sensitive?","title":"Ash.Resource.actions.destroy.argument.sensitive?","type":"DSL"},{"doc":"Whether or not the argument should appear in public interfaces\n","ref":"dsl-ash-resource.html#actions-destroy-argument-public?","title":"Ash.Resource.actions.destroy.argument.public?","type":"DSL"},{"doc":"Whether or not the argument value may be nil (or may be not provided). If nil value is given error is raised.\n","ref":"dsl-ash-resource.html#actions-destroy-argument-allow_nil?","title":"Ash.Resource.actions.destroy.argument.allow_nil?","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more information, see `Ash.Type`.\n","ref":"dsl-ash-resource.html#actions-destroy-argument-constraints","title":"Ash.Resource.actions.destroy.argument.constraints","type":"DSL"},{"doc":"An optional description for the argument.","ref":"dsl-ash-resource.html#actions-destroy-argument-description","title":"Ash.Resource.actions.destroy.argument.description","type":"DSL"},{"doc":"The type of the argument. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#actions-destroy-argument-type","title":"Ash.Resource.actions.destroy.argument.type","type":"DSL"},{"doc":"The name of the argument","ref":"dsl-ash-resource.html#actions-destroy-argument-name","title":"Ash.Resource.actions.destroy.argument.name","type":"DSL"},{"doc":"Declares an argument on the action\n","ref":"dsl-ash-resource.html#actions-destroy-argument","title":"Ash.Resource.actions.destroy.argument","type":"DSL"},{"doc":"The default value for the metadata to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value","ref":"dsl-ash-resource.html#actions-destroy-metadata-default","title":"Ash.Resource.actions.destroy.metadata.default","type":"DSL"},{"doc":"Whether or not the metadata may return `nil`","ref":"dsl-ash-resource.html#actions-destroy-metadata-allow_nil?","title":"Ash.Resource.actions.destroy.metadata.allow_nil?","type":"DSL"},{"doc":"An optional description for the metadata.","ref":"dsl-ash-resource.html#actions-destroy-metadata-description","title":"Ash.Resource.actions.destroy.metadata.description","type":"DSL"},{"doc":"Type constraints on the metadata","ref":"dsl-ash-resource.html#actions-destroy-metadata-constraints","title":"Ash.Resource.actions.destroy.metadata.constraints","type":"DSL"},{"doc":"The type of the metadata. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#actions-destroy-metadata-type","title":"Ash.Resource.actions.destroy.metadata.type","type":"DSL"},{"doc":"The name of the metadata","ref":"dsl-ash-resource.html#actions-destroy-metadata-name","title":"Ash.Resource.actions.destroy.metadata.name","type":"DSL"},{"doc":"A special kind of attribute that is only added to specific actions. Nothing sets this value, it must be set in a custom\nchange after_action hook via `Ash.Resource.put_metadata/3`.\n","ref":"dsl-ash-resource.html#actions-destroy-metadata","title":"Ash.Resource.actions.destroy.metadata","type":"DSL"},{"doc":"By default, validations are only run atomically if all changes will be run atomically or if there is no `validate/3` callback defined. Set this to `true` to run it atomically always.","ref":"dsl-ash-resource.html#actions-destroy-validate-always_atomic?","title":"Ash.Resource.actions.destroy.validate.always_atomic?","type":"DSL"},{"doc":"If set to `true`, the validation will be run in a before_action hook","ref":"dsl-ash-resource.html#actions-destroy-validate-before_action?","title":"Ash.Resource.actions.destroy.validate.before_action?","type":"DSL"},{"doc":"An optional description for the validation","ref":"dsl-ash-resource.html#actions-destroy-validate-description","title":"Ash.Resource.actions.destroy.validate.description","type":"DSL"},{"doc":"If provided, overrides any message set by the validation error","ref":"dsl-ash-resource.html#actions-destroy-validate-message","title":"Ash.Resource.actions.destroy.validate.message","type":"DSL"},{"doc":"If the validation should only run on valid changes. Useful for expensive validations or validations that depend on valid data.","ref":"dsl-ash-resource.html#actions-destroy-validate-only_when_valid?","title":"Ash.Resource.actions.destroy.validate.only_when_valid?","type":"DSL"},{"doc":"Validations that should pass in order for this validation to apply. Any of these validations failing will result in this validation being ignored.\n","ref":"dsl-ash-resource.html#actions-destroy-validate-where","title":"Ash.Resource.actions.destroy.validate.where","type":"DSL"},{"doc":"The module (or module and opts) that implements the `Ash.Resource.Validation` behaviour. Also accepts a function that receives the changeset and its context.","ref":"dsl-ash-resource.html#actions-destroy-validate-validation","title":"Ash.Resource.actions.destroy.validate.validation","type":"DSL"},{"doc":"Declares a validation to be applied to the changeset.\n\nSee `Ash.Resource.Validation` for more.\n","ref":"dsl-ash-resource.html#actions-destroy-validate","title":"Ash.Resource.actions.destroy.validate","type":"DSL"},{"doc":"By default, changes are only run atomically if all changes will be run atomically or if there is no `change/3` callback defined. Set this to `true` to run it atomically always.","ref":"dsl-ash-resource.html#actions-destroy-change-always_atomic?","title":"Ash.Resource.actions.destroy.change.always_atomic?","type":"DSL"},{"doc":"Validations that should pass in order for this change to apply. These validations failing will result in this change being ignored.\n","ref":"dsl-ash-resource.html#actions-destroy-change-where","title":"Ash.Resource.actions.destroy.change.where","type":"DSL"},{"doc":"The module and options for a change. Also accepts a function that takes the changeset and the context. See `Ash.Resource.Change.Builtins` for builtin changes.\n","ref":"dsl-ash-resource.html#actions-destroy-change-change","title":"Ash.Resource.actions.destroy.change.change","type":"DSL"},{"doc":"An optional description for the change","ref":"dsl-ash-resource.html#actions-destroy-change-description","title":"Ash.Resource.actions.destroy.change.description","type":"DSL"},{"doc":"If the change should only be run on valid changes. By default, all changes are run unless stated otherwise here.\n","ref":"dsl-ash-resource.html#actions-destroy-change-only_when_valid?","title":"Ash.Resource.actions.destroy.change.only_when_valid?","type":"DSL"},{"doc":"A change to be applied to the changeset.\n\nSee `Ash.Resource.Change` for more.\n","ref":"dsl-ash-resource.html#actions-destroy-change","title":"Ash.Resource.actions.destroy.change","type":"DSL"},{"doc":"Instructs Ash to *skip* the actual update/create/destroy step at the data layer. See the [manual actions guide](/documentation/topics/manual-actions.md) for more.\n","ref":"dsl-ash-resource.html#actions-destroy-manual?","title":"Ash.Resource.actions.destroy.manual?","type":"DSL"},{"doc":"Notifiers that will be called specifically for this action.","ref":"dsl-ash-resource.html#actions-destroy-notifiers","title":"Ash.Resource.actions.destroy.notifiers","type":"DSL"},{"doc":"Sets the error handler on the changeset. See `Ash.Changeset.handle_errors/2` for more","ref":"dsl-ash-resource.html#actions-destroy-error_handler","title":"Ash.Resource.actions.destroy.error_handler","type":"DSL"},{"doc":"If true, global validations will be skipped. Useful for manual actions.\n","ref":"dsl-ash-resource.html#actions-destroy-skip_global_validations?","title":"Ash.Resource.actions.destroy.skip_global_validations?","type":"DSL"},{"doc":"If true, global validations will be done in a `before_action` hook, regardless of their configuration on the resource.\n","ref":"dsl-ash-resource.html#actions-destroy-delay_global_validations?","title":"Ash.Resource.actions.destroy.delay_global_validations?","type":"DSL"},{"doc":"A list of attributes that would normally be required, but should not be for this action. They will still be validated just before the data layer step.\n","ref":"dsl-ash-resource.html#actions-destroy-allow_nil_input","title":"Ash.Resource.actions.destroy.allow_nil_input","type":"DSL"},{"doc":"A list of attributes that would normally `allow_nil?`, to require for this action. No need to include attributes that already do not allow nil?\n","ref":"dsl-ash-resource.html#actions-destroy-require_attributes","title":"Ash.Resource.actions.destroy.require_attributes","type":"DSL"},{"doc":"The list of attributes to accept. Use `:*` to accept all public attributes.","ref":"dsl-ash-resource.html#actions-destroy-accept","title":"Ash.Resource.actions.destroy.accept","type":"DSL"},{"doc":"A list of unknown fields to skip, or `:*` to skip all unknown fields.","ref":"dsl-ash-resource.html#actions-destroy-skip_unknown_inputs","title":"Ash.Resource.actions.destroy.skip_unknown_inputs","type":"DSL"},{"doc":"A list of resources that the action may touch, used when building transactions.\n","ref":"dsl-ash-resource.html#actions-destroy-touches_resources","title":"Ash.Resource.actions.destroy.touches_resources","type":"DSL"},{"doc":"Whether or not the action should be run in transactions. Reads default to false, while create/update/destroy actions default to `true`.\n","ref":"dsl-ash-resource.html#actions-destroy-transaction?","title":"Ash.Resource.actions.destroy.transaction?","type":"DSL"},{"doc":"An optional description for the action","ref":"dsl-ash-resource.html#actions-destroy-description","title":"Ash.Resource.actions.destroy.description","type":"DSL"},{"doc":"Whether or not this action should be used when no action is specified by the caller.","ref":"dsl-ash-resource.html#actions-destroy-primary?","title":"Ash.Resource.actions.destroy.primary?","type":"DSL"},{"doc":"The name of the action","ref":"dsl-ash-resource.html#actions-destroy-name","title":"Ash.Resource.actions.destroy.name","type":"DSL"},{"doc":"Configure the read action used when performing atomic upgrades. Defaults to the primary read action.\n","ref":"dsl-ash-resource.html#actions-destroy-atomic_upgrade_with","title":"Ash.Resource.actions.destroy.atomic_upgrade_with","type":"DSL"},{"doc":"If set to `true`, atomic upgrades will be performed. See the update actions guide for more.\n","ref":"dsl-ash-resource.html#actions-destroy-atomic_upgrade?","title":"Ash.Resource.actions.destroy.atomic_upgrade?","type":"DSL"},{"doc":"Require that the update be atomic. Only relevant if `soft?` is set to `true`. This means that all changes and validations implement the `atomic` callback. See the guide on atomic updates for more.\n","ref":"dsl-ash-resource.html#actions-destroy-require_atomic?","title":"Ash.Resource.actions.destroy.require_atomic?","type":"DSL"},{"doc":"Override the update behavior. Accepts a module or module and opts, or a function that takes the changeset and context. See the [manual actions guide](/documentation/topics/manual-actions.md) for more.\n","ref":"dsl-ash-resource.html#actions-destroy-manual","title":"Ash.Resource.actions.destroy.manual","type":"DSL"},{"doc":"If specified, the destroy action behaves as an update internally","ref":"dsl-ash-resource.html#actions-destroy-soft?","title":"Ash.Resource.actions.destroy.soft?","type":"DSL"},{"doc":"Declares a `destroy` action. For calling this action, see the `Ash.Domain` documentation.\n","ref":"dsl-ash-resource.html#actions-destroy","title":"Ash.Resource.actions.destroy","type":"DSL"},{"doc":"The default value for the argument to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value","ref":"dsl-ash-resource.html#actions-update-argument-default","title":"Ash.Resource.actions.update.argument.default","type":"DSL"},{"doc":"Whether or not the argument value contains sensitive information, like PII. See the [security guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#actions-update-argument-sensitive?","title":"Ash.Resource.actions.update.argument.sensitive?","type":"DSL"},{"doc":"Whether or not the argument should appear in public interfaces\n","ref":"dsl-ash-resource.html#actions-update-argument-public?","title":"Ash.Resource.actions.update.argument.public?","type":"DSL"},{"doc":"Whether or not the argument value may be nil (or may be not provided). If nil value is given error is raised.\n","ref":"dsl-ash-resource.html#actions-update-argument-allow_nil?","title":"Ash.Resource.actions.update.argument.allow_nil?","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more information, see `Ash.Type`.\n","ref":"dsl-ash-resource.html#actions-update-argument-constraints","title":"Ash.Resource.actions.update.argument.constraints","type":"DSL"},{"doc":"An optional description for the argument.","ref":"dsl-ash-resource.html#actions-update-argument-description","title":"Ash.Resource.actions.update.argument.description","type":"DSL"},{"doc":"The type of the argument. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#actions-update-argument-type","title":"Ash.Resource.actions.update.argument.type","type":"DSL"},{"doc":"The name of the argument","ref":"dsl-ash-resource.html#actions-update-argument-name","title":"Ash.Resource.actions.update.argument.name","type":"DSL"},{"doc":"Declares an argument on the action\n","ref":"dsl-ash-resource.html#actions-update-argument","title":"Ash.Resource.actions.update.argument","type":"DSL"},{"doc":"The default value for the metadata to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value","ref":"dsl-ash-resource.html#actions-update-metadata-default","title":"Ash.Resource.actions.update.metadata.default","type":"DSL"},{"doc":"Whether or not the metadata may return `nil`","ref":"dsl-ash-resource.html#actions-update-metadata-allow_nil?","title":"Ash.Resource.actions.update.metadata.allow_nil?","type":"DSL"},{"doc":"An optional description for the metadata.","ref":"dsl-ash-resource.html#actions-update-metadata-description","title":"Ash.Resource.actions.update.metadata.description","type":"DSL"},{"doc":"Type constraints on the metadata","ref":"dsl-ash-resource.html#actions-update-metadata-constraints","title":"Ash.Resource.actions.update.metadata.constraints","type":"DSL"},{"doc":"The type of the metadata. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#actions-update-metadata-type","title":"Ash.Resource.actions.update.metadata.type","type":"DSL"},{"doc":"The name of the metadata","ref":"dsl-ash-resource.html#actions-update-metadata-name","title":"Ash.Resource.actions.update.metadata.name","type":"DSL"},{"doc":"A special kind of attribute that is only added to specific actions. Nothing sets this value, it must be set in a custom\nchange after_action hook via `Ash.Resource.put_metadata/3`.\n","ref":"dsl-ash-resource.html#actions-update-metadata","title":"Ash.Resource.actions.update.metadata","type":"DSL"},{"doc":"By default, validations are only run atomically if all changes will be run atomically or if there is no `validate/3` callback defined. Set this to `true` to run it atomically always.","ref":"dsl-ash-resource.html#actions-update-validate-always_atomic?","title":"Ash.Resource.actions.update.validate.always_atomic?","type":"DSL"},{"doc":"If set to `true`, the validation will be run in a before_action hook","ref":"dsl-ash-resource.html#actions-update-validate-before_action?","title":"Ash.Resource.actions.update.validate.before_action?","type":"DSL"},{"doc":"An optional description for the validation","ref":"dsl-ash-resource.html#actions-update-validate-description","title":"Ash.Resource.actions.update.validate.description","type":"DSL"},{"doc":"If provided, overrides any message set by the validation error","ref":"dsl-ash-resource.html#actions-update-validate-message","title":"Ash.Resource.actions.update.validate.message","type":"DSL"},{"doc":"If the validation should only run on valid changes. Useful for expensive validations or validations that depend on valid data.","ref":"dsl-ash-resource.html#actions-update-validate-only_when_valid?","title":"Ash.Resource.actions.update.validate.only_when_valid?","type":"DSL"},{"doc":"Validations that should pass in order for this validation to apply. Any of these validations failing will result in this validation being ignored.\n","ref":"dsl-ash-resource.html#actions-update-validate-where","title":"Ash.Resource.actions.update.validate.where","type":"DSL"},{"doc":"The module (or module and opts) that implements the `Ash.Resource.Validation` behaviour. Also accepts a function that receives the changeset and its context.","ref":"dsl-ash-resource.html#actions-update-validate-validation","title":"Ash.Resource.actions.update.validate.validation","type":"DSL"},{"doc":"Declares a validation to be applied to the changeset.\n\nSee `Ash.Resource.Validation` for more.\n","ref":"dsl-ash-resource.html#actions-update-validate","title":"Ash.Resource.actions.update.validate","type":"DSL"},{"doc":"By default, changes are only run atomically if all changes will be run atomically or if there is no `change/3` callback defined. Set this to `true` to run it atomically always.","ref":"dsl-ash-resource.html#actions-update-change-always_atomic?","title":"Ash.Resource.actions.update.change.always_atomic?","type":"DSL"},{"doc":"Validations that should pass in order for this change to apply. These validations failing will result in this change being ignored.\n","ref":"dsl-ash-resource.html#actions-update-change-where","title":"Ash.Resource.actions.update.change.where","type":"DSL"},{"doc":"The module and options for a change. Also accepts a function that takes the changeset and the context. See `Ash.Resource.Change.Builtins` for builtin changes.\n","ref":"dsl-ash-resource.html#actions-update-change-change","title":"Ash.Resource.actions.update.change.change","type":"DSL"},{"doc":"An optional description for the change","ref":"dsl-ash-resource.html#actions-update-change-description","title":"Ash.Resource.actions.update.change.description","type":"DSL"},{"doc":"If the change should only be run on valid changes. By default, all changes are run unless stated otherwise here.\n","ref":"dsl-ash-resource.html#actions-update-change-only_when_valid?","title":"Ash.Resource.actions.update.change.only_when_valid?","type":"DSL"},{"doc":"A change to be applied to the changeset.\n\nSee `Ash.Resource.Change` for more.\n","ref":"dsl-ash-resource.html#actions-update-change","title":"Ash.Resource.actions.update.change","type":"DSL"},{"doc":"Instructs Ash to *skip* the actual update/create/destroy step at the data layer. See the [manual actions guide](/documentation/topics/manual-actions.md) for more.\n","ref":"dsl-ash-resource.html#actions-update-manual?","title":"Ash.Resource.actions.update.manual?","type":"DSL"},{"doc":"Notifiers that will be called specifically for this action.","ref":"dsl-ash-resource.html#actions-update-notifiers","title":"Ash.Resource.actions.update.notifiers","type":"DSL"},{"doc":"Sets the error handler on the changeset. See `Ash.Changeset.handle_errors/2` for more","ref":"dsl-ash-resource.html#actions-update-error_handler","title":"Ash.Resource.actions.update.error_handler","type":"DSL"},{"doc":"If true, global validations will be skipped. Useful for manual actions.\n","ref":"dsl-ash-resource.html#actions-update-skip_global_validations?","title":"Ash.Resource.actions.update.skip_global_validations?","type":"DSL"},{"doc":"If true, global validations will be done in a `before_action` hook, regardless of their configuration on the resource.\n","ref":"dsl-ash-resource.html#actions-update-delay_global_validations?","title":"Ash.Resource.actions.update.delay_global_validations?","type":"DSL"},{"doc":"A list of attributes that would normally be required, but should not be for this action. They will still be validated just before the data layer step.\n","ref":"dsl-ash-resource.html#actions-update-allow_nil_input","title":"Ash.Resource.actions.update.allow_nil_input","type":"DSL"},{"doc":"A list of attributes that would normally `allow_nil?`, to require for this action. No need to include attributes that already do not allow nil?\n","ref":"dsl-ash-resource.html#actions-update-require_attributes","title":"Ash.Resource.actions.update.require_attributes","type":"DSL"},{"doc":"The list of attributes to accept. Use `:*` to accept all public attributes.","ref":"dsl-ash-resource.html#actions-update-accept","title":"Ash.Resource.actions.update.accept","type":"DSL"},{"doc":"A list of unknown fields to skip, or `:*` to skip all unknown fields.","ref":"dsl-ash-resource.html#actions-update-skip_unknown_inputs","title":"Ash.Resource.actions.update.skip_unknown_inputs","type":"DSL"},{"doc":"A list of resources that the action may touch, used when building transactions.\n","ref":"dsl-ash-resource.html#actions-update-touches_resources","title":"Ash.Resource.actions.update.touches_resources","type":"DSL"},{"doc":"Whether or not the action should be run in transactions. Reads default to false, while create/update/destroy actions default to `true`.\n","ref":"dsl-ash-resource.html#actions-update-transaction?","title":"Ash.Resource.actions.update.transaction?","type":"DSL"},{"doc":"An optional description for the action","ref":"dsl-ash-resource.html#actions-update-description","title":"Ash.Resource.actions.update.description","type":"DSL"},{"doc":"Whether or not this action should be used when no action is specified by the caller.","ref":"dsl-ash-resource.html#actions-update-primary?","title":"Ash.Resource.actions.update.primary?","type":"DSL"},{"doc":"The name of the action","ref":"dsl-ash-resource.html#actions-update-name","title":"Ash.Resource.actions.update.name","type":"DSL"},{"doc":"Configure the read action used when performing atomic upgrades. Defaults to the primary read action.\n","ref":"dsl-ash-resource.html#actions-update-atomic_upgrade_with","title":"Ash.Resource.actions.update.atomic_upgrade_with","type":"DSL"},{"doc":"If set to `true`, atomic upgrades will be performed. Ignored if `required_atomic?` is `true`. See the update actions guide for more.\n","ref":"dsl-ash-resource.html#actions-update-atomic_upgrade?","title":"Ash.Resource.actions.update.atomic_upgrade?","type":"DSL"},{"doc":"Require that the update be atomic. This means that all changes and validations implement the `atomic` callback. See the guide on atomic updates for more.\n","ref":"dsl-ash-resource.html#actions-update-require_atomic?","title":"Ash.Resource.actions.update.require_atomic?","type":"DSL"},{"doc":"Override the update behavior. Accepts a module or module and opts, or a function that takes the changeset and context. See the [manual actions guide](/documentation/topics/manual-actions.md) for more.\n","ref":"dsl-ash-resource.html#actions-update-manual","title":"Ash.Resource.actions.update.manual","type":"DSL"},{"doc":"Declares a `update` action. For calling this action, see the `Ash.Domain` documentation.\n","ref":"dsl-ash-resource.html#actions-update","title":"Ash.Resource.actions.update","type":"DSL"},{"doc":"The filter to apply. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#actions-read-filter-filter","title":"Ash.Resource.actions.read.filter.filter","type":"DSL"},{"doc":"Applies a filter. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#actions-read-filter","title":"Ash.Resource.actions.read.filter","type":"DSL"},{"doc":"The default value for the metadata to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value","ref":"dsl-ash-resource.html#actions-read-metadata-default","title":"Ash.Resource.actions.read.metadata.default","type":"DSL"},{"doc":"Whether or not the metadata may return `nil`","ref":"dsl-ash-resource.html#actions-read-metadata-allow_nil?","title":"Ash.Resource.actions.read.metadata.allow_nil?","type":"DSL"},{"doc":"An optional description for the metadata.","ref":"dsl-ash-resource.html#actions-read-metadata-description","title":"Ash.Resource.actions.read.metadata.description","type":"DSL"},{"doc":"Type constraints on the metadata","ref":"dsl-ash-resource.html#actions-read-metadata-constraints","title":"Ash.Resource.actions.read.metadata.constraints","type":"DSL"},{"doc":"The type of the metadata. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#actions-read-metadata-type","title":"Ash.Resource.actions.read.metadata.type","type":"DSL"},{"doc":"The name of the metadata","ref":"dsl-ash-resource.html#actions-read-metadata-name","title":"Ash.Resource.actions.read.metadata.name","type":"DSL"},{"doc":"A special kind of attribute that is only added to specific actions. Nothing sets this value, it must be set in a custom\nchange after_action hook via `Ash.Resource.put_metadata/3`.\n","ref":"dsl-ash-resource.html#actions-read-metadata","title":"Ash.Resource.actions.read.metadata","type":"DSL"},{"doc":"Whether or not pagination can be disabled (by passing `page: false` to `Ash.Api.read!/2`, or by having `required?: false, default_limit: nil` set). Only relevant if some pagination configuration is supplied.","ref":"dsl-ash-resource.html#actions-read-pagination-required?","title":"Ash.Resource.actions.read.pagination.required?","type":"DSL"},{"doc":"The maximum amount of records that can be requested in a single page","ref":"dsl-ash-resource.html#actions-read-pagination-max_page_size","title":"Ash.Resource.actions.read.pagination.max_page_size","type":"DSL"},{"doc":"Whether not a returned page will have a full count of all records. Use `:by_default` to do it automatically.","ref":"dsl-ash-resource.html#actions-read-pagination-countable","title":"Ash.Resource.actions.read.pagination.countable","type":"DSL"},{"doc":"The default page size to apply, if one is not supplied","ref":"dsl-ash-resource.html#actions-read-pagination-default_limit","title":"Ash.Resource.actions.read.pagination.default_limit","type":"DSL"},{"doc":"Whether or not offset based pagination is supported","ref":"dsl-ash-resource.html#actions-read-pagination-offset?","title":"Ash.Resource.actions.read.pagination.offset?","type":"DSL"},{"doc":"Whether or not keyset based pagination is supported","ref":"dsl-ash-resource.html#actions-read-pagination-keyset?","title":"Ash.Resource.actions.read.pagination.keyset?","type":"DSL"},{"doc":"Adds pagination options to a resource\n","ref":"dsl-ash-resource.html#actions-read-pagination","title":"Ash.Resource.actions.read.pagination","type":"DSL"},{"doc":"The module and options for a preparation. Also accepts functions take the query and the context.\n","ref":"dsl-ash-resource.html#actions-read-prepare-preparation","title":"Ash.Resource.actions.read.prepare.preparation","type":"DSL"},{"doc":"Declares a preparation, which can be used to prepare a query for a read action.\n","ref":"dsl-ash-resource.html#actions-read-prepare","title":"Ash.Resource.actions.read.prepare","type":"DSL"},{"doc":"The default value for the argument to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value","ref":"dsl-ash-resource.html#actions-read-argument-default","title":"Ash.Resource.actions.read.argument.default","type":"DSL"},{"doc":"Whether or not the argument value contains sensitive information, like PII. See the [security guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#actions-read-argument-sensitive?","title":"Ash.Resource.actions.read.argument.sensitive?","type":"DSL"},{"doc":"Whether or not the argument should appear in public interfaces\n","ref":"dsl-ash-resource.html#actions-read-argument-public?","title":"Ash.Resource.actions.read.argument.public?","type":"DSL"},{"doc":"Whether or not the argument value may be nil (or may be not provided). If nil value is given error is raised.\n","ref":"dsl-ash-resource.html#actions-read-argument-allow_nil?","title":"Ash.Resource.actions.read.argument.allow_nil?","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more information, see `Ash.Type`.\n","ref":"dsl-ash-resource.html#actions-read-argument-constraints","title":"Ash.Resource.actions.read.argument.constraints","type":"DSL"},{"doc":"An optional description for the argument.","ref":"dsl-ash-resource.html#actions-read-argument-description","title":"Ash.Resource.actions.read.argument.description","type":"DSL"},{"doc":"The type of the argument. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#actions-read-argument-type","title":"Ash.Resource.actions.read.argument.type","type":"DSL"},{"doc":"The name of the argument","ref":"dsl-ash-resource.html#actions-read-argument-name","title":"Ash.Resource.actions.read.argument.name","type":"DSL"},{"doc":"Declares an argument on the action\n","ref":"dsl-ash-resource.html#actions-read-argument","title":"Ash.Resource.actions.read.argument","type":"DSL"},{"doc":"A list of unknown fields to skip, or `:*` to skip all unknown fields.","ref":"dsl-ash-resource.html#actions-read-skip_unknown_inputs","title":"Ash.Resource.actions.read.skip_unknown_inputs","type":"DSL"},{"doc":"A list of resources that the action may touch, used when building transactions.\n","ref":"dsl-ash-resource.html#actions-read-touches_resources","title":"Ash.Resource.actions.read.touches_resources","type":"DSL"},{"doc":"Whether or not the action should be run in transactions. Reads default to false, while create/update/destroy actions default to `true`.\n","ref":"dsl-ash-resource.html#actions-read-transaction?","title":"Ash.Resource.actions.read.transaction?","type":"DSL"},{"doc":"An optional description for the action","ref":"dsl-ash-resource.html#actions-read-description","title":"Ash.Resource.actions.read.description","type":"DSL"},{"doc":"Whether or not this action should be used when no action is specified by the caller.","ref":"dsl-ash-resource.html#actions-read-primary?","title":"Ash.Resource.actions.read.primary?","type":"DSL"},{"doc":"The name of the action","ref":"dsl-ash-resource.html#actions-read-name","title":"Ash.Resource.actions.read.name","type":"DSL"},{"doc":"This setting defines how this action handles multitenancy. `:enforce` requires a tenant to be set (the default behavior), `:allow_global` allows using this action both with and without a tenant, `:bypass` completely ignores the tenant even if it's set. This is useful to change the behaviour of selected read action without the need of marking the whole resource with `global? true`.\n","ref":"dsl-ash-resource.html#actions-read-multitenancy","title":"Ash.Resource.actions.read.multitenancy","type":"DSL"},{"doc":"The maximum amount of time, in milliseconds, that the action is allowed to run for. Ignored if the data layer doesn't support transactions *and* async is disabled.\n","ref":"dsl-ash-resource.html#actions-read-timeout","title":"Ash.Resource.actions.read.timeout","type":"DSL"},{"doc":"A helper to automatically generate a \"get by X\" action. Sets `get?` to true, add args for each of the specified fields, and adds a filter for each of the arguments.\n","ref":"dsl-ash-resource.html#actions-read-get_by","title":"Ash.Resource.actions.read.get_by","type":"DSL"},{"doc":"Allows direct manipulation of the data layer query via an MFA. The ash query and the data layer query will be provided as additional arguments. The result must be `{:ok, new_data_layer_query} | {:error, error}`.\n","ref":"dsl-ash-resource.html#actions-read-modify_query","title":"Ash.Resource.actions.read.modify_query","type":"DSL"},{"doc":"Expresses that this action innately only returns a single result. Used by extensions to validate and/or modify behavior. Causes code interfaces to return a single value instead of a list. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.\n","ref":"dsl-ash-resource.html#actions-read-get?","title":"Ash.Resource.actions.read.get?","type":"DSL"},{"doc":"Delegates running of the query to the provided module. Accepts a module or module and opts, or a function that takes the ash query, the data layer query, and context. See the [manual actions guide](/documentation/topics/manual-actions.md) for more.\n","ref":"dsl-ash-resource.html#actions-read-manual","title":"Ash.Resource.actions.read.manual","type":"DSL"},{"doc":"Declares a `read` action. For calling this action, see the `Ash.Domain` documentation.\n","ref":"dsl-ash-resource.html#actions-read","title":"Ash.Resource.actions.read","type":"DSL"},{"doc":"The default value for the metadata to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value","ref":"dsl-ash-resource.html#actions-create-metadata-default","title":"Ash.Resource.actions.create.metadata.default","type":"DSL"},{"doc":"Whether or not the metadata may return `nil`","ref":"dsl-ash-resource.html#actions-create-metadata-allow_nil?","title":"Ash.Resource.actions.create.metadata.allow_nil?","type":"DSL"},{"doc":"An optional description for the metadata.","ref":"dsl-ash-resource.html#actions-create-metadata-description","title":"Ash.Resource.actions.create.metadata.description","type":"DSL"},{"doc":"Type constraints on the metadata","ref":"dsl-ash-resource.html#actions-create-metadata-constraints","title":"Ash.Resource.actions.create.metadata.constraints","type":"DSL"},{"doc":"The type of the metadata. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#actions-create-metadata-type","title":"Ash.Resource.actions.create.metadata.type","type":"DSL"},{"doc":"The name of the metadata","ref":"dsl-ash-resource.html#actions-create-metadata-name","title":"Ash.Resource.actions.create.metadata.name","type":"DSL"},{"doc":"A special kind of attribute that is only added to specific actions. Nothing sets this value, it must be set in a custom\nchange after_action hook via `Ash.Resource.put_metadata/3`.\n","ref":"dsl-ash-resource.html#actions-create-metadata","title":"Ash.Resource.actions.create.metadata","type":"DSL"},{"doc":"The default value for the argument to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value","ref":"dsl-ash-resource.html#actions-create-argument-default","title":"Ash.Resource.actions.create.argument.default","type":"DSL"},{"doc":"Whether or not the argument value contains sensitive information, like PII. See the [security guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#actions-create-argument-sensitive?","title":"Ash.Resource.actions.create.argument.sensitive?","type":"DSL"},{"doc":"Whether or not the argument should appear in public interfaces\n","ref":"dsl-ash-resource.html#actions-create-argument-public?","title":"Ash.Resource.actions.create.argument.public?","type":"DSL"},{"doc":"Whether or not the argument value may be nil (or may be not provided). If nil value is given error is raised.\n","ref":"dsl-ash-resource.html#actions-create-argument-allow_nil?","title":"Ash.Resource.actions.create.argument.allow_nil?","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more information, see `Ash.Type`.\n","ref":"dsl-ash-resource.html#actions-create-argument-constraints","title":"Ash.Resource.actions.create.argument.constraints","type":"DSL"},{"doc":"An optional description for the argument.","ref":"dsl-ash-resource.html#actions-create-argument-description","title":"Ash.Resource.actions.create.argument.description","type":"DSL"},{"doc":"The type of the argument. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#actions-create-argument-type","title":"Ash.Resource.actions.create.argument.type","type":"DSL"},{"doc":"The name of the argument","ref":"dsl-ash-resource.html#actions-create-argument-name","title":"Ash.Resource.actions.create.argument.name","type":"DSL"},{"doc":"Declares an argument on the action\n","ref":"dsl-ash-resource.html#actions-create-argument","title":"Ash.Resource.actions.create.argument","type":"DSL"},{"doc":"By default, validations are only run atomically if all changes will be run atomically or if there is no `validate/3` callback defined. Set this to `true` to run it atomically always.","ref":"dsl-ash-resource.html#actions-create-validate-always_atomic?","title":"Ash.Resource.actions.create.validate.always_atomic?","type":"DSL"},{"doc":"If set to `true`, the validation will be run in a before_action hook","ref":"dsl-ash-resource.html#actions-create-validate-before_action?","title":"Ash.Resource.actions.create.validate.before_action?","type":"DSL"},{"doc":"An optional description for the validation","ref":"dsl-ash-resource.html#actions-create-validate-description","title":"Ash.Resource.actions.create.validate.description","type":"DSL"},{"doc":"If provided, overrides any message set by the validation error","ref":"dsl-ash-resource.html#actions-create-validate-message","title":"Ash.Resource.actions.create.validate.message","type":"DSL"},{"doc":"If the validation should only run on valid changes. Useful for expensive validations or validations that depend on valid data.","ref":"dsl-ash-resource.html#actions-create-validate-only_when_valid?","title":"Ash.Resource.actions.create.validate.only_when_valid?","type":"DSL"},{"doc":"Validations that should pass in order for this validation to apply. Any of these validations failing will result in this validation being ignored.\n","ref":"dsl-ash-resource.html#actions-create-validate-where","title":"Ash.Resource.actions.create.validate.where","type":"DSL"},{"doc":"The module (or module and opts) that implements the `Ash.Resource.Validation` behaviour. Also accepts a function that receives the changeset and its context.","ref":"dsl-ash-resource.html#actions-create-validate-validation","title":"Ash.Resource.actions.create.validate.validation","type":"DSL"},{"doc":"Declares a validation to be applied to the changeset.\n\nSee `Ash.Resource.Validation` for more.\n","ref":"dsl-ash-resource.html#actions-create-validate","title":"Ash.Resource.actions.create.validate","type":"DSL"},{"doc":"By default, changes are only run atomically if all changes will be run atomically or if there is no `change/3` callback defined. Set this to `true` to run it atomically always.","ref":"dsl-ash-resource.html#actions-create-change-always_atomic?","title":"Ash.Resource.actions.create.change.always_atomic?","type":"DSL"},{"doc":"Validations that should pass in order for this change to apply. These validations failing will result in this change being ignored.\n","ref":"dsl-ash-resource.html#actions-create-change-where","title":"Ash.Resource.actions.create.change.where","type":"DSL"},{"doc":"The module and options for a change. Also accepts a function that takes the changeset and the context. See `Ash.Resource.Change.Builtins` for builtin changes.\n","ref":"dsl-ash-resource.html#actions-create-change-change","title":"Ash.Resource.actions.create.change.change","type":"DSL"},{"doc":"An optional description for the change","ref":"dsl-ash-resource.html#actions-create-change-description","title":"Ash.Resource.actions.create.change.description","type":"DSL"},{"doc":"If the change should only be run on valid changes. By default, all changes are run unless stated otherwise here.\n","ref":"dsl-ash-resource.html#actions-create-change-only_when_valid?","title":"Ash.Resource.actions.create.change.only_when_valid?","type":"DSL"},{"doc":"A change to be applied to the changeset.\n\nSee `Ash.Resource.Change` for more.\n","ref":"dsl-ash-resource.html#actions-create-change","title":"Ash.Resource.actions.create.change","type":"DSL"},{"doc":"Instructs Ash to *skip* the actual update/create/destroy step at the data layer. See the [manual actions guide](/documentation/topics/manual-actions.md) for more.\n","ref":"dsl-ash-resource.html#actions-create-manual?","title":"Ash.Resource.actions.create.manual?","type":"DSL"},{"doc":"Notifiers that will be called specifically for this action.","ref":"dsl-ash-resource.html#actions-create-notifiers","title":"Ash.Resource.actions.create.notifiers","type":"DSL"},{"doc":"Sets the error handler on the changeset. See `Ash.Changeset.handle_errors/2` for more","ref":"dsl-ash-resource.html#actions-create-error_handler","title":"Ash.Resource.actions.create.error_handler","type":"DSL"},{"doc":"If true, global validations will be skipped. Useful for manual actions.\n","ref":"dsl-ash-resource.html#actions-create-skip_global_validations?","title":"Ash.Resource.actions.create.skip_global_validations?","type":"DSL"},{"doc":"If true, global validations will be done in a `before_action` hook, regardless of their configuration on the resource.\n","ref":"dsl-ash-resource.html#actions-create-delay_global_validations?","title":"Ash.Resource.actions.create.delay_global_validations?","type":"DSL"},{"doc":"A list of attributes that would normally be required, but should not be for this action. They will still be validated just before the data layer step.\n","ref":"dsl-ash-resource.html#actions-create-allow_nil_input","title":"Ash.Resource.actions.create.allow_nil_input","type":"DSL"},{"doc":"A list of attributes that would normally `allow_nil?`, to require for this action. No need to include attributes that already do not allow nil?\n","ref":"dsl-ash-resource.html#actions-create-require_attributes","title":"Ash.Resource.actions.create.require_attributes","type":"DSL"},{"doc":"The list of attributes to accept. Use `:*` to accept all public attributes.","ref":"dsl-ash-resource.html#actions-create-accept","title":"Ash.Resource.actions.create.accept","type":"DSL"},{"doc":"A list of unknown fields to skip, or `:*` to skip all unknown fields.","ref":"dsl-ash-resource.html#actions-create-skip_unknown_inputs","title":"Ash.Resource.actions.create.skip_unknown_inputs","type":"DSL"},{"doc":"A list of resources that the action may touch, used when building transactions.\n","ref":"dsl-ash-resource.html#actions-create-touches_resources","title":"Ash.Resource.actions.create.touches_resources","type":"DSL"},{"doc":"Whether or not the action should be run in transactions. Reads default to false, while create/update/destroy actions default to `true`.\n","ref":"dsl-ash-resource.html#actions-create-transaction?","title":"Ash.Resource.actions.create.transaction?","type":"DSL"},{"doc":"An optional description for the action","ref":"dsl-ash-resource.html#actions-create-description","title":"Ash.Resource.actions.create.description","type":"DSL"},{"doc":"Whether or not this action should be used when no action is specified by the caller.","ref":"dsl-ash-resource.html#actions-create-primary?","title":"Ash.Resource.actions.create.primary?","type":"DSL"},{"doc":"The name of the action","ref":"dsl-ash-resource.html#actions-create-name","title":"Ash.Resource.actions.create.name","type":"DSL"},{"doc":"An expression to check if the record should be updated when there's a conflict.","ref":"dsl-ash-resource.html#actions-create-upsert_condition","title":"Ash.Resource.actions.create.upsert_condition","type":"DSL"},{"doc":"The fields to overwrite in the case of an upsert. If not provided, all fields except for fields set by defaults will be overwritten.\n","ref":"dsl-ash-resource.html#actions-create-upsert_fields","title":"Ash.Resource.actions.create.upsert_fields","type":"DSL"},{"doc":"The identity to use for the upsert. Cannot be overriden by the caller. Ignored  if `upsert?` is not set to `true`.\n","ref":"dsl-ash-resource.html#actions-create-upsert_identity","title":"Ash.Resource.actions.create.upsert_identity","type":"DSL"},{"doc":"Forces all uses of this action to be treated as an upsert.\n","ref":"dsl-ash-resource.html#actions-create-upsert?","title":"Ash.Resource.actions.create.upsert?","type":"DSL"},{"doc":"Override the creation behavior. Accepts a module or module and opts, or a function that takes the changeset and context. See the [manual actions guide](/documentation/topics/manual-actions.md) for more.\n","ref":"dsl-ash-resource.html#actions-create-manual","title":"Ash.Resource.actions.create.manual","type":"DSL"},{"doc":"Declares a `create` action. For calling this action, see the `Ash.Domain` documentation.\n","ref":"dsl-ash-resource.html#actions-create","title":"Ash.Resource.actions.create","type":"DSL"},{"doc":"The default value for the argument to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value","ref":"dsl-ash-resource.html#actions-action-argument-default","title":"Ash.Resource.actions.action.argument.default","type":"DSL"},{"doc":"Whether or not the argument value contains sensitive information, like PII. See the [security guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#actions-action-argument-sensitive?","title":"Ash.Resource.actions.action.argument.sensitive?","type":"DSL"},{"doc":"Whether or not the argument should appear in public interfaces\n","ref":"dsl-ash-resource.html#actions-action-argument-public?","title":"Ash.Resource.actions.action.argument.public?","type":"DSL"},{"doc":"Whether or not the argument value may be nil (or may be not provided). If nil value is given error is raised.\n","ref":"dsl-ash-resource.html#actions-action-argument-allow_nil?","title":"Ash.Resource.actions.action.argument.allow_nil?","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more information, see `Ash.Type`.\n","ref":"dsl-ash-resource.html#actions-action-argument-constraints","title":"Ash.Resource.actions.action.argument.constraints","type":"DSL"},{"doc":"An optional description for the argument.","ref":"dsl-ash-resource.html#actions-action-argument-description","title":"Ash.Resource.actions.action.argument.description","type":"DSL"},{"doc":"The type of the argument. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#actions-action-argument-type","title":"Ash.Resource.actions.action.argument.type","type":"DSL"},{"doc":"The name of the argument","ref":"dsl-ash-resource.html#actions-action-argument-name","title":"Ash.Resource.actions.action.argument.name","type":"DSL"},{"doc":"Declares an argument on the action\n","ref":"dsl-ash-resource.html#actions-action-argument","title":"Ash.Resource.actions.action.argument","type":"DSL"},{"doc":"A list of unknown fields to skip, or `:*` to skip all unknown fields.","ref":"dsl-ash-resource.html#actions-action-skip_unknown_inputs","title":"Ash.Resource.actions.action.skip_unknown_inputs","type":"DSL"},{"doc":"A list of resources that the action may touch, used when building transactions.\n","ref":"dsl-ash-resource.html#actions-action-touches_resources","title":"Ash.Resource.actions.action.touches_resources","type":"DSL"},{"doc":"Whether or not the action should be run in transactions. Reads default to false, while create/update/destroy actions default to `true`.\n","ref":"dsl-ash-resource.html#actions-action-transaction?","title":"Ash.Resource.actions.action.transaction?","type":"DSL"},{"doc":"An optional description for the action","ref":"dsl-ash-resource.html#actions-action-description","title":"Ash.Resource.actions.action.description","type":"DSL"},{"doc":"Whether or not this action should be used when no action is specified by the caller.","ref":"dsl-ash-resource.html#actions-action-primary?","title":"Ash.Resource.actions.action.primary?","type":"DSL"},{"doc":"The name of the action","ref":"dsl-ash-resource.html#actions-action-name","title":"Ash.Resource.actions.action.name","type":"DSL"},{"doc":"","ref":"dsl-ash-resource.html#actions-action-run","title":"Ash.Resource.actions.action.run","type":"DSL"},{"doc":"Whether or not the action can return nil. Unlike attributes & arguments, this defaults to `false`.\n","ref":"dsl-ash-resource.html#actions-action-allow_nil?","title":"Ash.Resource.actions.action.allow_nil?","type":"DSL"},{"doc":"Constraints for the return type. See `Ash.Type` for more.\n","ref":"dsl-ash-resource.html#actions-action-constraints","title":"Ash.Resource.actions.action.constraints","type":"DSL"},{"doc":"The return type of the action. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#actions-action-returns","title":"Ash.Resource.actions.action.returns","type":"DSL"},{"doc":"Declares a generic action. A combination of arguments, a return type and a run function.\n\nFor calling this action, see the `Ash.Domain` documentation.\n","ref":"dsl-ash-resource.html#actions-action","title":"Ash.Resource.actions.action","type":"DSL"},{"doc":"A default value for the `accept` option for each action. Use `:*` to accept all public attributes.","ref":"dsl-ash-resource.html#actions-default_accept","title":"Ash.Resource.actions.default_accept","type":"DSL"},{"doc":"Creates a simple action of each specified type, with the same name as the type. These will be `primary?` unless one already exists for that type. Embedded resources, however, have a default of all resource types.\n","ref":"dsl-ash-resource.html#actions-defaults","title":"Ash.Resource.actions.defaults","type":"DSL"},{"doc":"A section for declaring resource actions.\n\nAll manipulation of data through the underlying data layer happens through actions.\nThere are four types of action: `create`, `read`, `update`, and `destroy`. You may\nrecognize these from the acronym `CRUD`. You can have multiple actions of the same\ntype, as long as they have different names. This is the primary mechanism for customizing\nyour resources to conform to your business logic. It is normal and expected to have\nmultiple actions of each type in a large application.\n","ref":"dsl-ash-resource.html#actions","title":"Ash.Resource.actions","type":"DSL"},{"doc":"The filter to apply. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-belongs_to-filter-filter","title":"Ash.Resource.relationships.belongs_to.filter.filter","type":"DSL"},{"doc":"Applies a filter. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-belongs_to-filter","title":"Ash.Resource.relationships.belongs_to.filter","type":"DSL"},{"doc":"A message to show if there is a conflict with this relationship in the database on destroy.\n","ref":"dsl-ash-resource.html#relationships-belongs_to-violation_message","title":"Ash.Resource.relationships.belongs_to.violation_message","type":"DSL"},{"doc":"A sort statement to be applied when loading the relationship.\n","ref":"dsl-ash-resource.html#relationships-belongs_to-sort","title":"Ash.Resource.relationships.belongs_to.sort","type":"DSL"},{"doc":"If set to `false`, the relationship will not be usable in filters.","ref":"dsl-ash-resource.html#relationships-belongs_to-sortable?","title":"Ash.Resource.relationships.belongs_to.sortable?","type":"DSL"},{"doc":"If set to `false`, the relationship will not be usable in filters.","ref":"dsl-ash-resource.html#relationships-belongs_to-filterable?","title":"Ash.Resource.relationships.belongs_to.filterable?","type":"DSL"},{"doc":"The domain module to use when working with the related entity.\n","ref":"dsl-ash-resource.html#relationships-belongs_to-domain","title":"Ash.Resource.relationships.belongs_to.domain","type":"DSL"},{"doc":"The read action on the destination resource to use when loading data and filtering.\n","ref":"dsl-ash-resource.html#relationships-belongs_to-read_action","title":"Ash.Resource.relationships.belongs_to.read_action","type":"DSL"},{"doc":"Whether or not the relationship may be managed.\n","ref":"dsl-ash-resource.html#relationships-belongs_to-writable?","title":"Ash.Resource.relationships.belongs_to.writable?","type":"DSL"},{"doc":"A message to show if there is a conflict with this relationship in the database on update or create, or when managing relationships.\n","ref":"dsl-ash-resource.html#relationships-belongs_to-not_found_message","title":"Ash.Resource.relationships.belongs_to.not_found_message","type":"DSL"},{"doc":"Whether or not the relationship will appear in public interfaces\n","ref":"dsl-ash-resource.html#relationships-belongs_to-public?","title":"Ash.Resource.relationships.belongs_to.public?","type":"DSL"},{"doc":"Context to be set on any queries or changesets generated for managing or querying this relationship.\n","ref":"dsl-ash-resource.html#relationships-belongs_to-relationship_context","title":"Ash.Resource.relationships.belongs_to.relationship_context","type":"DSL"},{"doc":"The field on this resource that should match the `destination_attribute` on the related resource. - Defaults to <name>_id","ref":"dsl-ash-resource.html#relationships-belongs_to-source_attribute","title":"Ash.Resource.relationships.belongs_to.source_attribute","type":"DSL"},{"doc":"Whether or not to validate that the destination field exists on the destination resource","ref":"dsl-ash-resource.html#relationships-belongs_to-validate_destination_attribute?","title":"Ash.Resource.relationships.belongs_to.validate_destination_attribute?","type":"DSL"},{"doc":"The attribute on the related resource that should match the `source_attribute` configured on this resource.","ref":"dsl-ash-resource.html#relationships-belongs_to-destination_attribute","title":"Ash.Resource.relationships.belongs_to.destination_attribute","type":"DSL"},{"doc":"An optional description for the relationship","ref":"dsl-ash-resource.html#relationships-belongs_to-description","title":"Ash.Resource.relationships.belongs_to.description","type":"DSL"},{"doc":"The destination resource","ref":"dsl-ash-resource.html#relationships-belongs_to-destination","title":"Ash.Resource.relationships.belongs_to.destination","type":"DSL"},{"doc":"The name of the relationship","ref":"dsl-ash-resource.html#relationships-belongs_to-name","title":"Ash.Resource.relationships.belongs_to.name","type":"DSL"},{"doc":"The type of the generated created attribute. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#relationships-belongs_to-attribute_type","title":"Ash.Resource.relationships.belongs_to.attribute_type","type":"DSL"},{"doc":"If set to `false` an attribute is not created on the resource for this relationship, and one must be manually added in `attributes`, invalidating many other options.","ref":"dsl-ash-resource.html#relationships-belongs_to-define_attribute?","title":"Ash.Resource.relationships.belongs_to.define_attribute?","type":"DSL"},{"doc":"Whether or not the generated attribute will be public. If not set, it will default to the relationship's `public?` setting.\n","ref":"dsl-ash-resource.html#relationships-belongs_to-attribute_public?","title":"Ash.Resource.relationships.belongs_to.attribute_public?","type":"DSL"},{"doc":"Whether the generated attribute will be marked as writable. If not set, it will default to the relationship's `writable?` setting.\n","ref":"dsl-ash-resource.html#relationships-belongs_to-attribute_writable?","title":"Ash.Resource.relationships.belongs_to.attribute_writable?","type":"DSL"},{"doc":"Whether this relationship must always be present, e.g: must be included on creation, and never removed (it may be modified). The generated attribute will not allow nil values.","ref":"dsl-ash-resource.html#relationships-belongs_to-allow_nil?","title":"Ash.Resource.relationships.belongs_to.allow_nil?","type":"DSL"},{"doc":"Whether the generated attribute is, or is part of, the primary key of a resource.","ref":"dsl-ash-resource.html#relationships-belongs_to-primary_key?","title":"Ash.Resource.relationships.belongs_to.primary_key?","type":"DSL"},{"doc":"Declares a `belongs_to` relationship. In a relational database, the foreign key would be on the *source* table.\n\nThis creates a field on the resource with the corresponding name and type, unless `define_attribute?: false` is provided.\n\nSee the [relationships guide](/documentation/topics/resources/relationships.md) for more.\n","ref":"dsl-ash-resource.html#relationships-belongs_to","title":"Ash.Resource.relationships.belongs_to","type":"DSL"},{"doc":"The filter to apply. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-many_to_many-filter-filter","title":"Ash.Resource.relationships.many_to_many.filter.filter","type":"DSL"},{"doc":"Applies a filter. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-many_to_many-filter","title":"Ash.Resource.relationships.many_to_many.filter","type":"DSL"},{"doc":"A message to show if there is a conflict with this relationship in the database on destroy.\n","ref":"dsl-ash-resource.html#relationships-many_to_many-violation_message","title":"Ash.Resource.relationships.many_to_many.violation_message","type":"DSL"},{"doc":"Whether or not related values may exist for this relationship at creation.\n","ref":"dsl-ash-resource.html#relationships-many_to_many-could_be_related_at_creation?","title":"Ash.Resource.relationships.many_to_many.could_be_related_at_creation?","type":"DSL"},{"doc":"A sort statement to be applied when loading the relationship.\n","ref":"dsl-ash-resource.html#relationships-many_to_many-sort","title":"Ash.Resource.relationships.many_to_many.sort","type":"DSL"},{"doc":"If set to `false`, the relationship will not be usable in filters.","ref":"dsl-ash-resource.html#relationships-many_to_many-sortable?","title":"Ash.Resource.relationships.many_to_many.sortable?","type":"DSL"},{"doc":"If set to `false`, the relationship will not be usable in filters.","ref":"dsl-ash-resource.html#relationships-many_to_many-filterable?","title":"Ash.Resource.relationships.many_to_many.filterable?","type":"DSL"},{"doc":"The domain module to use when working with the related entity.\n","ref":"dsl-ash-resource.html#relationships-many_to_many-domain","title":"Ash.Resource.relationships.many_to_many.domain","type":"DSL"},{"doc":"The read action on the destination resource to use when loading data and filtering.\n","ref":"dsl-ash-resource.html#relationships-many_to_many-read_action","title":"Ash.Resource.relationships.many_to_many.read_action","type":"DSL"},{"doc":"Whether or not the relationship may be managed.\n","ref":"dsl-ash-resource.html#relationships-many_to_many-writable?","title":"Ash.Resource.relationships.many_to_many.writable?","type":"DSL"},{"doc":"A message to show if there is a conflict with this relationship in the database on update or create, or when managing relationships.\n","ref":"dsl-ash-resource.html#relationships-many_to_many-not_found_message","title":"Ash.Resource.relationships.many_to_many.not_found_message","type":"DSL"},{"doc":"Whether or not the relationship will appear in public interfaces\n","ref":"dsl-ash-resource.html#relationships-many_to_many-public?","title":"Ash.Resource.relationships.many_to_many.public?","type":"DSL"},{"doc":"Context to be set on any queries or changesets generated for managing or querying this relationship.\n","ref":"dsl-ash-resource.html#relationships-many_to_many-relationship_context","title":"Ash.Resource.relationships.many_to_many.relationship_context","type":"DSL"},{"doc":"The field on this resource that should match the `destination_attribute` on the related resource.","ref":"dsl-ash-resource.html#relationships-many_to_many-source_attribute","title":"Ash.Resource.relationships.many_to_many.source_attribute","type":"DSL"},{"doc":"Whether or not to validate that the destination field exists on the destination resource","ref":"dsl-ash-resource.html#relationships-many_to_many-validate_destination_attribute?","title":"Ash.Resource.relationships.many_to_many.validate_destination_attribute?","type":"DSL"},{"doc":"The attribute on the related resource that should match the `source_attribute` configured on this resource.","ref":"dsl-ash-resource.html#relationships-many_to_many-destination_attribute","title":"Ash.Resource.relationships.many_to_many.destination_attribute","type":"DSL"},{"doc":"An optional description for the relationship","ref":"dsl-ash-resource.html#relationships-many_to_many-description","title":"Ash.Resource.relationships.many_to_many.description","type":"DSL"},{"doc":"The destination resource","ref":"dsl-ash-resource.html#relationships-many_to_many-destination","title":"Ash.Resource.relationships.many_to_many.destination","type":"DSL"},{"doc":"The name of the relationship","ref":"dsl-ash-resource.html#relationships-many_to_many-name","title":"Ash.Resource.relationships.many_to_many.name","type":"DSL"},{"doc":"The has_many relationship to the join resource. Defaults to `<relationship_name>_join_assoc`.","ref":"dsl-ash-resource.html#relationships-many_to_many-join_relationship","title":"Ash.Resource.relationships.many_to_many.join_relationship","type":"DSL"},{"doc":"The resource to use as the join resource.","ref":"dsl-ash-resource.html#relationships-many_to_many-through","title":"Ash.Resource.relationships.many_to_many.through","type":"DSL"},{"doc":"The attribute on the join resource that should line up with `destination_attribute` on the related resource. Defaults to `<snake_cased_last_part_of_destination_module_name>_id`.","ref":"dsl-ash-resource.html#relationships-many_to_many-destination_attribute_on_join_resource","title":"Ash.Resource.relationships.many_to_many.destination_attribute_on_join_resource","type":"DSL"},{"doc":"The attribute on the join resource that should line up with `source_attribute` on this resource. Defaults to `<snake_cased_last_part_of_source_module_name>_id`.","ref":"dsl-ash-resource.html#relationships-many_to_many-source_attribute_on_join_resource","title":"Ash.Resource.relationships.many_to_many.source_attribute_on_join_resource","type":"DSL"},{"doc":"Declares a `many_to_many` relationship. Many to many relationships require a join resource.\n\nA join resource is a resource that consists of a relationship to the source and destination of the many to many.\n\nSee the [relationships guide](/documentation/topics/resources/relationships.md) for more.\n","ref":"dsl-ash-resource.html#relationships-many_to_many","title":"Ash.Resource.relationships.many_to_many","type":"DSL"},{"doc":"The filter to apply. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-has_many-filter-filter","title":"Ash.Resource.relationships.has_many.filter.filter","type":"DSL"},{"doc":"Applies a filter. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-has_many-filter","title":"Ash.Resource.relationships.has_many.filter","type":"DSL"},{"doc":"A message to show if there is a conflict with this relationship in the database on destroy.\n","ref":"dsl-ash-resource.html#relationships-has_many-violation_message","title":"Ash.Resource.relationships.has_many.violation_message","type":"DSL"},{"doc":"Whether or not related values may exist for this relationship at creation.\n","ref":"dsl-ash-resource.html#relationships-has_many-could_be_related_at_creation?","title":"Ash.Resource.relationships.has_many.could_be_related_at_creation?","type":"DSL"},{"doc":"A sort statement to be applied when loading the relationship.\n","ref":"dsl-ash-resource.html#relationships-has_many-sort","title":"Ash.Resource.relationships.has_many.sort","type":"DSL"},{"doc":"If set to `false`, the relationship will not be usable in filters.","ref":"dsl-ash-resource.html#relationships-has_many-sortable?","title":"Ash.Resource.relationships.has_many.sortable?","type":"DSL"},{"doc":"If set to `false`, the relationship will not be usable in filters.","ref":"dsl-ash-resource.html#relationships-has_many-filterable?","title":"Ash.Resource.relationships.has_many.filterable?","type":"DSL"},{"doc":"The domain module to use when working with the related entity.\n","ref":"dsl-ash-resource.html#relationships-has_many-domain","title":"Ash.Resource.relationships.has_many.domain","type":"DSL"},{"doc":"The read action on the destination resource to use when loading data and filtering.\n","ref":"dsl-ash-resource.html#relationships-has_many-read_action","title":"Ash.Resource.relationships.has_many.read_action","type":"DSL"},{"doc":"Whether or not the relationship may be managed.\n","ref":"dsl-ash-resource.html#relationships-has_many-writable?","title":"Ash.Resource.relationships.has_many.writable?","type":"DSL"},{"doc":"A message to show if there is a conflict with this relationship in the database on update or create, or when managing relationships.\n","ref":"dsl-ash-resource.html#relationships-has_many-not_found_message","title":"Ash.Resource.relationships.has_many.not_found_message","type":"DSL"},{"doc":"Whether or not the relationship will appear in public interfaces\n","ref":"dsl-ash-resource.html#relationships-has_many-public?","title":"Ash.Resource.relationships.has_many.public?","type":"DSL"},{"doc":"Context to be set on any queries or changesets generated for managing or querying this relationship.\n","ref":"dsl-ash-resource.html#relationships-has_many-relationship_context","title":"Ash.Resource.relationships.has_many.relationship_context","type":"DSL"},{"doc":"The field on this resource that should match the `destination_attribute` on the related resource.","ref":"dsl-ash-resource.html#relationships-has_many-source_attribute","title":"Ash.Resource.relationships.has_many.source_attribute","type":"DSL"},{"doc":"Whether or not to validate that the destination field exists on the destination resource","ref":"dsl-ash-resource.html#relationships-has_many-validate_destination_attribute?","title":"Ash.Resource.relationships.has_many.validate_destination_attribute?","type":"DSL"},{"doc":"The attribute on the related resource that should match the `source_attribute` configured on this resource.","ref":"dsl-ash-resource.html#relationships-has_many-destination_attribute","title":"Ash.Resource.relationships.has_many.destination_attribute","type":"DSL"},{"doc":"An optional description for the relationship","ref":"dsl-ash-resource.html#relationships-has_many-description","title":"Ash.Resource.relationships.has_many.description","type":"DSL"},{"doc":"The destination resource","ref":"dsl-ash-resource.html#relationships-has_many-destination","title":"Ash.Resource.relationships.has_many.destination","type":"DSL"},{"doc":"The name of the relationship","ref":"dsl-ash-resource.html#relationships-has_many-name","title":"Ash.Resource.relationships.has_many.name","type":"DSL"},{"doc":"All existing entities are considered related, i.e this relationship is not based on any fields, and `source_attribute` and `destination_attribute` are ignored. See the See the [relationships guide](/documentation/topics/resources/relationships.md) for more.\n","ref":"dsl-ash-resource.html#relationships-has_many-no_attributes?","title":"Ash.Resource.relationships.has_many.no_attributes?","type":"DSL"},{"doc":"A module that implements `Ash.Resource.ManualRelationship`. Also accepts a 2 argument function that takes the source records and the context.\n","ref":"dsl-ash-resource.html#relationships-has_many-manual","title":"Ash.Resource.relationships.has_many.manual","type":"DSL"},{"doc":"Declares a `has_many` relationship. There can be any number of related entities.\n\nSee the [relationships guide](/documentation/topics/resources/relationships.md) for more.\n","ref":"dsl-ash-resource.html#relationships-has_many","title":"Ash.Resource.relationships.has_many","type":"DSL"},{"doc":"The filter to apply. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-has_one-filter-filter","title":"Ash.Resource.relationships.has_one.filter.filter","type":"DSL"},{"doc":"Applies a filter. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-has_one-filter","title":"Ash.Resource.relationships.has_one.filter","type":"DSL"},{"doc":"A message to show if there is a conflict with this relationship in the database on destroy.\n","ref":"dsl-ash-resource.html#relationships-has_one-violation_message","title":"Ash.Resource.relationships.has_one.violation_message","type":"DSL"},{"doc":"Whether or not related values may exist for this relationship at creation.\n","ref":"dsl-ash-resource.html#relationships-has_one-could_be_related_at_creation?","title":"Ash.Resource.relationships.has_one.could_be_related_at_creation?","type":"DSL"},{"doc":"A sort statement to be applied when loading the relationship.\n","ref":"dsl-ash-resource.html#relationships-has_one-sort","title":"Ash.Resource.relationships.has_one.sort","type":"DSL"},{"doc":"If set to `false`, the relationship will not be usable in filters.","ref":"dsl-ash-resource.html#relationships-has_one-sortable?","title":"Ash.Resource.relationships.has_one.sortable?","type":"DSL"},{"doc":"If set to `false`, the relationship will not be usable in filters.","ref":"dsl-ash-resource.html#relationships-has_one-filterable?","title":"Ash.Resource.relationships.has_one.filterable?","type":"DSL"},{"doc":"The domain module to use when working with the related entity.\n","ref":"dsl-ash-resource.html#relationships-has_one-domain","title":"Ash.Resource.relationships.has_one.domain","type":"DSL"},{"doc":"The read action on the destination resource to use when loading data and filtering.\n","ref":"dsl-ash-resource.html#relationships-has_one-read_action","title":"Ash.Resource.relationships.has_one.read_action","type":"DSL"},{"doc":"Whether or not the relationship may be managed.\n","ref":"dsl-ash-resource.html#relationships-has_one-writable?","title":"Ash.Resource.relationships.has_one.writable?","type":"DSL"},{"doc":"A message to show if there is a conflict with this relationship in the database on update or create, or when managing relationships.\n","ref":"dsl-ash-resource.html#relationships-has_one-not_found_message","title":"Ash.Resource.relationships.has_one.not_found_message","type":"DSL"},{"doc":"Whether or not the relationship will appear in public interfaces\n","ref":"dsl-ash-resource.html#relationships-has_one-public?","title":"Ash.Resource.relationships.has_one.public?","type":"DSL"},{"doc":"Context to be set on any queries or changesets generated for managing or querying this relationship.\n","ref":"dsl-ash-resource.html#relationships-has_one-relationship_context","title":"Ash.Resource.relationships.has_one.relationship_context","type":"DSL"},{"doc":"The field on this resource that should match the `destination_attribute` on the related resource.","ref":"dsl-ash-resource.html#relationships-has_one-source_attribute","title":"Ash.Resource.relationships.has_one.source_attribute","type":"DSL"},{"doc":"Whether or not to validate that the destination field exists on the destination resource","ref":"dsl-ash-resource.html#relationships-has_one-validate_destination_attribute?","title":"Ash.Resource.relationships.has_one.validate_destination_attribute?","type":"DSL"},{"doc":"The attribute on the related resource that should match the `source_attribute` configured on this resource.","ref":"dsl-ash-resource.html#relationships-has_one-destination_attribute","title":"Ash.Resource.relationships.has_one.destination_attribute","type":"DSL"},{"doc":"An optional description for the relationship","ref":"dsl-ash-resource.html#relationships-has_one-description","title":"Ash.Resource.relationships.has_one.description","type":"DSL"},{"doc":"The destination resource","ref":"dsl-ash-resource.html#relationships-has_one-destination","title":"Ash.Resource.relationships.has_one.destination","type":"DSL"},{"doc":"The name of the relationship","ref":"dsl-ash-resource.html#relationships-has_one-name","title":"Ash.Resource.relationships.has_one.name","type":"DSL"},{"doc":"Signal that this relationship is actually a `has_many` where the first record is given via the `sort`. This will allow data layers to properly deduplicate when necessary.\n","ref":"dsl-ash-resource.html#relationships-has_one-from_many?","title":"Ash.Resource.relationships.has_one.from_many?","type":"DSL"},{"doc":"Marks the relationship as required. Has no effect on validations, but can inform extensions that there will always be a related entity.\n","ref":"dsl-ash-resource.html#relationships-has_one-allow_nil?","title":"Ash.Resource.relationships.has_one.allow_nil?","type":"DSL"},{"doc":"All existing entities are considered related, i.e this relationship is not based on any fields, and `source_attribute` and `destination_attribute` are ignored. See the See the [relationships guide](/documentation/topics/resources/relationships.md) for more.\n","ref":"dsl-ash-resource.html#relationships-has_one-no_attributes?","title":"Ash.Resource.relationships.has_one.no_attributes?","type":"DSL"},{"doc":"A module that implements `Ash.Resource.ManualRelationship`. Also accepts a 2 argument function that takes the source records and the context.\n","ref":"dsl-ash-resource.html#relationships-has_one-manual","title":"Ash.Resource.relationships.has_one.manual","type":"DSL"},{"doc":"Declares a `has_one` relationship. In a relational database, the foreign key would be on the *other* table.\n\nGenerally speaking, a `has_one` also implies that the destination table is unique on that foreign key.\n\nSee the [relationships guide](/documentation/topics/resources/relationships.md) for more.\n","ref":"dsl-ash-resource.html#relationships-has_one","title":"Ash.Resource.relationships.has_one","type":"DSL"},{"doc":"A section for declaring relationships on the resource.\n\nRelationships are a core component of resource oriented design. Many components of Ash\nwill use these relationships. A simple use case is loading relationships (done via the `Ash.Query.load/2`).\n\nSee the [relationships guide](/documentation/topics/resources/relationships.md) for more.\n","ref":"dsl-ash-resource.html#relationships","title":"Ash.Resource.relationships","type":"DSL"},{"doc":"Ensures that other attributes that use the same \"lazy\" default (a function or an mfa), use the same default value. Has no effect unless `default` is a zero argument function.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-match_other_defaults?","title":"Ash.Resource.attributes.uuid_v7_primary_key.match_other_defaults?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in sorts.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-sortable?","title":"Ash.Resource.attributes.uuid_v7_primary_key.sortable?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in filters.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-filterable?","title":"Ash.Resource.attributes.uuid_v7_primary_key.filterable?","type":"DSL"},{"doc":"A value to be set on all updates, unless a value is being provided already.","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-update_default","title":"Ash.Resource.attributes.uuid_v7_primary_key.update_default","type":"DSL"},{"doc":"A value to be set on all creates, unless a value is being provided already.  Note: The default value is casted according to the type's `Ash.Type.*` module, before it is saved.  For `:string`, for example, if `constraints: [allow_empty?: _]` is false, the value `\"\"` will be cast to `nil`.  See the `:constraints` option, the `:allow_nil?` option, and the relevant `Ash.Type.*` documentation.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-default","title":"Ash.Resource.attributes.uuid_v7_primary_key.default","type":"DSL"},{"doc":"Whether or not the attribute should be shown over public interfaces. See the [sensitive data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-public?","title":"Ash.Resource.attributes.uuid_v7_primary_key.public?","type":"DSL"},{"doc":"Whether or not the value can be written to. Non-writable attributes can still be written with `Ash.Changeset.force_change_attribute/3`.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-writable?","title":"Ash.Resource.attributes.uuid_v7_primary_key.writable?","type":"DSL"},{"doc":"Whether or not the value may be generated by the data layer.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-generated?","title":"Ash.Resource.attributes.uuid_v7_primary_key.generated?","type":"DSL"},{"doc":"Whether the attribute is the primary key. Composite primary key is also possible by using `primary_key? true` in more than one attribute. If primary_key? is true, allow_nil? must be false.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-primary_key?","title":"Ash.Resource.attributes.uuid_v7_primary_key.primary_key?","type":"DSL"},{"doc":"Whether or not to ensure this attribute is always selected when reading from the database, regardless of applied select statements.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-always_select?","title":"Ash.Resource.attributes.uuid_v7_primary_key.always_select?","type":"DSL"},{"doc":"If the field should be mapped to a different name in the data layer. Support varies by data layer.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-source","title":"Ash.Resource.attributes.uuid_v7_primary_key.source","type":"DSL"},{"doc":"Whether or not the attribute value contains sensitive information, like PII. See the [Sensitive Data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-sensitive?","title":"Ash.Resource.attributes.uuid_v7_primary_key.sensitive?","type":"DSL"},{"doc":"An optional description for the attribute.","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-description","title":"Ash.Resource.attributes.uuid_v7_primary_key.description","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more, see `Ash.Type`.\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-constraints","title":"Ash.Resource.attributes.uuid_v7_primary_key.constraints","type":"DSL"},{"doc":"The type of the attribute. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-type","title":"Ash.Resource.attributes.uuid_v7_primary_key.type","type":"DSL"},{"doc":"The name of the attribute.","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key-name","title":"Ash.Resource.attributes.uuid_v7_primary_key.name","type":"DSL"},{"doc":"Declares a non writable, non-nil, primary key column of type `uuid_v7`, which defaults to `Ash.UUIDv7.generate/0`.\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except for `allow_nil?`, but it sets\nthe following different defaults:\n\n```elixir\nwritable? false\npublic? true\ndefault &Ash.UUIDv7.generate/0\nprimary_key? true\ntype :uuid_v7\n```\n","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key","title":"Ash.Resource.attributes.uuid_v7_primary_key","type":"DSL"},{"doc":"Ensures that other attributes that use the same \"lazy\" default (a function or an mfa), use the same default value. Has no effect unless `default` is a zero argument function.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-match_other_defaults?","title":"Ash.Resource.attributes.uuid_primary_key.match_other_defaults?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in sorts.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-sortable?","title":"Ash.Resource.attributes.uuid_primary_key.sortable?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in filters.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-filterable?","title":"Ash.Resource.attributes.uuid_primary_key.filterable?","type":"DSL"},{"doc":"A value to be set on all updates, unless a value is being provided already.","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-update_default","title":"Ash.Resource.attributes.uuid_primary_key.update_default","type":"DSL"},{"doc":"A value to be set on all creates, unless a value is being provided already.  Note: The default value is casted according to the type's `Ash.Type.*` module, before it is saved.  For `:string`, for example, if `constraints: [allow_empty?: _]` is false, the value `\"\"` will be cast to `nil`.  See the `:constraints` option, the `:allow_nil?` option, and the relevant `Ash.Type.*` documentation.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-default","title":"Ash.Resource.attributes.uuid_primary_key.default","type":"DSL"},{"doc":"Whether or not the attribute should be shown over public interfaces. See the [sensitive data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-public?","title":"Ash.Resource.attributes.uuid_primary_key.public?","type":"DSL"},{"doc":"Whether or not the value can be written to. Non-writable attributes can still be written with `Ash.Changeset.force_change_attribute/3`.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-writable?","title":"Ash.Resource.attributes.uuid_primary_key.writable?","type":"DSL"},{"doc":"Whether or not the value may be generated by the data layer.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-generated?","title":"Ash.Resource.attributes.uuid_primary_key.generated?","type":"DSL"},{"doc":"Whether the attribute is the primary key. Composite primary key is also possible by using `primary_key? true` in more than one attribute. If primary_key? is true, allow_nil? must be false.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-primary_key?","title":"Ash.Resource.attributes.uuid_primary_key.primary_key?","type":"DSL"},{"doc":"Whether or not to ensure this attribute is always selected when reading from the database, regardless of applied select statements.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-always_select?","title":"Ash.Resource.attributes.uuid_primary_key.always_select?","type":"DSL"},{"doc":"If the field should be mapped to a different name in the data layer. Support varies by data layer.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-source","title":"Ash.Resource.attributes.uuid_primary_key.source","type":"DSL"},{"doc":"Whether or not the attribute value contains sensitive information, like PII. See the [Sensitive Data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-sensitive?","title":"Ash.Resource.attributes.uuid_primary_key.sensitive?","type":"DSL"},{"doc":"An optional description for the attribute.","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-description","title":"Ash.Resource.attributes.uuid_primary_key.description","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more, see `Ash.Type`.\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-constraints","title":"Ash.Resource.attributes.uuid_primary_key.constraints","type":"DSL"},{"doc":"The type of the attribute. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-type","title":"Ash.Resource.attributes.uuid_primary_key.type","type":"DSL"},{"doc":"The name of the attribute.","ref":"dsl-ash-resource.html#attributes-uuid_primary_key-name","title":"Ash.Resource.attributes.uuid_primary_key.name","type":"DSL"},{"doc":"Declares a non writable, non-nil, primary key column of type `uuid`, which defaults to `Ash.UUID.generate/0`.\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except for `allow_nil?`, but it sets\nthe following different defaults:\n\n```elixir\nwritable? false\npublic? true\ndefault &Ash.UUID.generate/0\nprimary_key? true\ntype :uuid\n```\n","ref":"dsl-ash-resource.html#attributes-uuid_primary_key","title":"Ash.Resource.attributes.uuid_primary_key","type":"DSL"},{"doc":"Ensures that other attributes that use the same \"lazy\" default (a function or an mfa), use the same default value. Has no effect unless `default` is a zero argument function.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-match_other_defaults?","title":"Ash.Resource.attributes.integer_primary_key.match_other_defaults?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in sorts.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-sortable?","title":"Ash.Resource.attributes.integer_primary_key.sortable?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in filters.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-filterable?","title":"Ash.Resource.attributes.integer_primary_key.filterable?","type":"DSL"},{"doc":"A value to be set on all updates, unless a value is being provided already.","ref":"dsl-ash-resource.html#attributes-integer_primary_key-update_default","title":"Ash.Resource.attributes.integer_primary_key.update_default","type":"DSL"},{"doc":"A value to be set on all creates, unless a value is being provided already.  Note: The default value is casted according to the type's `Ash.Type.*` module, before it is saved.  For `:string`, for example, if `constraints: [allow_empty?: _]` is false, the value `\"\"` will be cast to `nil`.  See the `:constraints` option, the `:allow_nil?` option, and the relevant `Ash.Type.*` documentation.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-default","title":"Ash.Resource.attributes.integer_primary_key.default","type":"DSL"},{"doc":"Whether or not the attribute should be shown over public interfaces. See the [sensitive data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-public?","title":"Ash.Resource.attributes.integer_primary_key.public?","type":"DSL"},{"doc":"Whether or not the value can be written to. Non-writable attributes can still be written with `Ash.Changeset.force_change_attribute/3`.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-writable?","title":"Ash.Resource.attributes.integer_primary_key.writable?","type":"DSL"},{"doc":"Whether or not the value may be generated by the data layer.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-generated?","title":"Ash.Resource.attributes.integer_primary_key.generated?","type":"DSL"},{"doc":"Whether the attribute is the primary key. Composite primary key is also possible by using `primary_key? true` in more than one attribute. If primary_key? is true, allow_nil? must be false.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-primary_key?","title":"Ash.Resource.attributes.integer_primary_key.primary_key?","type":"DSL"},{"doc":"Whether or not to ensure this attribute is always selected when reading from the database, regardless of applied select statements.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-always_select?","title":"Ash.Resource.attributes.integer_primary_key.always_select?","type":"DSL"},{"doc":"If the field should be mapped to a different name in the data layer. Support varies by data layer.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-source","title":"Ash.Resource.attributes.integer_primary_key.source","type":"DSL"},{"doc":"Whether or not the attribute value contains sensitive information, like PII. See the [Sensitive Data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-sensitive?","title":"Ash.Resource.attributes.integer_primary_key.sensitive?","type":"DSL"},{"doc":"An optional description for the attribute.","ref":"dsl-ash-resource.html#attributes-integer_primary_key-description","title":"Ash.Resource.attributes.integer_primary_key.description","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more, see `Ash.Type`.\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key-constraints","title":"Ash.Resource.attributes.integer_primary_key.constraints","type":"DSL"},{"doc":"The type of the attribute. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#attributes-integer_primary_key-type","title":"Ash.Resource.attributes.integer_primary_key.type","type":"DSL"},{"doc":"The name of the attribute.","ref":"dsl-ash-resource.html#attributes-integer_primary_key-name","title":"Ash.Resource.attributes.integer_primary_key.name","type":"DSL"},{"doc":"Declares a generated, non writable, non-nil, primary key column of type integer.\n\nGenerated integer primary keys must be supported by the data layer.\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except for `allow_nil?`, but it sets\nthe following different defaults:\n\n```elixir\npublic? true\nwritable? false\nprimary_key? true\ngenerated? true\ntype :integer\n```\n","ref":"dsl-ash-resource.html#attributes-integer_primary_key","title":"Ash.Resource.attributes.integer_primary_key","type":"DSL"},{"doc":"Ensures that other attributes that use the same \"lazy\" default (a function or an mfa), use the same default value. Has no effect unless `default` is a zero argument function.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-match_other_defaults?","title":"Ash.Resource.attributes.update_timestamp.match_other_defaults?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in sorts.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-sortable?","title":"Ash.Resource.attributes.update_timestamp.sortable?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in filters.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-filterable?","title":"Ash.Resource.attributes.update_timestamp.filterable?","type":"DSL"},{"doc":"A value to be set on all updates, unless a value is being provided already.","ref":"dsl-ash-resource.html#attributes-update_timestamp-update_default","title":"Ash.Resource.attributes.update_timestamp.update_default","type":"DSL"},{"doc":"A value to be set on all creates, unless a value is being provided already.  Note: The default value is casted according to the type's `Ash.Type.*` module, before it is saved.  For `:string`, for example, if `constraints: [allow_empty?: _]` is false, the value `\"\"` will be cast to `nil`.  See the `:constraints` option, the `:allow_nil?` option, and the relevant `Ash.Type.*` documentation.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-default","title":"Ash.Resource.attributes.update_timestamp.default","type":"DSL"},{"doc":"Whether or not the attribute should be shown over public interfaces. See the [sensitive data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-public?","title":"Ash.Resource.attributes.update_timestamp.public?","type":"DSL"},{"doc":"Whether or not the value can be written to. Non-writable attributes can still be written with `Ash.Changeset.force_change_attribute/3`.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-writable?","title":"Ash.Resource.attributes.update_timestamp.writable?","type":"DSL"},{"doc":"Whether or not the value may be generated by the data layer.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-generated?","title":"Ash.Resource.attributes.update_timestamp.generated?","type":"DSL"},{"doc":"Whether or not the attribute can be set to nil. If nil value is given error is raised.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-allow_nil?","title":"Ash.Resource.attributes.update_timestamp.allow_nil?","type":"DSL"},{"doc":"Whether the attribute is the primary key. Composite primary key is also possible by using `primary_key? true` in more than one attribute. If primary_key? is true, allow_nil? must be false.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-primary_key?","title":"Ash.Resource.attributes.update_timestamp.primary_key?","type":"DSL"},{"doc":"Whether or not to ensure this attribute is always selected when reading from the database, regardless of applied select statements.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-always_select?","title":"Ash.Resource.attributes.update_timestamp.always_select?","type":"DSL"},{"doc":"If the field should be mapped to a different name in the data layer. Support varies by data layer.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-source","title":"Ash.Resource.attributes.update_timestamp.source","type":"DSL"},{"doc":"Whether or not the attribute value contains sensitive information, like PII. See the [Sensitive Data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-sensitive?","title":"Ash.Resource.attributes.update_timestamp.sensitive?","type":"DSL"},{"doc":"An optional description for the attribute.","ref":"dsl-ash-resource.html#attributes-update_timestamp-description","title":"Ash.Resource.attributes.update_timestamp.description","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more, see `Ash.Type`.\n","ref":"dsl-ash-resource.html#attributes-update_timestamp-constraints","title":"Ash.Resource.attributes.update_timestamp.constraints","type":"DSL"},{"doc":"The type of the attribute. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#attributes-update_timestamp-type","title":"Ash.Resource.attributes.update_timestamp.type","type":"DSL"},{"doc":"The name of the attribute.","ref":"dsl-ash-resource.html#attributes-update_timestamp-name","title":"Ash.Resource.attributes.update_timestamp.name","type":"DSL"},{"doc":"Declares a non-writable attribute with a create and update default of `&DateTime.utc_now/0`\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except it sets\nthe following different defaults:\n\n```elixir\nwritable? false\ndefault &DateTime.utc_now/0\nmatch_other_defaults? true\nupdate_default &DateTime.utc_now/0\ntype Ash.Type.UTCDatetimeUsec\nallow_nil? false\n```\n","ref":"dsl-ash-resource.html#attributes-update_timestamp","title":"Ash.Resource.attributes.update_timestamp","type":"DSL"},{"doc":"Ensures that other attributes that use the same \"lazy\" default (a function or an mfa), use the same default value. Has no effect unless `default` is a zero argument function.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-match_other_defaults?","title":"Ash.Resource.attributes.create_timestamp.match_other_defaults?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in sorts.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-sortable?","title":"Ash.Resource.attributes.create_timestamp.sortable?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in filters.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-filterable?","title":"Ash.Resource.attributes.create_timestamp.filterable?","type":"DSL"},{"doc":"A value to be set on all updates, unless a value is being provided already.","ref":"dsl-ash-resource.html#attributes-create_timestamp-update_default","title":"Ash.Resource.attributes.create_timestamp.update_default","type":"DSL"},{"doc":"A value to be set on all creates, unless a value is being provided already.  Note: The default value is casted according to the type's `Ash.Type.*` module, before it is saved.  For `:string`, for example, if `constraints: [allow_empty?: _]` is false, the value `\"\"` will be cast to `nil`.  See the `:constraints` option, the `:allow_nil?` option, and the relevant `Ash.Type.*` documentation.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-default","title":"Ash.Resource.attributes.create_timestamp.default","type":"DSL"},{"doc":"Whether or not the attribute should be shown over public interfaces. See the [sensitive data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-public?","title":"Ash.Resource.attributes.create_timestamp.public?","type":"DSL"},{"doc":"Whether or not the value can be written to. Non-writable attributes can still be written with `Ash.Changeset.force_change_attribute/3`.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-writable?","title":"Ash.Resource.attributes.create_timestamp.writable?","type":"DSL"},{"doc":"Whether or not the value may be generated by the data layer.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-generated?","title":"Ash.Resource.attributes.create_timestamp.generated?","type":"DSL"},{"doc":"Whether or not the attribute can be set to nil. If nil value is given error is raised.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-allow_nil?","title":"Ash.Resource.attributes.create_timestamp.allow_nil?","type":"DSL"},{"doc":"Whether the attribute is the primary key. Composite primary key is also possible by using `primary_key? true` in more than one attribute. If primary_key? is true, allow_nil? must be false.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-primary_key?","title":"Ash.Resource.attributes.create_timestamp.primary_key?","type":"DSL"},{"doc":"Whether or not to ensure this attribute is always selected when reading from the database, regardless of applied select statements.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-always_select?","title":"Ash.Resource.attributes.create_timestamp.always_select?","type":"DSL"},{"doc":"If the field should be mapped to a different name in the data layer. Support varies by data layer.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-source","title":"Ash.Resource.attributes.create_timestamp.source","type":"DSL"},{"doc":"Whether or not the attribute value contains sensitive information, like PII. See the [Sensitive Data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-sensitive?","title":"Ash.Resource.attributes.create_timestamp.sensitive?","type":"DSL"},{"doc":"An optional description for the attribute.","ref":"dsl-ash-resource.html#attributes-create_timestamp-description","title":"Ash.Resource.attributes.create_timestamp.description","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more, see `Ash.Type`.\n","ref":"dsl-ash-resource.html#attributes-create_timestamp-constraints","title":"Ash.Resource.attributes.create_timestamp.constraints","type":"DSL"},{"doc":"The type of the attribute. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#attributes-create_timestamp-type","title":"Ash.Resource.attributes.create_timestamp.type","type":"DSL"},{"doc":"The name of the attribute.","ref":"dsl-ash-resource.html#attributes-create_timestamp-name","title":"Ash.Resource.attributes.create_timestamp.name","type":"DSL"},{"doc":"Declares a non-writable attribute with a create default of `&DateTime.utc_now/0`\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except it sets\nthe following different defaults:\n\n```elixir\nwritable? false\ndefault &DateTime.utc_now/0\nmatch_other_defaults? true\ntype Ash.Type.UTCDatetimeUsec\nallow_nil? false\n```\n","ref":"dsl-ash-resource.html#attributes-create_timestamp","title":"Ash.Resource.attributes.create_timestamp","type":"DSL"},{"doc":"Ensures that other attributes that use the same \"lazy\" default (a function or an mfa), use the same default value. Has no effect unless `default` is a zero argument function.\n","ref":"dsl-ash-resource.html#attributes-attribute-match_other_defaults?","title":"Ash.Resource.attributes.attribute.match_other_defaults?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in sorts.\n","ref":"dsl-ash-resource.html#attributes-attribute-sortable?","title":"Ash.Resource.attributes.attribute.sortable?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in filters.\n","ref":"dsl-ash-resource.html#attributes-attribute-filterable?","title":"Ash.Resource.attributes.attribute.filterable?","type":"DSL"},{"doc":"A value to be set on all updates, unless a value is being provided already.","ref":"dsl-ash-resource.html#attributes-attribute-update_default","title":"Ash.Resource.attributes.attribute.update_default","type":"DSL"},{"doc":"A value to be set on all creates, unless a value is being provided already.  Note: The default value is casted according to the type's `Ash.Type.*` module, before it is saved.  For `:string`, for example, if `constraints: [allow_empty?: _]` is false, the value `\"\"` will be cast to `nil`.  See the `:constraints` option, the `:allow_nil?` option, and the relevant `Ash.Type.*` documentation.\n","ref":"dsl-ash-resource.html#attributes-attribute-default","title":"Ash.Resource.attributes.attribute.default","type":"DSL"},{"doc":"Whether or not the attribute should be shown over public interfaces. See the [sensitive data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-attribute-public?","title":"Ash.Resource.attributes.attribute.public?","type":"DSL"},{"doc":"Whether or not the value can be written to. Non-writable attributes can still be written with `Ash.Changeset.force_change_attribute/3`.\n","ref":"dsl-ash-resource.html#attributes-attribute-writable?","title":"Ash.Resource.attributes.attribute.writable?","type":"DSL"},{"doc":"Whether or not the value may be generated by the data layer.\n","ref":"dsl-ash-resource.html#attributes-attribute-generated?","title":"Ash.Resource.attributes.attribute.generated?","type":"DSL"},{"doc":"Whether or not the attribute can be set to nil. If nil value is given error is raised.\n","ref":"dsl-ash-resource.html#attributes-attribute-allow_nil?","title":"Ash.Resource.attributes.attribute.allow_nil?","type":"DSL"},{"doc":"Whether the attribute is the primary key. Composite primary key is also possible by using `primary_key? true` in more than one attribute. If primary_key? is true, allow_nil? must be false.\n","ref":"dsl-ash-resource.html#attributes-attribute-primary_key?","title":"Ash.Resource.attributes.attribute.primary_key?","type":"DSL"},{"doc":"Whether or not to ensure this attribute is always selected when reading from the database, regardless of applied select statements.\n","ref":"dsl-ash-resource.html#attributes-attribute-always_select?","title":"Ash.Resource.attributes.attribute.always_select?","type":"DSL"},{"doc":"If the field should be mapped to a different name in the data layer. Support varies by data layer.\n","ref":"dsl-ash-resource.html#attributes-attribute-source","title":"Ash.Resource.attributes.attribute.source","type":"DSL"},{"doc":"Whether or not the attribute value contains sensitive information, like PII. See the [Sensitive Data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ash-resource.html#attributes-attribute-sensitive?","title":"Ash.Resource.attributes.attribute.sensitive?","type":"DSL"},{"doc":"An optional description for the attribute.","ref":"dsl-ash-resource.html#attributes-attribute-description","title":"Ash.Resource.attributes.attribute.description","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more, see `Ash.Type`.\n","ref":"dsl-ash-resource.html#attributes-attribute-constraints","title":"Ash.Resource.attributes.attribute.constraints","type":"DSL"},{"doc":"The type of the attribute. See `Ash.Type` for more.","ref":"dsl-ash-resource.html#attributes-attribute-type","title":"Ash.Resource.attributes.attribute.type","type":"DSL"},{"doc":"The name of the attribute.","ref":"dsl-ash-resource.html#attributes-attribute-name","title":"Ash.Resource.attributes.attribute.name","type":"DSL"},{"doc":"Declares an attribute on the resource.\n","ref":"dsl-ash-resource.html#attributes-attribute","title":"Ash.Resource.attributes.attribute","type":"DSL"},{"doc":"A section for declaring attributes on the resource.\n","ref":"dsl-ash-resource.html#attributes","title":"Ash.Resource.attributes","type":"DSL"},{"doc":"Used to define the functions of a code interface for a resource.","ref":"Ash.CodeInterface.html","title":"Ash.CodeInterface","type":"module"},{"doc":"Defines the code interface for a given resource + domain combination in the current module. For example:\n\n```elixir\ndefmodule MyApp.Accounting do\n  require Ash.CodeInterface\n\n  Ash.CodeInterface.define_interface(MyApp.Accounting, MyApp.Accounting.Transaction)\n  Ash.CodeInterface.define_interface(MyApp.Accounting, MyApp.Accounting.Account)\n  Ash.CodeInterface.define_interface(MyApp.Accounting, MyApp.Accounting.Invoice)\nend\n```","ref":"Ash.CodeInterface.html#define_interface/3","title":"Ash.CodeInterface.define_interface/3","type":"macro"},{"doc":"","ref":"Ash.CodeInterface.html#describe_action/3","title":"Ash.CodeInterface.describe_action/3","type":"function"},{"doc":"","ref":"Ash.CodeInterface.html#describe_calculation/3","title":"Ash.CodeInterface.describe_calculation/3","type":"function"},{"doc":"","ref":"Ash.CodeInterface.html#trim_double_newlines/1","title":"Ash.CodeInterface.trim_double_newlines/1","type":"function"},{"doc":"","ref":"Ash.CodeInterface.html#unwrap_calc_interface_args/4","title":"Ash.CodeInterface.unwrap_calc_interface_args/4","type":"function"},{"doc":"","ref":"Ash.CodeInterface.html#without_optional/1","title":"Ash.CodeInterface.without_optional/1","type":"function"},{"doc":"The behaviour for backing resource actions with persistence layers.","ref":"Ash.DataLayer.html","title":"Ash.DataLayer","type":"behaviour"},{"doc":"","ref":"Ash.DataLayer.html#c:add_aggregate/3","title":"Ash.DataLayer.add_aggregate/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#add_aggregates/3","title":"Ash.DataLayer.add_aggregates/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:add_aggregates/3","title":"Ash.DataLayer.add_aggregates/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#c:add_calculation/4","title":"Ash.DataLayer.add_calculation/4","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#add_calculations/3","title":"Ash.DataLayer.add_calculations/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:add_calculations/3","title":"Ash.DataLayer.add_calculations/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#bulk_create/3","title":"Ash.DataLayer.bulk_create/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:bulk_create/3","title":"Ash.DataLayer.bulk_create/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#calculate/3","title":"Ash.DataLayer.calculate/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:calculate/3","title":"Ash.DataLayer.calculate/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#can?/2","title":"Ash.DataLayer.can?/2","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:can?/2","title":"Ash.DataLayer.can?/2","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#create/2","title":"Ash.DataLayer.create/2","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:create/2","title":"Ash.DataLayer.create/2","type":"callback"},{"doc":"The data layer of the resource, or nil if it does not have one","ref":"Ash.DataLayer.html#data_layer/1","title":"Ash.DataLayer.data_layer/1","type":"function"},{"doc":"Whether or not the data layer supports a specific feature","ref":"Ash.DataLayer.html#data_layer_can?/2","title":"Ash.DataLayer.data_layer_can?/2","type":"function"},{"doc":"Custom functions supported by the data layer of the resource","ref":"Ash.DataLayer.html#data_layer_functions/1","title":"Ash.DataLayer.data_layer_functions/1","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#destroy/2","title":"Ash.DataLayer.destroy/2","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:destroy/2","title":"Ash.DataLayer.destroy/2","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#destroy_query/3","title":"Ash.DataLayer.destroy_query/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:destroy_query/4","title":"Ash.DataLayer.destroy_query/4","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#distinct/3","title":"Ash.DataLayer.distinct/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:distinct/3","title":"Ash.DataLayer.distinct/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#distinct_sort/3","title":"Ash.DataLayer.distinct_sort/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:distinct_sort/3","title":"Ash.DataLayer.distinct_sort/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#filter/3","title":"Ash.DataLayer.filter/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:filter/3","title":"Ash.DataLayer.filter/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#functions/1","title":"Ash.DataLayer.functions/1","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:functions/1","title":"Ash.DataLayer.functions/1","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#in_transaction?/1","title":"Ash.DataLayer.in_transaction?/1","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:in_transaction?/1","title":"Ash.DataLayer.in_transaction?/1","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#limit/3","title":"Ash.DataLayer.limit/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:limit/3","title":"Ash.DataLayer.limit/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#lock/3","title":"Ash.DataLayer.lock/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:lock/3","title":"Ash.DataLayer.lock/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#offset/3","title":"Ash.DataLayer.offset/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:offset/3","title":"Ash.DataLayer.offset/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#c:prefer_lateral_join_for_many_to_many?/0","title":"Ash.DataLayer.prefer_lateral_join_for_many_to_many?/0","type":"callback"},{"doc":"Whether or not lateral joins should be used for many to many relationships by default","ref":"Ash.DataLayer.html#prefer_lateral_join_for_many_to_many?/1","title":"Ash.DataLayer.prefer_lateral_join_for_many_to_many?/1","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#resource_to_query/2","title":"Ash.DataLayer.resource_to_query/2","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:resource_to_query/2","title":"Ash.DataLayer.resource_to_query/2","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#return_query/2","title":"Ash.DataLayer.return_query/2","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:return_query/2","title":"Ash.DataLayer.return_query/2","type":"callback"},{"doc":"Rolls back the current transaction","ref":"Ash.DataLayer.html#rollback/2","title":"Ash.DataLayer.rollback/2","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:rollback/2","title":"Ash.DataLayer.rollback/2","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#run_aggregate_query/3","title":"Ash.DataLayer.run_aggregate_query/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:run_aggregate_query/3","title":"Ash.DataLayer.run_aggregate_query/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#run_aggregate_query_with_lateral_join/5","title":"Ash.DataLayer.run_aggregate_query_with_lateral_join/5","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:run_aggregate_query_with_lateral_join/5","title":"Ash.DataLayer.run_aggregate_query_with_lateral_join/5","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#run_query/2","title":"Ash.DataLayer.run_query/2","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:run_query/2","title":"Ash.DataLayer.run_query/2","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#run_query_with_lateral_join/4","title":"Ash.DataLayer.run_query_with_lateral_join/4","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:run_query_with_lateral_join/4","title":"Ash.DataLayer.run_query_with_lateral_join/4","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#select/3","title":"Ash.DataLayer.select/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:select/3","title":"Ash.DataLayer.select/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#set_context/3","title":"Ash.DataLayer.set_context/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:set_context/3","title":"Ash.DataLayer.set_context/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#set_tenant/3","title":"Ash.DataLayer.set_tenant/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:set_tenant/3","title":"Ash.DataLayer.set_tenant/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#sort/3","title":"Ash.DataLayer.sort/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:sort/3","title":"Ash.DataLayer.sort/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#source/1","title":"Ash.DataLayer.source/1","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:source/1","title":"Ash.DataLayer.source/1","type":"callback"},{"doc":"Wraps the execution of the function in a transaction with the resource's data_layer","ref":"Ash.DataLayer.html#transaction/4","title":"Ash.DataLayer.transaction/4","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:transaction/4","title":"Ash.DataLayer.transaction/4","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#transform_query/1","title":"Ash.DataLayer.transform_query/1","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:transform_query/1","title":"Ash.DataLayer.transform_query/1","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#update/2","title":"Ash.DataLayer.update/2","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:update/2","title":"Ash.DataLayer.update/2","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#update_query/3","title":"Ash.DataLayer.update_query/3","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:update_query/4","title":"Ash.DataLayer.update_query/4","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#c:upsert/3","title":"Ash.DataLayer.upsert/3","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#upsert/4","title":"Ash.DataLayer.upsert/4","type":"function"},{"doc":"","ref":"Ash.DataLayer.html#c:upsert/4","title":"Ash.DataLayer.upsert/4","type":"callback"},{"doc":"","ref":"Ash.DataLayer.html#t:bulk_create_options/0","title":"Ash.DataLayer.bulk_create_options/0","type":"type"},{"doc":"","ref":"Ash.DataLayer.html#t:bulk_update_options/0","title":"Ash.DataLayer.bulk_update_options/0","type":"type"},{"doc":"","ref":"Ash.DataLayer.html#t:data_layer_query/0","title":"Ash.DataLayer.data_layer_query/0","type":"type"},{"doc":"","ref":"Ash.DataLayer.html#t:feature/0","title":"Ash.DataLayer.feature/0","type":"type"},{"doc":"","ref":"Ash.DataLayer.html#t:lateral_join_link/0","title":"Ash.DataLayer.lateral_join_link/0","type":"type"},{"doc":"","ref":"Ash.DataLayer.html#t:lock_type/0","title":"Ash.DataLayer.lock_type/0","type":"type"},{"doc":"","ref":"Ash.DataLayer.html#t:t/0","title":"Ash.DataLayer.t/0","type":"type"},{"doc":"","ref":"Ash.DataLayer.html#t:transaction_reason/0","title":"Ash.DataLayer.transaction_reason/0","type":"type"},{"doc":"A notifier is an extension that receives various events","ref":"Ash.Notifier.html","title":"Ash.Notifier","type":"behaviour"},{"doc":"Sends any notifications that can be sent, and returns the rest.\n\nA notification can only be sent if you are not currently in a transaction\nfor the resource in question.","ref":"Ash.Notifier.html#notify/1","title":"Ash.Notifier.notify/1","type":"function"},{"doc":"","ref":"Ash.Notifier.html#c:notify/1","title":"Ash.Notifier.notify/1","type":"callback"},{"doc":"","ref":"Ash.Notifier.html#c:requires_original_data?/2","title":"Ash.Notifier.requires_original_data?/2","type":"callback"},{"doc":"Represents a notification that will be handled by a resource's notifiers\n\nSet the `for` key to a notifier or a list of notifiers to route the notification\nto them. This allows you to produce notifications inside of a `change` module\nand target specific notifiers with them.\n\n`metadata` is freeform data to be set however you want. `resource`, `action`, `data`,\n`changeset` and `actor` are all set by default based on the details of the action, so\nthey can be omitted.\n\nWhen creating a notification, a resource is required to ensure that the notification isn't\nsent until the current transaction for that resource is closed. If you don't need this\nbehavior you can explicitly supply `nil` for the resource. If you supply `nil` for the resource,\nhowever, you must manually set the `for` option, e.g: `for: Notifier` or `for: [Notifier1, Notifier2]`","ref":"Ash.Notifier.Notification.html","title":"Ash.Notifier.Notification","type":"module"},{"doc":"","ref":"Ash.Notifier.Notification.html#new/2","title":"Ash.Notifier.Notification.new/2","type":"function"},{"doc":"","ref":"Ash.Notifier.Notification.html#t:t/0","title":"Ash.Notifier.Notification.t/0","type":"type"},{"doc":"Helpers for building attributes","ref":"Ash.Resource.Attribute.Helpers.html","title":"Ash.Resource.Attribute.Helpers","type":"module"},{"doc":"","ref":"Ash.Resource.Attribute.Helpers.html#timestamps/1","title":"Ash.Resource.Attribute.Helpers.timestamps/1","type":"macro"},{"doc":"The behaviour for defining a module calculation, and the struct for storing a defined calculation.","ref":"Ash.Resource.Calculation.html","title":"Ash.Resource.Calculation","type":"behaviour"},{"doc":"","ref":"Ash.Resource.Calculation.html#c:calculate/3","title":"Ash.Resource.Calculation.calculate/3","type":"callback"},{"doc":"","ref":"Ash.Resource.Calculation.html#c:describe/1","title":"Ash.Resource.Calculation.describe/1","type":"callback"},{"doc":"","ref":"Ash.Resource.Calculation.html#expr_calc/1","title":"Ash.Resource.Calculation.expr_calc/1","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.html#c:expression/2","title":"Ash.Resource.Calculation.expression/2","type":"callback"},{"doc":"","ref":"Ash.Resource.Calculation.html#c:has_expression?/0","title":"Ash.Resource.Calculation.has_expression?/0","type":"callback"},{"doc":"","ref":"Ash.Resource.Calculation.html#c:init/1","title":"Ash.Resource.Calculation.init/1","type":"callback"},{"doc":"","ref":"Ash.Resource.Calculation.html#c:load/3","title":"Ash.Resource.Calculation.load/3","type":"callback"},{"doc":"","ref":"Ash.Resource.Calculation.html#schema/0","title":"Ash.Resource.Calculation.schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.html#c:strict_loads?/0","title":"Ash.Resource.Calculation.strict_loads?/0","type":"callback"},{"doc":"","ref":"Ash.Resource.Calculation.html#t:opts/0","title":"Ash.Resource.Calculation.opts/0","type":"type"},{"doc":"","ref":"Ash.Resource.Calculation.html#t:ref/0","title":"Ash.Resource.Calculation.ref/0","type":"type"},{"doc":"","ref":"Ash.Resource.Calculation.html#t:t/0","title":"Ash.Resource.Calculation.t/0","type":"type"},{"doc":"Built in calculations that are automatically imported in the calculations section","ref":"Ash.Resource.Calculation.Builtins.html","title":"Ash.Resource.Calculation.Builtins","type":"module"},{"doc":"An example concatenation calculation, that accepts the delimiter as an argument","ref":"Ash.Resource.Calculation.Builtins.html#concat/2","title":"Ash.Resource.Calculation.Builtins.concat/2","type":"function"},{"doc":"calculate :full_name, :string, concat([:first_name, :last_name], \" \")","ref":"Ash.Resource.Calculation.Builtins.html#concat/2-examples","title":"Examples - Ash.Resource.Calculation.Builtins.concat/2","type":"function"},{"doc":"A module to implement manual create actions.","ref":"Ash.Resource.ManualCreate.html","title":"Ash.Resource.ManualCreate","type":"behaviour"},{"doc":"","ref":"Ash.Resource.ManualCreate.html#c:bulk_create/3","title":"Ash.Resource.ManualCreate.bulk_create/3","type":"callback"},{"doc":"","ref":"Ash.Resource.ManualCreate.html#c:create/3","title":"Ash.Resource.ManualCreate.create/3","type":"callback"},{"doc":"A module to implement manual destroy actions.\n\nNote that in the returns of these functions you must return the destroyed record or records.","ref":"Ash.Resource.ManualDestroy.html","title":"Ash.Resource.ManualDestroy","type":"behaviour"},{"doc":"","ref":"Ash.Resource.ManualDestroy.html#c:bulk_destroy/3","title":"Ash.Resource.ManualDestroy.bulk_destroy/3","type":"callback"},{"doc":"","ref":"Ash.Resource.ManualDestroy.html#c:destroy/3","title":"Ash.Resource.ManualDestroy.destroy/3","type":"callback"},{"doc":"A module to implement manual read actions.","ref":"Ash.Resource.ManualRead.html","title":"Ash.Resource.ManualRead","type":"behaviour"},{"doc":"","ref":"Ash.Resource.ManualRead.html#c:load_relationships/5","title":"Ash.Resource.ManualRead.load_relationships/5","type":"callback"},{"doc":"","ref":"Ash.Resource.ManualRead.html#c:read/4","title":"Ash.Resource.ManualRead.read/4","type":"callback"},{"doc":"","ref":"Ash.Resource.ManualRead.html#t:context/0","title":"Ash.Resource.ManualRead.context/0","type":"type"},{"doc":"A module to implement manual relationships.","ref":"Ash.Resource.ManualRelationship.html","title":"Ash.Resource.ManualRelationship","type":"behaviour"},{"doc":"","ref":"Ash.Resource.ManualRelationship.html#c:load/3","title":"Ash.Resource.ManualRelationship.load/3","type":"callback"},{"doc":"","ref":"Ash.Resource.ManualRelationship.html#c:select/1","title":"Ash.Resource.ManualRelationship.select/1","type":"callback"},{"doc":"A module to implement manual update actions.","ref":"Ash.Resource.ManualUpdate.html","title":"Ash.Resource.ManualUpdate","type":"behaviour"},{"doc":"","ref":"Ash.Resource.ManualUpdate.html#c:bulk_update/3","title":"Ash.Resource.ManualUpdate.bulk_update/3","type":"callback"},{"doc":"","ref":"Ash.Resource.ManualUpdate.html#c:update/3","title":"Ash.Resource.ManualUpdate.update/3","type":"callback"},{"doc":"The primary interface to call actions and interact with resources.","ref":"Ash.html","title":"Ash","type":"module"},{"doc":"Runs an aggregate or aggregates over a resource query\n\nIf you pass an `%Ash.Query.Aggregate{}`, gotten from `Ash.Query.Aggregate.new()`,\nthe query provided as the first argument to this function will not apply. For this\nreason, it is preferred that you pass in the tuple format, i.e\n\nPrefer this:\n`Api.aggregate(query, {:count_of_things, :count})`\n\nOver this:\n`Api.aggregate(query, Ash.Query.Aggregate.new(...))`\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access","ref":"Ash.html#aggregate/3","title":"Ash.aggregate/3","type":"function"},{"doc":"Runs an aggregate or aggregates over a resource query. See `aggregate/3` for more.","ref":"Ash.html#aggregate!/3","title":"Ash.aggregate!/3","type":"function"},{"doc":"Fetches the average of all values of a given field.","ref":"Ash.html#avg/3","title":"Ash.avg/3","type":"function"},{"doc":"Fetches the average of all values of a given field or raises an error.","ref":"Ash.html#avg!/3","title":"Ash.avg!/3","type":"function"},{"doc":"Creates many records.","ref":"Ash.html#bulk_create/4","title":"Ash.bulk_create/4","type":"function"},{"doc":"We assume that the input is a list of changesets all for the same action, or a list of input maps for the\nsame action with the `:resource` and `:action` option provided to illustrate which action it is for.","ref":"Ash.html#bulk_create/4-assumptions","title":"Assumptions - Ash.bulk_create/4","type":"function"},{"doc":"The performance of this operation depends on the data layer in question.\nData layers like AshPostgres will choose reasonable batch sizes in an attempt\nto handle large bulk actions, but that does not mean that you can pass a list of\n500k inputs and expect things to go off without a hitch (although it might).\nIf you need to do large data processing, you should look into projects like\nGenStage and Broadway. With that said, if you want to do things like support CSV upload\nand you place some reasonable limits on the size this is a great tool. You'll need to\ntest it yourself, YMMV.\n\nPassing `return_records?: true` can significantly increase the time it takes to perform the operation,\nand can also make the operation completely unreasonable due to the memory requirement. If you want to\ndo very large bulk creates and display all of the results, the suggestion is to annotate them with a\n\"bulk_create_id\" in the data layer, and then read the records with that `bulk_create_id` so that they can\nbe retrieved later if necessary.","ref":"Ash.html#bulk_create/4-performance-feasibility","title":"Performance/Feasibility - Ash.bulk_create/4","type":"function"},{"doc":"Changes will be applied in the order they are given on the actions as normal. Any change that exposes\nthe `bulk_change` callbacks will be applied on the entire list.","ref":"Ash.html#bulk_create/4-changes-validations","title":"Changes/Validations - Ash.bulk_create/4","type":"function"},{"doc":"The following requirements must be met for `after_action` hooks to function properly. If they are not met,\nand an after_action hook being applied to a changeset in a `change`.\n\n1. `return_records?` must be set to `true`.\n2. The changeset must be setting the primary key as part of its changes, so that we know which result applies to which\n   changeset.\n\nIt is possible to use `after_action` hooks with `bulk_change/3`, but you need to return the hooks along with the changesets.\nThis allows for setting up `after_action` hooks that don't need access to the returned record,\nor `after_action` hooks that can operate on the entire list at once.  See the documentation for that callback for more on\nhow to do accomplish that.","ref":"Ash.html#bulk_create/4-after-action-hooks","title":"After Action Hooks - Ash.bulk_create/4","type":"function"},{"doc":"* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n\n* `:upsert_fields` - The fields to upsert. If not set, the action's `upsert_fields` is used. Unlike singular `create`, `bulk_create` with `upsert?` requires that `upsert_fields` be specified explicitly in one of these two locations.\n\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n\n* `:read_action` (`t:atom/0`) - The action to use when building the read query.\n\n* `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n\n* `:load` (`t:term/0`) - A load statement to apply to records. Ignored if `return_records?` is not true.\n\n* `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n\n* `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set. Valid values are :filter, :error\n\n* `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set. Valid values are :filter, :error\n\n* `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Valid values are :filter, :error The default value is `:filter`.\n\n* `:context` (`t:map/0`) - Context to set on each changeset\n\n* `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n\n* `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n\n* `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n\n* `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n  or `max_page_size` of the action, or 100.\n\n* `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.  \n  Potential elements:  \n  `{:notification, notification}` - if `return_notifications?` is set to `true`\n  `{:ok, record}` - if `return_records?` is set to `true`\n  `{:error, error}` - an error that occurred. May be changeset or an invidual error. The default value is `false`.\n\n* `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.  \n  Only relevant if `return_stream?` is set to `true` and all other\n  `return_*?` options are set to `false`. The default value is `false`.\n\n* `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n  will be skipped. The default value is `false`.\n\n* `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n  the results from each batch. This may be intensive for large bulk actions.  \n  Notifications will be automatically sent unless `return_notifications?` is set to `true`. The default value is `false`.\n\n* `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.  \n  Keep in mind:  \n  `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n  *inside* the transaction if you choose `transaction: :all`.\n   Valid values are :all, :batch, false The default value is `:batch`.\n\n* `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.","ref":"Ash.html#bulk_create/4-options","title":"Options - Ash.bulk_create/4","type":"function"},{"doc":"Creates many records, raising any errors that are returned. See `bulk_create/4` for more.","ref":"Ash.html#bulk_create!/4","title":"Ash.bulk_create!/4","type":"function"},{"doc":"Destroys all items in the provided enumerable or query with the provided input.\n\nThe input is a map of valid inputs for the action. The input will be applied to all records in the enumerable/query.\n\nIf the data layer supports destroying from a query, and the destroy action can be done fully atomically,\nit will be updated in a single pass using the data layer.\n\nOtherwise, this will stream each record and update it.","ref":"Ash.html#bulk_destroy/4","title":"Ash.bulk_destroy/4","type":"function"},{"doc":"* `:resource` (`Ash.Resource`) - The resource being destroyed. This must be provided if the input given is a stream, so we know ahead of time what the resource being updated is.\n\n* `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n\n* `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n\n* `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. Valid values are :atomic, :atomic_batches, :stream The default value is `:atomic`.\n\n* `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n\n* `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. Valid values are :keyset, :offset, :full_read The default value is `:keyset`.\n\n* `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more. Valid values are :keyset, :offset, :full_read\n\n* `:page` - Pagination options, see [the pagination docs for more](read-actions.md#pagination).\n\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n\n* `:read_action` (`t:atom/0`) - The action to use when building the read query.\n\n* `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n\n* `:load` (`t:term/0`) - A load statement to apply to records. Ignored if `return_records?` is not true.\n\n* `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n\n* `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set. Valid values are :filter, :error\n\n* `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set. Valid values are :filter, :error\n\n* `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Valid values are :filter, :error The default value is `:filter`.\n\n* `:context` (`t:map/0`) - Context to set on each changeset\n\n* `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n\n* `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n\n* `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n\n* `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n  or `max_page_size` of the action, or 100.\n\n* `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.  \n  Potential elements:  \n  `{:notification, notification}` - if `return_notifications?` is set to `true`\n  `{:ok, record}` - if `return_records?` is set to `true`\n  `{:error, error}` - an error that occurred. May be changeset or an invidual error. The default value is `false`.\n\n* `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.  \n  Only relevant if `return_stream?` is set to `true` and all other\n  `return_*?` options are set to `false`. The default value is `false`.\n\n* `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n  will be skipped. The default value is `false`.\n\n* `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n  the results from each batch. This may be intensive for large bulk actions.  \n  Notifications will be automatically sent unless `return_notifications?` is set to `true`. The default value is `false`.\n\n* `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.  \n  Keep in mind:  \n  `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n  *inside* the transaction if you choose `transaction: :all`.\n   Valid values are :all, :batch, false The default value is `:batch`.\n\n* `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.","ref":"Ash.html#bulk_destroy/4-options","title":"Options - Ash.bulk_destroy/4","type":"function"},{"doc":"Destroys all items in the provided enumerable or query with the provided input.\n\nSee `bulk_destroy/4` for more.","ref":"Ash.html#bulk_destroy!/4","title":"Ash.bulk_destroy!/4","type":"function"},{"doc":"Updates all items in the provided enumerable or query with the provided input.\n\nThe input is a map of valid inputs for the action. The input will be applied to all records in the enumerable/query.\n\nIf the data layer supports updating from a query, and the update action can be done fully atomically,\nit will be updated in a single pass using the data layer.\n\nOtherwise, this will stream each record and update it.","ref":"Ash.html#bulk_update/4","title":"Ash.bulk_update/4","type":"function"},{"doc":"* `:resource` (`Ash.Resource`) - The resource being updated. This must be provided if the input given is a stream, so we know ahead of time what the resource being updated is.\n\n* `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n\n* `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n\n* `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n\n* `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n\n* `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. Valid values are :atomic, :atomic_batches, :stream The default value is `[:atomic]`.\n\n* `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. Valid values are :keyset, :offset, :full_read The default value is `:keyset`.\n\n* `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more. Valid values are :keyset, :offset, :full_read\n\n* `:page` - Pagination options, see [the pagination docs for more](read-actions.md#pagination).\n\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n\n* `:read_action` (`t:atom/0`) - The action to use when building the read query.\n\n* `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n\n* `:load` (`t:term/0`) - A load statement to apply to records. Ignored if `return_records?` is not true.\n\n* `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n\n* `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set. Valid values are :filter, :error\n\n* `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set. Valid values are :filter, :error\n\n* `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Valid values are :filter, :error The default value is `:filter`.\n\n* `:context` (`t:map/0`) - Context to set on each changeset\n\n* `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n\n* `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n\n* `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n\n* `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n  or `max_page_size` of the action, or 100.\n\n* `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.  \n  Potential elements:  \n  `{:notification, notification}` - if `return_notifications?` is set to `true`\n  `{:ok, record}` - if `return_records?` is set to `true`\n  `{:error, error}` - an error that occurred. May be changeset or an invidual error. The default value is `false`.\n\n* `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.  \n  Only relevant if `return_stream?` is set to `true` and all other\n  `return_*?` options are set to `false`. The default value is `false`.\n\n* `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n  will be skipped. The default value is `false`.\n\n* `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n  the results from each batch. This may be intensive for large bulk actions.  \n  Notifications will be automatically sent unless `return_notifications?` is set to `true`. The default value is `false`.\n\n* `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.  \n  Keep in mind:  \n  `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n  *inside* the transaction if you choose `transaction: :all`.\n   Valid values are :all, :batch, false The default value is `:batch`.\n\n* `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.","ref":"Ash.html#bulk_update/4-options","title":"Options - Ash.bulk_update/4","type":"function"},{"doc":"Updates all items in the provided enumerable or query with the provided input.\n\nSee `bulk_update/4` for more.","ref":"Ash.html#bulk_update!/4","title":"Ash.bulk_update!/4","type":"function"},{"doc":"Evaluates the calculation on the resource.\n\nIf a record is provided, its field values will be used to evaluate the calculation.\n\n* `:args` (`t:map/0`) - Values for arguments referenced by the calculation. The default value is `%{}`.\n\n* `:refs` (`t:map/0`) - Values for references used by the calculation. The default value is `%{}`.\n\n* `:actor` (`t:term/0`) - The actor for handling `^actor/1` templates, supplied to calculation context.\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant, supplied to calculation context.\n\n* `:authorize?` (`t:boolean/0`) - Whether or not the request is being authorized, provided to calculation context. The default value is `true`.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer, provided to the calculation context.\n\n* `:record` (`t:term/0`) - A record to use as the base of the calculation\n\n* `:domain` (`Ash.Domain`) - The domain to use for the action","ref":"Ash.html#calculate/3","title":"Ash.calculate/3","type":"function"},{"doc":"Evaluates the calculation on the resource or raises an error. See `calculate/3` for more.","ref":"Ash.html#calculate!/3","title":"Ash.calculate!/3","type":"function"},{"doc":"","ref":"Ash.html#calculate_opts/0","title":"Ash.calculate_opts/0","type":"function"},{"doc":"Returns whether or not the user can perform the action, or `:maybe`, returning any errors.\n\nIn cases with \"runtime\" checks (checks after the action), we may not be able to determine\nan answer, and so the value `:maybe` will be returned from `can/2`. The `can?` function assumes that\n`:maybe` means `true`. Keep in mind, this is just for doing things like \"can they do this\" in a UI,\nso assuming `:maybe` is `true` is fine. The actual action invocation will be properly checked regardless.\nIf you have runtime checks, you may need to use `can` instead of `can?`, or configure what `:maybe` means.","ref":"Ash.html#can/3","title":"Ash.can/3","type":"function"},{"doc":"You can pass many different inputs as the subject to `can/3`.\n\n```elixir\n# Can this user run this query.\nAsh.Query.t()\n\n# Can this user run this changeset.\nAsh.Changeset.t()\n\n# Can this user run this action.\nAsh.ActionInput.t()\n\n# Can this user run this action.\n{Ash.Resource.t(), :action}\n\n# Can this user run this action.\n{Ash.Resource.t(), %Action{}}\n\n# Can this user run this action with this input.\n{Ash.Resource.t(), :atom, %{...input}}\n\n# Can this user run this action with this input.\n{Ash.Resource.t(), %Action{}, %{...input}}\n```","ref":"Ash.html#can/3-accepted-inputs","title":"Accepted inputs - Ash.can/3","type":"function"},{"doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n\n* `:data` - The record or records specifically attempting to be acted upon.\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"Ash.html#can/3-options","title":"Options - Ash.can/3","type":"function"},{"doc":"Returns whether or not the user can perform the action, or raises on errors.\n\nCalls `can/3` with a `maybe_is: true`. See `can/3` for more info.","ref":"Ash.html#can?/3","title":"Ash.can?/3","type":"function"},{"doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n\n* `:data` - The record or records specifically attempting to be acted upon.\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"Ash.html#can?/3-options","title":"Options - Ash.can?/3","type":"function"},{"doc":"","ref":"Ash.html#context_to_opts/2","title":"Ash.context_to_opts/2","type":"function"},{"doc":"Fetches the count of results that would be returned from a given query.","ref":"Ash.html#count/2","title":"Ash.count/2","type":"function"},{"doc":"Fetches the count of results that would be returned from a given query, or raises an error.","ref":"Ash.html#count!/2","title":"Ash.count!/2","type":"function"},{"doc":"Create a record.\n\n* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n\n* `:upsert_fields` - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.\n\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n\n* `:load` (`t:term/0`) - A load statement to add onto the changeset","ref":"Ash.html#create/3","title":"Ash.create/3","type":"function"},{"doc":"Create a record or raises an error. See `create/2` for more information.","ref":"Ash.html#create!/3","title":"Ash.create!/3","type":"function"},{"doc":"Destroy a record.\n\n* `:return_destroyed?` (`t:boolean/0`) - If true, the destroyed record is included in the return result, e.g `{:ok, destroyed}` or `{:ok, destroyed, notifications}` The default value is `false`.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n\n* `:load` (`t:term/0`) - A load statement to add onto the changeset","ref":"Ash.html#destroy/2","title":"Ash.destroy/2","type":"function"},{"doc":"Destroy a record. See `destroy/2` for more information.","ref":"Ash.html#destroy!/2","title":"Ash.destroy!/2","type":"function"},{"doc":"Returns whether or not the query would return any results.","ref":"Ash.html#exists/2","title":"Ash.exists/2","type":"function"},{"doc":"Returns whether or not the query would return any results, or raises an error.","ref":"Ash.html#exists?/2","title":"Ash.exists?/2","type":"function"},{"doc":"Fetches the first value for a given field, or raises an error.","ref":"Ash.html#first/3","title":"Ash.first/3","type":"function"},{"doc":"Fetches the first value for a given field.","ref":"Ash.html#first!/3","title":"Ash.first!/3","type":"function"},{"doc":"Get a record by an identifier.\n\nFor a resource with a composite primary key, pass a keyword list or map, e.g\n`Ash.get(MyResource, %{first_key: 1, second_key: 2})`\n\nAdditionally, a keyword list or map of keys matching an identity can be provided.\n\n* `:error?` (`t:boolean/0`) - Whether or not an error should be returned or raised when the record is not found. If set to false, `nil` will be returned. The default value is `true`.\n\n* `:load` (`t:term/0`) - Fields or relationships to load in the query. See `Ash.Query.load/2`\n\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access","ref":"Ash.html#get/3","title":"Ash.get/3","type":"function"},{"doc":"Get a record by an identifier, or raises an error. See `get/3` for more.","ref":"Ash.html#get!/3","title":"Ash.get!/3","type":"function"},{"doc":"Fetches a list of all values of a given field.","ref":"Ash.html#list/3","title":"Ash.list/3","type":"function"},{"doc":"Fetches a list of all values of a given field or raises an error.","ref":"Ash.html#list!/3","title":"Ash.list!/3","type":"function"},{"doc":"Load fields or relationships on already fetched records.\n\nAccepts a list of non-loaded fields and loads them on the provided records or a query, in\nwhich case the loaded fields of the query are used. Relationship loads can be nested, for\nexample: `Ash.load(record, [posts: [:comments]])`.\n\n* `:lazy?` (`t:boolean/0`) - If set to true, values will only be loaded if the related value isn't currently loaded. The default value is `false`.\n\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access","ref":"Ash.html#load/3","title":"Ash.load/3","type":"function"},{"doc":"Load fields or relationships on already fetched records. See `load/3` for more information.","ref":"Ash.html#load!/3","title":"Ash.load!/3","type":"function"},{"doc":"Fetches the greatest of all values of a given field.","ref":"Ash.html#max/3","title":"Ash.max/3","type":"function"},{"doc":"Fetches the greatest of all values of a given field or raises an error.","ref":"Ash.html#max!/3","title":"Ash.max!/3","type":"function"},{"doc":"Fetches the least of all values of a given field.","ref":"Ash.html#min/3","title":"Ash.min/3","type":"function"},{"doc":"Fetches the least of all values of a given field or raises an error.","ref":"Ash.html#min!/3","title":"Ash.min!/3","type":"function"},{"doc":"Fetch a page relative to the provided page.","ref":"Ash.html#page/2","title":"Ash.page/2","type":"function"},{"doc":"Fetch a page relative to the provided page or raises an error","ref":"Ash.html#page!/2","title":"Ash.page!/2","type":"function"},{"doc":"Runs an `Ash.Query`.\n\nFor more information on building a query, see `Ash.Query`.\n\n* `:page` - Pagination options, see [the pagination docs for more](read-actions.md#pagination).\n\n* `:load` (`t:term/0`) - A load statement to add onto the query\n\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authroization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access","ref":"Ash.html#read/2","title":"Ash.read/2","type":"function"},{"doc":"#### Limit/offset pagination\n* `:offset` (`t:non_neg_integer/0`) - The number of records to skip from the beginning of the query\n\n* `:limit` (`t:pos_integer/0`) - The number of records to include in the page\n\n* `:filter` (`t:term/0`) - A filter to apply for pagination purposes, that should not be considered in the full count.  \n  This is used by the liveview paginator to only fetch the records that were *already* on the\n  page when refreshing data, to avoid pages jittering.\n\n* `:count` (`t:boolean/0`) - Whether or not to return the page with a full count of all records\n\n\n\n#### Keyset pagination\n* `:before` (`t:String.t/0`) - Get records that appear before the provided keyset (mutually exclusive with `after`)\n\n* `:after` (`t:String.t/0`) - Get records that appear after the provided keyset (mutually exclusive with `before`)\n\n* `:limit` (`t:pos_integer/0`) - How many records to include in the page\n\n* `:filter` (`t:term/0`) - See the `filter` option for offset pagination, this behaves the same.\n\n* `:count` (`t:boolean/0`) - Whether or not to return the page with a full count of all records","ref":"Ash.html#read/2-pagination","title":"Pagination - Ash.read/2","type":"function"},{"doc":"Run an `Ash.Query`. See `read/2` for more.","ref":"Ash.html#read!/2","title":"Ash.read!/2","type":"function"},{"doc":"Runs a query on a resource, returning a first result, nil, or an error.\n\nQuery is automatically limited to only return one result, unlike `read_one/3`","ref":"Ash.html#read_first/2","title":"Ash.read_first/2","type":"function"},{"doc":"* `:not_found_error?` (`t:boolean/0`) - Whether or not to return an `Ash.Error.Query.NotFound` if no record is found. The default value is `false`.\n\n* `:page` - Pagination options, see [the pagination docs for more](read-actions.md#pagination).\n\n* `:load` (`t:term/0`) - A load statement to add onto the query\n\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authroization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access","ref":"Ash.html#read_first/2-options","title":"Options - Ash.read_first/2","type":"function"},{"doc":"Runs an ash query, returning the first result or raise an error. See `read_first/2` for more.","ref":"Ash.html#read_first!/2","title":"Ash.read_first!/2","type":"function"},{"doc":"Runs a query on a resource, returning a single result, nil, or an error.\n\nIf more than one result would be returned, an error is returned instead.","ref":"Ash.html#read_one/2","title":"Ash.read_one/2","type":"function"},{"doc":"* `:not_found_error?` (`t:boolean/0`) - Whether or not to return an `Ash.Error.Query.NotFound` if no record is found. The default value is `false`.\n\n* `:page` - Pagination options, see [the pagination docs for more](read-actions.md#pagination).\n\n* `:load` (`t:term/0`) - A load statement to add onto the query\n\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authroization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access","ref":"Ash.html#read_one/2-options","title":"Options - Ash.read_one/2","type":"function"},{"doc":"Runs an ash query, returning a single result or raise an error. See `read_one/2` for more.","ref":"Ash.html#read_one!/2","title":"Ash.read_one!/2","type":"function"},{"doc":"Refetches a record by primary key. See `reload/2` for more.","ref":"Ash.html#reload/2","title":"Ash.reload/2","type":"function"},{"doc":"Refetches a record by primary key or raises an error. See `reload/2` for more.","ref":"Ash.html#reload!/2","title":"Ash.reload!/2","type":"function"},{"doc":"Runs a generic action.\n\nOptions:\n\n* `:actor` (`t:term/0`) - The actor for handling `^actor/1` templates, supplied to calculation context.\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant, supplied to calculation context.\n\n* `:authorize?` (`t:boolean/0`) - Whether or not the request should be authorized.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer, provided to the calculation context.\n\n* `:domain` (`Ash.Domain`) - The domain to use for the action\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.","ref":"Ash.html#run_action/2","title":"Ash.run_action/2","type":"function"},{"doc":"Runs a generic action or raises an error. See `run_action/2` for more","ref":"Ash.html#run_action!/2","title":"Ash.run_action!/2","type":"function"},{"doc":"Streams the results of a query.","ref":"Ash.html#stream!/2","title":"Ash.stream!/2","type":"function"},{"doc":"There are three strategies supported, and the best one available is always chosen. They are,\nin order from best to worst:\n\n- `:keyset`\n- `:offset`\n- `:full_read`\n\nBy default, only `:keyset` is supported. If you want to allow worse strategies to be used, pass\nthe worst one you wish to allow as the `allow_stream_with` option, i.e `allow_stream_with: :full_read`.\nIf you wish to specify a specific strategy to use, pass `stream_with: :strategy_name`.","ref":"Ash.html#stream!/2-strategies","title":"Strategies - Ash.stream!/2","type":"function"},{"doc":"This utilizes keyset pagination to accomplish this stream. The action must support keyset pagination.\nThis is the most efficient way to stream a query, because it works by using filters which can benefit\nfrom indexes in the data layer.","ref":"Ash.html#stream!/2-keyset","title":"Keyset - Ash.stream!/2","type":"function"},{"doc":"This utilizes offset/limit to accomplish this stream. If the action supports offset pagination, that will\nbe used. Otherwise, if the data layer supports limit/offset, then explicit limits/offsets will be used.\nThis is a much less efficient way of streaming a resource than `keyset`. To use limit/offset to reliably\nstream, a sort must always be applied, and limit/offset in the data layer will generally require sorting\nthe entire table to figure out what is in each batch.","ref":"Ash.html#stream!/2-offset","title":"Offset - Ash.stream!/2","type":"function"},{"doc":"This reads the entire table into memory with no limit. This is, generally speaking, the least efficient.","ref":"Ash.html#stream!/2-full-read","title":"Full Read - Ash.stream!/2","type":"function"},{"doc":"* `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n\n* `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. Valid values are :keyset, :offset, :full_read The default value is `:keyset`.\n\n* `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more. Valid values are :keyset, :offset, :full_read\n\n* `:page` - Pagination options, see [the pagination docs for more](read-actions.md#pagination).\n\n* `:load` (`t:term/0`) - A load statement to add onto the query\n\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authroization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access","ref":"Ash.html#stream!/2-options","title":"Options - Ash.stream!/2","type":"function"},{"doc":"Fetches the sum of a given field.","ref":"Ash.html#sum/3","title":"Ash.sum/3","type":"function"},{"doc":"Fetches the sum of a given field or raises an error.","ref":"Ash.html#sum!/3","title":"Ash.sum!/3","type":"function"},{"doc":"Update a record.\n\n* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n\n* `:domain` (`Ash.Domain`) - The domain to use.\n\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n\n* `:load` (`t:term/0`) - A load statement to add onto the changeset","ref":"Ash.html#update/3","title":"Ash.update/3","type":"function"},{"doc":"Update a record. See `update/2` for more information.","ref":"Ash.html#update!/3","title":"Ash.update!/3","type":"function"},{"doc":"","ref":"Ash.html#t:aggregate/0","title":"Ash.aggregate/0","type":"type"},{"doc":"","ref":"Ash.html#t:load_statement/0","title":"Ash.load_statement/0","type":"type"},{"doc":"","ref":"Ash.html#t:page_request/0","title":"Ash.page_request/0","type":"type"},{"doc":"","ref":"Ash.html#t:record_or_records/0","title":"Ash.record_or_records/0","type":"type"},{"doc":"","ref":"Ash.html#t:record_with_args/0","title":"Ash.record_with_args/0","type":"type"},{"doc":"","ref":"Ash.html#t:resource_with_args/0","title":"Ash.resource_with_args/0","type":"type"},{"doc":"Input for a custom action","ref":"Ash.ActionInput.html","title":"Ash.ActionInput","type":"module"},{"doc":"Adds an error to the input errors list, and marks the input as `valid?: false`","ref":"Ash.ActionInput.html#add_error/3","title":"Ash.ActionInput.add_error/3","type":"function"},{"doc":"Fetches the value of an argument provided to the input or `:error`.","ref":"Ash.ActionInput.html#fetch_argument/2","title":"Ash.ActionInput.fetch_argument/2","type":"function"},{"doc":"Creates a new input for a generic action","ref":"Ash.ActionInput.html#for_action/4","title":"Ash.ActionInput.for_action/4","type":"function"},{"doc":"Gets the value of an argument provided to the input.","ref":"Ash.ActionInput.html#get_argument/2","title":"Ash.ActionInput.get_argument/2","type":"function"},{"doc":"","ref":"Ash.ActionInput.html#new/2","title":"Ash.ActionInput.new/2","type":"function"},{"doc":"Set an argument value","ref":"Ash.ActionInput.html#set_argument/3","title":"Ash.ActionInput.set_argument/3","type":"function"},{"doc":"Deep merges the provided map into the input context that can be used later\n\nDo not use the `private` key in your custom context, as that is reserved for internal use.","ref":"Ash.ActionInput.html#set_context/2","title":"Ash.ActionInput.set_context/2","type":"function"},{"doc":"","ref":"Ash.ActionInput.html#set_tenant/2","title":"Ash.ActionInput.set_tenant/2","type":"function"},{"doc":"","ref":"Ash.ActionInput.html#t:t/0","title":"Ash.ActionInput.t/0","type":"type"},{"doc":"The return value for bulk actions.","ref":"Ash.BulkResult.html","title":"Ash.BulkResult","type":"module"},{"doc":"","ref":"Ash.BulkResult.html#t:t/0","title":"Ash.BulkResult.t/0","type":"type"},{"doc":"Changesets are used to create and update data in Ash.\n\nCreate a changeset with `new/1` or `new/2`, and alter the attributes\nand relationships using the functions provided in this module.  Nothing in this module\nactually incurs changes in a data layer. To commit a changeset, see `Ash.create/2`\nand `Ash.update/2`.\n\n# Changeset lifecycle","ref":"Ash.Changeset.html","title":"Ash.Changeset","type":"module"},{"doc":"The following example illustrates the hook lifecycle of a changeset.\n\n```elixir\ndefmodule AshChangesetLifeCycleExample do\n  def change(changeset, _, _) do\n    changeset\n    # execute code both before and after the transaction\n    |> Ash.Changeset.around_transaction(fn changeset, callback ->\n      callback.(changeset)\n    end)\n    # execute code before the transaction is started. Use for things like external calls\n    |> Ash.Changeset.before_transaction(fn changeset -> changeset end)\n    # execute code in the transaction, before and after the data layer is called\n    |> Ash.Changeset.around_action(fn changeset, callback ->\n      callback.(changeset)\n    end)\n    # execute code in the transaction, before the data layer is called\n    |> Ash.Changeset.before_action(fn changeset -> changeset end)\n    # execute code in the transaction, after the data layer is called, only if the action is successful\n    |> Ash.Changeset.after_action(fn changeset, result -> {:ok, result} end)\n    # execute code after the transaction, both in success and error cases\n    |> Ash.Changeset.after_transaction(fn changeset, success_or_error_result -> success_or_error_result end\n  end\nend\n```","ref":"Ash.Changeset.html#module-action-lifecycle","title":"Action Lifecycle - Ash.Changeset","type":"module"},{"doc":"Returns a list of attributes, aggregates, relationships, and calculations that are being loaded\n\nProvide a list of field types to narrow down the returned results.","ref":"Ash.Changeset.html#accessing/3","title":"Ash.Changeset.accessing/3","type":"function"},{"doc":"Adds an error to the changesets errors list, and marks the change as `valid?: false`.","ref":"Ash.Changeset.html#add_error/3","title":"Ash.Changeset.add_error/3","type":"function"},{"doc":"The given `errors` argument can be a string, a keyword list, a struct, or a list of any of the three.\n\nIf `errors` is a keyword list, or a list of keyword lists, the following keys are supported in the keyword list:\n\n- `field` (atom) - the field that the error is for. This is required, unless `fields` is given.\n- `fields` (list of atoms) - the fields that the error is for. This is required, unless `field` is given.\n- `message` (string) - the error message\n- `value` (any) - (optional) the field value that caused the error","ref":"Ash.Changeset.html#add_error/3-error-data","title":"Error Data - Ash.Changeset.add_error/3","type":"function"},{"doc":"Adds an after_action hook to the changeset.\n\nProvide the option `prepend?: true` to place the hook before all\nother hooks instead of after.","ref":"Ash.Changeset.html#after_action/3","title":"Ash.Changeset.after_action/3","type":"function"},{"doc":"Adds an after_transaction hook to the changeset. Cannot be called within other hooks.\n\n`after_transaction` hooks differ from `after_action` hooks in that they are run\non success *and* failure of the action or some previous hook.\n\nProvide the option `prepend?: true` to place the hook before all\nother hooks instead of after.","ref":"Ash.Changeset.html#after_transaction/3","title":"Ash.Changeset.after_transaction/3","type":"function"},{"doc":"Returns the original data with attribute changes merged, if the changeset is valid.\n\nOptions:\n\n* force? - applies current attributes even if the changeset is not valid","ref":"Ash.Changeset.html#apply_attributes/2","title":"Ash.Changeset.apply_attributes/2","type":"function"},{"doc":"Adds an around_action hook to the changeset.\n\nYour function will get the changeset, and a callback that must be called with a changeset (that may be modified).\nThe callback will return `{:ok, result, instructions}` or `{:error, error}`. You can modify these values, but the\nreturn value must be one of those types. Instructions contains the notifications in its `notifications` key, i.e\n`%{notifications: [%Ash.Resource.Notification{}, ...]}`.\n\nThe around_action calls happen first, and then (after they each resolve their callbacks) the `before_action`\nhooks are called, followed by the action itself occurring at the data layer and then the `after_action` hooks being run.\nThen, the code that appeared *after* the callbacks were called is then run.\n\nFor example:\n```elixir\nchangeset\n|> Ash.Changeset.around_action(fn changeset, callback ->\n  IO.puts(\"first around: before\")\n  result = callback.(changeset)\n  IO.puts(\"first around: after\")\n\n  result\nend)\n|> Ash.Changeset.around_action(fn changeset, callback ->\n  IO.puts(\"second around: before\")\n  result = callback.(changeset)\n  IO.puts(\"second around: after\")\n\n  result\nend)\n|> Ash.Changeset.before_action(fn changeset ->\n  IO.puts(\"first before\")\n  changeset\nend, append?: true)\n|> Ash.Changeset.before_action(fn changeset ->\n  IO.puts(\"second before\")\n  changeset\nend, append?: true)\n|> Ash.Changeset.after_action(fn changeset, result ->\n  IO.puts(\"first after\")\n  {:ok, result}\nend)\n|> Ash.Changeset.after_action(fn changeset, result ->\n  IO.puts(\"second after\")\n  {:ok, result}\nend)\n```\n\nThis would print:\n```\nfirst around: before\nsecond around: before\nfirst before\nsecond before\n             <-- action happens here\nfirst after\nsecond after\nsecond around: after <-- Notice that because of the callbacks, the after of the around hooks is reversed from the before\nfirst around: after\n```\n\nWarning: using this without understanding how it works can cause big problems.\nYou *must* call the callback function that is provided to your hook, and the return value must\ncontain the same structure that was given to you, i.e `{:ok, result_of_action, instructions}`.\n\nYou can almost always get the same effect by using `before_action`, setting some context on the changeset\nand reading it out in an `after_action` hook.","ref":"Ash.Changeset.html#around_action/2","title":"Ash.Changeset.around_action/2","type":"function"},{"doc":"Adds an around_transaction hook to the changeset.\n\nYour function will get the changeset, and a callback that must be called with a changeset (that may be modified).\nThe callback will return `{:ok, result}` or `{:error, error}`. You can modify these values, but the return value\nmust be one of those types.\n\nThe around_transaction calls happen first, and then (after they each resolve their callbacks) the `before_transaction`\nhooks are called, followed by the action hooks and then the `after_transaction` hooks being run.\nThen, the code that appeared *after* the callbacks were called is then run.\n\nFor example:\n\n```elixir\nchangeset\n|> Ash.Changeset.around_transaction(fn changeset, callback ->\n  IO.puts(\"first around: before\")\n  result = callback.(changeset)\n  IO.puts(\"first around: after\")\n\n  result\nend)\n|> Ash.Changeset.around_transaction(fn changeset, callback ->\n  IO.puts(\"second around: before\")\n  result = callback.(changeset)\n  IO.puts(\"second around: after\")\n\n  result\nend)\n|> Ash.Changeset.before_transaction(fn changeset ->\n  IO.puts(\"first before\")\n  changeset\nend, append?: true)\n|> Ash.Changeset.before_transaction(fn changeset ->\n  IO.puts(\"second before\")\n  changeset\nend, append?: true)\n|> Ash.Changeset.after_transaction(fn changeset, result ->\n  IO.puts(\"first after\")\n  result\nend)\n|> Ash.Changeset.after_transaction(fn changeset, result ->\n  IO.puts(\"second after\")\n  result\nend)\n```\n\nThis would print:\n\n```\nfirst around: before\nsecond around: before\nfirst before\nsecond before\n             <-- action hooks happens here\nfirst after\nsecond after\nsecond around: after <-- Notice that because of the callbacks, the after of the around hooks is reversed from the before\nfirst around: after\n```\n\nWarning: using this without understanding how it works can cause big problems.\nYou *must* call the callback function that is provided to your hook, and the return value must\ncontain the same structure that was given to you, i.e `{:ok, result_of_action}`.\n\nYou can almost always get the same effect by using `before_transaction`, setting some context on the changeset\nand reading it out in an `after_transaction` hook.","ref":"Ash.Changeset.html#around_transaction/2","title":"Ash.Changeset.around_transaction/2","type":"function"},{"doc":"Gets a reference to a field, or the current atomic update expression of that field.","ref":"Ash.Changeset.html#atomic_ref/2","title":"Ash.Changeset.atomic_ref/2","type":"function"},{"doc":"Adds multiple atomic changes to the changeset\n\nSee `atomic_update/3` for more information.","ref":"Ash.Changeset.html#atomic_update/2","title":"Ash.Changeset.atomic_update/2","type":"function"},{"doc":"Adds an atomic change to the changeset.\n\nAtomic changes are applied by the data layer, and as such have guarantees that are not\ngiven by changes that are based on looking at the previous value and updating it. Here\nis an example of a change that is not safe to do concurrently:\n\n```elixir\nchange fn changeset, _ ->\n  Ash.Changeset.change_attribute(changeset, :score, changeset.data.score + 1)\nend\n```\n\nIf two processes run this concurrently, they will both read the same value of `score`, and\nset the new score to the same value. This means that one of the increments will be lost.\nIf you were to instead do this using `atomic_update`, you would get the correct result:\n\n```elixir\nAsh.Changeset.atomic_update(changeset, :score, [expr(score + 1)])\n```\n\nThere are drawbacks/things to consider, however. The first is that atomic update results\nare not known until after the action is run. The following functional validation would not\nbe able to enforce the score being less than 10, because the atomic happens after the validation.\n\n```elixir\nvalidate fn changeset, _ ->\n  if Ash.Changeset.get_attribute(changeset, :score) < 10 do\n    :ok\n  else\n    {:error, field: :score, message: \"must be less than 10\"}\n  end\nend\n```\n\nIf you want to use atomic updates, it is suggested to write module-based validations & changes,\nand implement the appropriate atomic callbacks on those modules. All builtin validations and changes\nimplement these callbacks in addition to the standard callbacks. Validations will only be run atomically\nwhen the entire action is being run atomically or if one of the relevant fields is being updated atomically.","ref":"Ash.Changeset.html#atomic_update/3","title":"Ash.Changeset.atomic_update/3","type":"function"},{"doc":"Checks if an attribute is not nil, either in the original data, or that it is not being changed to a `nil` value if it is changing.\n\nThis also accounts for the `accessing_from` context that is set when using `manage_relationship`, so it is aware that a particular value\n*will* be set by `manage_relationship` even if it isn't currently being set.","ref":"Ash.Changeset.html#attribute_present?/2","title":"Ash.Changeset.attribute_present?/2","type":"function"},{"doc":"Adds a before_action hook to the changeset.\n\nProvide the option `prepend?: true` to place the hook before all\nother hooks instead of after.","ref":"Ash.Changeset.html#before_action/3","title":"Ash.Changeset.before_action/3","type":"function"},{"doc":"Adds a before_transaction hook to the changeset.\n\nProvide the option `prepend?: true` to place the hook before all\nother hooks instead of after.","ref":"Ash.Changeset.html#before_transaction/3","title":"Ash.Changeset.before_transaction/3","type":"function"},{"doc":"Adds a change to the changeset, unless the value matches the existing value.","ref":"Ash.Changeset.html#change_attribute/3","title":"Ash.Changeset.change_attribute/3","type":"function"},{"doc":"Calls `change_attribute/3` for each key/value pair provided.","ref":"Ash.Changeset.html#change_attributes/2","title":"Ash.Changeset.change_attributes/2","type":"function"},{"doc":"The same as `change_attribute`, but annotates that the attribute is currently holding a default value.\n\nThis information can be used in changes to see if a value was explicitly set or if it was set by being the default.\nAdditionally, this is used in `upsert` actions to not overwrite existing values with the default.","ref":"Ash.Changeset.html#change_default_attribute/3","title":"Ash.Changeset.change_default_attribute/3","type":"function"},{"doc":"Change an attribute only if is not currently being changed","ref":"Ash.Changeset.html#change_new_attribute/3","title":"Ash.Changeset.change_new_attribute/3","type":"function"},{"doc":"Change an attribute if is not currently being changed, by calling the provided function.\n\nUse this if you want to only perform some expensive calculation for an attribute value\nonly if there isn't already a change for that attribute.","ref":"Ash.Changeset.html#change_new_attribute_lazy/3","title":"Ash.Changeset.change_new_attribute_lazy/3","type":"function"},{"doc":"Returns true if an attribute exists in the changes","ref":"Ash.Changeset.html#changing_attribute?/2","title":"Ash.Changeset.changing_attribute?/2","type":"function"},{"doc":"Returns true if any attributes on the resource are being changed.","ref":"Ash.Changeset.html#changing_attributes?/1","title":"Ash.Changeset.changing_attributes?/1","type":"function"},{"doc":"Returns true if a relationship exists in the changes","ref":"Ash.Changeset.html#changing_relationship?/2","title":"Ash.Changeset.changing_relationship?/2","type":"function"},{"doc":"Clears an attribute or relationship change off of the changeset.","ref":"Ash.Changeset.html#clear_change/2","title":"Ash.Changeset.clear_change/2","type":"function"},{"doc":"Remove an argument from the changeset","ref":"Ash.Changeset.html#delete_argument/2","title":"Ash.Changeset.delete_argument/2","type":"function"},{"doc":"Ensure the the specified attributes are `nil` in the changeset results.","ref":"Ash.Changeset.html#deselect/2","title":"Ash.Changeset.deselect/2","type":"function"},{"doc":"Ensures that the given attributes are selected.\n\nThe first call to `select/2` will *limit* the fields to only the provided fields.\nUse `ensure_selected/2` to say \"select this field (or these fields) without deselecting anything else\".\n\nSee `select/2` for more.","ref":"Ash.Changeset.html#ensure_selected/2","title":"Ash.Changeset.ensure_selected/2","type":"function"},{"doc":"Turns the special case {:replace, fields}, :replace_all and {:replace_all_except, fields} upsert_fields\noptions into a list of fields","ref":"Ash.Changeset.html#expand_upsert_fields/2","title":"Ash.Changeset.expand_upsert_fields/2","type":"function"},{"doc":"Fetches the value of an argument provided to the changeset or `:error`.","ref":"Ash.Changeset.html#fetch_argument/2","title":"Ash.Changeset.fetch_argument/2","type":"function"},{"doc":"Gets the value of an argument provided to the changeset, falling back to `Ash.Changeset.fetch_change/2` if nothing was provided.","ref":"Ash.Changeset.html#fetch_argument_or_change/2","title":"Ash.Changeset.fetch_argument_or_change/2","type":"function"},{"doc":"Gets the new value for an attribute, or `:error` if it is not being changed.","ref":"Ash.Changeset.html#fetch_change/2","title":"Ash.Changeset.fetch_change/2","type":"function"},{"doc":"Adds a filter for a record being updated or destroyed.\n\nUsed by optimistic locking. See `Ash.Resource.Change.Builtins.optimistic_lock/1` for more.","ref":"Ash.Changeset.html#filter/2","title":"Ash.Changeset.filter/2","type":"function"},{"doc":"Constructs a changeset for a given action, and validates it.\n\nCalls `for_create/4`, `for_update/4` or `for_destroy/4` based on the type of action passed in.\n\nSee those functions for more explanation.","ref":"Ash.Changeset.html#for_action/4","title":"Ash.Changeset.for_action/4","type":"function"},{"doc":"Constructs a changeset for a given create action, and validates it.\n\nAnything that is modified prior to `for_create/4` is validated against the rules of the action, while *anything after it is not*.\nThis runs any `change`s contained on your action. To have your logic execute *only* during the action, you can use `after_action/2`\nor `before_action/2`.\n\nMultitenancy is *not* validated until an action is called. This allows you to avoid specifying a tenant until just before calling\nthe domain action.","ref":"Ash.Changeset.html#for_create/4","title":"Ash.Changeset.for_create/4","type":"function"},{"doc":"`params` may be attributes, relationships, or arguments. You can safely pass user/form input directly into this function.\nOnly public attributes and relationships are supported. If you want to change private attributes as well, see the\nCustomization section below. `params` are stored directly as given in the `params` field of the changeset, which is used","ref":"Ash.Changeset.html#for_create/4-params","title":"Params - Ash.Changeset.for_create/4","type":"function"},{"doc":"* `:require?` (`t:boolean/0`) - If set to `false`, values are only required when the action is run (instead of immediately). The default value is `false`.\n\n* `:actor` (`t:term/0`) - set the actor, which can be used in any `Ash.Resource.Change`s configured on the action. (in the `context` argument)\n\n* `:authorize?` (`t:term/0`) - set authorize?, which can be used in any `Ash.Resource.Change`s configured on the action. (in the `context` argument)\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer to use. Will be carried over to the action. For more information see `Ash.Tracer`.\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - set the tenant on the changeset\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input","ref":"Ash.Changeset.html#for_create/4-opts","title":"Opts - Ash.Changeset.for_create/4","type":"function"},{"doc":"A changeset can be provided as the first argument, instead of a resource, to allow\nsetting specific attributes ahead of time.\n\nFor example:\n\n    MyResource\n    |> Ash.Changeset.new()\n    |> Ash.Changeset.change_attribute(:foo, 1)\n    |> Ash.Changeset.for_create(:create, ...opts)\n\nOnce a changeset has been validated by `for_create/4` (or `for_update/4`), it isn't validated again in the action.\nNew changes added are validated individually, though. This allows you to create a changeset according\nto a given action, and then add custom changes if necessary.","ref":"Ash.Changeset.html#for_create/4-customization","title":"Customization - Ash.Changeset.for_create/4","type":"function"},{"doc":"The following steps are run when calling `Ash.Changeset.for_create/4`.\n\n- Cast input params | This is any arguments in addition to any accepted attributes\n- Set argument defaults\n- Require any missing arguments\n- Validate all provided attributes are accepted\n- Require any accepted attributes that are `allow_nil?` false\n- Set any default values for attributes\n- Run action changes & validations\n- Run validations, or add them in `before_action` hooks if using `d:Ash.Resource.Dsl.actions.create.validate|before_action?`. Any global validations are skipped if the action has `skip_global_validations?` set to `true`.","ref":"Ash.Changeset.html#for_create/4-what-does-this-function-do","title":"What does this function do? - Ash.Changeset.for_create/4","type":"function"},{"doc":"Constructs a changeset for a given destroy action, and validates it.","ref":"Ash.Changeset.html#for_destroy/4","title":"Ash.Changeset.for_destroy/4","type":"function"},{"doc":"* `:actor` - set the actor, which can be used in any `Ash.Resource.Change`s configured on the action. (in the `context` argument)\n* `:tenant` - set the tenant on the changeset\n\nAnything that is modified prior to `for_destroy/4` is validated against the rules of the action, while *anything after it is not*.\n\nOnce a changeset has been validated by `for_destroy/4`, it isn't validated again in the action.\nNew changes added are validated individually, though. This allows you to create a changeset according\nto a given action, and then add custom changes if necessary.","ref":"Ash.Changeset.html#for_destroy/4-opts","title":"Opts - Ash.Changeset.for_destroy/4","type":"function"},{"doc":"The following steps are run when calling `Ash.Changeset.for_destroy/4`.\n\n- Cast input params | This is any arguments in addition to any accepted attributes\n- Set argument defaults\n- Require any missing arguments\n- Validate all provided attributes are accepted\n- Require any accepted attributes that are `allow_nil?` false\n- Set any default values for attributes\n- Run action changes & validations\n- Run validations, or add them in `before_action` hooks if using `d:Ash.Resource.Dsl.actions.destroy.validate|before_action?`. Any global validations are skipped if the action has `skip_global_validations?` set to `true`.","ref":"Ash.Changeset.html#for_destroy/4-what-does-this-function-do","title":"What does this function do? - Ash.Changeset.for_destroy/4","type":"function"},{"doc":"Constructs a changeset for a given update action, and validates it.\n\nAnything that is modified prior to `for_update/4` is validated against the rules of the action, while *anything after it is not*.","ref":"Ash.Changeset.html#for_update/4","title":"Ash.Changeset.for_update/4","type":"function"},{"doc":"The following steps are run when calling `Ash.Changeset.for_update/4`.\n\n- Cast input params | This is any arguments in addition to any accepted attributes\n- Set argument defaults\n- Require any missing arguments\n- Validate all provided attributes are accepted\n- Require any accepted attributes that are `allow_nil?` false\n- Set any default values for attributes\n- Run action changes & validations\n- Run validations, or add them in `before_action` hooks if using `d:Ash.Resource.Dsl.actions.update.validate|before_action?`. Any global validations are skipped if the action has `skip_global_validations?` set to `true`.","ref":"Ash.Changeset.html#for_update/4-what-does-this-function-do","title":"What does this function do? - Ash.Changeset.for_update/4","type":"function"},{"doc":"Changes an attribute even if it isn't writable","ref":"Ash.Changeset.html#force_change_attribute/3","title":"Ash.Changeset.force_change_attribute/3","type":"function"},{"doc":"Calls `force_change_attribute/3` for each key/value pair provided.","ref":"Ash.Changeset.html#force_change_attributes/2","title":"Ash.Changeset.force_change_attributes/2","type":"function"},{"doc":"Force change an attribute if it is not currently being changed.\n\nSee `change_new_attribute/3` for more.","ref":"Ash.Changeset.html#force_change_new_attribute/3","title":"Ash.Changeset.force_change_new_attribute/3","type":"function"},{"doc":"Force change an attribute if it is not currently being changed, by calling the provided function.\n\nSee `change_new_attribute_lazy/3` for more.","ref":"Ash.Changeset.html#force_change_new_attribute_lazy/3","title":"Ash.Changeset.force_change_new_attribute_lazy/3","type":"function"},{"doc":"Add an argument to the changeset, which will be provided to the action.\n\nDoes not show a warning when used in before/after action hooks.","ref":"Ash.Changeset.html#force_set_argument/3","title":"Ash.Changeset.force_set_argument/3","type":"function"},{"doc":"Merge a map of arguments to the arguments list.\n\nDoes not show a warning when used in before/after action hooks.","ref":"Ash.Changeset.html#force_set_arguments/2","title":"Ash.Changeset.force_set_arguments/2","type":"function"},{"doc":"","ref":"Ash.Changeset.html#fully_atomic_changeset/4","title":"Ash.Changeset.fully_atomic_changeset/4","type":"function"},{"doc":"Gets the value of an argument provided to the changeset.","ref":"Ash.Changeset.html#get_argument/2","title":"Ash.Changeset.get_argument/2","type":"function"},{"doc":"Gets the value of an argument provided to the changeset, falling back to `Ash.Changeset.get_attribute/2` if nothing was provided.","ref":"Ash.Changeset.html#get_argument_or_attribute/2","title":"Ash.Changeset.get_argument_or_attribute/2","type":"function"},{"doc":"Gets the changing value or the original value of an attribute.","ref":"Ash.Changeset.html#get_attribute/2","title":"Ash.Changeset.get_attribute/2","type":"function"},{"doc":"Gets the original value for an attribute","ref":"Ash.Changeset.html#get_data/2","title":"Ash.Changeset.get_data/2","type":"function"},{"doc":"Sets a custom error handler on the changeset.\n\nThe error handler should be a two argument function or an mfa, in which case the first two arguments will be set\nto the changeset and the error, w/ the supplied arguments following those.\n\nAny errors generated are passed to `handle_errors`, which can return any of the following:\n\n* `:ignore` - the error is discarded, and the changeset is not marked as invalid\n* `changeset` - a new (or the same) changeset. The error is not added (you'll want to add an error yourself), but the changeset *is* marked as invalid.\n* `{changeset, error}` - a new (or the same) error and changeset. The error is added to the changeset, and the changeset is marked as invalid.\n* `anything_else` - is treated as a new, transformed version of the error. The result is added as an error to the changeset, and the changeset is marked as invalid.","ref":"Ash.Changeset.html#handle_errors/2","title":"Ash.Changeset.handle_errors/2","type":"function"},{"doc":"","ref":"Ash.Changeset.html#handle_params/4","title":"Ash.Changeset.handle_params/4","type":"function"},{"doc":"A guard which checks if the Changeset is valid.","ref":"Ash.Changeset.html#is_valid/1","title":"Ash.Changeset.is_valid/1","type":"macro"},{"doc":"Calls the provided load statement on the result of the action at the very end of the action.","ref":"Ash.Changeset.html#load/2","title":"Ash.Changeset.load/2","type":"function"},{"doc":"Returns true if the field/relationship or path to field/relationship is being loaded.\n\nIt accepts an atom or a list of atoms, which is treated for as a \"path\", i.e:\n\n    Resource |> Ash.Changeset.load(friends: [enemies: [:score]]) |> Ash.Changeset.loading?([:friends, :enemies, :score])\n    iex> true\n\n    Resource |> Ash.Changeset.load(friends: [enemies: [:score]]) |> Ash.Changeset.loading?([:friends, :score])\n    iex> false\n\n    Resource |> Ash.Changeset.load(friends: [enemies: [:score]]) |> Ash.Changeset.loading?(:friends)\n    iex> true","ref":"Ash.Changeset.html#loading?/2","title":"Ash.Changeset.loading?/2","type":"function"},{"doc":"Manages the related records by creating, updating, or destroying them as necessary.\n\nKeep in mind that the default values for all `on_*` are `:ignore`, meaning nothing will happen\nunless you provide instructions.\n\nThe input provided to `manage_relationship` should be a map, in the case of to_one relationships, or a list of maps\nin the case of to_many relationships. The following steps are followed for each input provided:\n\n- The input is checked against the currently related records to find any matches. The primary key and unique identities are used to find matches.\n- For any input that had a match in the current relationship, the `:on_match` behavior is triggered\n- For any input that does not have a match:\n  - if there is `on_lookup` behavior:\n    - we try to find the record in the data layer.\n    - if the record is found, the on_lookup behavior is triggered\n    - if the record is not found, the `on_no_match` behavior is triggered\n  - if there is no `on_lookup` behavior:\n    - the `on_no_match` behavior is triggered\n- finally, for any records present in the *current relationship* that had no match *in the input*, the `on_missing` behavior is triggered","ref":"Ash.Changeset.html#manage_relationship/4","title":"Ash.Changeset.manage_relationship/4","type":"function"},{"doc":"* `:type` - If the `type` is specified, the default values of each option is modified to match that `type` of operation.  \n  This allows for specifying certain operations much more succinctly. The defaults that are modified are listed below:  \n  - `:append_and_remove`  \n        [\n          on_lookup: :relate,\n          on_no_match: :error,\n          on_match: :ignore,\n          on_missing: :unrelate\n        ]  \n  - `:append`  \n        [\n          on_lookup: :relate,\n          on_no_match: :error,\n          on_match: :ignore,\n          on_missing: :ignore\n        ]  \n  - `:remove`  \n        [\n          on_no_match: :error,\n          on_match: :unrelate,\n          on_missing: :ignore\n        ]  \n  - `:direct_control`  \n        [\n          on_lookup: :ignore,\n          on_no_match: :create,\n          on_match: :update,\n          on_missing: :destroy\n        ]  \n  - `:create`  \n        [\n          on_no_match: :create,\n          on_match: :ignore\n        ]\n   Valid values are :append_and_remove, :append, :remove, :direct_control, :create\n\n* `:authorize?` (`t:boolean/0`) - Authorize reads and changes to the destination records, if the primary change is being authorized as well. The default value is `true`.\n\n* `:eager_validate_with` (`t:atom/0`) - Validates that any referenced entities exist *before* the action is being performed, using the provided domain for the read. The default value is `false`.\n\n* `:on_no_match` (`t:term/0`) - Instructions for handling records where no matching record existed in the relationship.  \n  * `:ignore` (default) - those inputs are ignored\n  * `:match` - For `has_one` and `belongs_to` only, any input is treated as a match for an existing value. For `has_many` and `many_to_many`, this is the same as `:ignore`.\n  * `:create` - the records are created using the destination's primary create action\n  * `{:create, :action_name}` - the records are created using the specified action on the destination resource\n  * `{:create, :action_name, :join_table_action_name, [:list, :of, :join_table, :params]}` - Same as `{:create, :action_name}` but takes\n      the list of params specified out and applies them when creating the join record, with the provided join_table_action_name.\n  * `:error`  - an error is returned indicating that a record would have been created\n    *  If `on_lookup` is set, and the data contained a primary key or identity, then the error is a `NotFound` error\n    * Otherwise, an `InvalidRelationship` error is returned The default value is `:ignore`.\n\n* `:value_is_key` (`t:atom/0`) - Configures what key to use when a single value is provided.  \n  This is useful when you use things like a list of strings i.e `friend_emails` to manage the relationship, instead of a list of maps.  \n  By default, we assume it is the primary key of the destination resource, unless it is a composite primary key.\n\n* `:identity_priority` (list of `t:atom/0`) - The list, in priority order, of identities to use when looking up records for `on_lookup`, and matching records with `on_match`.  \n  Use `:_primary_key` to prioritize checking a match with the primary key.\n  All identities, along with `:_primary_key` are checked regardless, this only allows ensuring that some are checked first.\n  Defaults to the list provided by `use_identities`, so you typically won't need this option.\n\n* `:use_identities` (list of `t:atom/0`) - A list of identities that may be used to look up and compare records. Use `:_primary_key` to include the primary key. By default, only `[:_primary_key]` is used.\n\n* `:on_lookup` (`t:term/0`) - Before creating a record (because no match was found in the relationship), the record can be looked up and related.  \n  * `:ignore` (default) - Does not look for existing entries (matches in the current relationship are still considered updates)\n  * `:relate` - Same as calling `{:relate, primary_action_name}`\n  * `{:relate, :action_name}` - the records are looked up by primary key/the first identity that is found (using the primary read action), and related. The action should be:\n      * `many_to_many` - a create action on the join resource\n      * `has_many` - an update action on the destination resource\n      * `has_one` - an update action on the destination resource\n      * `belongs_to` - an update action on the source resource\n  * `{:relate, :action_name, :read_action_name}` - Same as the above, but customizes the read action called to search for matches.\n  * `:relate_and_update` - Same as `:relate`, but the remaining parameters from the lookup are passed into the action that is used to change the relationship key\n  * `{:relate_and_update, :action_name}` - Same as the above, but customizes the action used. The action should be:\n      * `many_to_many` - a create action on the join resource\n      * `has_many` - an update action on the destination resource\n      * `has_one` - an update action on the destination resource\n      * `belongs_to` - an update action on the source resource\n  * `{:relate_and_update, :action_name, :read_action_name}` - Same as the above, but customizes the read action called to search for matches.\n  * `{:relate_and_update, :action_name, :read_action_name, [:list, :of, :join_table, :params]}` - Same as the above, but uses the provided list of parameters when creating\n      the join row (only relevant for many to many relationships). Use `:*` to *only* update the join record, and pass all parameters to its action The default value is `:ignore`.\n\n* `:on_match` (`t:term/0`) - Instructions for handling records where a matching record existed in the relationship already.  \n  * `:ignore` (default) - those inputs are ignored\n  * `:update` - the record is updated using the destination's primary update action\n  * `{:update, :action_name}` - the record is updated using the specified action on the destination resource\n  * `{:update, :action_name, :join_table_action_name, [:list, :of, :params]}` - Same as `{:update, :action_name}` but takes\n      the list of params specified out and applies them as an update to the join record (only valid for many to many)\n  * `:update_join` - update only the join record (only valid for many to many)\n  * `{:update_join, :join_table_action_name}` - use the specified update action on a join resource\n  * `{:update_join, :join_table_action_name, [:list, :of, :params]}` - pass specified params from input into a join resource update action\n  * `{:destroy, :action_name}` - the record is destroyed using the specified action on the destination resource. The action should be:\n    * `many_to_many` - a destroy action on the join record\n    * `has_many` - a destroy action on the destination resource\n    * `has_one` - a destroy action on the destination resource\n    * `belongs_to` - a destroy action on the destination resource\n  * `:error`  - an error is returned indicating that a record would have been updated\n  * `:no_match` - follows the `on_no_match` instructions with these records\n  * `:missing` - follows the `on_missing` instructions with these records\n  * `:unrelate` - the related item is not destroyed, but the data is \"unrelated\", making this behave like `remove_from_relationship/3`. The action should be:\n    * `many_to_many` - the join resource row is destroyed\n    * `has_many` - the `destination_attribute` (on the related record) is set to `nil`\n    * `has_one` - the `destination_attribute` (on the related record) is set to `nil`\n    * `belongs_to` - the `source_attribute` (on this record) is set to `nil`\n  * `{:unrelate, :action_name}` - the record is unrelated using the provided update action. The action should be:\n    * `many_to_many` - a destroy action on the join resource\n    * `has_many` - an update action on the destination resource\n    * `has_one` - an update action on the destination resource\n    * `belongs_to` - an update action on the source resource The default value is `:ignore`.\n\n* `:on_missing` (`t:term/0`) - Instructions for handling records that existed in the current relationship but not in the input.  \n  * `:ignore` (default) - those inputs are ignored\n  * `:destroy` - the record is destroyed using the destination's primary destroy action\n  * `{:destroy, :action_name}` - the record is destroyed using the specified action on the destination resource\n  * `{:destroy, :action_name, :join_resource_action_name}` - the record is destroyed using the specified action on the destination resource,\n    but first the join resource is destroyed with its specified action\n  * `:error`  - an error is returned indicating that a record would have been updated\n  * `:unrelate` - the related item is not destroyed, but the data is \"unrelated\", making this behave like `remove_from_relationship/3`. The action should be:\n    * `many_to_many` - the join resource row is destroyed\n    * `has_many` - the `destination_attribute` (on the related record) is set to `nil`\n    * `has_one` - the `destination_attribute` (on the related record) is set to `nil`\n    * `belongs_to` - the `source_attribute` (on this record) is set to `nil`\n  * `{:unrelate, :action_name}` - the record is unrelated using the provided update action. The action should be:\n    * `many_to_many` - a destroy action on the join resource\n    * `has_many` - an update action on the destination resource\n    * `has_one` - an update action on the destination resource\n    * `belongs_to` - an update action on the source resource The default value is `:ignore`.\n\n* `:error_path` (`t:term/0`) - By default, errors added to the changeset will use the path `[:relationship_name]`, or `[:relationship_name,  ]`.\n  If you want to modify this path, you can specify `error_path`, e.g if had a `change` on an action that takes an argument\n  and uses that argument data to call `manage_relationship`, you may want any generated errors to appear under the name of that\n  argument, so you could specify `error_path: :argument_name` when calling `manage_relationship`.\n\n* `:join_keys` (list of `t:atom/0`) - For many to many relationships specifies the parameters to pick from the input and pass into a join resource action.\n  Applicable in cases like `on_no_match: :create`, `on_match: :update` and `on_lookup: :relate`.\n  Can be overwritten by a full form instruction tuple which contains join parameters at the end.\n\n* `:meta` (`t:term/0`) - Freeform data that will be retained along with the options, which can be used to track/manage the changes that are added to the `relationships` key.\n\n* `:ignore?` (`t:term/0`) - This tells Ash to ignore the provided inputs when actually running the action. This can be useful for\n  building up a set of instructions that you intend to handle manually. The default value is `false`.\n\n\n\nEach call to this function adds new records that will be handled according to their options. For example,\nif you tracked \"tags to add\" and \"tags to remove\" in separate fields, you could input them like so:\n\n```elixir\nchangeset\n|> Ash.Changeset.manage_relationship(\n  :tags,\n  [%{name: \"backend\"}],\n  on_lookup: :relate, #relate that tag if it exists in the database\n  on_no_match: :error # error if a tag with that name doesn't exist\n)\n|> Ash.Changeset.manage_relationship(\n  :tags,\n  [%{name: \"frontend\"}],\n  on_no_match: :error, # error if a tag with that name doesn't exist in the relationship\n  on_match: :unrelate # if a tag with that name is related, unrelate it\n)\n```\n\nWhen calling this multiple times with the `on_missing` option set, the list of records that are considered missing are checked\nafter each set of inputs is processed. For example, if you manage the relationship once with `on_missing: :unrelate`, the records\nmissing from your input will be removed, and *then* your next call to `manage_relationship` will be resolved (with those records unrelated).\nFor this reason, it is suggested that you don't call this function multiple times with an `on_missing` instruction, as you may be\nsurprised by the result.\n\nIf you want the input to update existing entities, you need to ensure that the primary key (or unique identity) is provided as\npart of the input. See the example below:\n\n    changeset\n    |> Ash.Changeset.manage_relationship(\n      :comments,\n      [%{rating: 10, contents: \"foo\"}],\n      on_no_match: {:create, :create_action},\n      on_missing: :ignore\n    )\n    |> Ash.Changeset.manage_relationship(\n      :comments,\n      [%{id: 10, rating: 10, contents: \"foo\"}],\n      on_match: {:update, :update_action},\n      on_no_match: {:create, :create_action})\n\nThis is a simple way to manage a relationship. If you need custom behavior, you can customize the action that is\ncalled, which allows you to add arguments/changes. However, at some point you may want to forego this function\nand make the changes yourself. For example:\n\n    input = [%{id: 10, rating: 10, contents: \"foo\"}]\n\n    changeset\n    |> Ash.Changeset.after_action(fn _changeset, result ->\n      # An example of updating comments based on a result of other changes\n      for comment <- input do\n        comment = Ash.get(Comment, comment.id)\n\n        comment\n        |> Map.update(:rating, 0, &(&1 * result.rating_weight))\n        |> Ash.update!()\n      end\n\n      {:ok, result}\n    end)","ref":"Ash.Changeset.html#manage_relationship/4-options","title":"Options - Ash.Changeset.manage_relationship/4","type":"function"},{"doc":"Records can be supplied as the input values. If you do:\n\n* if it would be looked up due to `on_lookup`, the record is used as-is\n* if it would be created due to `on_no_match`, the record is used as-is\n* Instead of specifying `join_keys`, those keys must go in `__metadata__.join_keys`. If `join_keys` is specified in the options, it is ignored.\n\nFor example:\n\n```elixir\npost1 =\n  changeset\n  |> Ash.create!()\n  |> Ash.Resource.put_metadata(:join_keys, %{type: \"a\"})\n\npost1 =\n  changeset2\n  |> Ash.create!()\n  |> Ash.Resource.put_metadata(:join_keys, %{type: \"b\"})\n\nauthor = Ash.create!(author_changeset)\n\nAsh.Changeset.manage_relationship(\n  author,\n  :posts,\n  [post1, post2],\n  on_lookup: :relate\n)\n```","ref":"Ash.Changeset.html#manage_relationship/4-using-records-as-input","title":"Using records as input - Ash.Changeset.manage_relationship/4","type":"function"},{"doc":"","ref":"Ash.Changeset.html#manage_relationship_opts/1","title":"Ash.Changeset.manage_relationship_opts/1","type":"function"},{"doc":"Returns a new changeset over a resource.\n\n*Warning*: You almost always want to use `for_action` or `for_create`, etc. over this function if possible.\n\nYou can use this to start a changeset and make changes prior to calling `for_action`. This is not typically\nnecessary, but can be useful as an escape hatch. For example:\n\n```elixir\nResource\n|> Ash.Changeset.new()\n|> Ash.Changeset.change_attribute(:name, \"foobar\")\n|> Ash.Changeset.for_action(...)\n```","ref":"Ash.Changeset.html#new/1","title":"Ash.Changeset.new/1","type":"function"},{"doc":"","ref":"Ash.Changeset.html#prepare_changeset_for_action/3","title":"Ash.Changeset.prepare_changeset_for_action/3","type":"function"},{"doc":"Checks if an argument is not nil or an attribute is not nil, either in the original data, or that it is not being changed to a `nil` value if it is changing.\n\nThis also accounts for the `accessing_from` context that is set when using `manage_relationship`, so it is aware that a particular value\n*will* be set by `manage_relationship` even if it isn't currently being set.","ref":"Ash.Changeset.html#present?/2","title":"Ash.Changeset.present?/2","type":"function"},{"doc":"Puts a key/value in the changeset context that can be used later.\n\nDo not use the `private` key in your custom context, as that is reserved for internal use.","ref":"Ash.Changeset.html#put_context/3","title":"Ash.Changeset.put_context/3","type":"function"},{"doc":"","ref":"Ash.Changeset.html#run_atomic_change/3","title":"Ash.Changeset.run_atomic_change/3","type":"function"},{"doc":"","ref":"Ash.Changeset.html#run_before_transaction_hooks/1","title":"Ash.Changeset.run_before_transaction_hooks/1","type":"function"},{"doc":"Ensure that only the specified attributes are present in the results.\n\nThe first call to `select/2` will replace the default behavior of selecting\nall attributes. Subsequent calls to `select/2` will combine the provided\nfields unless the `replace?` option is provided with a value of `true`.\n\nIf a field has been deselected, selecting it again will override that (because a single list of fields is tracked for selection)\n\nPrimary key attributes always selected and cannot be deselected.\n\nWhen attempting to load a relationship (or manage it with `Ash.Changeset.manage_relationship/3`),\nif the source field is not selected on the query/provided data an error will be produced. If loading\na relationship with a query, an error is produced if the query does not select the destination field\nof the relationship.\n\nDatalayers currently are not notified of the `select` for a changeset(unlike queries), and creates/updates select all fields when they are performed.\nA select provided on a changeset sets the unselected fields to `nil` before returning the result.\n\nUse `ensure_selected/2` if you wish to make sure a field has been selected, without deselecting any other fields.","ref":"Ash.Changeset.html#select/3","title":"Ash.Changeset.select/3","type":"function"},{"doc":"","ref":"Ash.Changeset.html#selecting?/2","title":"Ash.Changeset.selecting?/2","type":"function"},{"doc":"Add an argument to the changeset, which will be provided to the action.","ref":"Ash.Changeset.html#set_argument/3","title":"Ash.Changeset.set_argument/3","type":"function"},{"doc":"Merge a map of arguments to the arguments list.","ref":"Ash.Changeset.html#set_arguments/2","title":"Ash.Changeset.set_arguments/2","type":"function"},{"doc":"Deep merges the provided map into the changeset context that can be used later.\n\nDo not use the `private` key in your custom context, as that is reserved for internal use.","ref":"Ash.Changeset.html#set_context/2","title":"Ash.Changeset.set_context/2","type":"function"},{"doc":"","ref":"Ash.Changeset.html#set_on_upsert/2","title":"Ash.Changeset.set_on_upsert/2","type":"function"},{"doc":"Set the result of the action. This will prevent running the underlying datalayer behavior","ref":"Ash.Changeset.html#set_result/2","title":"Ash.Changeset.set_result/2","type":"function"},{"doc":"","ref":"Ash.Changeset.html#set_tenant/2","title":"Ash.Changeset.set_tenant/2","type":"function"},{"doc":"","ref":"Ash.Changeset.html#timeout/3","title":"Ash.Changeset.timeout/3","type":"function"},{"doc":"Updates an existing attribute change by applying a function to it.\n\nThis is useful for applying some kind of normalization to the attribute.\n\n```elixir\nAsh.Changeset.update_change(changeset, :serial, &String.downcase/1)\n```\n\nThe update function gets called with the value already cast to the correct type.\n\n```elixir\nchangeset\n|> Ash.Changeset.change_attribute(:integer_attribute, \"3\")\n|> Ash.Changeset.update_change(:integer_attribute, fn x -> x + 1 end)\n```","ref":"Ash.Changeset.html#update_change/3","title":"Ash.Changeset.update_change/3","type":"function"},{"doc":"If `update_change` is called with a changeset that has not been validated yet, the update\nfunction must handle potentially invalid and `nil` values.\n\nTo only deal with valid values, you can call `update_change` in a `before_action` hook.","ref":"Ash.Changeset.html#update_change/3-invalid-value-handling","title":"Invalid value handling - Ash.Changeset.update_change/3","type":"function"},{"doc":"Wraps a function in the before/after action hooks of a changeset.\n\nThe function takes a changeset and if it returns\n`{:ok, result}`, the result will be passed through the after\naction hooks.","ref":"Ash.Changeset.html#with_hooks/3","title":"Ash.Changeset.with_hooks/3","type":"function"},{"doc":"","ref":"Ash.Changeset.html#t:after_action_fun/0","title":"Ash.Changeset.after_action_fun/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:after_transaction_fun/0","title":"Ash.Changeset.after_transaction_fun/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:around_action_callback/0","title":"Ash.Changeset.around_action_callback/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:around_action_fun/0","title":"Ash.Changeset.around_action_fun/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:around_action_result/0","title":"Ash.Changeset.around_action_result/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:around_transaction_callback/0","title":"Ash.Changeset.around_transaction_callback/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:around_transaction_fun/0","title":"Ash.Changeset.around_transaction_fun/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:around_transaction_result/0","title":"Ash.Changeset.around_transaction_result/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:before_action_fun/0","title":"Ash.Changeset.before_action_fun/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:before_transaction_fun/0","title":"Ash.Changeset.before_transaction_fun/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:error_info/0","title":"Ash.Changeset.error_info/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:manage_relationship_type/0","title":"Ash.Changeset.manage_relationship_type/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:phase/0","title":"Ash.Changeset.phase/0","type":"type"},{"doc":"","ref":"Ash.Changeset.html#t:t/0","title":"Ash.Changeset.t/0","type":"type"},{"doc":"A domain allows you to interact with your resources, and holds domain-wide configuration.\n\nFor example, the json domain extension adds a domain extension that lets you toggle authorization on/off\nfor all resources in a given domain. You include resources in your domain like so:\n\n```elixir\ndefmodule MyApp.MyDomain do\n  use Ash.Domain\n\n  resources do\n    resource OneResource\n    resource SecondResource\n  end\nend\n```","ref":"Ash.Domain.html","title":"Ash.Domain","type":"behaviour"},{"doc":"* `:validate_config_inclusion?` (`t:boolean/0`) - Whether or not to validate that this domain is included in the configuration. The default value is `true`.\n\n* `:backwards_compatible_interface?` (`t:boolean/0`) - Whether or not to include the 2.0 backwards compatible interface, which includes all of the interaction functions which are now defined on the `Ash` module The default value is `true`.\n\n* `:extensions` (list of module that adopts `Spark.Dsl.Extension`) - A list of DSL extensions to add to the `Spark.Dsl`\n\n* `:otp_app` (`t:atom/0`) - The otp_app to use for any application configurable options\n\n* `:fragments` (list of `t:module/0`) - Fragments to include in the `Spark.Dsl`. See the fragments guide for more.","ref":"Ash.Domain.html#module-options","title":"Options - Ash.Domain","type":"behaviour"},{"doc":"","ref":"Ash.Domain.html#c:domain?/0","title":"Ash.Domain.domain?/0","type":"callback"},{"doc":"","ref":"Ash.Domain.html#t:t/0","title":"Ash.Domain.t/0","type":"type"},{"doc":"A data structure for reading data from a resource.\n\nAsh queries are used for read actions and loads, and ultimately\nmap to queries to a resource's data layer.\n\nQueries are run by calling `Ash.read`.\n\nExamples:\n\n```elixir\nMyApp.Post\n|> Ash.Query.filter(likes > 10)\n|> Ash.Query.sort([:title])\n|> Ash.read!()\n\nMyApp.Author\n|> Ash.Query.aggregate(:published_post_count, :posts, query: [filter: [published: true]])\n|> Ash.Query.sort(published_post_count: :desc)\n|> Ash.Query.limit(10)\n|> Ash.read!()\n\nMyApp.Author\n|> Ash.Query.load([:post_count, :comment_count])\n|> Ash.Query.load(posts: [:comments])\n|> Ash.read!()\n```","ref":"Ash.Query.html","title":"Ash.Query","type":"module"},{"doc":"Returns a list of attributes, aggregates, relationships, and calculations that are being loaded\n\nProvide a list of field types to narrow down the returned results.","ref":"Ash.Query.html#accessing/3","title":"Ash.Query.accessing/3","type":"function"},{"doc":"","ref":"Ash.Query.html#add_error/3","title":"Ash.Query.add_error/3","type":"function"},{"doc":"","ref":"Ash.Query.html#after_action/2","title":"Ash.Query.after_action/2","type":"function"},{"doc":"Adds an aggregation to the query.\n\nAggregations are made available on the `aggregates` field of the records returned\n\nThe filter option accepts either a filter or a keyword list of options to supply to build a limiting query for that aggregate.\nSee the DSL docs for each aggregate type in the [Resource DSL docs](dsl-ash-resource.html#aggregates) for more information.\n\nOptions:\n\n  * query: The query over the destination resource to use as a base for aggregation\n  * default: The default value to use if the aggregate returns nil\n  * filterable?: Whether or not this aggregate may be referenced in filters\n  * type: The type of the aggregate\n  * constraints: Type constraints for the aggregate's type\n  * implementation: An implementation used when the aggregate kind is custom\n  * read_action: The read action to use on the destination resource\n  * authorize?: Whether or not to authorize access to this aggregate\n  * join_filters: A map of relationship paths to filter expressions. See the aggregates guide for more.","ref":"Ash.Query.html#aggregate/4","title":"Ash.Query.aggregate/4","type":"function"},{"doc":"","ref":"Ash.Query.html#aggregate/5","title":"Ash.Query.aggregate/5","type":"function"},{"doc":"","ref":"Ash.Query.html#apply_to/3","title":"Ash.Query.apply_to/3","type":"function"},{"doc":"Adds an around_transaction hook to the query.\n\nYour function will get the query, and a callback that must be called with a query (that may be modified).\nThe callback will return `{:ok, results}` or `{:error, error}`. You can modify these values, but the return value\nmust be one of those types.\n\nThe around_transaction calls happen first, and then (after they each resolve their callbacks) the `before_action`\nhooks are called, followed by the `after_action` hooks being run. Then, the code that appeared *after* the callbacks were called is then run.\n\nWarning: using this without understanding how it works can cause big problems.\nYou *must* call the callback function that is provided to your hook, and the return value must\ncontain the same structure that was given to you, i.e `{:ok, result_of_action}`.","ref":"Ash.Query.html#around_transaction/2","title":"Ash.Query.around_transaction/2","type":"function"},{"doc":"","ref":"Ash.Query.html#authorize_results/2","title":"Ash.Query.authorize_results/2","type":"function"},{"doc":"Adds a before_action hook to the query.\n\nProvide the option `prepend?: true` to place the hook before all\nother hooks instead of after.","ref":"Ash.Query.html#before_action/3","title":"Ash.Query.before_action/3","type":"function"},{"doc":"Builds a query from a keyword list.\n\nThis is used by certain query constructs like aggregates. It can also be used to manipulate a data structure\nbefore passing it to an ash query. It allows for building an entire query struct using only a keyword list.\n\nFor example:\n\n```elixir\nAsh.Query.build(MyResource, filter: [name: \"fred\"], sort: [name: :asc], load: [:foo, :bar], offset: 10)\n```\n\nIf you want to use the expression style filters, you can use `expr/1`.\n\nFor example:\n\n```elixir\nimport Ash.Expr, only: [expr: 1]\n\nAsh.Query.build(Myresource, filter: expr(name == \"marge\"))\n```","ref":"Ash.Query.html#build/3","title":"Ash.Query.build/3","type":"function"},{"doc":"* `:filter` (`t:term/0`) - A filter keyword, map or expression\n\n* `:filter_input` (`t:term/0`) - A filter keyword or map, provided as input from an external source\n\n* `:sort` (`t:term/0`) - A sort list or keyword\n\n* `:sort_input` (`t:term/0`) - A sort list or keyword, provided as input from an external source\n\n* `:distinct_sort` (`t:term/0`) - A distinct_sort list or keyword\n\n* `:limit` (`t:integer/0`) - A limit to apply\n\n* `:offset` (`t:integer/0`) - An offset to apply\n\n* `:load` (`t:term/0`) - A load statement to add to the query\n\n* `:select` (`t:term/0`) - A select statement to add to the query\n\n* `:ensure_selected` (`t:term/0`) - An ensure_selected statement to add to the query\n\n* `:aggregate` (`t:term/0`) - A custom aggregate to add to the query. Can be `{name, type, relationship}` or `{name, type, relationship, build_opts}`\n\n* `:calculate` (`t:term/0`) - A custom calculation to add to the query. Can be `{name, module_and_opts}` or `{name, module_and_opts, context}`\n\n* `:distinct` (list of `t:atom/0`) - A distinct clause to add to the query\n\n* `:context` (`t:map/0`) - A map to merge into the query context","ref":"Ash.Query.html#build/3-options","title":"Options - Ash.Query.build/3","type":"function"},{"doc":"Adds a calculation to the query.\n\nCalculations are made available on the `calculations` field of the records returned\n\nThe `module_and_opts` argument accepts either a `module` or a `{module, opts}`. For more information\non what that module should look like, see `Ash.Resource.Calculation`.","ref":"Ash.Query.html#calculate/8","title":"Ash.Query.calculate/8","type":"function"},{"doc":"Removes a result set previously with `set_result/2`","ref":"Ash.Query.html#clear_result/1","title":"Ash.Query.clear_result/1","type":"function"},{"doc":"Return the underlying data layer query for an ash query","ref":"Ash.Query.html#data_layer_query/2","title":"Ash.Query.data_layer_query/2","type":"function"},{"doc":"Remove an argument from the query","ref":"Ash.Query.html#delete_argument/2","title":"Ash.Query.delete_argument/2","type":"function"},{"doc":"Ensure the the specified attributes are `nil` in the query results.","ref":"Ash.Query.html#deselect/2","title":"Ash.Query.deselect/2","type":"function"},{"doc":"Get results distinct on the provided fields.\n\nTakes a list of fields to distinct on. Each call is additive, so to remove the `distinct` use\n`unset/2`.\n\nExamples:\n\n```\nAsh.Query.distinct(query, [:first_name, :last_name])\n\nAsh.Query.distinct(query, :email)\n```","ref":"Ash.Query.html#distinct/2","title":"Ash.Query.distinct/2","type":"function"},{"doc":"Set a sort to determine how distinct records are selected.\n\nIf none is set, any sort applied to the query will be used.\n\nThis is useful if you want to control how the `distinct` records\nare selected without affecting (necessarily, it may affect it if\nthere is no sort applied) the overall sort of the query","ref":"Ash.Query.html#distinct_sort/3","title":"Ash.Query.distinct_sort/3","type":"function"},{"doc":"Ensures that the given attributes are selected.\n\nThe first call to `select/2` will *limit* the fields to only the provided fields.\nUse `ensure_selected/2` to say \"select this field (or these fields) without deselecting anything else\".\n\nSee `select/2` for more.","ref":"Ash.Query.html#ensure_selected/2","title":"Ash.Query.ensure_selected/2","type":"function"},{"doc":"Determines if the filter statement of a query is equivalent to the provided expression.\n\nThis uses the satisfiability solver that is used when solving for policy authorizations. In complex scenarios, or when using\ncustom database expressions, (like fragments in ash_postgres), this function may return `:maybe`. Use `supserset_of?` to always return\na boolean.","ref":"Ash.Query.html#equivalent_to/2","title":"Ash.Query.equivalent_to/2","type":"macro"},{"doc":"Same as `equivalent_to/2` but always returns a boolean. `:maybe` returns `false`.","ref":"Ash.Query.html#equivalent_to?/2","title":"Ash.Query.equivalent_to?/2","type":"macro"},{"doc":"fetches the value of an argument provided to the query or `:error`","ref":"Ash.Query.html#fetch_argument/2","title":"Ash.Query.fetch_argument/2","type":"function"},{"doc":"Attach a filter statement to the query.\n\nThe filter is applied as an \"and\" to any filters currently on the query.\nFor more information on writing filters, see: `Ash.Filter`.","ref":"Ash.Query.html#filter/2","title":"Ash.Query.filter/2","type":"macro"},{"doc":"Attach a filter statement to the query labelled as user input.\n\nFilters added as user input (or filters constructed with `Ash.Filter.parse_input`)\nwill honor any field policies on resources by replacing any references to the field\nwith `nil` in cases where the actor should not be able to see the given field.\n\nThis function does not expect the expression style filter (because an external source\ncould never reasonably provide that). Instead, use the keyword/map style syntax. For\nexample:\n\n`expr(name == \"fred\")`\n\ncould be any of\n\n- map syntax: `%{\"name\" => %{\"eq\" => \"fred\"}}`\n- keyword syntax: `[name: [eq: \"fred\"]]`\n\nSee `Ash.Filter` for more.","ref":"Ash.Query.html#filter_input/2","title":"Ash.Query.filter_input/2","type":"function"},{"doc":"Creates a query for a given read action and prepares it.\n\nMultitenancy is *not* validated until an action is called. This allows you to avoid specifying a tenant until just before calling\nthe domain action.","ref":"Ash.Query.html#for_read/4","title":"Ash.Query.for_read/4","type":"function"},{"doc":"Provide a map or keyword list of arguments for the read action","ref":"Ash.Query.html#for_read/4-arguments","title":"Arguments - Ash.Query.for_read/4","type":"function"},{"doc":"* `:actor` (`t:term/0`) - set the actor, which can be used in any `Ash.Resource.Change`s configured on the action. (in the `context` argument)\n\n* `:authorize?` (`t:boolean/0`) - set authorize?, which can be used in any `Ash.Resource.Change`s configured on the action. (in the `context` argument)\n\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer to use. Will be carried over to the action. For more information see `Ash.Tracer`.\n\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - set the tenant on the query\n\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.","ref":"Ash.Query.html#for_read/4-opts","title":"Opts - Ash.Query.for_read/4","type":"function"},{"doc":"Gets the value of an argument provided to the query","ref":"Ash.Query.html#get_argument/2","title":"Ash.Query.get_argument/2","type":"function"},{"doc":"Limit the results returned from the query","ref":"Ash.Query.html#limit/2","title":"Ash.Query.limit/2","type":"function"},{"doc":"Loads relationships, calculations, or aggregates on the resource.\n\nBy default, loading attributes has no effects, as all attributes are returned.\n\n```elixir\n# Loading nested relationships\nAsh.Query.load(query, [comments: [:author, :ratings]])\n\n# Loading relationships with a query\nAsh.Query.load(query, [comments: [author: author_query]])\n```\n\nBy passing the `strict?: true` option, only specified attributes will be loaded when passing\na list of fields to fetch on a relationship, which allows for more optimized data-fetching.\n\nThe select statement of any queries inside the load statement will not be affected.\n\nExample:\n```elixir\nAsh.load(category, [:name, posts: [:title, :published_at]], strict?: true)\n```\n\nHere, the only fields that will be loaded on the `posts` relationship are `title` and\n`published_at`, in addition to any other fields that are required to be loaded, like the\nprimary and relevant foreign keys.\nThis entails that when using `strict?: true` and loading nested relationships, you will also\nalways have to specify all the attributes you want to load alongside the nested relationships.\n\nExample:\n```elixir\nAsh.load(post, [:title, :published_at, :other_needed_attribute, category: [:name]], strict?: true)\n```\n\nIf no fields are specified on a relationship when using `strict?: true`, all attributes will be\nloaded by default.\n\nExample:\n```elixir\nAsh.load(category, [:name, :posts], strict?: true)\n```","ref":"Ash.Query.html#load/3","title":"Ash.Query.load/3","type":"function"},{"doc":"Adds a resource calculation to the query as a custom calculation with the provided name.\n\nExample:\n\n    Ash.Query.load_calculation_as(query, :calculation, :some_name, args: %{}, load_through: [:foo])","ref":"Ash.Query.html#load_calculation_as/5","title":"Ash.Query.load_calculation_as/5","type":"function"},{"doc":"Adds a load statement to the result of an attribute or calculation.\n\nUses `Ash.Type.load/5` to request that the type load nested data.","ref":"Ash.Query.html#load_through/4","title":"Ash.Query.load_through/4","type":"function"},{"doc":"Returns true if the field/relationship or path to field/relationship is being loaded.\n\nIt accepts an atom or a list of atoms, which is treated for as a \"path\", i.e:\n\n    Resource |> Ash.Query.load(friends: [enemies: [:score]]) |> Ash.Query.loading?([:friends, :enemies, :score])\n    iex> true\n\n    Resource |> Ash.Query.load(friends: [enemies: [:score]]) |> Ash.Query.loading?([:friends, :score])\n    iex> false\n\n    Resource |> Ash.Query.load(friends: [enemies: [:score]]) |> Ash.Query.loading?(:friends)\n    iex> true","ref":"Ash.Query.html#loading?/2","title":"Ash.Query.loading?/2","type":"function"},{"doc":"Lock the query results.\n\nThis must be run while in a transaction, and is not supported by all data layers.","ref":"Ash.Query.html#lock/2","title":"Ash.Query.lock/2","type":"function"},{"doc":"Merges two query's load statements, for the purpose of handling calculation requirements.\n\nThis should only be used if you are writing a custom type that is loadable.\nSee the callback documentation for `c:Ash.Type.merge_load/4` for more.","ref":"Ash.Query.html#merge_query_load/3","title":"Ash.Query.merge_query_load/3","type":"function"},{"doc":"Create a new query","ref":"Ash.Query.html#new/2","title":"Ash.Query.new/2","type":"function"},{"doc":"Skip the first n records","ref":"Ash.Query.html#offset/2","title":"Ash.Query.offset/2","type":"function"},{"doc":"Sets the pagination options of the query.\n\nPass `nil` to disable pagination.","ref":"Ash.Query.html#page/2","title":"Ash.Query.page/2","type":"function"},{"doc":"* `:offset` (`t:non_neg_integer/0`) - The number of records to skip from the beginning of the query\n\n* `:limit` (`t:pos_integer/0`) - The number of records to include in the page\n\n* `:filter` (`t:term/0`) - A filter to apply for pagination purposes, that should not be considered in the full count.  \n  This is used by the liveview paginator to only fetch the records that were *already* on the\n  page when refreshing data, to avoid pages jittering.\n\n* `:count` (`t:boolean/0`) - Whether or not to return the page with a full count of all records","ref":"Ash.Query.html#page/2-limit-offset-pagination","title":"Limit/offset pagination - Ash.Query.page/2","type":"function"},{"doc":"* `:before` (`t:String.t/0`) - Get records that appear before the provided keyset (mutually exclusive with `after`)\n\n* `:after` (`t:String.t/0`) - Get records that appear after the provided keyset (mutually exclusive with `before`)\n\n* `:limit` (`t:pos_integer/0`) - How many records to include in the page\n\n* `:filter` (`t:term/0`) - See the `filter` option for offset pagination, this behaves the same.\n\n* `:count` (`t:boolean/0`) - Whether or not to return the page with a full count of all records","ref":"Ash.Query.html#page/2-keyset-pagination","title":"Keyset pagination - Ash.Query.page/2","type":"function"},{"doc":"Sets a specific context key to a specific value\n\nSee `set_context/2` for more information.","ref":"Ash.Query.html#put_context/3","title":"Ash.Query.put_context/3","type":"function"},{"doc":"Ensure that only the specified *attributes* are present in the results.\n\nThe first call to `select/2` will replace the default behavior of selecting\nall attributes. Subsequent calls to `select/2` will combine the provided\nfields unless the `replace?` option is provided with a value of `true`.\n\nIf a field has been deselected, selecting it again will override that (because a single list of fields is tracked for selection)\n\nPrimary key attributes are always selected and cannot be deselected.\n\nWhen attempting to load a relationship (or manage it with `Ash.Changeset.manage_relationship/3`),\nif the source field is not selected on the query/provided data an error will be produced. If loading\na relationship with a query, an error is produced if the query does not select the destination field\nof the relationship.\n\nUse `ensure_selected/2` if you wish to make sure a field has been selected, without deselecting any other fields.","ref":"Ash.Query.html#select/3","title":"Ash.Query.select/3","type":"function"},{"doc":"","ref":"Ash.Query.html#selecting?/2","title":"Ash.Query.selecting?/2","type":"function"},{"doc":"Add an argument to the query, which can be used in filter templates on actions","ref":"Ash.Query.html#set_argument/3","title":"Ash.Query.set_argument/3","type":"function"},{"doc":"Merge a map of arguments to the arguments list","ref":"Ash.Query.html#set_arguments/2","title":"Ash.Query.set_arguments/2","type":"function"},{"doc":"Merge a map of values into the query context","ref":"Ash.Query.html#set_context/2","title":"Ash.Query.set_context/2","type":"function"},{"doc":"Set the query's domain, and any loaded query's domain","ref":"Ash.Query.html#set_domain/2","title":"Ash.Query.set_domain/2","type":"function"},{"doc":"Set the result of the action. This will prevent running the underlying datalayer behavior","ref":"Ash.Query.html#set_result/2","title":"Ash.Query.set_result/2","type":"function"},{"doc":"","ref":"Ash.Query.html#set_tenant/2","title":"Ash.Query.set_tenant/2","type":"function"},{"doc":"Sort the results based on attributes, aggregates or calculations.\n\nCalculations are supported if they are defined with expressions, which can be done one of two ways.\n\n1. with the shorthand `calculate :calc, :type, expr(a + b)`\n2. By defining `expression/2` in a custom calculation module\n\nSee the guide on calculations for more.\n\nTakes a list of fields to sort on, or a keyword list/mixed keyword list of fields and sort directions.\nThe default sort direction is `:asc`.\n\nExamples:\n\n```\nAsh.Query.sort(query, [:foo, :bar])\n\nAsh.Query.sort(query, [:foo, bar: :desc])\n\nAsh.Query.sort(query, [foo: :desc, bar: :asc])\n```","ref":"Ash.Query.html#sort/3","title":"Ash.Query.sort/3","type":"function"},{"doc":"- `prepend?` - set to `true` to put your sort at the front of the list of a sort is already specified","ref":"Ash.Query.html#sort/3-options","title":"Options - Ash.Query.sort/3","type":"function"},{"doc":"Attach a sort statement to the query labelled as user input.\n\nSorts added as user input (or filters constructed with `Ash.Filter.parse_input`)\nwill honor any field policies on resources by replacing any references to the field\nwith `nil` in cases where the actor should not be able to see the given field.","ref":"Ash.Query.html#sort_input/3","title":"Ash.Query.sort_input/3","type":"function"},{"doc":"","ref":"Ash.Query.html#struct?/1","title":"Ash.Query.struct?/1","type":"function"},{"doc":"Determines if the provided expression would return data that is a suprset of the data returned by the filter on the query.\n\nThis uses the satisfiability solver that is used when solving for policy authorizations. In complex scenarios, or when using\ncustom database expressions, (like fragments in ash_postgres), this function may return `:maybe`. Use `subset_of?` to always return\na boolean.","ref":"Ash.Query.html#subset_of/2","title":"Ash.Query.subset_of/2","type":"macro"},{"doc":"Same as `subset_of/2` but always returns a boolean. `:maybe` returns `false`.","ref":"Ash.Query.html#subset_of?/2","title":"Ash.Query.subset_of?/2","type":"macro"},{"doc":"Determines if the provided expression would return data that is a subset of the data returned by the filter on the query.\n\nThis uses the satisfiability solver that is used when solving for policy authorizations. In complex scenarios, or when using\ncustom database expressions, (like fragments in ash_postgres), this function may return `:maybe`. Use `supserset_of?` to always return\na boolean.","ref":"Ash.Query.html#superset_of/2","title":"Ash.Query.superset_of/2","type":"macro"},{"doc":"Same as `superset_of/2` but always returns a boolean. `:maybe` returns `false`.","ref":"Ash.Query.html#superset_of?/2","title":"Ash.Query.superset_of?/2","type":"macro"},{"doc":"","ref":"Ash.Query.html#timeout/2","title":"Ash.Query.timeout/2","type":"function"},{"doc":"Removes a field from the list of fields to load","ref":"Ash.Query.html#unload/2","title":"Ash.Query.unload/2","type":"function"},{"doc":"","ref":"Ash.Query.html#unset/2","title":"Ash.Query.unset/2","type":"function"},{"doc":"","ref":"Ash.Query.html#t:around_action_fun/0","title":"Ash.Query.around_action_fun/0","type":"type"},{"doc":"","ref":"Ash.Query.html#t:around_callback/0","title":"Ash.Query.around_callback/0","type":"type"},{"doc":"","ref":"Ash.Query.html#t:around_result/0","title":"Ash.Query.around_result/0","type":"type"},{"doc":"","ref":"Ash.Query.html#t:around_transaction_fun/0","title":"Ash.Query.around_transaction_fun/0","type":"type"},{"doc":"","ref":"Ash.Query.html#t:t/0","title":"Ash.Query.t/0","type":"type"},{"doc":"Represents an aggregated association value","ref":"Ash.Query.Aggregate.html","title":"Ash.Query.Aggregate","type":"module"},{"doc":"","ref":"Ash.Query.Aggregate.html#default_value/1","title":"Ash.Query.Aggregate.default_value/1","type":"function"},{"doc":"Create a new aggregate, used with `Query.aggregate` or `Ash.aggregate`\n\nOptions:\n\n* `:path` (list of `t:atom/0`) - The relationship path to aggregate over. Only used when adding aggregates to a query. The default value is `[]`.\n\n* `:query` (`t:term/0`) - A base query to use for the aggregate, or a keyword list to be passed to `Ash.Query.build/2`\n\n* `:field` - The field to use for the aggregate. Not necessary for all aggregate types.\n\n* `:expr` (`t:term/0`) - An expression to aggregate, cannot be used with `field`.\n\n* `:expr_type` - The type of the expression, required if `expr` is used.\n\n* `:arguments` (`t:map/0`) - Arguments to pass to the field, if field is a calculation.\n\n* `:default` (`t:term/0`) - A default value to use for the aggregate if it returns `nil`.\n\n* `:filterable?` (`t:boolean/0`) - Whether or not this aggregate may be used in filters. The default value is `true`.\n\n* `:sortable?` (`t:boolean/0`) - Whether or not this aggregate may be used in sorts. The default value is `true`.\n\n* `:type` (`t:term/0`) - A type to use for the aggregate.\n\n* `:constraints` (`t:term/0`) - Type constraints to use for the aggregate. The default value is `[]`.\n\n* `:implementation` (`t:term/0`) - The implementation for any custom aggregates.\n\n* `:read_action` (`t:atom/0`) - The read action to use for the aggregate, defaults to the primary read action.\n\n* `:uniq?` (`t:boolean/0`) - Whether or not to only consider unique values. Only relevant for `count` and `list` aggregates. The default value is `false`.\n\n* `:include_nil?` (`t:boolean/0`) - Whether or not to include `nil` values in the aggregate. Only relevant for `list` and `first` aggregates. The default value is `false`.\n\n* `:join_filters` (map of one or a list of `t:atom/0` keys and `t:term/0` values) - A map of relationship paths (an atom or list of atoms), to an expression to apply when fetching the aggregate data. See the aggregates guide for more. The default value is `%{}`.\n\n* `:sensitive?` (`t:boolean/0`) - Whether or not references to this aggregate will be considered sensitive The default value is `false`.\n\n* `:authorize?` (`t:boolean/0`) - Whether or not the aggregate query should authorize based on the target action.  \n  See `d:Ash.Resource.Dsl.aggregates|count` for more information. The default value is `true`.","ref":"Ash.Query.Aggregate.html#new/4","title":"Ash.Query.Aggregate.new/4","type":"function"},{"doc":"","ref":"Ash.Query.Aggregate.html#new!/4","title":"Ash.Query.Aggregate.new!/4","type":"function"},{"doc":"","ref":"Ash.Query.Aggregate.html#t:kind/0","title":"Ash.Query.Aggregate.kind/0","type":"type"},{"doc":"","ref":"Ash.Query.Aggregate.html#t:t/0","title":"Ash.Query.Aggregate.t/0","type":"type"},{"doc":"Represents a calculated attribute requested on a query","ref":"Ash.Query.Calculation.html","title":"Ash.Query.Calculation","type":"module"},{"doc":"Creates a new query calculation.","ref":"Ash.Query.Calculation.html#new/6","title":"Ash.Query.Calculation.new/6","type":"function"},{"doc":"* `:arguments` (`t:map/0`) - Arguments to pass to the calculation The default value is `%{}`.\n\n* `:async?` (`t:boolean/0`) - Whether or not this calculation should be run asynchronously The default value is `false`.\n\n* `:filterable?` (`t:boolean/0`) - Whether or not this calculation can be filtered on The default value is `true`.\n\n* `:sortable?` (`t:boolean/0`) - Whether or not this calculation can be sorted on The default value is `true`.\n\n* `:sensitive?` (`t:boolean/0`) - Whether or not references to this calculation will be considered sensitive The default value is `false`.\n\n* `:load` (`t:term/0`) - Loads that are required for the calculation.\n\n* `:source_context` (`t:map/0`) - Context from the source query or changeset. The default value is `%{}`.","ref":"Ash.Query.Calculation.html#new/6-options","title":"Options - Ash.Query.Calculation.new/6","type":"function"},{"doc":"","ref":"Ash.Query.Calculation.html#t:t/0","title":"Ash.Query.Calculation.t/0","type":"type"},{"doc":"The behaviour for an action-specific query preparation.\n\n`c:init/1` is defined automatically by `use Ash.Resource.Preparation`, but can be implemented if you want to validate/transform any\noptions passed to the module.\n\nThe main function is `c:prepare/3`. It takes the query, any options that were provided\nwhen this preparation was configured on a resource, and the context, which currently only has\nthe actor.\n\nTo access any query arguments from within a preparation, make sure you are using `Ash.Query.get_argument/2`\nas the argument keys may be strings or atoms.","ref":"Ash.Resource.Preparation.html","title":"Ash.Resource.Preparation","type":"behaviour"},{"doc":"","ref":"Ash.Resource.Preparation.html#c:init/1","title":"Ash.Resource.Preparation.init/1","type":"callback"},{"doc":"","ref":"Ash.Resource.Preparation.html#c:prepare/3","title":"Ash.Resource.Preparation.prepare/3","type":"callback"},{"doc":"","ref":"Ash.Resource.Preparation.html#t:ref/0","title":"Ash.Resource.Preparation.ref/0","type":"type"},{"doc":"","ref":"Ash.Resource.Preparation.html#t:t/0","title":"Ash.Resource.Preparation.t/0","type":"type"},{"doc":"Builtin query preparations","ref":"Ash.Resource.Preparation.Builtins.html","title":"Ash.Resource.Preparation.Builtins","type":"module"},{"doc":"Directly attach an `after_action` function to the query.\n\nThis function will be called by `Ash.Query.after_action/2`,\nwith an additional `context` argument.","ref":"Ash.Resource.Preparation.Builtins.html#after_action/1","title":"Ash.Resource.Preparation.Builtins.after_action/1","type":"macro"},{"doc":"prepare after_action(fn query, records, _context ->\n      Logger.debug(\"Query for #{query.action.name} on resource #{inspect(query.resource)} returned #{length(records)} records\")\n\n      {:ok, records}\n    end)","ref":"Ash.Resource.Preparation.Builtins.html#after_action/1-example","title":"Example - Ash.Resource.Preparation.Builtins.after_action/1","type":"macro"},{"doc":"Directly attach a `before_action` function to the query.\n\nThis function will be called by `Ash.Query.before_action/2`,\nwith an additional `context` argument.","ref":"Ash.Resource.Preparation.Builtins.html#before_action/1","title":"Ash.Resource.Preparation.Builtins.before_action/1","type":"macro"},{"doc":"prepare before_action(fn query, _context ->\n      Logger.debug(\"About to execute query for #{query.action.name} on #{inspect(query.resource)}\")\n\n      query\n    end)","ref":"Ash.Resource.Preparation.Builtins.html#before_action/1-example","title":"Example - Ash.Resource.Preparation.Builtins.before_action/1","type":"macro"},{"doc":"Passes the given keyword list to `Ash.Query.build/2` with the query being prepared.\n\nThis allows declaring simple query modifications in-line.\n\nTo see the available options, see `Ash.Query.build/2`","ref":"Ash.Resource.Preparation.Builtins.html#build/1","title":"Ash.Resource.Preparation.Builtins.build/1","type":"function"},{"doc":"prepare build(sort: [song_rank: :desc], limit: 10)\n    prepare build(load: [:friends])","ref":"Ash.Resource.Preparation.Builtins.html#build/1-examples","title":"Examples - Ash.Resource.Preparation.Builtins.build/1","type":"function"},{"doc":"Merges the given query context.\n\nIf an MFA is provided, it will be called with the changeset.\nThe MFA should return `{:ok, context_to_be_merged}` or `{:error, term}`","ref":"Ash.Resource.Preparation.Builtins.html#set_context/1","title":"Ash.Resource.Preparation.Builtins.set_context/1","type":"function"},{"doc":"change set_context(%{something_used_internally: true})\n    change set_context({MyApp.Context, :set_context, []})","ref":"Ash.Resource.Preparation.Builtins.html#set_context/1-examples","title":"Examples - Ash.Resource.Preparation.Builtins.set_context/1","type":"function"},{"doc":"The behaviour for an action-specific resource change.\n\n`c:init/1` is defined automatically by `use Ash.Resource.Change`, but can be implemented if you want to validate/transform any\noptions passed to the module.\n\nThe main function is `c:change/3`. It takes the changeset, any options that were provided\nwhen this change was configured on a resource, and the context, which currently only has\nthe actor.","ref":"Ash.Resource.Change.html","title":"Ash.Resource.Change","type":"behaviour"},{"doc":"Runs on each batch result after it is dispatched to the data layer.","ref":"Ash.Resource.Change.html#c:after_batch/3","title":"Ash.Resource.Change.after_batch/3","type":"callback"},{"doc":"","ref":"Ash.Resource.Change.html#c:atomic/3","title":"Ash.Resource.Change.atomic/3","type":"callback"},{"doc":"","ref":"Ash.Resource.Change.html#c:atomic?/0","title":"Ash.Resource.Change.atomic?/0","type":"callback"},{"doc":"Whether or not batch callbacks should be run (if they are defined). Defaults to `true`.","ref":"Ash.Resource.Change.html#c:batch_callbacks?/3","title":"Ash.Resource.Change.batch_callbacks?/3","type":"callback"},{"doc":"Replaces `change/3` for batch actions, allowing to optimize changes for bulk actions.\n\nYou can define only `batch_change/3`, and it will be used for both single and batch actions.\nIt cannot, however, be used in place of the `atomic/3` callback.","ref":"Ash.Resource.Change.html#c:batch_change/3","title":"Ash.Resource.Change.batch_change/3","type":"callback"},{"doc":"Runs on each batch before it is dispatched to the data layer.","ref":"Ash.Resource.Change.html#c:before_batch/3","title":"Ash.Resource.Change.before_batch/3","type":"callback"},{"doc":"","ref":"Ash.Resource.Change.html#c:change/3","title":"Ash.Resource.Change.change/3","type":"callback"},{"doc":"","ref":"Ash.Resource.Change.html#c:has_after_batch?/0","title":"Ash.Resource.Change.has_after_batch?/0","type":"callback"},{"doc":"","ref":"Ash.Resource.Change.html#c:has_batch_change?/0","title":"Ash.Resource.Change.has_batch_change?/0","type":"callback"},{"doc":"","ref":"Ash.Resource.Change.html#c:has_before_batch?/0","title":"Ash.Resource.Change.has_before_batch?/0","type":"callback"},{"doc":"","ref":"Ash.Resource.Change.html#c:has_change?/0","title":"Ash.Resource.Change.has_change?/0","type":"callback"},{"doc":"","ref":"Ash.Resource.Change.html#c:init/1","title":"Ash.Resource.Change.init/1","type":"callback"},{"doc":"","ref":"Ash.Resource.Change.html#t:context/0","title":"Ash.Resource.Change.context/0","type":"type"},{"doc":"","ref":"Ash.Resource.Change.html#t:ref/0","title":"Ash.Resource.Change.ref/0","type":"type"},{"doc":"","ref":"Ash.Resource.Change.html#t:t/0","title":"Ash.Resource.Change.t/0","type":"type"},{"doc":"Built in changes that are available to all resources\n\nThe functions in this module are imported by default in the actions section.","ref":"Ash.Resource.Change.Builtins.html","title":"Ash.Resource.Change.Builtins","type":"module"},{"doc":"Directly attach an `after_action` function to the current change.\n\nSee `Ash.Changeset.after_action/3` for more information.\n\nProvide the option `prepend?: true` to place the hook before all other hooks instead of after.","ref":"Ash.Resource.Change.Builtins.html#after_action/2","title":"Ash.Resource.Change.Builtins.after_action/2","type":"macro"},{"doc":"change after_action(fn changeset, record, _context ->\n      Logger.debug(\"Successfully executed action #{changeset.action.name} on #{inspect(changeset.resource)}\")\n      {:ok, record}\n    end)","ref":"Ash.Resource.Change.Builtins.html#after_action/2-example","title":"Example - Ash.Resource.Change.Builtins.after_action/2","type":"macro"},{"doc":"Directly attach an `after_transaction` function to the current change.\n\nSee `Ash.Changeset.after_transaction/3` for more information.\n\nProvide the option `prepend?: true` to place the hook before all other hooks instead of after.","ref":"Ash.Resource.Change.Builtins.html#after_transaction/2","title":"Ash.Resource.Change.Builtins.after_transaction/2","type":"macro"},{"doc":"change after_transaction(fn\n      changeset, {:ok, record}, _context ->\n        Logger.debug(\"Successfully executed transaction for action #{changeset.action.name} on #{inspect(changeset.resource)}\")\n        {:ok, record}\n      changeset, {:error, reason}, _context ->\n        Logger.debug(\"Failed to execute transaction for action #{changeset.action.name} on #{inspect(changeset.resource)}, reason: #{inspect(reason)}\")\n        {:error, reason}\n    end)","ref":"Ash.Resource.Change.Builtins.html#after_transaction/2-example","title":"Example - Ash.Resource.Change.Builtins.after_transaction/2","type":"macro"},{"doc":"Updates an attribute using an expression. See `Ash.Changeset.atomic_update/3` for more.\n\nOptions:\n\n* `:cast_atomic?` - set to `false` to ignore atomic type casting logic. Defaults to `true`.","ref":"Ash.Resource.Change.Builtins.html#atomic_update/3","title":"Ash.Resource.Change.Builtins.atomic_update/3","type":"function"},{"doc":"Directly attach a `before_action` function to the current change.\n\nSee `Ash.Changeset.before_action/3` for more information.\n\nProvide the option `append?: true` to place the hook after all other hooks instead of before.","ref":"Ash.Resource.Change.Builtins.html#before_action/2","title":"Ash.Resource.Change.Builtins.before_action/2","type":"macro"},{"doc":"change before_action(fn changeset, _context ->\n      Logger.debug(\"About to execute #{changeset.action.name} on #{inspect(changeset.resource)}\")\n\n      changeset\n    end)","ref":"Ash.Resource.Change.Builtins.html#before_action/2-example","title":"Example - Ash.Resource.Change.Builtins.before_action/2","type":"macro"},{"doc":"Directly attach a `before_transaction` function to the current change.\n\nSee `Ash.Changeset.before_transaction/3` for more information.\n\nProvide the option `append?: true` to place the hook after all other hooks instead of before.","ref":"Ash.Resource.Change.Builtins.html#before_transaction/2","title":"Ash.Resource.Change.Builtins.before_transaction/2","type":"macro"},{"doc":"change before_transaction(fn changeset, _context ->\n      Logger.debug(\"About to execute transaction for #{changeset.action.name} on #{inspect(changeset.resource)}\")\n\n      changeset\n    end)","ref":"Ash.Resource.Change.Builtins.html#before_transaction/2-example","title":"Example - Ash.Resource.Change.Builtins.before_transaction/2","type":"macro"},{"doc":"Cascade this resource's destroy action to a related resource's destroy action.\n\nAdds an after-action hook that explicitly calls destroy on any records related\nvia the named relationship.  It will optimise for bulk destroys where\npossible.\n\n> #### Beware database constraints {: .warning}\n>\n> Think carefully before using this change with data layers which enforce\n> referential integrity (ie PostgreSQL and SQLite) and you may need to defer\n> constraints for the relationship in question.\n>\n> See also:\n>   1. [`postgres.references.reference.deferrable` DSL](https://hexdocs.pm/ash_postgres/dsl-ashpostgres-datalayer.html#postgres-references-reference-deferrable)\n>   2. [`sqlite.references.reference.deferrable` DSL](https://hexdocs.pm/ash_sqlite/dsl-ashsqlite-datalayer.html#sqlite-references-reference-deferrable)\n>   3. [PostgreSQL's `SET CONSTRAINTS` documentation](https://www.postgresql.org/docs/current/sql-set-constraints.html)\n>   4. [SQLite's `PRAGMA defer_foreign_keys` documentation](https://www.sqlite.org/pragma.html#pragma_defer_foreign_keys)\n\n> #### Cascading notifications {: .tip}\n>\n> By default notifications are disabled for the related destroy. This is to avoid potentially sending a **lot** of notifications for high-cardinality relationships.","ref":"Ash.Resource.Change.Builtins.html#cascade_destroy/2","title":"Ash.Resource.Change.Builtins.cascade_destroy/2","type":"function"},{"doc":"* `:relationship` (`t:atom/0`) - Required. The name of the relationship to work on\n\n* `:action` (`t:atom/0`) - The name of the destroy action to call on the related resource. Uses the primary destroy by default.\n\n* `:read_action` (`t:atom/0`) - The name of the read action to call on the related resource to find results to be destroyed\n\n* `:return_notifications?` (`t:boolean/0`) - Return notifications for all destroyed records? The default value is `false`.\n\n* `:domain` (`Ash.Domain`) -","ref":"Ash.Resource.Change.Builtins.html#cascade_destroy/2-options","title":"Options - Ash.Resource.Change.Builtins.cascade_destroy/2","type":"function"},{"doc":"change cascade_destroy(:relationship)","ref":"Ash.Resource.Change.Builtins.html#cascade_destroy/2-example","title":"Example - Ash.Resource.Change.Builtins.cascade_destroy/2","type":"function"},{"doc":"Cascade a resource's update action to a related resource's update action.\n\n  Adds an after-action hook that explicitly calls update on any records related\n  via the named relationship.  It will optimise for bulk updates where\n  possible.\n\n  Allows you to copy fields from the arguments or changes to the destination,\n  this way you can cascade a bunch of changes downstream.\n\n> #### Beware database constraints {: .warning}\n>\n> Think carefully before using this change with data layers which enforce\n> referential integrity (ie PostgreSQL and SQLite) and you may need to defer\n> constraints for the relationship in question.\n>\n> See also:\n>   1. [`postgres.references.reference.deferrable` DSL](https://hexdocs.pm/ash_postgres/dsl-ashpostgres-datalayer.html#postgres-references-reference-deferrable)\n>   2. [`sqlite.references.reference.deferrable` DSL](https://hexdocs.pm/ash_sqlite/dsl-ashsqlite-datalayer.html#sqlite-references-reference-deferrable)\n>   3. [PostgreSQL's `SET CONSTRAINTS` documentation](https://www.postgresql.org/docs/current/sql-set-constraints.html)\n>   4. [SQLite's `PRAGMA defer_foreign_keys` documentation](https://www.sqlite.org/pragma.html#pragma_defer_foreign_keys)\n\n> #### Cascading notifications {: .tip}\n>\n> By default notifications are disabled for the related updates. This is to avoid potentially sending a **lot** of notifications for high-cardinality relationships.","ref":"Ash.Resource.Change.Builtins.html#cascade_update/2","title":"Ash.Resource.Change.Builtins.cascade_update/2","type":"function"},{"doc":"* `:relationship` (`t:atom/0`) - Required. The name of the relationship to work on\n\n* `:action` (`t:atom/0`) - The name of the update action to call on the related resource. Uses the primary update by default.\n\n* `:copy_inputs` (list of `t:atom/0`) - A list of fields to copy & pass on to the downstream update. The source action cannot be atomic. The default value is `[]`.\n\n* `:read_action` (`t:atom/0`) - The name of the read action to call on the related resource to find results to be updated\n\n* `:return_notifications?` (`t:boolean/0`) - Return notifications for all updated records? The default value is `false`.\n\n* `:domain` (`Ash.Domain`) -","ref":"Ash.Resource.Change.Builtins.html#cascade_update/2-options","title":"Options - Ash.Resource.Change.Builtins.cascade_update/2","type":"function"},{"doc":"change cascade_update(:relationship1)\n    change cascade_update(:relationship2, copy_inputs: [:field1, :field2])","ref":"Ash.Resource.Change.Builtins.html#cascade_update/2-example","title":"Example - Ash.Resource.Change.Builtins.cascade_update/2","type":"function"},{"doc":"","ref":"Ash.Resource.Change.Builtins.html#debug_log/1","title":"Ash.Resource.Change.Builtins.debug_log/1","type":"function"},{"doc":"Passes the provided value into `Ash.Changeset.ensure_selected/2`\n\nIf the value is not already selected, this makes sure it is. Does not deselect anything else.","ref":"Ash.Resource.Change.Builtins.html#ensure_selected/1","title":"Ash.Resource.Change.Builtins.ensure_selected/1","type":"function"},{"doc":"change ensure_selected([:necessary_field])","ref":"Ash.Resource.Change.Builtins.html#ensure_selected/1-example","title":"Example - Ash.Resource.Change.Builtins.ensure_selected/1","type":"function"},{"doc":"Applies a filter to the changeset. Has no effect for create actions.\n\nThis ensures that only things matching the provided filter are updated or destroyed.","ref":"Ash.Resource.Change.Builtins.html#filter/1","title":"Ash.Resource.Change.Builtins.filter/1","type":"function"},{"doc":"Re-fetches the record being updated and locks it with the given type.\n\nThis happens in a `before_action` hook (so that it is done as part of the transaction).\n\nIf your resource has global validations (in the top level `validations` block), you may\nwant to add `delay_global_validations? true` to your action to ensure they happen on the\nlocked record.","ref":"Ash.Resource.Change.Builtins.html#get_and_lock/1","title":"Ash.Resource.Change.Builtins.get_and_lock/1","type":"function"},{"doc":"Re-fetches the record being updated and locks it for update.\n\nOnly usable with data layers that support locking `:for_update`.\n\nThis happens in a `before_action` hook (so that it is done as part of the transaction).\n\nIf your resource has global validations (in the top level `validations` block), you may\nwant to add `delay_global_validations? true` to your action to ensure they happen on the\nlocked record.","ref":"Ash.Resource.Change.Builtins.html#get_and_lock_for_update/0","title":"Ash.Resource.Change.Builtins.get_and_lock_for_update/0","type":"function"},{"doc":"Increments an attribute's value by the amount specified, which defaults to 1.\n\nOptions:\n\n* `:amount` - Defaults to 1\n* `:overflow_limit` - Defaults to `nil`. If the value is over the overflow limit it will roll-over to the amount being incremented by (for common database limit support)","ref":"Ash.Resource.Change.Builtins.html#increment/2","title":"Ash.Resource.Change.Builtins.increment/2","type":"function"},{"doc":"Passes the provided value into `Ash.load` after the action has completed.","ref":"Ash.Resource.Change.Builtins.html#load/1","title":"Ash.Resource.Change.Builtins.load/1","type":"function"},{"doc":"change load(:comments)\n    change load([:friend_count, :friends])","ref":"Ash.Resource.Change.Builtins.html#load/1-example","title":"Example - Ash.Resource.Change.Builtins.load/1","type":"function"},{"doc":"Calls `Ash.Changeset.manage_relationship/4` with the changeset and relationship provided, using the value provided for the named argument.\n\nIf relationship_name is not specified, it is assumed to be the same as the argument.\n\nFor information on the available options, see `Ash.Changeset.manage_relationship/4`.","ref":"Ash.Resource.Change.Builtins.html#manage_relationship/3","title":"Ash.Resource.Change.Builtins.manage_relationship/3","type":"function"},{"doc":"change manage_relationship(:comments, type: :append)\n    change manage_relationship(:remove_comments, :comments, type: :remove)","ref":"Ash.Resource.Change.Builtins.html#manage_relationship/3-examples","title":"Examples - Ash.Resource.Change.Builtins.manage_relationship/3","type":"function"},{"doc":"Apply an \"optimistic lock\" on a record being updated or destroyed.\n\nSee `Ash.Resource.Change.OptimisticLock` for more.","ref":"Ash.Resource.Change.Builtins.html#optimistic_lock/1","title":"Ash.Resource.Change.Builtins.optimistic_lock/1","type":"function"},{"doc":"Clears a change off of the changeset before the action runs.\n\nDoes not fail if it is being changed, but ensures it is cleared just before the action.\n\nCan be useful if a change is only used in validations but shouldn't ultimately be written to the data layer.","ref":"Ash.Resource.Change.Builtins.html#prevent_change/1","title":"Ash.Resource.Change.Builtins.prevent_change/1","type":"function"},{"doc":"change prevent_change(:email)","ref":"Ash.Resource.Change.Builtins.html#prevent_change/1-examples","title":"Examples - Ash.Resource.Change.Builtins.prevent_change/1","type":"function"},{"doc":"Relates the actor to the data being changed, as the provided relationship.","ref":"Ash.Resource.Change.Builtins.html#relate_actor/2","title":"Ash.Resource.Change.Builtins.relate_actor/2","type":"function"},{"doc":"* `:allow_nil?` (`t:boolean/0`) - Whether or not to allow the actor to be nil, in which case nothing will happen. The default value is `false`.\n\n* `:field` (`t:atom/0`) - The field of the actor to set the relationship to","ref":"Ash.Resource.Change.Builtins.html#relate_actor/2-options","title":"Options - Ash.Resource.Change.Builtins.relate_actor/2","type":"function"},{"doc":"change relate_actor(:owner, allow_nil?: true)","ref":"Ash.Resource.Change.Builtins.html#relate_actor/2-examples","title":"Examples - Ash.Resource.Change.Builtins.relate_actor/2","type":"function"},{"doc":"Passes the provided value into `Ash.Changeset.select/3`\n\nKeep in mind, this will *limit* the fields that are selected. You may want `ensure_selected/1` if you\nwant to make sure that something is selected, without deselecting anything else.\n\nSelecting in changesets does not actually do a select in the data layer. It nils out any\nfields that were not selected after completing the action. This can be useful if you are writing\npolicies that have to do with specific fields being selected.","ref":"Ash.Resource.Change.Builtins.html#select/1","title":"Ash.Resource.Change.Builtins.select/1","type":"function"},{"doc":"change select([:name])","ref":"Ash.Resource.Change.Builtins.html#select/1-example","title":"Example - Ash.Resource.Change.Builtins.select/1","type":"function"},{"doc":"Sets the attribute to the value provided.\n\nIf a zero argument function is provided, it is called to determine the value.\n\nUse `arg(:argument_name)` to use the value of the given argument. If the argument is not supplied then nothing happens.","ref":"Ash.Resource.Change.Builtins.html#set_attribute/3","title":"Ash.Resource.Change.Builtins.set_attribute/3","type":"function"},{"doc":"* `:set_when_nil?` (`t:boolean/0`) - When false, decline setting the attribute if it is nil. The default value is `true`.\n\n* `:new?` (`t:boolean/0`) - When true, sets the attribute to the value provided if the attribute is not already being changed. The default value is `false`.","ref":"Ash.Resource.Change.Builtins.html#set_attribute/3-options","title":"Options - Ash.Resource.Change.Builtins.set_attribute/3","type":"function"},{"doc":"change set_attribute(:active, false)\n    change set_attribute(:opened_at, &DateTime.utc_now/0)\n    change set_attribute(:status, arg(:status))\n    change set_attribute(:encrypted_data, arg(:data), set_when_nil?: false)","ref":"Ash.Resource.Change.Builtins.html#set_attribute/3-examples","title":"Examples - Ash.Resource.Change.Builtins.set_attribute/3","type":"function"},{"doc":"Merges the given query context.\n\nIf an MFA is provided, it will be called with the changeset.\nThe MFA should return `{:ok, context_to_be_merged}` or `{:error, term}`","ref":"Ash.Resource.Change.Builtins.html#set_context/1","title":"Ash.Resource.Change.Builtins.set_context/1","type":"function"},{"doc":"change set_context(%{something_used_internally: true})\n    change set_context({MyApp.Context, :set_context, []})","ref":"Ash.Resource.Change.Builtins.html#set_context/1-examples","title":"Examples - Ash.Resource.Change.Builtins.set_context/1","type":"function"},{"doc":"Sets the attribute to the value provided if the attribute is not already being changed.\n\nIf a zero argument function is provided, it is called to determine the value.\n\nUse `arg(:argument_name)` to use the value of the given argument. If the argument is not supplied then nothing happens.","ref":"Ash.Resource.Change.Builtins.html#set_new_attribute/2","title":"Ash.Resource.Change.Builtins.set_new_attribute/2","type":"function"},{"doc":"change set_new_attribute(:active, false)\n    change set_new_attribute(:opened_at, &DateTime.utc_now/0)\n    change set_new_attribute(:status, arg(:status))","ref":"Ash.Resource.Change.Builtins.html#set_new_attribute/2-examples","title":"Examples - Ash.Resource.Change.Builtins.set_new_attribute/2","type":"function"},{"doc":"Updates an existing attribute change by applying a function to it.\n\nThe update function gets called with the value already cast to the correct type, and only gets called\non valid changesets, so the value is guaranteed to have passed validations and constraints.","ref":"Ash.Resource.Change.Builtins.html#update_change/2","title":"Ash.Resource.Change.Builtins.update_change/2","type":"macro"},{"doc":"Represents a validation in Ash.\n\nSee `Ash.Resource.Validation.Builtins` for a list of builtin validations.\n\nTo write your own validation, define a module that implements the `c:init/1` callback\nto validate options at compile time, and `c:validate/3` callback to do the validation.\n\nThen, in a resource, you can say:\n\n```\nvalidations do\n  validate {MyValidation, [foo: :bar]}\nend\n```","ref":"Ash.Resource.Validation.html","title":"Ash.Resource.Validation","type":"behaviour"},{"doc":"","ref":"Ash.Resource.Validation.html#action_schema/0","title":"Ash.Resource.Validation.action_schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Validation.html#c:atomic/3","title":"Ash.Resource.Validation.atomic/3","type":"callback"},{"doc":"","ref":"Ash.Resource.Validation.html#c:atomic?/0","title":"Ash.Resource.Validation.atomic?/0","type":"callback"},{"doc":"","ref":"Ash.Resource.Validation.html#c:describe/1","title":"Ash.Resource.Validation.describe/1","type":"callback"},{"doc":"","ref":"Ash.Resource.Validation.html#c:has_validate?/0","title":"Ash.Resource.Validation.has_validate?/0","type":"callback"},{"doc":"","ref":"Ash.Resource.Validation.html#c:init/1","title":"Ash.Resource.Validation.init/1","type":"callback"},{"doc":"","ref":"Ash.Resource.Validation.html#opt_schema/0","title":"Ash.Resource.Validation.opt_schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Validation.html#c:validate/3","title":"Ash.Resource.Validation.validate/3","type":"callback"},{"doc":"","ref":"Ash.Resource.Validation.html#validation_type/0","title":"Ash.Resource.Validation.validation_type/0","type":"function"},{"doc":"","ref":"Ash.Resource.Validation.html#t:path/0","title":"Ash.Resource.Validation.path/0","type":"type"},{"doc":"","ref":"Ash.Resource.Validation.html#t:ref/0","title":"Ash.Resource.Validation.ref/0","type":"type"},{"doc":"","ref":"Ash.Resource.Validation.html#t:t/0","title":"Ash.Resource.Validation.t/0","type":"type"},{"doc":"Built in validations that are available to all resources\n\nThe functions in this module are imported by default in the validations section.","ref":"Ash.Resource.Validation.Builtins.html","title":"Ash.Resource.Validation.Builtins","type":"module"},{"doc":"Validates the absence of a list of attributes or arguments.\n\nIf no options are provided, validates that they are all absent.\n\nThis works by changing your options and providing them to the `present` validation.","ref":"Ash.Resource.Validation.Builtins.html#absent/2","title":"Ash.Resource.Validation.Builtins.absent/2","type":"function"},{"doc":"* `:at_least` (`t:non_neg_integer/0`) - At least this many must be absent. Defaults to the number of attributes provided\n\n* `:at_most` (`t:non_neg_integer/0`) - At most this many must be absent. Defaults to the number of attributes provided\n\n* `:exactly` (`t:non_neg_integer/0`) - Exactly this many must be absent","ref":"Ash.Resource.Validation.Builtins.html#absent/2-options","title":"Options - Ash.Resource.Validation.Builtins.absent/2","type":"function"},{"doc":"Validates that the action is a specific action. Primarily meant for use in `where`.","ref":"Ash.Resource.Validation.Builtins.html#action_is/1","title":"Ash.Resource.Validation.Builtins.action_is/1","type":"function"},{"doc":"validate present(:foo), where: [action_is(:bar)]","ref":"Ash.Resource.Validation.Builtins.html#action_is/1-examples","title":"Examples - Ash.Resource.Validation.Builtins.action_is/1","type":"function"},{"doc":"Validates that an argument is not being changed to a specific value, or does not equal the given value if it is not being changed.","ref":"Ash.Resource.Validation.Builtins.html#argument_does_not_equal/2","title":"Ash.Resource.Validation.Builtins.argument_does_not_equal/2","type":"function"},{"doc":"validate argument_does_not_equal(:admin, true)\n\n    # Or to only check for changing to a given value\n    validate argument_does_not_equal(:admin, true), where: [changing(:admin)]","ref":"Ash.Resource.Validation.Builtins.html#argument_does_not_equal/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.argument_does_not_equal/2","type":"function"},{"doc":"Validates that an argument is being changed to a specific value, or equals the given value if it is not being changed.","ref":"Ash.Resource.Validation.Builtins.html#argument_equals/2","title":"Ash.Resource.Validation.Builtins.argument_equals/2","type":"function"},{"doc":"validate argument_equals(:admin, true)\n\n    # Or to only check for changing to a given value\n    validate argument_equals(:admin, true), where: [changing(:admin)]","ref":"Ash.Resource.Validation.Builtins.html#argument_equals/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.argument_equals/2","type":"function"},{"doc":"Validates that an argument is being changed to one of a set of specific values, or is in the the given list if it is not being changed.","ref":"Ash.Resource.Validation.Builtins.html#argument_in/2","title":"Ash.Resource.Validation.Builtins.argument_in/2","type":"function"},{"doc":"validate argument_in(:state, [1, 2, 3])\n\n    # Or to only check for changing to a something in a given list\n    validate argument_in(:state, [1, 2, 3]), where: [changing(:state)]","ref":"Ash.Resource.Validation.Builtins.html#argument_in/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.argument_in/2","type":"function"},{"doc":"Validates that an attribute is not being changed to a specific value, or does not equal the given value if it is not being changed.","ref":"Ash.Resource.Validation.Builtins.html#attribute_does_not_equal/2","title":"Ash.Resource.Validation.Builtins.attribute_does_not_equal/2","type":"function"},{"doc":"validate attribute_does_not_equal(:admin, true)\n\n    # Or to only check for changing to a given value\n    validate attribute_does_not_equal(:admin, true), where: [changing(:admin)]","ref":"Ash.Resource.Validation.Builtins.html#attribute_does_not_equal/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.attribute_does_not_equal/2","type":"function"},{"doc":"Validates that an attribute is being changed to a specific value, or equals the given value if it is not being changed.","ref":"Ash.Resource.Validation.Builtins.html#attribute_equals/2","title":"Ash.Resource.Validation.Builtins.attribute_equals/2","type":"function"},{"doc":"validate attribute_equals(:admin, true)\n\n    # Or to only check for changing to a given value\n    validate attribute_equals(:admin, true), where: [changing(:admin)]","ref":"Ash.Resource.Validation.Builtins.html#attribute_equals/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.attribute_equals/2","type":"function"},{"doc":"Validates that an attribute is being changed to one of a set of specific values, or is in the the given list if it is not being changed.","ref":"Ash.Resource.Validation.Builtins.html#attribute_in/2","title":"Ash.Resource.Validation.Builtins.attribute_in/2","type":"function"},{"doc":"validate attribute_in(:state, [1, 2, 3])\n\n    # Or to only check for changing to a something in a given list\n    validate attribute_in(:state, [1, 2, 3]), where: [changing(:state)]","ref":"Ash.Resource.Validation.Builtins.html#attribute_in/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.attribute_in/2","type":"function"},{"doc":"Validates the absence of a list of attributes.\n\nIf no options are provided, validates that they are all absent.\n\nThis works by changing your options and providing them to the `present` validation.","ref":"Ash.Resource.Validation.Builtins.html#attributes_absent/2","title":"Ash.Resource.Validation.Builtins.attributes_absent/2","type":"function"},{"doc":"* `:at_least` (`t:non_neg_integer/0`) - At least this many must be absent. Defaults to the number of attributes provided\n\n* `:at_most` (`t:non_neg_integer/0`) - At most this many must be absent. Defaults to the number of attributes provided\n\n* `:exactly` (`t:non_neg_integer/0`) - Exactly this many must be absent","ref":"Ash.Resource.Validation.Builtins.html#attributes_absent/2-options","title":"Options - Ash.Resource.Validation.Builtins.attributes_absent/2","type":"function"},{"doc":"Validates the presence of a list of attributes.\n\nIf no options are provided, validates that they are all present.","ref":"Ash.Resource.Validation.Builtins.html#attributes_present/2","title":"Ash.Resource.Validation.Builtins.attributes_present/2","type":"function"},{"doc":"* `:at_least` (`t:non_neg_integer/0`) - At least this many must be present. Defaults to the number of attributes provided\n\n* `:at_most` (`t:non_neg_integer/0`) - At most this many must be present. Defaults to the number of attributes provided\n\n* `:exactly` (`t:non_neg_integer/0`) - Exactly this many must be present","ref":"Ash.Resource.Validation.Builtins.html#attributes_present/2-options","title":"Options - Ash.Resource.Validation.Builtins.attributes_present/2","type":"function"},{"doc":"Validates that an attribute or relationship is being changed","ref":"Ash.Resource.Validation.Builtins.html#changing/1","title":"Ash.Resource.Validation.Builtins.changing/1","type":"function"},{"doc":"validate changing(:first_name)\n    validate changing(:comments)","ref":"Ash.Resource.Validation.Builtins.html#changing/1-examples","title":"Examples - Ash.Resource.Validation.Builtins.changing/1","type":"function"},{"doc":"Validates that an attribute or argument meets the given comparison criteria.\n\nThe values provided for each option may be a literal value, attribute, argument, or a zero argument function.","ref":"Ash.Resource.Validation.Builtins.html#compare/2","title":"Ash.Resource.Validation.Builtins.compare/2","type":"function"},{"doc":"* `:greater_than` - The value that the attribute should be greater than.\n\n* `:greater_than_or_equal_to` - The value that the attribute should be greater than or equal to\n\n* `:less_than` - The value that the attribute should be less than\n\n* `:less_than_or_equal_to` - The value that the attribute should be less than or equal to","ref":"Ash.Resource.Validation.Builtins.html#compare/2-options","title":"Options - Ash.Resource.Validation.Builtins.compare/2","type":"function"},{"doc":"validate compare(:age, greater_than_or_equal_to: 18),\n      where: [attribute_equals(:show_adult_content, true)],\n      message: \"must be over %{greater_than_or_equal_to} to enable adult content.\"\n\n    validate compare(:points, greater_than: 0, less_than_or_equal_to: 100)","ref":"Ash.Resource.Validation.Builtins.html#compare/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.compare/2","type":"function"},{"doc":"Validates that a field or argument matches another field or argument","ref":"Ash.Resource.Validation.Builtins.html#confirm/2","title":"Ash.Resource.Validation.Builtins.confirm/2","type":"function"},{"doc":"validate confirm(:password, :password_confirmation)\n    validate confirm(:email, :email_confirmation)","ref":"Ash.Resource.Validation.Builtins.html#confirm/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.confirm/2","type":"function"},{"doc":"Validates that an attribute's value matches a given regex.\n\n`String.match?/2` is used to determine if the value matches.","ref":"Ash.Resource.Validation.Builtins.html#match/2","title":"Ash.Resource.Validation.Builtins.match/2","type":"function"},{"doc":"validate match(:slug, ~r/^[0-9a-z-_]+$/)","ref":"Ash.Resource.Validation.Builtins.html#match/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.match/2","type":"function"},{"doc":"Validates that other validation does not pass","ref":"Ash.Resource.Validation.Builtins.html#negate/1","title":"Ash.Resource.Validation.Builtins.negate/1","type":"function"},{"doc":"validate negate(one_of(:status, [:closed, :finished]))","ref":"Ash.Resource.Validation.Builtins.html#negate/1-examples","title":"Examples - Ash.Resource.Validation.Builtins.negate/1","type":"function"},{"doc":"Validates that an attribute or argument meets the given comparison criteria.\n\nThe values provided for each option may be a literal value, attribute, argument, or a zero argument function.","ref":"Ash.Resource.Validation.Builtins.html#numericality/2","title":"Ash.Resource.Validation.Builtins.numericality/2","type":"function"},{"doc":"* `:greater_than` - The value that the attribute should be greater than.\n\n* `:greater_than_or_equal_to` - The value that the attribute should be greater than or equal to\n\n* `:less_than` - The value that the attribute should be less than\n\n* `:less_than_or_equal_to` - The value that the attribute should be less than or equal to","ref":"Ash.Resource.Validation.Builtins.html#numericality/2-options","title":"Options - Ash.Resource.Validation.Builtins.numericality/2","type":"function"},{"doc":"validate numericality(:age, greater_than_or_equal_to: 18),\n      where: [attribute_equals(:show_adult_content, true)],\n      message: \"must be over %{greater_than_or_equal_to} to enable adult content.\"\n\n    validate numericality(:points, greater_than: 0, less_than_or_equal_to: 100)","ref":"Ash.Resource.Validation.Builtins.html#numericality/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.numericality/2","type":"function"},{"doc":"Validates that an attribute's value is in a given list","ref":"Ash.Resource.Validation.Builtins.html#one_of/2","title":"Ash.Resource.Validation.Builtins.one_of/2","type":"function"},{"doc":"validate one_of(:status, [:closed_won, :closed_lost])","ref":"Ash.Resource.Validation.Builtins.html#one_of/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.one_of/2","type":"function"},{"doc":"Validates the presence of a list of attributes or arguments.\n\nIf no options are provided, validates that they are all present.","ref":"Ash.Resource.Validation.Builtins.html#present/2","title":"Ash.Resource.Validation.Builtins.present/2","type":"function"},{"doc":"* `:at_least` (`t:non_neg_integer/0`) - At least this many must be present. Defaults to the number of attributes provided\n\n* `:at_most` (`t:non_neg_integer/0`) - At most this many must be present. Defaults to the number of attributes provided\n\n* `:exactly` (`t:non_neg_integer/0`) - Exactly this many must be present","ref":"Ash.Resource.Validation.Builtins.html#present/2-options","title":"Options - Ash.Resource.Validation.Builtins.present/2","type":"function"},{"doc":"Validates that an attribute on the original record meets the given length criteria","ref":"Ash.Resource.Validation.Builtins.html#string_length/2","title":"Ash.Resource.Validation.Builtins.string_length/2","type":"function"},{"doc":"* `:min` (`t:non_neg_integer/0`) - String must be this length at least\n\n* `:max` (`t:non_neg_integer/0`) - String must be this length at most\n\n* `:exact` (`t:non_neg_integer/0`) - String must be this length exactly","ref":"Ash.Resource.Validation.Builtins.html#string_length/2-options","title":"Options - Ash.Resource.Validation.Builtins.string_length/2","type":"function"},{"doc":"validate string_length(:slug, exactly: 8)\n    validate string_length(:password, min: 6)\n    validate string_length(:secret, min: 4, max: 12)","ref":"Ash.Resource.Validation.Builtins.html#string_length/2-examples","title":"Examples - Ash.Resource.Validation.Builtins.string_length/2","type":"function"},{"doc":"The interface for an ash authorizer\n\nThese will typically be implemented by an extension, but a custom\none can be implemented by defining an extension that also adopts this behaviour.\n\nThen you can extend a resource with `authorizers: [YourAuthorizer]`","ref":"Ash.Authorizer.html","title":"Ash.Authorizer","type":"behaviour"},{"doc":"","ref":"Ash.Authorizer.html#c:add_calculations/3","title":"Ash.Authorizer.add_calculations/3","type":"callback"},{"doc":"","ref":"Ash.Authorizer.html#add_calculations/4","title":"Ash.Authorizer.add_calculations/4","type":"function"},{"doc":"","ref":"Ash.Authorizer.html#c:alter_filter/3","title":"Ash.Authorizer.alter_filter/3","type":"callback"},{"doc":"","ref":"Ash.Authorizer.html#alter_filter/4","title":"Ash.Authorizer.alter_filter/4","type":"function"},{"doc":"","ref":"Ash.Authorizer.html#c:alter_results/3","title":"Ash.Authorizer.alter_results/3","type":"callback"},{"doc":"","ref":"Ash.Authorizer.html#alter_results/4","title":"Ash.Authorizer.alter_results/4","type":"function"},{"doc":"","ref":"Ash.Authorizer.html#alter_sort/4","title":"Ash.Authorizer.alter_sort/4","type":"function"},{"doc":"","ref":"Ash.Authorizer.html#c:check/2","title":"Ash.Authorizer.check/2","type":"callback"},{"doc":"","ref":"Ash.Authorizer.html#check/3","title":"Ash.Authorizer.check/3","type":"function"},{"doc":"","ref":"Ash.Authorizer.html#c:check_context/1","title":"Ash.Authorizer.check_context/1","type":"callback"},{"doc":"","ref":"Ash.Authorizer.html#check_context/2","title":"Ash.Authorizer.check_context/2","type":"function"},{"doc":"","ref":"Ash.Authorizer.html#c:exception/2","title":"Ash.Authorizer.exception/2","type":"callback"},{"doc":"","ref":"Ash.Authorizer.html#exception/3","title":"Ash.Authorizer.exception/3","type":"function"},{"doc":"","ref":"Ash.Authorizer.html#c:initial_state/4","title":"Ash.Authorizer.initial_state/4","type":"callback"},{"doc":"","ref":"Ash.Authorizer.html#initial_state/5","title":"Ash.Authorizer.initial_state/5","type":"function"},{"doc":"","ref":"Ash.Authorizer.html#c:strict_check/2","title":"Ash.Authorizer.strict_check/2","type":"callback"},{"doc":"","ref":"Ash.Authorizer.html#strict_check/3","title":"Ash.Authorizer.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Authorizer.html#c:strict_check_context/1","title":"Ash.Authorizer.strict_check_context/1","type":"callback"},{"doc":"","ref":"Ash.Authorizer.html#strict_check_context/2","title":"Ash.Authorizer.strict_check_context/2","type":"function"},{"doc":"","ref":"Ash.Authorizer.html#t:context/0","title":"Ash.Authorizer.context/0","type":"type"},{"doc":"","ref":"Ash.Authorizer.html#t:state/0","title":"Ash.Authorizer.state/0","type":"type"},{"doc":"A behaviour for declaring checks, which can be used to easily construct\nauthorization rules.\n\nIf a check can be expressed simply, i.e as a function of the actor, or the context of the request,\nsee `Ash.Policy.SimpleCheck` for an easy way to write that check.\nIf a check can be expressed with a filter statement, see `Ash.Policy.FilterCheck`\nfor an easy way to write that check.","ref":"Ash.Policy.Check.html","title":"Ash.Policy.Check","type":"behaviour"},{"doc":"An optional callback, that allows the check to work with policies set to `access_type :filter`\n\nReturn a keyword list filter that will be applied to the query being made, and will scope the results to match the rule","ref":"Ash.Policy.Check.html#c:auto_filter/3","title":"Ash.Policy.Check.auto_filter/3","type":"callback"},{"doc":"An optional callback, hat allows the check to work with policies set to `access_type :runtime`\n\nTakes a list of records, and returns the subset of authorized records.","ref":"Ash.Policy.Check.html#c:check/4","title":"Ash.Policy.Check.check/4","type":"callback"},{"doc":"","ref":"Ash.Policy.Check.html#defines_auto_filter?/1","title":"Ash.Policy.Check.defines_auto_filter?/1","type":"function"},{"doc":"","ref":"Ash.Policy.Check.html#defines_check?/1","title":"Ash.Policy.Check.defines_check?/1","type":"function"},{"doc":"Describe the check in human readable format, given the options","ref":"Ash.Policy.Check.html#c:describe/1","title":"Ash.Policy.Check.describe/1","type":"callback"},{"doc":"Expands the description of the check, given the actor and subject","ref":"Ash.Policy.Check.html#c:expand_description/3","title":"Ash.Policy.Check.expand_description/3","type":"callback"},{"doc":"Whether or not the expanded description should replace the basic description in breakdowns","ref":"Ash.Policy.Check.html#c:prefer_expanded_description?/0","title":"Ash.Policy.Check.prefer_expanded_description?/0","type":"callback"},{"doc":"Whether or not your check requires the original data of a changeset (if applicable)","ref":"Ash.Policy.Check.html#c:requires_original_data?/2","title":"Ash.Policy.Check.requires_original_data?/2","type":"callback"},{"doc":"Strict checks should be cheap, and should never result in external calls (like database or domain)\n\nIt should return `{:ok, true}` if it can tell that the request is authorized, and `{:ok, false}` if\nit can tell that it is not. If unsure, it should return `{:ok, :unknown}`","ref":"Ash.Policy.Check.html#c:strict_check/3","title":"Ash.Policy.Check.strict_check/3","type":"callback"},{"doc":"The type of the check\n\n`:manual` checks must be written by hand as standard check modules\n`:filter` checks can use `Ash.Policy.FilterCheck` for simplicity\n`:simple` checks can use `Ash.Policy.SimpleCheck` for simplicity","ref":"Ash.Policy.Check.html#c:type/0","title":"Ash.Policy.Check.type/0","type":"callback"},{"doc":"","ref":"Ash.Policy.Check.html#t:actor/0","title":"Ash.Policy.Check.actor/0","type":"type"},{"doc":"","ref":"Ash.Policy.Check.html#t:authorizer/0","title":"Ash.Policy.Check.authorizer/0","type":"type"},{"doc":"","ref":"Ash.Policy.Check.html#t:check_type/0","title":"Ash.Policy.Check.check_type/0","type":"type"},{"doc":"","ref":"Ash.Policy.Check.html#t:options/0","title":"Ash.Policy.Check.options/0","type":"type"},{"doc":"","ref":"Ash.Policy.Check.html#t:ref/0","title":"Ash.Policy.Check.ref/0","type":"type"},{"doc":"","ref":"Ash.Policy.Check.html#t:t/0","title":"Ash.Policy.Check.t/0","type":"type"},{"doc":"A type of check that is represented by a filter statement\n\nThat filter statement can be templated, currently only supporting `{:_actor, field}`\nwhich will replace that portion of the filter with the appropriate field value from the actor and\n`{:_actor, :_primary_key}` which will replace the value with a keyword list of the primary key\nfields of an actor to their values, like `[id: 1]`. If the actor is not present `{:_actor, field}`\nbecomes `nil`, and `{:_actor, :_primary_key}` becomes `false`.\n\nYou can customize what the \"negative\" filter looks like by defining `c:reject/3`. This is important for\nfilters over related data. For example, given an `owner` relationship and a data layer like `ash_postgres`\nwhere `column != NULL` does *not* evaluate to true (see postgres docs on NULL for more):\n\n    # The opposite of\n    `owner.id == 1`\n    # in most cases is not\n    `not(owner.id == 1)`\n    # because in postgres that would be `NOT (owner.id = NULL)` in cases where there was no owner\n    # A better opposite would be\n    `owner.id != 1 or is_nil(owner.id)`\n    # alternatively\n    `not(owner.id == 1) or is_nil(owner.id)`\n\nBy being able to customize the `reject` filter, you can use related filters in your policies. Without it,\nthey will likely have undesired effects.","ref":"Ash.Policy.FilterCheck.html","title":"Ash.Policy.FilterCheck","type":"behaviour"},{"doc":"","ref":"Ash.Policy.FilterCheck.html#c:filter/3","title":"Ash.Policy.FilterCheck.filter/3","type":"callback"},{"doc":"","ref":"Ash.Policy.FilterCheck.html#is_filter_check?/1","title":"Ash.Policy.FilterCheck.is_filter_check?/1","type":"function"},{"doc":"","ref":"Ash.Policy.FilterCheck.html#c:reject/3","title":"Ash.Policy.FilterCheck.reject/3","type":"callback"},{"doc":"","ref":"Ash.Policy.FilterCheck.html#t:context/0","title":"Ash.Policy.FilterCheck.context/0","type":"type"},{"doc":"","ref":"Ash.Policy.FilterCheck.html#t:options/0","title":"Ash.Policy.FilterCheck.options/0","type":"type"},{"doc":"A type of check that operates only on request context, never on the data\n\nDefine `c:match?/3`, which gets the actor, request context, and opts, and returns true or false","ref":"Ash.Policy.SimpleCheck.html","title":"Ash.Policy.SimpleCheck","type":"behaviour"},{"doc":"Whether or not the request matches the check","ref":"Ash.Policy.SimpleCheck.html#c:match?/3","title":"Ash.Policy.SimpleCheck.match?/3","type":"callback"},{"doc":"","ref":"Ash.Policy.SimpleCheck.html#t:actor/0","title":"Ash.Policy.SimpleCheck.actor/0","type":"type"},{"doc":"","ref":"Ash.Policy.SimpleCheck.html#t:context/0","title":"Ash.Policy.SimpleCheck.context/0","type":"type"},{"doc":"","ref":"Ash.Policy.SimpleCheck.html#t:options/0","title":"Ash.Policy.SimpleCheck.options/0","type":"type"},{"doc":"The global authorization checks built into ash","ref":"Ash.Policy.Check.Builtins.html","title":"Ash.Policy.Check.Builtins","type":"module"},{"doc":"This check is true when the current action is being run \"through\" a relationship.\n\nCases where this happens:\n\n1. Loading related data\n2. Managing relationships\n3. Aggregating data\n4. Filtering on relationships","ref":"Ash.Policy.Check.Builtins.html#accessing_from/2","title":"Ash.Policy.Check.Builtins.accessing_from/2","type":"function"},{"doc":"This check is true when the action name matches the provided action name or names.\n\nThis is a very common pattern, allowing action-specific policies.","ref":"Ash.Policy.Check.Builtins.html#action/1","title":"Ash.Policy.Check.Builtins.action/1","type":"function"},{"doc":"This check is true when the action type matches the provided type\n\nThis is useful for writing policies that apply to all actions of a given type.\n\nFor example:\n\n```elixir\npolicy action_type(:read) do\n  authorize_if relates_to_actor_via(:owner)\nend\n```","ref":"Ash.Policy.Check.Builtins.html#action_type/1","title":"Ash.Policy.Check.Builtins.action_type/1","type":"function"},{"doc":"This check is true when the value of the specified attribute of the actor equals the specified value.\n\nThis check will *never* pass if the actor does not have the specified key. For example,\n`actor_attribute_equals(:missing_key, nil)`","ref":"Ash.Policy.Check.Builtins.html#actor_attribute_equals/2","title":"Ash.Policy.Check.Builtins.actor_attribute_equals/2","type":"function"},{"doc":"This check is true when there is an actor specified, and false when the actor is `nil`.","ref":"Ash.Policy.Check.Builtins.html#actor_present/0","title":"Ash.Policy.Check.Builtins.actor_present/0","type":"function"},{"doc":"This check always passes.\n\nCan be useful for \"deny-list\" style authorization. For example:\n\n```elixir\npolicy action_type(:read) do\n  forbid_if actor_attribute_equals(:disabled, true)\n  forbid_if actor_attribute_equals(:active, false)\n  authorize_if always()\nend\n```\n\nWithout that last clause, the policy would never pass.","ref":"Ash.Policy.Check.Builtins.html#always/0","title":"Ash.Policy.Check.Builtins.always/0","type":"function"},{"doc":"This check is true when attribute changes correspond to the provided options.\n\nProvide a keyword list of options or just an atom representing the attribute.\n\nFor example:\n\n```elixir\n# if you are changing both first name and last name\nchanging_attributes([:first_name, :last_name])\n\n# if you are changing first name to fred\nchanging_attributes(first_name: [to: \"fred\"])\n\n# if you are changing last name from bob\nchanging_attributes(last_name: [from: \"bob\"])\n\n# if you are changing :first_name at all, last_name from \"bob\" and middle name from \"tom\" to \"george\"\nchanging_attributes([:first_name, last_name: [from: \"bob\"], middle_name: [from: \"tom\", to: \"george]])\n```","ref":"Ash.Policy.Check.Builtins.html#changing_attributes/1","title":"Ash.Policy.Check.Builtins.changing_attributes/1","type":"function"},{"doc":"This check is true when the specified relationship is changing","ref":"Ash.Policy.Check.Builtins.html#changing_relationship/1","title":"Ash.Policy.Check.Builtins.changing_relationship/1","type":"function"},{"doc":"This check is true when the specified relationships are changing","ref":"Ash.Policy.Check.Builtins.html#changing_relationships/1","title":"Ash.Policy.Check.Builtins.changing_relationships/1","type":"function"},{"doc":"This check is true when the value of the specified key or path in the changeset or query context equals the specified value.","ref":"Ash.Policy.Check.Builtins.html#context_equals/2","title":"Ash.Policy.Check.Builtins.context_equals/2","type":"function"},{"doc":"This check is true when the field provided is being referenced anywhere in a filter statement.\n\nThis applies to related filters as well. For example:\n\n```elixir\npolicy actor_attribute_equals(:is_admin, false) do\n  forbid_if filtering_on(:email)\n  # a path can be provided as well\n  forbid_if filtering_on([:owner], :email)\nend\n```\n\nThe first will return true in situations like:\n\n```elixir\nAsh.Query.filter(User, email == \"blah\")\nAsh.Query.filter(Tweet, author.email == \"blah\")\n```\n\nThe second will return true on queries like:\n\n```elixir\nAsh.Query.filter(Post, owner.email == \"blah\")\nAsh.Query.filter(Comment, post.owner.email == \"blah\")\n```","ref":"Ash.Policy.Check.Builtins.html#filtering_on/2","title":"Ash.Policy.Check.Builtins.filtering_on/2","type":"function"},{"doc":"This check is true when the field or relationship, or path to field, is being loaded and false when it is not.\n\nThis is always false for `create`/`update`/`destroy` actions, because you cannot load fields on those action types.","ref":"Ash.Policy.Check.Builtins.html#loading/1","title":"Ash.Policy.Check.Builtins.loading/1","type":"function"},{"doc":"This check is true when the specified function returns true","ref":"Ash.Policy.Check.Builtins.html#matches/2","title":"Ash.Policy.Check.Builtins.matches/2","type":"macro"},{"doc":"This check never passes.\n\nThere is, generally speaking, no reason to use this, but it exists for\ncompleteness sake.","ref":"Ash.Policy.Check.Builtins.html#never/0","title":"Ash.Policy.Check.Builtins.never/0","type":"function"},{"doc":"This check passes if the data relates to the actor via the specified relationship or path of relationships.\n\nFor `update` & `destroy` actions, this check will apply to *the original data* before the changes are applied.\n\nFor `create` actions this check is very unlikely to pass. This is because relationships are modified *after* authorization\nhappens, not before.\n\nFor example:\n\n```elixir\npolicy action_type(:read) do\n  authorize_if relates_to_actor_via(:owner)\n\n  # Path of relationships:\n  authorize_if relates_to_actor_via([:account, :user])\n\n  # When the resource relates to a field of the actor:\n  authorize_if relates_to_actor_via(:roles, field: :role)\nend\n```","ref":"Ash.Policy.Check.Builtins.html#relates_to_actor_via/2","title":"Ash.Policy.Check.Builtins.relates_to_actor_via/2","type":"function"},{"doc":"This check is true when the specified relationship is being changed to the current actor.\n\nThis only supports `belongs_to` relationships at the moment, and will detect two cases:\n\n1. the `source_attribute` is being changed directly\n2. the relationship is being changed with `on_lookup?: :relate`, and a single input is being provided.","ref":"Ash.Policy.Check.Builtins.html#relating_to_actor/1","title":"Ash.Policy.Check.Builtins.relating_to_actor/1","type":"function"},{"doc":"This check is true when the resource name matches the provided resource name or names.","ref":"Ash.Policy.Check.Builtins.html#resource/1","title":"Ash.Policy.Check.Builtins.resource/1","type":"function"},{"doc":"This check is true when the field is being selected and false when it is not.\n\nThis won't affect filters placed on this resource, so you may also want to either:\n\n- Mark the given field as `filterable? false`\n- Add another check for `filtering_on(:field)`\n\nFor example:\n\n```elixir\npolicy action_type(:read) do\n  # The actor can read and filter on their own email\n  authorize_if expr(id == ^actor(:id))\n\n  # No one else can select or filter on their email\n  forbid_if selecting(:email)\n  forbid_if filtering_on(:email)\n\n  # Otherwise, the policy passes\n  authorize_if always()\nend\n```","ref":"Ash.Policy.Check.Builtins.html#selecting/1","title":"Ash.Policy.Check.Builtins.selecting/1","type":"function"},{"doc":"An ETS (Erlang Term Storage) backed Ash Datalayer, for testing and lightweight usage.\n\nRemember, this does not have support for transactions! This is not recommended for production\nuse, especially in multi-user applications. It can, however, be great for prototyping.","ref":"Ash.DataLayer.Ets.html","title":"Ash.DataLayer.Ets","type":"module"},{"doc":"","ref":"Ash.DataLayer.Ets.html#do_add_calculations/4","title":"Ash.DataLayer.Ets.do_add_calculations/4","type":"function"},{"doc":"","ref":"Ash.DataLayer.Ets.html#ets/1","title":"Ash.DataLayer.Ets.ets/1","type":"macro"},{"doc":"Stops the storage for a given resource/tenant (deleting all of the data)","ref":"Ash.DataLayer.Ets.html#stop/2","title":"Ash.DataLayer.Ets.stop/2","type":"function"},{"doc":"An Mnesia backed Ash Datalayer.\n\nIn your application initialization, you will need to call `Mnesia.create_schema([node()])`.\n\nAdditionally, you will want to create your mnesia tables there.\n\nThis data layer is *unoptimized*, fetching all records from a table and filtering them\nin memory. For that reason, it is not recommended to use it with large amounts of data. It can be\ngreat for prototyping or light usage, though.","ref":"Ash.DataLayer.Mnesia.html","title":"Ash.DataLayer.Mnesia","type":"module"},{"doc":"","ref":"Ash.DataLayer.Mnesia.html#mnesia/1","title":"Ash.DataLayer.Mnesia.mnesia/1","type":"macro"},{"doc":"Creates the table for each mnesia resource in a domain","ref":"Ash.DataLayer.Mnesia.html#start/2","title":"Ash.DataLayer.Mnesia.start/2","type":"function"},{"doc":"A data layer that returns structs.\n\nThis is the data layer that is used under the hood\nby embedded resources, and resources without data layers.","ref":"Ash.DataLayer.Simple.html","title":"Ash.DataLayer.Simple","type":"module"},{"doc":"","ref":"Ash.DataLayer.Simple.html#bulk_create/3","title":"Ash.DataLayer.Simple.bulk_create/3","type":"function"},{"doc":"Sets the data for a query against a data-layer-less resource","ref":"Ash.DataLayer.Simple.html#set_data/2","title":"Ash.DataLayer.Simple.set_data/2","type":"function"},{"doc":"A builtin notifier to help you publish events over any kind of pub-sub tooling.\n\nThis is plug and play with `Phoenix.PubSub`, but could be used with any pubsub system.\n\nYou configure a module that defines a `broadcast/3` function, and then add some \"publications\"\nwhich configure under what conditions an event should be sent and what the topic should be.","ref":"Ash.Notifier.PubSub.html","title":"Ash.Notifier.PubSub","type":"module"},{"doc":"It can be quite frustrating when setting up pub_sub when everything appears to be set up properly, but\nyou aren't receiving events. This usually means some kind of mismatch between the event names produced\nby the resource/config of your publications, and you can use the following flag to display debug\ninformation about all pub sub events.\n\n```elixir\nconfig :ash, :pub_sub, debug?: true\n```","ref":"Ash.Notifier.PubSub.html#module-debugging-pubsub","title":"Debugging PubSub - Ash.Notifier.PubSub","type":"module"},{"doc":"Often you want to include some piece of data in the thing being changed, like the `:id` attribute. This\nis done by providing a list as the topic, and using atoms which will be replaced by their corresponding\nvalues. They will ultimately be joined with `:`.\n\nFor example:\n\n```elixir\nprefix \"user\"\n\npublish :create, [\"created\", :user_id]\n```\n\nThis might publish a message to \"user:created:1\" for example.\n\nFor updates, if the field in the template is being changed, a message is sent\nto *both* values. So if you change `user 1` to `user 2`, the same message would\nbe published to `user:updated:1` and `user:updated:2`. If there are multiple\nattributes in the template, and they are all being changed, a message is sent for\nevery combination of substitutions.","ref":"Ash.Notifier.PubSub.html#module-topic-templates","title":"Topic Templates - Ash.Notifier.PubSub","type":"module"},{"doc":"If the previous value was `nil` or the field was not selected on the data passed into the action, then a\nnotification is not sent for the previous value.\n\nIf the new value is `nil` then a notification is not sent for the new value.","ref":"Ash.Notifier.PubSub.html#module-important","title":"Important - Ash.Notifier.PubSub","type":"module"},{"doc":"Templates may contain lists, in which case all combinations of values in the list will be used. Add\n`nil` to the list if you want to produce a pattern where that entry is omitted.\n\nThe atom `:_tenant` may be used. If the changeset has a tenant set on it, that\nvalue will be used, otherwise that combination of values is ignored.\n\nThe atom `:_pkey` may be used. It will be a stringified, concatenation of the primary key fields,\nor just the primary key if there is only one primary key field.\n\nThe atom `nil` may be used. It only makes sense to use it in the context of a list of alternatives,\nand adds a pattern where that part is skipped.\n\n```elixir\npublish :updated, [[:team_id, :_tenant], \"updated\", [:id, nil]]\n```\n\nWould produce the following messages, given a `team_id` of 1, a `tenant` of `org_1`, and an `id` of `50`:\n\n```elixir\n\"1:updated:50\"\n\"1:updated\"\n\"org_1:updated:50\"\n\"org_1:updated\"\n```","ref":"Ash.Notifier.PubSub.html#module-template-parts","title":"Template parts - Ash.Notifier.PubSub","type":"module"},{"doc":"It's possible to change the default delimiter used when generating topics. This is useful when working with message brokers\nlike RabbitMQ, which rely on a different set of delimiters for routing.\n\n\n```elixir\npub_sub do\n  delimiter \".\"\nend\n```","ref":"Ash.Notifier.PubSub.html#module-custom-delimiters","title":"Custom Delimiters - Ash.Notifier.PubSub","type":"module"},{"doc":"If you are using a phoenix `Endpoint` module for pubsub then this is unnecessary. If you want to use a custom pub sub started\nwith something like `{Phoenix.PubSub, name: MyName}`, then you can provide `MyName` to here.","ref":"Ash.Notifier.PubSub.html#module-named-pubsub-modules","title":"Named Pubsub modules - Ash.Notifier.PubSub","type":"module"},{"doc":"Configured with `broadcast_type`.\n\n- `:notification` just sends the notification\n- `:phoenix_broadcast` sends a `%Phoenix.Socket.Broadcast{}` (see above)\n- `:broadcast` sends `%{topic: (topic), event: (event), notification: (notification)}`","ref":"Ash.Notifier.PubSub.html#module-broadcast-types","title":"Broadcast Types - Ash.Notifier.PubSub","type":"module"},{"doc":"","ref":"Ash.Notifier.PubSub.html#pub_sub/1","title":"Ash.Notifier.PubSub.pub_sub/1","type":"macro"},{"doc":"","ref":"Ash.Notifier.PubSub.html#to_payload/3","title":"Ash.Notifier.PubSub.to_payload/3","type":"function"},{"doc":"An authorization extension for ash resources.\n\nTo add this extension to a resource, add it to the list of `authorizers` like so:\n\n```elixir\nuse Ash.Resource,\n  ...,\n  authorizers: [\n    Ash.Policy.Authorizer\n  ]\n```\n\nA resource can be given a set of policies, which are enforced on each call to a resource action.\n\nFor reads, policies can be configured to filter out data that the actor shouldn't see, as opposed to\nresulting in a forbidden error.\n\nSee the [policies guide](/documentation/topics/security/policies.md) for practical examples.\n\nPolicies are solved/managed via a boolean satisfiability solver. To read more about boolean satisfiability,\nsee this page: https://en.wikipedia.org/wiki/Boolean_satisfiability_problem. At the end of\nthe day, however, it is not necessary to understand exactly how Ash takes your\nauthorization requirements and determines if a request is allowed. The\nimportant thing to understand is that Ash may or may not run any/all of your\nauthorization rules as they may be deemed unnecessary. As such, authorization\nchecks should have no side effects. Ideally, the checks built-in to ash should\ncover the bulk of your needs.","ref":"Ash.Policy.Authorizer.html","title":"Ash.Policy.Authorizer","type":"module"},{"doc":"","ref":"Ash.Policy.Authorizer.html#alter_sort/3","title":"Ash.Policy.Authorizer.alter_sort/3","type":"function"},{"doc":"","ref":"Ash.Policy.Authorizer.html#expr_check/1","title":"Ash.Policy.Authorizer.expr_check/1","type":"function"},{"doc":"","ref":"Ash.Policy.Authorizer.html#field_policies/1","title":"Ash.Policy.Authorizer.field_policies/1","type":"macro"},{"doc":"","ref":"Ash.Policy.Authorizer.html#install/5","title":"Ash.Policy.Authorizer.install/5","type":"function"},{"doc":"","ref":"Ash.Policy.Authorizer.html#policies/1","title":"Ash.Policy.Authorizer.policies/1","type":"macro"},{"doc":"","ref":"Ash.Policy.Authorizer.html#print_tuple_boolean/1","title":"Ash.Policy.Authorizer.print_tuple_boolean/1","type":"function"},{"doc":"","ref":"Ash.Policy.Authorizer.html#t:t/0","title":"Ash.Policy.Authorizer.t/0","type":"type"},{"doc":"`Ash.Reactor` is a [`Reactor`](https://hex.pm/packages/reactor) extension\nwhich provides steps for working with Ash resources and actions.\n\nSee the [Ash Reactor Guide](https://hexdocs.pm/ash/reactor.html) for more\ninformation.","ref":"Ash.Reactor.html","title":"Ash.Reactor","type":"module"},{"doc":"","ref":"Ash.Reactor.html#ash/1","title":"Ash.Reactor.ash/1","type":"macro"},{"doc":"","ref":"Ash.Reactor.html#t:action/0","title":"Ash.Reactor.action/0","type":"type"},{"doc":"A resource is a static definition of an entity in your system.\n\n[Resource DSL documentation](dsl-ash-resource.html)","ref":"Ash.Resource.html","title":"Ash.Resource","type":"module"},{"doc":"* `:simple_notifiers` (list of module that adopts `Ash.Notifier`) - Notifiers with no DSL.\n\n* `:validate_domain_inclusion?` (`t:boolean/0`) - Whether or not to validate that this resource is included in a domain. The default value is `true`.\n\n* `:domain` (module that adopts `Ash.Domain`) - The domain to use when interacting with this resource. Also sets defaults for various options that ask for a domain.\n\n* `:embed_nil_values?` (`t:boolean/0`) - Whether or not to include keys with `nil` values in an embedded representation. Has no effect unless resource is an embedded resource. The default value is `true`.\n\n* `:extensions` (list of module that adopts `Spark.Dsl.Extension`) - A list of DSL extensions to add to the `Spark.Dsl`\n\n* `:data_layer` (module that adopts `Ash.DataLayer`) - data_layer extensions to add to the `Spark.Dsl` The default value is `Ash.DataLayer.Simple`.\n\n* `:authorizers` (one or a list of module that adopts `Ash.Authorizer`) - authorizers extensions to add to the `Spark.Dsl` The default value is `[]`.\n\n* `:notifiers` (one or a list of module that adopts `Ash.Notifier`) - notifiers extensions to add to the `Spark.Dsl` The default value is `[]`.\n\n* `:otp_app` (`t:atom/0`) - The otp_app to use for any application configurable options\n\n* `:fragments` (list of `t:module/0`) - Fragments to include in the `Spark.Dsl`. See the fragments guide for more.","ref":"Ash.Resource.html#module-options","title":"Options - Ash.Resource","type":"module"},{"doc":"","ref":"Ash.Resource.html#get_metadata/2","title":"Ash.Resource.get_metadata/2","type":"function"},{"doc":"Returns true if the load or path to load has been loaded","ref":"Ash.Resource.html#loaded?/3","title":"Ash.Resource.loaded?/3","type":"function"},{"doc":"- `lists`: set to `:any` to have this return true if any record in a list that appears has the value loaded. Default is `:all`.\n- `unknown`: set to `true` to have unknown paths (like nil values or non-resources) return true. Defaults to `false`\n- `strict?`: set to `true` to return false if a calculation with arguments is being checked","ref":"Ash.Resource.html#loaded?/3-options","title":"Options - Ash.Resource.loaded?/3","type":"function"},{"doc":"","ref":"Ash.Resource.html#put_metadata/3","title":"Ash.Resource.put_metadata/3","type":"function"},{"doc":"","ref":"Ash.Resource.html#selected?/2","title":"Ash.Resource.selected?/2","type":"function"},{"doc":"","ref":"Ash.Resource.html#set_metadata/2","title":"Ash.Resource.set_metadata/2","type":"function"},{"doc":"Sets a loaded key or path to a key back to its original unloaded stated","ref":"Ash.Resource.html#unload/2","title":"Ash.Resource.unload/2","type":"function"},{"doc":"Sets a list of loaded key or paths to a key back to their original unloaded stated","ref":"Ash.Resource.html#unload_many/2","title":"Ash.Resource.unload_many/2","type":"function"},{"doc":"","ref":"Ash.Resource.html#t:record/0","title":"Ash.Resource.record/0","type":"type"},{"doc":"","ref":"Ash.Resource.html#t:t/0","title":"Ash.Resource.t/0","type":"type"},{"doc":"Introspection helpers for the Ets data layer","ref":"Ash.DataLayer.Ets.Info.html","title":"Ash.DataLayer.Ets.Info","type":"module"},{"doc":"Whether or not the ets table for the resource should be private","ref":"Ash.DataLayer.Ets.Info.html#private?/1","title":"Ash.DataLayer.Ets.Info.private?/1","type":"function"},{"doc":"The ets table name for a resource","ref":"Ash.DataLayer.Ets.Info.html#table/1","title":"Ash.DataLayer.Ets.Info.table/1","type":"function"},{"doc":"Introspection helpers for Ash.DataLayer.Mnesia","ref":"Ash.DataLayer.Mnesia.Info.html","title":"Ash.DataLayer.Mnesia.Info","type":"module"},{"doc":"The mnesia table for a resource","ref":"Ash.DataLayer.Mnesia.Info.html#table/1","title":"Ash.DataLayer.Mnesia.Info.table/1","type":"function"},{"doc":"A resource reference in a domain","ref":"Ash.Domain.Dsl.ResourceReference.html","title":"Ash.Domain.Dsl.ResourceReference","type":"module"},{"doc":"","ref":"Ash.Domain.Dsl.ResourceReference.html#t:t/0","title":"Ash.Domain.Dsl.ResourceReference.t/0","type":"type"},{"doc":"Introspection tools for Ash.Domain","ref":"Ash.Domain.Info.html","title":"Ash.Domain.Info","type":"module"},{"doc":"The allow MFA for a domain","ref":"Ash.Domain.Info.html#allow/1","title":"Ash.Domain.Info.allow/1","type":"function"},{"doc":"Whether or not the domain allows unregistered resources to be used with it","ref":"Ash.Domain.Info.html#allow_unregistered?/1","title":"Ash.Domain.Info.allow_unregistered?/1","type":"function"},{"doc":"When authorization should happen for a given domain","ref":"Ash.Domain.Info.html#authorize/1","title":"Ash.Domain.Info.authorize/1","type":"function"},{"doc":"Gets the resources of a domain module. Can be used at compile time.\n\nLiberal use of this can greatly increase compile times, or even cause compiler deadlocks.\nUse with care.","ref":"Ash.Domain.Info.html#depend_on_resources/1","title":"Ash.Domain.Info.depend_on_resources/1","type":"macro"},{"doc":"The description of the domain","ref":"Ash.Domain.Info.html#description/1","title":"Ash.Domain.Info.description/1","type":"function"},{"doc":"","ref":"Ash.Domain.Info.html#find_manage_relationships_with_identity_not_configured/1","title":"Ash.Domain.Info.find_manage_relationships_with_identity_not_configured/1","type":"function"},{"doc":"Determine what domain to use when interacting with a related resource.\n\nWe choose the first domain found in the following order:\n\n* `relationship.domain`, i.e an explicitly configured domain for a relationship\n* `resource.domain`, i.e. the domain the resource declares\n* `subject.domain`, i.e. the domain of the query, changeset or action input (if it has one)\n* `default`, the default domain provided as the third argument","ref":"Ash.Domain.Info.html#related_domain/3","title":"Ash.Domain.Info.related_domain/3","type":"function"},{"doc":"Whether or not the actor is always required for a domain","ref":"Ash.Domain.Info.html#require_actor?/1","title":"Ash.Domain.Info.require_actor?/1","type":"function"},{"doc":"Returns `{:ok, resource}` if the resource can be used by the domain, or `{:error, error}`.","ref":"Ash.Domain.Info.html#resource/2","title":"Ash.Domain.Info.resource/2","type":"function"},{"doc":"Gets the resource references of a domain module. DO NOT USE AT COMPILE TIME.\n\nIf you need the resource list at compile time, use `depend_on_resources/1`","ref":"Ash.Domain.Info.html#resource_references/1","title":"Ash.Domain.Info.resource_references/1","type":"function"},{"doc":"Gets the resources of a domain module.","ref":"Ash.Domain.Info.html#resources/1","title":"Ash.Domain.Info.resources/1","type":"function"},{"doc":"The short name for a domain","ref":"Ash.Domain.Info.html#short_name/1","title":"Ash.Domain.Info.short_name/1","type":"function"},{"doc":"The span_name for a domain and resource combination","ref":"Ash.Domain.Info.html#span_name/3","title":"Ash.Domain.Info.span_name/3","type":"function"},{"doc":"Names a telemetry event for a given domain/resource combo","ref":"Ash.Domain.Info.html#telemetry_event_name/2","title":"Ash.Domain.Info.telemetry_event_name/2","type":"function"},{"doc":"The execution timeout for a domain","ref":"Ash.Domain.Info.html#timeout/1","title":"Ash.Domain.Info.timeout/1","type":"function"},{"doc":"The trace name for a domain","ref":"Ash.Domain.Info.html#trace_name/1","title":"Ash.Domain.Info.trace_name/1","type":"function"},{"doc":"Introspection helpers for Ash.Notifier.PubSub","ref":"Ash.Notifier.PubSub.Info.html","title":"Ash.Notifier.PubSub.Info","type":"module"},{"doc":"The broadcast type for a resource","ref":"Ash.Notifier.PubSub.Info.html#broadcast_type/1","title":"Ash.Notifier.PubSub.Info.broadcast_type/1","type":"function"},{"doc":"The delimiter to use when generating message topics","ref":"Ash.Notifier.PubSub.Info.html#delimiter/1","title":"Ash.Notifier.PubSub.Info.delimiter/1","type":"function"},{"doc":"The pubsub module for a resource","ref":"Ash.Notifier.PubSub.Info.html#module/1","title":"Ash.Notifier.PubSub.Info.module/1","type":"function"},{"doc":"The pubsub name for a resource","ref":"Ash.Notifier.PubSub.Info.html#name/1","title":"Ash.Notifier.PubSub.Info.name/1","type":"function"},{"doc":"The topic prefix for a resource","ref":"Ash.Notifier.PubSub.Info.html#prefix/1","title":"Ash.Notifier.PubSub.Info.prefix/1","type":"function"},{"doc":"The list of publications for a resource","ref":"Ash.Notifier.PubSub.Info.html#publications/1","title":"Ash.Notifier.PubSub.Info.publications/1","type":"function"},{"doc":"Represents a configured publication from the pubsub notifier on an Ash.Resource","ref":"Ash.Notifier.PubSub.Publication.html","title":"Ash.Notifier.PubSub.Publication","type":"module"},{"doc":"","ref":"Ash.Notifier.PubSub.Publication.html#publish_all_schema/0","title":"Ash.Notifier.PubSub.Publication.publish_all_schema/0","type":"function"},{"doc":"","ref":"Ash.Notifier.PubSub.Publication.html#schema/0","title":"Ash.Notifier.PubSub.Publication.schema/0","type":"function"},{"doc":"Represents a field policy in an Ash.Resource","ref":"Ash.Policy.FieldPolicy.html","title":"Ash.Policy.FieldPolicy","type":"module"},{"doc":"","ref":"Ash.Policy.FieldPolicy.html#t:t/0","title":"Ash.Policy.FieldPolicy.t/0","type":"type"},{"doc":"An authorization extension for ash resources.\n\nFor more information, see `Ash.Policy.Authorizer`","ref":"Ash.Policy.Info.html","title":"Ash.Policy.Info","type":"module"},{"doc":"","ref":"Ash.Policy.Info.html#default_access_type/1","title":"Ash.Policy.Info.default_access_type/1","type":"function"},{"doc":"","ref":"Ash.Policy.Info.html#describe_resource/2","title":"Ash.Policy.Info.describe_resource/2","type":"function"},{"doc":"","ref":"Ash.Policy.Info.html#field_policies/1","title":"Ash.Policy.Info.field_policies/1","type":"function"},{"doc":"Gets the field policies relevant to a given field","ref":"Ash.Policy.Info.html#field_policies_for_field/2","title":"Ash.Policy.Info.field_policies_for_field/2","type":"function"},{"doc":"Whether or not Ash policy authorizer is configured to log policy breakdowns","ref":"Ash.Policy.Info.html#log_policy_breakdowns/0","title":"Ash.Policy.Info.log_policy_breakdowns/0","type":"function"},{"doc":"Whether or not Ash policy authorizer is configured to log successful policy breakdowns","ref":"Ash.Policy.Info.html#log_successful_policy_breakdowns/0","title":"Ash.Policy.Info.log_successful_policy_breakdowns/0","type":"function"},{"doc":"","ref":"Ash.Policy.Info.html#policies/2","title":"Ash.Policy.Info.policies/2","type":"function"},{"doc":"","ref":"Ash.Policy.Info.html#private_fields_policy/1","title":"Ash.Policy.Info.private_fields_policy/1","type":"function"},{"doc":"Whether or not Ash policy authorizer is configured to show policy breakdowns in error messages","ref":"Ash.Policy.Info.html#show_policy_breakdowns?/0","title":"Ash.Policy.Info.show_policy_breakdowns?/0","type":"function"},{"doc":"A utility to determine if a given query/changeset would pass authorization.\n\n*This is still experimental.*","ref":"Ash.Policy.Info.html#strict_check/3","title":"Ash.Policy.Info.strict_check/3","type":"function"},{"doc":"Represents a policy on an Ash.Resource","ref":"Ash.Policy.Policy.html","title":"Ash.Policy.Policy","type":"module"},{"doc":"","ref":"Ash.Policy.Policy.html#at_least_one_policy_expression/2","title":"Ash.Policy.Policy.at_least_one_policy_expression/2","type":"function"},{"doc":"","ref":"Ash.Policy.Policy.html#fetch_fact/2","title":"Ash.Policy.Policy.fetch_fact/2","type":"function"},{"doc":"","ref":"Ash.Policy.Policy.html#fetch_or_strict_check_fact/2","title":"Ash.Policy.Policy.fetch_or_strict_check_fact/2","type":"function"},{"doc":"","ref":"Ash.Policy.Policy.html#solve/1","title":"Ash.Policy.Policy.solve/1","type":"function"},{"doc":"","ref":"Ash.Policy.Policy.html#t:t/0","title":"Ash.Policy.Policy.t/0","type":"type"},{"doc":"Types for Ash actions","ref":"Ash.Resource.Actions.html","title":"Ash.Resource.Actions","type":"module"},{"doc":"","ref":"Ash.Resource.Actions.html#t:action/0","title":"Ash.Resource.Actions.action/0","type":"type"},{"doc":"","ref":"Ash.Resource.Actions.html#t:action_type/0","title":"Ash.Resource.Actions.action_type/0","type":"type"},{"doc":"Represents a custom action on a resource.","ref":"Ash.Resource.Actions.Action.html","title":"Ash.Resource.Actions.Action","type":"module"},{"doc":"","ref":"Ash.Resource.Actions.Action.html#transform/1","title":"Ash.Resource.Actions.Action.transform/1","type":"function"},{"doc":"","ref":"Ash.Resource.Actions.Action.html#t:t/0","title":"Ash.Resource.Actions.Action.t/0","type":"type"},{"doc":"Represents an argument to an action","ref":"Ash.Resource.Actions.Argument.html","title":"Ash.Resource.Actions.Argument","type":"module"},{"doc":"","ref":"Ash.Resource.Actions.Argument.html#schema/0","title":"Ash.Resource.Actions.Argument.schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Actions.Argument.html#t:t/0","title":"Ash.Resource.Actions.Argument.t/0","type":"type"},{"doc":"Represents a create action on a resource.","ref":"Ash.Resource.Actions.Create.html","title":"Ash.Resource.Actions.Create","type":"module"},{"doc":"","ref":"Ash.Resource.Actions.Create.html#t:t/0","title":"Ash.Resource.Actions.Create.t/0","type":"type"},{"doc":"Represents a destroy action on a resource.","ref":"Ash.Resource.Actions.Destroy.html","title":"Ash.Resource.Actions.Destroy","type":"module"},{"doc":"","ref":"Ash.Resource.Actions.Destroy.html#transform/1","title":"Ash.Resource.Actions.Destroy.transform/1","type":"function"},{"doc":"","ref":"Ash.Resource.Actions.Destroy.html#t:t/0","title":"Ash.Resource.Actions.Destroy.t/0","type":"type"},{"doc":"An implementation of a generic action.","ref":"Ash.Resource.Actions.Implementation.html","title":"Ash.Resource.Actions.Implementation","type":"behaviour"},{"doc":"","ref":"Ash.Resource.Actions.Implementation.html#c:run/3","title":"Ash.Resource.Actions.Implementation.run/3","type":"callback"},{"doc":"The context passed into generic action functions","ref":"Ash.Resource.Actions.Implementation.Context.html","title":"Ash.Resource.Actions.Implementation.Context","type":"module"},{"doc":"","ref":"Ash.Resource.Actions.Implementation.Context.html#t:t/0","title":"Ash.Resource.Actions.Implementation.Context.t/0","type":"type"},{"doc":"Represents metadata from an action","ref":"Ash.Resource.Actions.Metadata.html","title":"Ash.Resource.Actions.Metadata","type":"module"},{"doc":"","ref":"Ash.Resource.Actions.Metadata.html#schema/0","title":"Ash.Resource.Actions.Metadata.schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Actions.Metadata.html#t:t/0","title":"Ash.Resource.Actions.Metadata.t/0","type":"type"},{"doc":"Represents a read action on a resource.","ref":"Ash.Resource.Actions.Read.html","title":"Ash.Resource.Actions.Read","type":"module"},{"doc":"","ref":"Ash.Resource.Actions.Read.html#pagination_schema/0","title":"Ash.Resource.Actions.Read.pagination_schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Actions.Read.html#transform/1","title":"Ash.Resource.Actions.Read.transform/1","type":"function"},{"doc":"","ref":"Ash.Resource.Actions.Read.html#t:t/0","title":"Ash.Resource.Actions.Read.t/0","type":"type"},{"doc":"Represents the pagination configuration of a read action","ref":"Ash.Resource.Actions.Read.Pagination.html","title":"Ash.Resource.Actions.Read.Pagination","type":"module"},{"doc":"","ref":"Ash.Resource.Actions.Read.Pagination.html#transform/1","title":"Ash.Resource.Actions.Read.Pagination.transform/1","type":"function"},{"doc":"","ref":"Ash.Resource.Actions.Read.Pagination.html#t:t/0","title":"Ash.Resource.Actions.Read.Pagination.t/0","type":"type"},{"doc":"Represents a update action on a resource.","ref":"Ash.Resource.Actions.Update.html","title":"Ash.Resource.Actions.Update","type":"module"},{"doc":"","ref":"Ash.Resource.Actions.Update.html#transform/1","title":"Ash.Resource.Actions.Update.transform/1","type":"function"},{"doc":"","ref":"Ash.Resource.Actions.Update.html#t:t/0","title":"Ash.Resource.Actions.Update.t/0","type":"type"},{"doc":"Represents a named aggregate on the resource that can be loaded","ref":"Ash.Resource.Aggregate.html","title":"Ash.Resource.Aggregate","type":"module"},{"doc":"","ref":"Ash.Resource.Aggregate.html#t:t/0","title":"Ash.Resource.Aggregate.t/0","type":"type"},{"doc":"The root behavior for a custom aggregate.\n\nSee data layers for their implementation of custom aggregates.","ref":"Ash.Resource.Aggregate.CustomAggregate.html","title":"Ash.Resource.Aggregate.CustomAggregate","type":"behaviour"},{"doc":"","ref":"Ash.Resource.Aggregate.CustomAggregate.html#c:describe/1","title":"Ash.Resource.Aggregate.CustomAggregate.describe/1","type":"callback"},{"doc":"","ref":"Ash.Resource.Aggregate.CustomAggregate.html#t:t/0","title":"Ash.Resource.Aggregate.CustomAggregate.t/0","type":"type"},{"doc":"Represents a join filter on a resource aggregate","ref":"Ash.Resource.Aggregate.JoinFilter.html","title":"Ash.Resource.Aggregate.JoinFilter","type":"module"},{"doc":"Represents an attribute on a resource","ref":"Ash.Resource.Attribute.html","title":"Ash.Resource.Attribute","type":"module"},{"doc":"","ref":"Ash.Resource.Attribute.html#create_timestamp_schema/0","title":"Ash.Resource.Attribute.create_timestamp_schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Attribute.html#integer_primary_key_schema/0","title":"Ash.Resource.Attribute.integer_primary_key_schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Attribute.html#transform/1","title":"Ash.Resource.Attribute.transform/1","type":"function"},{"doc":"","ref":"Ash.Resource.Attribute.html#update_timestamp_schema/0","title":"Ash.Resource.Attribute.update_timestamp_schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Attribute.html#uuid_primary_key_schema/0","title":"Ash.Resource.Attribute.uuid_primary_key_schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Attribute.html#uuid_v7_primary_key_schema/0","title":"Ash.Resource.Attribute.uuid_v7_primary_key_schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Attribute.html#t:t/0","title":"Ash.Resource.Attribute.t/0","type":"type"},{"doc":"An argument to a calculation","ref":"Ash.Resource.Calculation.Argument.html","title":"Ash.Resource.Calculation.Argument","type":"module"},{"doc":"","ref":"Ash.Resource.Calculation.Argument.html#schema/0","title":"Ash.Resource.Calculation.Argument.schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.Argument.html#t:t/0","title":"Ash.Resource.Calculation.Argument.t/0","type":"type"},{"doc":"The context and arguments of a calculation","ref":"Ash.Resource.Calculation.Context.html","title":"Ash.Resource.Calculation.Context","type":"module"},{"doc":"","ref":"Ash.Resource.Calculation.Context.html#t:t/0","title":"Ash.Resource.Calculation.Context.t/0","type":"type"},{"doc":"Loads an attribute as a calculation.\n\nCan be used to load the same attribute with different load statements applied.","ref":"Ash.Resource.Calculation.LoadAttribute.html","title":"Ash.Resource.Calculation.LoadAttribute","type":"module"},{"doc":"","ref":"Ash.Resource.Calculation.LoadAttribute.html#calculate/3","title":"Ash.Resource.Calculation.LoadAttribute.calculate/3","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadAttribute.html#describe/1","title":"Ash.Resource.Calculation.LoadAttribute.describe/1","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadAttribute.html#has_calculate?/0","title":"Ash.Resource.Calculation.LoadAttribute.has_calculate?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadAttribute.html#has_expression?/0","title":"Ash.Resource.Calculation.LoadAttribute.has_expression?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadAttribute.html#init/1","title":"Ash.Resource.Calculation.LoadAttribute.init/1","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadAttribute.html#load/3","title":"Ash.Resource.Calculation.LoadAttribute.load/3","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadAttribute.html#strict_loads?/0","title":"Ash.Resource.Calculation.LoadAttribute.strict_loads?/0","type":"function"},{"doc":"Loads a relationship as a calculation.\n\nCan be used to load the same relationship with a different query.","ref":"Ash.Resource.Calculation.LoadRelationship.html","title":"Ash.Resource.Calculation.LoadRelationship","type":"module"},{"doc":"","ref":"Ash.Resource.Calculation.LoadRelationship.html#calculate/3","title":"Ash.Resource.Calculation.LoadRelationship.calculate/3","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadRelationship.html#describe/1","title":"Ash.Resource.Calculation.LoadRelationship.describe/1","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadRelationship.html#has_calculate?/0","title":"Ash.Resource.Calculation.LoadRelationship.has_calculate?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadRelationship.html#has_expression?/0","title":"Ash.Resource.Calculation.LoadRelationship.has_expression?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadRelationship.html#init/1","title":"Ash.Resource.Calculation.LoadRelationship.init/1","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadRelationship.html#load/3","title":"Ash.Resource.Calculation.LoadRelationship.load/3","type":"function"},{"doc":"","ref":"Ash.Resource.Calculation.LoadRelationship.html#strict_loads?/0","title":"Ash.Resource.Calculation.LoadRelationship.strict_loads?/0","type":"function"},{"doc":"Represents a function that evaluates a calculation in a resource's code interface","ref":"Ash.Resource.CalculationInterface.html","title":"Ash.Resource.CalculationInterface","type":"module"},{"doc":"","ref":"Ash.Resource.CalculationInterface.html#schema/0","title":"Ash.Resource.CalculationInterface.schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.CalculationInterface.html#transform/1","title":"Ash.Resource.CalculationInterface.transform/1","type":"function"},{"doc":"","ref":"Ash.Resource.CalculationInterface.html#t:t/0","title":"Ash.Resource.CalculationInterface.t/0","type":"type"},{"doc":"Represents a unique constraint on a resource\n\nData layers should (and all built in ones do), discount `nil` or `null` (in the case of postgres) values\nwhen determining if a unique constraint matches. This often means that you should\nprefer to use identities with non-nullable columns.\n\nEventually, features could be added to support including `nil` or `null` values, but they would\nneed to include a corresponding feature for data layers.","ref":"Ash.Resource.Identity.html","title":"Ash.Resource.Identity","type":"module"},{"doc":"","ref":"Ash.Resource.Identity.html#schema/0","title":"Ash.Resource.Identity.schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Identity.html#t:t/0","title":"Ash.Resource.Identity.t/0","type":"type"},{"doc":"Introspection for resources","ref":"Ash.Resource.Info.html","title":"Ash.Resource.Info","type":"module"},{"doc":"Returns the action with the matching name and type on the resource","ref":"Ash.Resource.Info.html#action/3","title":"Ash.Resource.Info.action/3","type":"function"},{"doc":"Returns true or false if the input is accepted by the action, as an argument or an attribute","ref":"Ash.Resource.Info.html#action_input?/3","title":"Ash.Resource.Info.action_input?/3","type":"function"},{"doc":"Returns the list of possible accepted keys by an action","ref":"Ash.Resource.Info.html#action_inputs/2","title":"Ash.Resource.Info.action_inputs/2","type":"function"},{"doc":"Returns all actions of a resource","ref":"Ash.Resource.Info.html#actions/1","title":"Ash.Resource.Info.actions/1","type":"function"},{"doc":"Get an aggregate by name","ref":"Ash.Resource.Info.html#aggregate/2","title":"Ash.Resource.Info.aggregate/2","type":"function"},{"doc":"Gets the type of an aggregate for a given resource.","ref":"Ash.Resource.Info.html#aggregate_type/2","title":"Ash.Resource.Info.aggregate_type/2","type":"function"},{"doc":"Returns all aggregates of a resource","ref":"Ash.Resource.Info.html#aggregates/1","title":"Ash.Resource.Info.aggregates/1","type":"function"},{"doc":"","ref":"Ash.Resource.Info.html#always_selected_attribute_names/1","title":"Ash.Resource.Info.always_selected_attribute_names/1","type":"function"},{"doc":"Get an attribute name from the resource","ref":"Ash.Resource.Info.html#attribute/2","title":"Ash.Resource.Info.attribute/2","type":"function"},{"doc":"","ref":"Ash.Resource.Info.html#attribute_names/1","title":"Ash.Resource.Info.attribute_names/1","type":"function"},{"doc":"Returns all attributes of a resource","ref":"Ash.Resource.Info.html#attributes/1","title":"Ash.Resource.Info.attributes/1","type":"function"},{"doc":"","ref":"Ash.Resource.Info.html#attributes_to_require/1","title":"Ash.Resource.Info.attributes_to_require/1","type":"function"},{"doc":"","ref":"Ash.Resource.Info.html#attributes_to_require/2","title":"Ash.Resource.Info.attributes_to_require/2","type":"function"},{"doc":"A list of authorizers to be used when accessing","ref":"Ash.Resource.Info.html#authorizers/1","title":"Ash.Resource.Info.authorizers/1","type":"function"},{"doc":"The base filter of the resource","ref":"Ash.Resource.Info.html#base_filter/1","title":"Ash.Resource.Info.base_filter/1","type":"function"},{"doc":"Get a calculation by name","ref":"Ash.Resource.Info.html#calculation/2","title":"Ash.Resource.Info.calculation/2","type":"function"},{"doc":"Get an calculation interface by name from the resource","ref":"Ash.Resource.Info.html#calculation_interface/2","title":"Ash.Resource.Info.calculation_interface/2","type":"function"},{"doc":"The list of code interface calculation definitions.","ref":"Ash.Resource.Info.html#calculation_interfaces/1","title":"Ash.Resource.Info.calculation_interfaces/1","type":"function"},{"doc":"Returns all calculations of a resource","ref":"Ash.Resource.Info.html#calculations/1","title":"Ash.Resource.Info.calculations/1","type":"function"},{"doc":"A list of all changes for the resource","ref":"Ash.Resource.Info.html#changes/1","title":"Ash.Resource.Info.changes/1","type":"function"},{"doc":"A list of all changes for the resource for a given action type","ref":"Ash.Resource.Info.html#changes/2","title":"Ash.Resource.Info.changes/2","type":"function"},{"doc":"The domain to define the interface for, when defining it in the resource","ref":"Ash.Resource.Info.html#code_interface_domain/1","title":"Ash.Resource.Info.code_interface_domain/1","type":"function"},{"doc":"The data layer of the resource, or nil if it does not have one","ref":"Ash.Resource.Info.html#data_layer/1","title":"Ash.Resource.Info.data_layer/1","type":"function"},{"doc":"Returns the configured default actions","ref":"Ash.Resource.Info.html#default_actions/1","title":"Ash.Resource.Info.default_actions/1","type":"function"},{"doc":"The default context of the resource","ref":"Ash.Resource.Info.html#default_context/1","title":"Ash.Resource.Info.default_context/1","type":"function"},{"doc":"Whether or not to define the interface on the resource","ref":"Ash.Resource.Info.html#define_interface?/1","title":"Ash.Resource.Info.define_interface?/1","type":"function"},{"doc":"The description of the resource","ref":"Ash.Resource.Info.html#description/1","title":"Ash.Resource.Info.description/1","type":"function"},{"doc":"Returns the statically configured domain for the resource.","ref":"Ash.Resource.Info.html#domain/1","title":"Ash.Resource.Info.domain/1","type":"function"},{"doc":"Whether or not the resource is an embedded resource","ref":"Ash.Resource.Info.html#embedded?/1","title":"Ash.Resource.Info.embedded?/1","type":"function"},{"doc":"Get a field from a resource by name","ref":"Ash.Resource.Info.html#field/2","title":"Ash.Resource.Info.field/2","type":"function"},{"doc":"Returns all attributes, aggregates, calculations and relationships of a resource","ref":"Ash.Resource.Info.html#fields/2","title":"Ash.Resource.Info.fields/2","type":"function"},{"doc":"A list of identities for the resource","ref":"Ash.Resource.Info.html#identities/1","title":"Ash.Resource.Info.identities/1","type":"function"},{"doc":"Get an identity by name from the resource","ref":"Ash.Resource.Info.html#identity/2","title":"Ash.Resource.Info.identity/2","type":"function"},{"doc":"Get an interface by name from the resource","ref":"Ash.Resource.Info.html#interface/2","title":"Ash.Resource.Info.interface/2","type":"function"},{"doc":"The list of code interface definitions.","ref":"Ash.Resource.Info.html#interfaces/1","title":"Ash.Resource.Info.interfaces/1","type":"function"},{"doc":"Returns all attributes of a resource with lazy matching defaults","ref":"Ash.Resource.Info.html#lazy_matching_default_attributes/2","title":"Ash.Resource.Info.lazy_matching_default_attributes/2","type":"function"},{"doc":"Returns all attributes of a resource with lazy non-matching-defaults","ref":"Ash.Resource.Info.html#lazy_non_matching_default_attributes/2","title":"Ash.Resource.Info.lazy_non_matching_default_attributes/2","type":"function"},{"doc":"The multitenancy attribute for a resource","ref":"Ash.Resource.Info.html#multitenancy_attribute/1","title":"Ash.Resource.Info.multitenancy_attribute/1","type":"function"},{"doc":"The MFA to parse the tenant from the attribute","ref":"Ash.Resource.Info.html#multitenancy_global?/1","title":"Ash.Resource.Info.multitenancy_global?/1","type":"function"},{"doc":"The function to parse the tenant from the attribute","ref":"Ash.Resource.Info.html#multitenancy_parse_attribute/1","title":"Ash.Resource.Info.multitenancy_parse_attribute/1","type":"function"},{"doc":"The multitenancy strategy for a resource","ref":"Ash.Resource.Info.html#multitenancy_strategy/1","title":"Ash.Resource.Info.multitenancy_strategy/1","type":"function"},{"doc":"The template for creating the tenant name","ref":"Ash.Resource.Info.html#multitenancy_template/1","title":"Ash.Resource.Info.multitenancy_template/1","type":"function"},{"doc":"A list of notifiers to be used when accessing","ref":"Ash.Resource.Info.html#notifiers/1","title":"Ash.Resource.Info.notifiers/1","type":"function"},{"doc":"The plural_name of the resource","ref":"Ash.Resource.Info.html#plural_name/1","title":"Ash.Resource.Info.plural_name/1","type":"function"},{"doc":"","ref":"Ash.Resource.Info.html#preparations/1","title":"Ash.Resource.Info.preparations/1","type":"function"},{"doc":"Returns the primary action of a given type","ref":"Ash.Resource.Info.html#primary_action/2","title":"Ash.Resource.Info.primary_action/2","type":"function"},{"doc":"Returns the primary action of the given type","ref":"Ash.Resource.Info.html#primary_action!/2","title":"Ash.Resource.Info.primary_action!/2","type":"function"},{"doc":"A list of field names corresponding to the primary key","ref":"Ash.Resource.Info.html#primary_key/1","title":"Ash.Resource.Info.primary_key/1","type":"function"},{"doc":"Whether or not all primary key attributes can be compared with simple_equality","ref":"Ash.Resource.Info.html#primary_key_simple_equality?/1","title":"Ash.Resource.Info.primary_key_simple_equality?/1","type":"function"},{"doc":"Get an aggregate by name","ref":"Ash.Resource.Info.html#public_aggregate/2","title":"Ash.Resource.Info.public_aggregate/2","type":"function"},{"doc":"Returns all public aggregates of a resource","ref":"Ash.Resource.Info.html#public_aggregates/1","title":"Ash.Resource.Info.public_aggregates/1","type":"function"},{"doc":"Get a public attribute name from the resource","ref":"Ash.Resource.Info.html#public_attribute/2","title":"Ash.Resource.Info.public_attribute/2","type":"function"},{"doc":"Returns all public attributes of a resource","ref":"Ash.Resource.Info.html#public_attributes/1","title":"Ash.Resource.Info.public_attributes/1","type":"function"},{"doc":"Get a public calculation by name","ref":"Ash.Resource.Info.html#public_calculation/2","title":"Ash.Resource.Info.public_calculation/2","type":"function"},{"doc":"Returns all public calculations of a resource","ref":"Ash.Resource.Info.html#public_calculations/1","title":"Ash.Resource.Info.public_calculations/1","type":"function"},{"doc":"Get a public field from a resource by name","ref":"Ash.Resource.Info.html#public_field/2","title":"Ash.Resource.Info.public_field/2","type":"function"},{"doc":"Returns all public attributes, aggregates, calculations and relationships of a resource","ref":"Ash.Resource.Info.html#public_fields/1","title":"Ash.Resource.Info.public_fields/1","type":"function"},{"doc":"Get a public relationship by name or path","ref":"Ash.Resource.Info.html#public_relationship/2","title":"Ash.Resource.Info.public_relationship/2","type":"function"},{"doc":"Returns all public relationships of a resource","ref":"Ash.Resource.Info.html#public_relationships/1","title":"Ash.Resource.Info.public_relationships/1","type":"function"},{"doc":"","ref":"Ash.Resource.Info.html#related/2","title":"Ash.Resource.Info.related/2","type":"function"},{"doc":"Get a relationship by name or path","ref":"Ash.Resource.Info.html#relationship/2","title":"Ash.Resource.Info.relationship/2","type":"function"},{"doc":"Returns all relationships of a resource","ref":"Ash.Resource.Info.html#relationships/1","title":"Ash.Resource.Info.relationships/1","type":"function"},{"doc":"The required belongs_to relationships","ref":"Ash.Resource.Info.html#required_belongs_to_relationships/1","title":"Ash.Resource.Info.required_belongs_to_relationships/1","type":"function"},{"doc":"Whether or not a given module is a resource module","ref":"Ash.Resource.Info.html#resource?/1","title":"Ash.Resource.Info.resource?/1","type":"function"},{"doc":"Retrieves a relationship path from the resource related by path, to the provided resource.","ref":"Ash.Resource.Info.html#reverse_relationship/3","title":"Ash.Resource.Info.reverse_relationship/3","type":"function"},{"doc":"The short_name of the resource","ref":"Ash.Resource.Info.html#short_name/1","title":"Ash.Resource.Info.short_name/1","type":"function"},{"doc":"A list of simple notifiers (require no DSL, used to avoid compile time dependencies)","ref":"Ash.Resource.Info.html#simple_notifiers/1","title":"Ash.Resource.Info.simple_notifiers/1","type":"function"},{"doc":"Determine if a field is sortable by name","ref":"Ash.Resource.Info.html#sortable?/3","title":"Ash.Resource.Info.sortable?/3","type":"function"},{"doc":"Returns all attributes of a resource with static defaults","ref":"Ash.Resource.Info.html#static_default_attributes/2","title":"Ash.Resource.Info.static_default_attributes/2","type":"function"},{"doc":"The trace_name of the resource","ref":"Ash.Resource.Info.html#trace_name/1","title":"Ash.Resource.Info.trace_name/1","type":"function"},{"doc":"A list of unique keys and information for a resource","ref":"Ash.Resource.Info.html#unique_keys/1","title":"Ash.Resource.Info.unique_keys/1","type":"function"},{"doc":"A list of all validations for the resource","ref":"Ash.Resource.Info.html#validations/1","title":"Ash.Resource.Info.validations/1","type":"function"},{"doc":"A list of all validations for the resource for a given action type","ref":"Ash.Resource.Info.html#validations/2","title":"Ash.Resource.Info.validations/2","type":"function"},{"doc":"Represents a function in a resource's code interface","ref":"Ash.Resource.Interface.html","title":"Ash.Resource.Interface","type":"module"},{"doc":"","ref":"Ash.Resource.Interface.html#interface_options/2","title":"Ash.Resource.Interface.interface_options/2","type":"function"},{"doc":"","ref":"Ash.Resource.Interface.html#schema/0","title":"Ash.Resource.Interface.schema/0","type":"function"},{"doc":"","ref":"Ash.Resource.Interface.html#transform/1","title":"Ash.Resource.Interface.transform/1","type":"function"},{"doc":"","ref":"Ash.Resource.Interface.html#t:t/0","title":"Ash.Resource.Interface.t/0","type":"type"},{"doc":"Types Ash relationships","ref":"Ash.Resource.Relationships.html","title":"Ash.Resource.Relationships","type":"module"},{"doc":"","ref":"Ash.Resource.Relationships.html#t:cardinality/0","title":"Ash.Resource.Relationships.cardinality/0","type":"type"},{"doc":"","ref":"Ash.Resource.Relationships.html#t:relationship/0","title":"Ash.Resource.Relationships.relationship/0","type":"type"},{"doc":"","ref":"Ash.Resource.Relationships.html#t:type/0","title":"Ash.Resource.Relationships.type/0","type":"type"},{"doc":"Represents a belongs_to relationship on a resource","ref":"Ash.Resource.Relationships.BelongsTo.html","title":"Ash.Resource.Relationships.BelongsTo","type":"module"},{"doc":"","ref":"Ash.Resource.Relationships.BelongsTo.html#t:t/0","title":"Ash.Resource.Relationships.BelongsTo.t/0","type":"type"},{"doc":"Represents a has_many relationship on a resource","ref":"Ash.Resource.Relationships.HasMany.html","title":"Ash.Resource.Relationships.HasMany","type":"module"},{"doc":"","ref":"Ash.Resource.Relationships.HasMany.html#manual/1","title":"Ash.Resource.Relationships.HasMany.manual/1","type":"function"},{"doc":"","ref":"Ash.Resource.Relationships.HasMany.html#transform/1","title":"Ash.Resource.Relationships.HasMany.transform/1","type":"function"},{"doc":"","ref":"Ash.Resource.Relationships.HasMany.html#t:t/0","title":"Ash.Resource.Relationships.HasMany.t/0","type":"type"},{"doc":"Represents a has_one relationship on a resource","ref":"Ash.Resource.Relationships.HasOne.html","title":"Ash.Resource.Relationships.HasOne","type":"module"},{"doc":"","ref":"Ash.Resource.Relationships.HasOne.html#transform/1","title":"Ash.Resource.Relationships.HasOne.transform/1","type":"function"},{"doc":"","ref":"Ash.Resource.Relationships.HasOne.html#t:t/0","title":"Ash.Resource.Relationships.HasOne.t/0","type":"type"},{"doc":"Represents a many_to_many relationship on a resource","ref":"Ash.Resource.Relationships.ManyToMany.html","title":"Ash.Resource.Relationships.ManyToMany","type":"module"},{"doc":"","ref":"Ash.Resource.Relationships.ManyToMany.html#t:t/0","title":"Ash.Resource.Relationships.ManyToMany.t/0","type":"type"},{"doc":"Tools for introspecting managed relationships.\n\nExtensions can use this to look at an argument that will be passed\nto a `manage_relationship` change and determine what their behavior\nshould be. For example, AshAdmin uses these to find out what kind of\nnested form it should offer for each argument that manages a relationship.","ref":"Ash.Changeset.ManagedRelationshipHelpers.html","title":"Ash.Changeset.ManagedRelationshipHelpers","type":"module"},{"doc":"","ref":"Ash.Changeset.ManagedRelationshipHelpers.html#could_create?/1","title":"Ash.Changeset.ManagedRelationshipHelpers.could_create?/1","type":"function"},{"doc":"","ref":"Ash.Changeset.ManagedRelationshipHelpers.html#could_handle_missing?/1","title":"Ash.Changeset.ManagedRelationshipHelpers.could_handle_missing?/1","type":"function"},{"doc":"","ref":"Ash.Changeset.ManagedRelationshipHelpers.html#could_lookup?/1","title":"Ash.Changeset.ManagedRelationshipHelpers.could_lookup?/1","type":"function"},{"doc":"","ref":"Ash.Changeset.ManagedRelationshipHelpers.html#could_update?/1","title":"Ash.Changeset.ManagedRelationshipHelpers.could_update?/1","type":"function"},{"doc":"","ref":"Ash.Changeset.ManagedRelationshipHelpers.html#must_load?/2","title":"Ash.Changeset.ManagedRelationshipHelpers.must_load?/2","type":"function"},{"doc":"","ref":"Ash.Changeset.ManagedRelationshipHelpers.html#on_lookup_read_action/2","title":"Ash.Changeset.ManagedRelationshipHelpers.on_lookup_read_action/2","type":"function"},{"doc":"","ref":"Ash.Changeset.ManagedRelationshipHelpers.html#on_lookup_update_action/2","title":"Ash.Changeset.ManagedRelationshipHelpers.on_lookup_update_action/2","type":"function"},{"doc":"","ref":"Ash.Changeset.ManagedRelationshipHelpers.html#on_match_destination_actions/2","title":"Ash.Changeset.ManagedRelationshipHelpers.on_match_destination_actions/2","type":"function"},{"doc":"","ref":"Ash.Changeset.ManagedRelationshipHelpers.html#on_missing_destination_actions/2","title":"Ash.Changeset.ManagedRelationshipHelpers.on_missing_destination_actions/2","type":"function"},{"doc":"","ref":"Ash.Changeset.ManagedRelationshipHelpers.html#on_no_match_destination_actions/2","title":"Ash.Changeset.ManagedRelationshipHelpers.on_no_match_destination_actions/2","type":"function"},{"doc":"","ref":"Ash.Changeset.ManagedRelationshipHelpers.html#sanitize_opts/2","title":"Ash.Changeset.ManagedRelationshipHelpers.sanitize_opts/2","type":"function"},{"doc":"Represents a case insensitive string\n\nWhile some data layers are aware of case insensitive string types, in order for values\nof this type to be used in other parts of Ash Framework, it has to be embedded in a module\nthis allows us to implement the `Comparable` protocol for it.\n\nFor the type implementation, see `Ash.Type.CiString`","ref":"Ash.CiString.html","title":"Ash.CiString","type":"module"},{"doc":"","ref":"Ash.CiString.html#compare/2","title":"Ash.CiString.compare/2","type":"function"},{"doc":"","ref":"Ash.CiString.html#new/2","title":"Ash.CiString.new/2","type":"function"},{"doc":"Creates a case insensitive string","ref":"Ash.CiString.html#sigil_i/2","title":"Ash.CiString.sigil_i/2","type":"function"},{"doc":"Returns the downcased value, only downcasing if it hasn't already been done","ref":"Ash.CiString.html#to_comparable_string/1","title":"Ash.CiString.to_comparable_string/1","type":"function"},{"doc":"","ref":"Ash.CiString.html#value/1","title":"Ash.CiString.value/1","type":"function"},{"doc":"","ref":"Ash.CiString.html#t:t/0","title":"Ash.CiString.t/0","type":"type"},{"doc":"Tools to build Ash expressions","ref":"Ash.Expr.html","title":"Ash.Expr","type":"module"},{"doc":"A template helper for using actor values in filter templates","ref":"Ash.Expr.html#actor/1","title":"Ash.Expr.actor/1","type":"function"},{"doc":"A template helper for using action arguments in filter templates","ref":"Ash.Expr.html#arg/1","title":"Ash.Expr.arg/1","type":"function"},{"doc":"A template helper for referring to the most recent atomic expression applied to an update field","ref":"Ash.Expr.html#atomic_ref/1","title":"Ash.Expr.atomic_ref/1","type":"function"},{"doc":"","ref":"Ash.Expr.html#can_return_nil?/1","title":"Ash.Expr.can_return_nil?/1","type":"function"},{"doc":"A template helper for using query context in filter templates\n\nAn atom will get the value for a key, and a list will be accessed via `get_in`.","ref":"Ash.Expr.html#context/1","title":"Ash.Expr.context/1","type":"function"},{"doc":"","ref":"Ash.Expr.html#determine_type/1","title":"Ash.Expr.determine_type/1","type":"function"},{"doc":"","ref":"Ash.Expr.html#determine_types/3","title":"Ash.Expr.determine_types/3","type":"function"},{"doc":"Evaluate an expression. This function only works if you have no references, or if you provide the `record` option.","ref":"Ash.Expr.html#eval/2","title":"Ash.Expr.eval/2","type":"function"},{"doc":"Evaluate an expression. See `eval/2` for more.","ref":"Ash.Expr.html#eval!/2","title":"Ash.Expr.eval!/2","type":"function"},{"doc":"","ref":"Ash.Expr.html#expr/1","title":"Ash.Expr.expr/1","type":"macro"},{"doc":"Returns true if the value is or contains an expression","ref":"Ash.Expr.html#expr?/1","title":"Ash.Expr.expr?/1","type":"function"},{"doc":"","ref":"Ash.Expr.html#or_where/2","title":"Ash.Expr.or_where/2","type":"macro"},{"doc":"A template helper for creating a parent reference","ref":"Ash.Expr.html#parent/1","title":"Ash.Expr.parent/1","type":"function"},{"doc":"A template helper for creating a reference","ref":"Ash.Expr.html#ref/1","title":"Ash.Expr.ref/1","type":"function"},{"doc":"A template helper for creating a reference to a related path","ref":"Ash.Expr.html#ref/2","title":"Ash.Expr.ref/2","type":"function"},{"doc":"Whether or not a given template contains an actor reference","ref":"Ash.Expr.html#template_references?/2","title":"Ash.Expr.template_references?/2","type":"function"},{"doc":"","ref":"Ash.Expr.html#template_references_argument?/1","title":"Ash.Expr.template_references_argument?/1","type":"function"},{"doc":"","ref":"Ash.Expr.html#template_references_context?/1","title":"Ash.Expr.template_references_context?/1","type":"function"},{"doc":"","ref":"Ash.Expr.html#where/2","title":"Ash.Expr.where/2","type":"macro"},{"doc":"","ref":"Ash.Expr.html#t:t/0","title":"Ash.Expr.t/0","type":"type"},{"doc":"The representation of a filter in Ash.","ref":"Ash.Filter.html","title":"Ash.Filter","type":"module"},{"doc":"If you are using a map with string keys, it is likely that you are parsing\ninput. It is important to note that, instead of passing a filter supplied from\nan external source directly to `Ash.Query.filter/2`, you should call\n`Ash.Filter.parse_input/2`.  This ensures that the filter only uses public\nattributes, relationships, aggregates and calculations, honors field policies\nand any policies on related resources.","ref":"Ash.Filter.html#module-security-concerns","title":"Security Concerns - Ash.Filter","type":"module"},{"doc":"","ref":"Ash.Filter.html#module-writing-a-filter","title":"Writing a filter - Ash.Filter","type":"module"},{"doc":"* `is_nil`\n* `==`\n* `!=`\n* `in`\n* `<`\n* `>`\n* `<=`\n* `>=`\n* `&&`\n* `||`\n* `<>`\n* `/`\n* `-`\n* `*`\n* `+`\n* `equals` (alias\n  for `==`)\n* `not_equals` (alias\n  for `!=`)\n* `gt` (alias\n  for `>`)\n* `lt` (alias\n  for `<`)\n* `gte` (alias\n  for `>=`)\n* `lte` (alias\n  for `<=`)\n* `eq` (alias\n  for `==`)\n* `not_eq` (alias\n  for `!=`)\n* `less_than` (alias\n  for `<`)\n* `greater_than` (alias\n  for `>`)\n* `less_than_or_equal` (alias\n  for `<=`)\n* `greater_than_or_equal` (alias\n  for `>=`)\n* `and` (alias\n  for `&&`)\n* `or` (alias\n  for `||`)\n* `concat` (alias\n  for `<>`)\n* `div` (alias\n  for `/`)\n* `minus` (alias\n  for `-`)\n* `times` (alias\n  for `*`)\n* `plus` (alias\n  for `+`)","ref":"Ash.Filter.html#module-built-in-predicates","title":"Built In Predicates - Ash.Filter","type":"module"},{"doc":"The expression syntax ultimately just builds the keyword list style filter,\nbut with lots of conveniences that would be very annoying to do manually.\n\nExamples\n\n```elixir\nAsh.Query.filter(resource, name == \"Zardoz\")\nAsh.Query.filter(resource, first_name == \"Zar\" and last_name == \"Doz\")\nAsh.Query.filter(resource, first_name == \"Zar\" and last_name in [\"Doz\", \"Daz\"] and high_score > 10)\nAsh.Query.filter(resource, first_name == \"Zar\" or last_name == \"Doz\" or (high_score > 10 and high_score < -10))\n```","ref":"Ash.Filter.html#module-booleanexpression-syntax","title":"BooleanExpression syntax - Ash.Filter","type":"module"},{"doc":"More complex filters can be built using Ash Expressions.\n\nExamples\n\n```elixir\n# Filter based on the contents of a string attribute\nAsh.Query.filter(Helpdesk.Support.Ticket, contains(subject, \"2\"))\n# Filter based on the attribute of a joined relationship:\nAsh.Query.filter(Helpdesk.Support.Ticket, representative.name == ^name)\n```\n\nSee the [Expressions guide](/documentation/topics/reference/expressions.md)\nguide for more information.","ref":"Ash.Filter.html#module-expressions","title":"Expressions - Ash.Filter","type":"module"},{"doc":"A filter is a nested keyword list (with some exceptions, like `true` for\neverything and `false` for nothing).\n\nThe key is the \"predicate\" (or \"condition\") and the value is the parameter.\nYou can use `and` and `or` to create nested filters. Data layers can expose\ncustom predicates. Eventually, you will be able to define your own custom\npredicates, which will be a mechanism for you to attach complex filters\nsupported by the data layer to your queries.\n\n** Important ** In a given keyword list, all predicates are considered to be\n\"ands\". So `[or: [first_name: \"Tom\", last_name: \"Bombadil\"]]` doesn't mean\n'First name == \"tom\" or last_name == \"bombadil\"'. To say that, you want to\nprovide a list of filters, like so: `[or: [[first_name: \"Tom\"], [last_name:\n\"Bombadil\"]]]`\n\nSome example filters:\n\n```elixir\nAsh.Query.filter(resource, [name: \"Zardoz\"])\nAsh.Query.filter(resource, [first_name: \"Zar\", last_name: \"Doz\"])\nAsh.Query.filter(resource, [first_name: \"Zar\", last_name: [in: [\"Doz\", \"Daz\"]], high_score: [greater_than: 10]])\nAsh.Query.filter(resource, [or: [\n  [first_name: \"Zar\"],\n  [last_name: \"Doz\"],\n  [or: [\n    [high_score: [greater_than: 10]]],\n    [high_score: [less_than: -10]]\n  ]\n]])\n```","ref":"Ash.Filter.html#module-keyword-list-syntax","title":"Keyword list syntax - Ash.Filter","type":"module"},{"doc":"Maps are also accepted, as are maps with string keys. Technically, a list of\n`[{\"string_key\", value}]` would also work.","ref":"Ash.Filter.html#module-other-formats","title":"Other formats - Ash.Filter","type":"module"},{"doc":"","ref":"Ash.Filter.html#add_to_filter/6","title":"Ash.Filter.add_to_filter/6","type":"function"},{"doc":"","ref":"Ash.Filter.html#add_to_filter!/6","title":"Ash.Filter.add_to_filter!/6","type":"function"},{"doc":"","ref":"Ash.Filter.html#builtin_functions/0","title":"Ash.Filter.builtin_functions/0","type":"function"},{"doc":"","ref":"Ash.Filter.html#builtin_operators/0","title":"Ash.Filter.builtin_operators/0","type":"function"},{"doc":"","ref":"Ash.Filter.html#builtin_predicate_operators/0","title":"Ash.Filter.builtin_predicate_operators/0","type":"function"},{"doc":"","ref":"Ash.Filter.html#builtins/0","title":"Ash.Filter.builtins/0","type":"function"},{"doc":"","ref":"Ash.Filter.html#custom_expression/2","title":"Ash.Filter.custom_expression/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#do_hydrate_refs/2","title":"Ash.Filter.do_hydrate_refs/2","type":"function"},{"doc":"Find an expression inside of a filter that matches the provided predicate","ref":"Ash.Filter.html#find/4","title":"Ash.Filter.find/4","type":"function"},{"doc":"Can be used to find a simple equality predicate on an attribute\n\nUse this when your attribute is configured with `filterable? :simple_equality`, and you want to\nto find the value that it is being filtered on with (if any).","ref":"Ash.Filter.html#find_simple_equality_predicate/2","title":"Ash.Filter.find_simple_equality_predicate/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#find_value/2","title":"Ash.Filter.find_value/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#flat_map/2","title":"Ash.Filter.flat_map/2","type":"function"},{"doc":"Returns a filter statement that would find a single record based on the input.\n\nFor example:\n\n    iex> get_filter(MyApp.Post, 1)\n    {:ok, %{id: 1}} #using primary key\n    iex> get_filter(MyApp.Post, id: 1)\n    {:ok, %{id: 1}} #using primary key\n    iex> get_filter(MyApp.Post, author_id: 1, publication_id: 2, first_name: \"fred\")\n    {:ok, %{author_id: 1, publication_id: 1}} # using a unique identity\n    iex> get_filter(MyApp.Post, first_name: \"fred\")\n    :error # not enough information","ref":"Ash.Filter.html#get_filter/2","title":"Ash.Filter.get_filter/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#get_function/3","title":"Ash.Filter.get_function/3","type":"function"},{"doc":"","ref":"Ash.Filter.html#get_operator/1","title":"Ash.Filter.get_operator/1","type":"function"},{"doc":"","ref":"Ash.Filter.html#get_predicate_function/3","title":"Ash.Filter.get_predicate_function/3","type":"function"},{"doc":"","ref":"Ash.Filter.html#hydrate_refs/2","title":"Ash.Filter.hydrate_refs/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#list_predicates/1","title":"Ash.Filter.list_predicates/1","type":"function"},{"doc":"","ref":"Ash.Filter.html#list_refs/5","title":"Ash.Filter.list_refs/5","type":"function"},{"doc":"","ref":"Ash.Filter.html#map/2","title":"Ash.Filter.map/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#move_exprs_to_relationship_path/2","title":"Ash.Filter.move_exprs_to_relationship_path/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#move_to_relationship_path/2","title":"Ash.Filter.move_to_relationship_path/2","type":"function"},{"doc":"Parses a filter statement\n\nSee the module documentation for more information on the supported formats for filter\nstatements.","ref":"Ash.Filter.html#parse/3","title":"Ash.Filter.parse/3","type":"function"},{"doc":"If you are trying to validate a filter supplied from an external/untrusted source,\nbe sure to use `parse_input/2` instead! The only difference is that it only accepts\nfilters over public attributes/relationships.","ref":"Ash.Filter.html#parse/3-important","title":"Important - Ash.Filter.parse/3","type":"function"},{"doc":"Parses a filter statement\n\nSee `parse/2` for more","ref":"Ash.Filter.html#parse!/3","title":"Ash.Filter.parse!/3","type":"function"},{"doc":"Parses a filter statement, accepting only public attributes/relationships,\nhonoring field policies & related resource policies.\n\nSee `parse/2` for more","ref":"Ash.Filter.html#parse_input/2","title":"Ash.Filter.parse_input/2","type":"function"},{"doc":"Parses a filter statement, accepting only public attributes/relationships,\nhonoring field policies & related resource policies, raising on errors.\n\nSee `parse_input/2` for more","ref":"Ash.Filter.html#parse_input!/2","title":"Ash.Filter.parse_input!/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#prefix_refs/2","title":"Ash.Filter.prefix_refs/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#put_at_path/2","title":"Ash.Filter.put_at_path/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#relationship_paths/4","title":"Ash.Filter.relationship_paths/4","type":"function"},{"doc":"","ref":"Ash.Filter.html#run_other_data_layer_filters/4","title":"Ash.Filter.run_other_data_layer_filters/4","type":"function"},{"doc":"Returns true if the second argument is a strict subset (always returns the same or less data) of the first","ref":"Ash.Filter.html#strict_subset_of/2","title":"Ash.Filter.strict_subset_of/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#strict_subset_of?/2","title":"Ash.Filter.strict_subset_of?/2","type":"function"},{"doc":"Transform an expression based filter to a simple filter, which is just a list of predicates\n\nOptions:\n\n* `:skip_invalid?` (`t:boolean/0`) - If an invalid filter expression is reached that can't be used with a simple filter (like an `or` statement, or a non-predicate expression), it will be ignored instead of raising an error. The default value is `false`.","ref":"Ash.Filter.html#to_simple_filter/2","title":"Ash.Filter.to_simple_filter/2","type":"function"},{"doc":"","ref":"Ash.Filter.html#update_aggregates/4","title":"Ash.Filter.update_aggregates/4","type":"function"},{"doc":"","ref":"Ash.Filter.html#used_aggregates/3","title":"Ash.Filter.used_aggregates/3","type":"function"},{"doc":"","ref":"Ash.Filter.html#used_calculations/6","title":"Ash.Filter.used_calculations/6","type":"function"},{"doc":"","ref":"Ash.Filter.html#t:t/0","title":"Ash.Filter.t/0","type":"type"},{"doc":"Checks a record to see if it matches a filter statement.\n\nWe can't always tell if a record matches a filter statement, and as such this\nfunction may return `:unknown`. Additionally, some expressions wouldn't ever\nmake sense outside of the context of the data layer, and will always be an\nerror. For example, if you used the trigram search features in\n`ash_postgres`. That logic would need to be handwritten in Elixir and would\nneed to be a *perfect* copy of the postgres implementation. That isn't a\nrealistic goal. This generally should not affect anyone using the standard\nframework features, but if you were to attempt to use this module with a data\nlayer like `ash_postgres`, certain expressions will behave unpredictably.","ref":"Ash.Filter.Runtime.html","title":"Ash.Filter.Runtime","type":"module"},{"doc":"Removes any records that don't match the filter. Automatically loads\nif necessary. If there are any ambiguous terms in the filter (e.g things\nthat could only be determined by data layer), it is assumed that they\nare not matches.","ref":"Ash.Filter.Runtime.html#filter_matches/4","title":"Ash.Filter.Runtime.filter_matches/4","type":"function"},{"doc":"","ref":"Ash.Filter.Runtime.html#old_get_related/6","title":"Ash.Filter.Runtime.old_get_related/6","type":"function"},{"doc":"Represents a simplified filter, with a simple list of predicates","ref":"Ash.Filter.Simple.html","title":"Ash.Filter.Simple","type":"module"},{"doc":"A negated predicate","ref":"Ash.Filter.Simple.Not.html","title":"Ash.Filter.Simple.Not","type":"module"},{"doc":"Represents a field that was hidden due to authorization rules.","ref":"Ash.ForbiddenField.html","title":"Ash.ForbiddenField","type":"module"},{"doc":"Helpers for Ash Mix tasks.","ref":"Ash.Mix.Tasks.Helpers.html","title":"Ash.Mix.Tasks.Helpers","type":"module"},{"doc":"Get all domains for the current project and ensure they are compiled.","ref":"Ash.Mix.Tasks.Helpers.html#domains!/1","title":"Ash.Mix.Tasks.Helpers.domains!/1","type":"function"},{"doc":"Gets all extensions in use by the current project's domains and resources","ref":"Ash.Mix.Tasks.Helpers.html#extensions!/2","title":"Ash.Mix.Tasks.Helpers.extensions!/2","type":"function"},{"doc":"Used when a field hasn't been loaded or selected.","ref":"Ash.NotLoaded.html","title":"Ash.NotLoaded","type":"module"},{"doc":"","ref":"Ash.NotLoaded.html#t:t/0","title":"Ash.NotLoaded.t/0","type":"type"},{"doc":"Helpers for working with nimble options","ref":"Ash.OptionsHelpers.html","title":"Ash.OptionsHelpers","type":"module"},{"doc":"","ref":"Ash.OptionsHelpers.html#ash_resource/0","title":"Ash.OptionsHelpers.ash_resource/0","type":"function"},{"doc":"","ref":"Ash.OptionsHelpers.html#ash_type/0","title":"Ash.OptionsHelpers.ash_type/0","type":"function"},{"doc":"","ref":"Ash.OptionsHelpers.html#hide_all_except/2","title":"Ash.OptionsHelpers.hide_all_except/2","type":"function"},{"doc":"Types for Ash pages","ref":"Ash.Page.html","title":"Ash.Page","type":"module"},{"doc":"","ref":"Ash.Page.html#t:page/0","title":"Ash.Page.page/0","type":"type"},{"doc":"","ref":"Ash.Page.html#t:type/0","title":"Ash.Page.type/0","type":"type"},{"doc":"A page of results from `keyset` based pagination.\n\nThe results are generated with a `keyset` metadata,\nwhich can be used to fetch the next/previous pages.","ref":"Ash.Page.Keyset.html","title":"Ash.Page.Keyset","type":"module"},{"doc":"","ref":"Ash.Page.Keyset.html#data_with_keyset/3","title":"Ash.Page.Keyset.data_with_keyset/3","type":"function"},{"doc":"","ref":"Ash.Page.Keyset.html#filter/4","title":"Ash.Page.Keyset.filter/4","type":"function"},{"doc":"","ref":"Ash.Page.Keyset.html#new/6","title":"Ash.Page.Keyset.new/6","type":"function"},{"doc":"A restricted version of `:erlang.binary_to_term/2` that forbids\n*executable* terms, such as anonymous functions.\nThe `opts` are given to the underlying `:erlang.binary_to_term/2`\ncall, with an empty list as a default.\nBy default this function does not restrict atoms, as an atom\ninterned in one node may not yet have been interned on another\n(except for releases, which preload all code).\nIf you want to avoid atoms from being created, then you can pass\n`[:safe]` as options, as that will also enable the safety mechanisms\nfrom `:erlang.binary_to_term/2` itself.\nRipped from https://github.com/elixir-plug/plug_crypto/blob/v1.2.0/lib/plug/crypto.ex","ref":"Ash.Page.Keyset.html#non_executable_binary_to_term/2","title":"Ash.Page.Keyset.non_executable_binary_to_term/2","type":"function"},{"doc":"","ref":"Ash.Page.Keyset.html#t:t/0","title":"Ash.Page.Keyset.t/0","type":"type"},{"doc":"A page of results from `offset` based pagination.\n\nIf a resource supports `keyset` pagination as well,\nit will also have the `keyset` metadata.","ref":"Ash.Page.Offset.html","title":"Ash.Page.Offset","type":"module"},{"doc":"","ref":"Ash.Page.Offset.html#new/5","title":"Ash.Page.Offset.new/5","type":"function"},{"doc":"","ref":"Ash.Page.Offset.html#t:t/0","title":"Ash.Page.Offset.t/0","type":"type"},{"doc":"Helpers for working with the Plug connection.","ref":"Ash.PlugHelpers.html","title":"Ash.PlugHelpers","type":"module"},{"doc":"Retrieves the actor from the Plug connection.\n\nThe actor is stored inside the [connection's private\nfields](https://hexdocs.pm/plug/Plug.Conn.html#module-private-fields).","ref":"Ash.PlugHelpers.html#get_actor/1","title":"Ash.PlugHelpers.get_actor/1","type":"function"},{"doc":"This function checks to see if the actor is already set in the `@actor`\nassign, and if so will emit a deprecation warning.\n\nThis is to allow apps using the previous method a chance to update.\n\nRather than setting the actor in the assigns, please use the `set_actor/2`\nmethod.","ref":"Ash.PlugHelpers.html#get_actor/1-deprecation-warning","title":"Deprecation warning - Ash.PlugHelpers.get_actor/1","type":"function"},{"doc":"iex> actor = build_actor(%{email: \"marty@1985.retro\"})\n    ...> conn = build_conn() |> put_private(:ash, %{actor: actor})\n    ...> actor = get_actor(conn)\n    %{email: \"marty@1985.retro\"} = actor\n\n    iex> actor = build_actor(%{email: \"marty@1985.retro\"})\n    ...> conn = build_conn() |> assign(:actor, actor)\n    ...> actor = get_actor(conn)\n    %{email: \"marty@1985.retro\"} = actor","ref":"Ash.PlugHelpers.html#get_actor/1-example","title":"Example - Ash.PlugHelpers.get_actor/1","type":"function"},{"doc":"Retrieves the context from the Plug connection.\n\nThe context is stored inside the [connection's private\nfields](https://hexdocs.pm/plug/Plug.Conn.html#module-private-fields).","ref":"Ash.PlugHelpers.html#get_context/1","title":"Ash.PlugHelpers.get_context/1","type":"function"},{"doc":"iex> context = %{fraud_score: 0.427}\n    ...> conn = build_conn() |> put_private(:ash, %{context: context})\n    ...> context = get_context(conn)\n    %{fraud_score: 0.427}","ref":"Ash.PlugHelpers.html#get_context/1-example","title":"Example - Ash.PlugHelpers.get_context/1","type":"function"},{"doc":"Retrieves the tenant from the Plug connection.\n\nThe tenant is stored inside the [connection's private\nfields](https://hexdocs.pm/plug/Plug.Conn.html#module-private-fields).","ref":"Ash.PlugHelpers.html#get_tenant/1","title":"Ash.PlugHelpers.get_tenant/1","type":"function"},{"doc":"This function checks to see if the tenant is already set in the `@tenant`\nassign, and if so will emit a deprecation warning.\n\nThis is to allow apps using the previous method a chance to update.\n\nRather than setting the tenant in the assigns, please use the `set_tenant/2`\nmethod.","ref":"Ash.PlugHelpers.html#get_tenant/1-deprecation-warning","title":"Deprecation warning - Ash.PlugHelpers.get_tenant/1","type":"function"},{"doc":"iex> conn = build_conn() |> put_private(:ash, %{tenant: \"my-tenant\"})\n    ...> tenant = get_tenant(conn)\n    \"my_tenant\" = tenant\n\n    iex> conn = build_conn() |> assign(:tenant, \"my-tenant\")\n    ...> tenant = get_tenant(conn)\n    \"my_tenant\" = tenant","ref":"Ash.PlugHelpers.html#get_tenant/1-example","title":"Example - Ash.PlugHelpers.get_tenant/1","type":"function"},{"doc":"Sets the actor inside the Plug connection.\n\nThe actor is stored inside the [connection's private\nfields](https://hexdocs.pm/plug/Plug.Conn.html#module-private-fields).","ref":"Ash.PlugHelpers.html#set_actor/2","title":"Ash.PlugHelpers.set_actor/2","type":"function"},{"doc":"iex> actor = build_actor(%{email: \"marty@1985.retro\"})\n    ...> conn = build_conn() |> set_actor(actor)\n    %Plug.Conn{private: %{ash: %{actor: %{email: \"marty@1985.retro\"}}}} = conn","ref":"Ash.PlugHelpers.html#set_actor/2-example","title":"Example - Ash.PlugHelpers.set_actor/2","type":"function"},{"doc":"Sets the context inside the Plug connection.\n\nContext can be used to store abitrary data about the user, connection, or\nanything else you like that doesn't belong as part of the actor or tenant.\n\nThe context is stored inside the [connection's private\nfields](https://hexdocs.pm/plug/Plug.Conn.html#module-private-fields).","ref":"Ash.PlugHelpers.html#set_context/2","title":"Ash.PlugHelpers.set_context/2","type":"function"},{"doc":"iex> context = %{fraud_score: 0.427}\n    ...> conn = build_conn() |> set_context(context)\n    %Plug.Conn{private: %{ash: %{context: %{fraud_score: 0.427}}}}","ref":"Ash.PlugHelpers.html#set_context/2-example","title":"Example - Ash.PlugHelpers.set_context/2","type":"function"},{"doc":"Sets the tenant inside the Plug connection.\n\nThe tenant is stored inside the [connection's private\nfields](https://hexdocs.pm/plug/Plug.Conn.html#module-private-fields).","ref":"Ash.PlugHelpers.html#set_tenant/2","title":"Ash.PlugHelpers.set_tenant/2","type":"function"},{"doc":"iex> conn = build_conn() |> set_tenant(\"my-tenant\")\n    %Plug.Conn{private: %{ash: %{tenant: \"my-tenant}}} = conn","ref":"Ash.PlugHelpers.html#set_tenant/2-example","title":"Example - Ash.PlugHelpers.set_tenant/2","type":"function"},{"doc":"Updates the actor inside the Plug connection.\n\nThe actor is stored inside the [connection's private\nfields](https://hexdocs.pm/plug/Plug.Conn.html#module-private-fields).","ref":"Ash.PlugHelpers.html#update_actor/2","title":"Ash.PlugHelpers.update_actor/2","type":"function"},{"doc":"iex> actor = build_actor(%{email: \"marty@1985.retro\"})\n    ...> conn = build_conn() |> put_private(:ash, %{actor: actor})\n    ...> actor = get_actor(conn)\n    %{email: \"marty@1985.retro\"} = actor\n    ...> conn = update_actor(conn, fn actor -> Map.put(actor, :name, \"Marty Retro\") end)\n    ...> actor = get_actor(conn)\n    %{email: \"marty@1985.retro\", name: \"Marty Retro\"} = actor\n    ...> conn = update_actor(conn, fn actor -> Map.delete(actor, :email) end)\n    ...> actor = get_actor(conn)\n    %{name: \"Marty Retro\"} = actor","ref":"Ash.PlugHelpers.html#update_actor/2-example","title":"Example - Ash.PlugHelpers.update_actor/2","type":"function"},{"doc":"Updates the context inside the Plug connection.\n\nThe context is stored inside the [connection's private\nfields](https://hexdocs.pm/plug/Plug.Conn.html#module-private-fields).","ref":"Ash.PlugHelpers.html#update_context/2","title":"Ash.PlugHelpers.update_context/2","type":"function"},{"doc":"iex> context = %{species: \"Fythetropozoat\"}\n    ...> conn = build_conn() |> put_private(:ash, %{context: context})\n    ...> context = get_context(conn)\n    %{fraud_score: 0.427}\n    ...> conn = update_context(conn, fn context -> Map.put(context, :location, \"Barnard's Loop\") end)\n    ...> context = get_context(conn)\n    %{species: \"Fythetropozoat\", location: \"Barnard's Loop\"}\n    ...> conn = update_context(conn, fn context -> Map.delete(context, :fraud_score) end)\n    ...> context = get_context(conn)\n    %{location: \"Barnard's Loop\"}","ref":"Ash.PlugHelpers.html#update_context/2-example","title":"Example - Ash.PlugHelpers.update_context/2","type":"function"},{"doc":"Helpers for working with processes and Ash actions.","ref":"Ash.ProcessHelpers.html","title":"Ash.ProcessHelpers","type":"module"},{"doc":"Creates a task that will properly transfer the ash context to the new process","ref":"Ash.ProcessHelpers.html#async/2","title":"Ash.ProcessHelpers.async/2","type":"function"},{"doc":"Gets all of the ash context so it can be set into a new process.\n\nUse `transfer_context/1` in the new process to set the context.","ref":"Ash.ProcessHelpers.html#get_context_for_transfer/1","title":"Ash.ProcessHelpers.get_context_for_transfer/1","type":"function"},{"doc":"Creates a task that will properly transfer the ash context to the new process, and timeout if it takes longer than the given timeout","ref":"Ash.ProcessHelpers.html#task_with_timeout/5","title":"Ash.ProcessHelpers.task_with_timeout/5","type":"function"},{"doc":"","ref":"Ash.ProcessHelpers.html#transfer_context/2","title":"Ash.ProcessHelpers.transfer_context/2","type":"function"},{"doc":"Tools for transforming resources in DSL Transformers.","ref":"Ash.Resource.Builder.html","title":"Ash.Resource.Builder","type":"module"},{"doc":"Builds and adds an action","ref":"Ash.Resource.Builder.html#add_action/4","title":"Ash.Resource.Builder.add_action/4","type":"function"},{"doc":"Builds and adds an aggregate to a resource","ref":"Ash.Resource.Builder.html#add_aggregate/5","title":"Ash.Resource.Builder.add_aggregate/5","type":"function"},{"doc":"Builds and adds an attribute to a resource","ref":"Ash.Resource.Builder.html#add_attribute/4","title":"Ash.Resource.Builder.add_attribute/4","type":"function"},{"doc":"Builds and adds a calculation to a resource","ref":"Ash.Resource.Builder.html#add_calculation/5","title":"Ash.Resource.Builder.add_calculation/5","type":"function"},{"doc":"Builds and adds an calculation interface to a resource","ref":"Ash.Resource.Builder.html#add_calculation_interface/3","title":"Ash.Resource.Builder.add_calculation_interface/3","type":"function"},{"doc":"Builds and adds a change","ref":"Ash.Resource.Builder.html#add_change/3","title":"Ash.Resource.Builder.add_change/3","type":"function"},{"doc":"Builds and adds a create_timestamp to a resource","ref":"Ash.Resource.Builder.html#add_create_timestamp/3","title":"Ash.Resource.Builder.add_create_timestamp/3","type":"function"},{"doc":"Builds and adds an identity","ref":"Ash.Resource.Builder.html#add_identity/4","title":"Ash.Resource.Builder.add_identity/4","type":"function"},{"doc":"Builds and adds an interface to a resource","ref":"Ash.Resource.Builder.html#add_interface/3","title":"Ash.Resource.Builder.add_interface/3","type":"function"},{"doc":"Builds and adds a new action unless an action with that name already exists","ref":"Ash.Resource.Builder.html#add_new_action/4","title":"Ash.Resource.Builder.add_new_action/4","type":"function"},{"doc":"Builds and adds an aggregate unless an aggregate with that name already exists","ref":"Ash.Resource.Builder.html#add_new_aggregate/5","title":"Ash.Resource.Builder.add_new_aggregate/5","type":"function"},{"doc":"Builds and adds an attribute unless an attribute with that name already exists","ref":"Ash.Resource.Builder.html#add_new_attribute/4","title":"Ash.Resource.Builder.add_new_attribute/4","type":"function"},{"doc":"Builds and adds a calculation unless a calculation with that name already exists","ref":"Ash.Resource.Builder.html#add_new_calculation/5","title":"Ash.Resource.Builder.add_new_calculation/5","type":"function"},{"doc":"Builds and adds an calculation interface unless an calculation interface with that name already exists","ref":"Ash.Resource.Builder.html#add_new_calculation_interface/3","title":"Ash.Resource.Builder.add_new_calculation_interface/3","type":"function"},{"doc":"Builds and adds a create_timestamp unless a create_timestamp with that name already exists","ref":"Ash.Resource.Builder.html#add_new_create_timestamp/3","title":"Ash.Resource.Builder.add_new_create_timestamp/3","type":"function"},{"doc":"Builds and adds a new identity unless an identity with that name already exists","ref":"Ash.Resource.Builder.html#add_new_identity/4","title":"Ash.Resource.Builder.add_new_identity/4","type":"function"},{"doc":"Builds and adds an interface unless an interface with that name already exists","ref":"Ash.Resource.Builder.html#add_new_interface/3","title":"Ash.Resource.Builder.add_new_interface/3","type":"function"},{"doc":"Builds and adds a new relationship unless a relationship with that name already exists","ref":"Ash.Resource.Builder.html#add_new_relationship/5","title":"Ash.Resource.Builder.add_new_relationship/5","type":"function"},{"doc":"Builds and adds an update_timestamp unless an update_timestamp with that name already exists","ref":"Ash.Resource.Builder.html#add_new_update_timestamp/3","title":"Ash.Resource.Builder.add_new_update_timestamp/3","type":"function"},{"doc":"Builds and adds a preparation","ref":"Ash.Resource.Builder.html#add_preparation/3","title":"Ash.Resource.Builder.add_preparation/3","type":"function"},{"doc":"Builds and adds an action","ref":"Ash.Resource.Builder.html#add_relationship/5","title":"Ash.Resource.Builder.add_relationship/5","type":"function"},{"doc":"Builds and adds an update_timestamp","ref":"Ash.Resource.Builder.html#add_update_timestamp/3","title":"Ash.Resource.Builder.add_update_timestamp/3","type":"function"},{"doc":"Builds an action","ref":"Ash.Resource.Builder.html#build_action/3","title":"Ash.Resource.Builder.build_action/3","type":"function"},{"doc":"Builds an action argument","ref":"Ash.Resource.Builder.html#build_action_argument/3","title":"Ash.Resource.Builder.build_action_argument/3","type":"function"},{"doc":"Builds an action change","ref":"Ash.Resource.Builder.html#build_action_change/2","title":"Ash.Resource.Builder.build_action_change/2","type":"function"},{"doc":"Builds an action metadata","ref":"Ash.Resource.Builder.html#build_action_metadata/3","title":"Ash.Resource.Builder.build_action_metadata/3","type":"function"},{"doc":"Builds a calculation with the given name, type, and options","ref":"Ash.Resource.Builder.html#build_aggregate/4","title":"Ash.Resource.Builder.build_aggregate/4","type":"function"},{"doc":"Builds an attribute with the given name, type, and options","ref":"Ash.Resource.Builder.html#build_attribute/3","title":"Ash.Resource.Builder.build_attribute/3","type":"function"},{"doc":"Builds a calculation with the given name, type, and options","ref":"Ash.Resource.Builder.html#build_calculation/4","title":"Ash.Resource.Builder.build_calculation/4","type":"function"},{"doc":"Builds a calculation argument","ref":"Ash.Resource.Builder.html#build_calculation_argument/3","title":"Ash.Resource.Builder.build_calculation_argument/3","type":"function"},{"doc":"Builds an calculation interface with the given name, type, and options","ref":"Ash.Resource.Builder.html#build_calculation_interface/2","title":"Ash.Resource.Builder.build_calculation_interface/2","type":"function"},{"doc":"Builds a change","ref":"Ash.Resource.Builder.html#build_change/2","title":"Ash.Resource.Builder.build_change/2","type":"function"},{"doc":"Builds an create_timestamp with the given name, type, and options","ref":"Ash.Resource.Builder.html#build_create_timestamp/2","title":"Ash.Resource.Builder.build_create_timestamp/2","type":"function"},{"doc":"Builds an action","ref":"Ash.Resource.Builder.html#build_identity/3","title":"Ash.Resource.Builder.build_identity/3","type":"function"},{"doc":"Builds an interface with the given name, type, and options","ref":"Ash.Resource.Builder.html#build_interface/2","title":"Ash.Resource.Builder.build_interface/2","type":"function"},{"doc":"Builds a pagination object","ref":"Ash.Resource.Builder.html#build_pagination/1","title":"Ash.Resource.Builder.build_pagination/1","type":"function"},{"doc":"Builds a preparation","ref":"Ash.Resource.Builder.html#build_preparation/2","title":"Ash.Resource.Builder.build_preparation/2","type":"function"},{"doc":"Builds a relationship","ref":"Ash.Resource.Builder.html#build_relationship/4","title":"Ash.Resource.Builder.build_relationship/4","type":"function"},{"doc":"Builds an update_timestamp with the given name, type, and options","ref":"Ash.Resource.Builder.html#build_update_timestamp/2","title":"Ash.Resource.Builder.build_update_timestamp/2","type":"function"},{"doc":"Builds and adds an action to the front of the actions list","ref":"Ash.Resource.Builder.html#prepend_action/4","title":"Ash.Resource.Builder.prepend_action/4","type":"function"},{"doc":"Tools for working with the satsolver that drives filter subset checking (for authorization)","ref":"Ash.SatSolver.html","title":"Ash.SatSolver","type":"module"},{"doc":"Creates tuples of a boolean statement.\n\ni.e `b(1 and 2) #=> {:and, 1, 2}`","ref":"Ash.SatSolver.html#b/1","title":"Ash.SatSolver.b/1","type":"macro"},{"doc":"","ref":"Ash.SatSolver.html#contains?/2","title":"Ash.SatSolver.contains?/2","type":"function"},{"doc":"","ref":"Ash.SatSolver.html#find_non_equal_overlap/1","title":"Ash.SatSolver.find_non_equal_overlap/1","type":"function"},{"doc":"Returns `b(not (left and right))`","ref":"Ash.SatSolver.html#left_excludes_right/2","title":"Ash.SatSolver.left_excludes_right/2","type":"function"},{"doc":"Returns `b(not (left and not right))`","ref":"Ash.SatSolver.html#left_implies_right/2","title":"Ash.SatSolver.left_implies_right/2","type":"function"},{"doc":"","ref":"Ash.SatSolver.html#lift_equals_out_of_in/1","title":"Ash.SatSolver.lift_equals_out_of_in/1","type":"function"},{"doc":"Returns a statement expressing that the predicates are mutually exclusive.","ref":"Ash.SatSolver.html#mutually_exclusive/2","title":"Ash.SatSolver.mutually_exclusive/2","type":"function"},{"doc":"Returns a statement expressing that the predicates are mutually exclusive and collectively exhaustive.","ref":"Ash.SatSolver.html#mutually_exclusive_and_collectively_exhaustive/1","title":"Ash.SatSolver.mutually_exclusive_and_collectively_exhaustive/1","type":"function"},{"doc":"Returns a statement expressing that the predicates are mutually inclusive","ref":"Ash.SatSolver.html#mutually_inclusive/2","title":"Ash.SatSolver.mutually_inclusive/2","type":"function"},{"doc":"Returns `b(not (right and left))`","ref":"Ash.SatSolver.html#right_excludes_left/2","title":"Ash.SatSolver.right_excludes_left/2","type":"function"},{"doc":"Returns `b(not (right and not left))`","ref":"Ash.SatSolver.html#right_implies_left/2","title":"Ash.SatSolver.right_implies_left/2","type":"function"},{"doc":"","ref":"Ash.SatSolver.html#solutions_to_predicate_values/2","title":"Ash.SatSolver.solutions_to_predicate_values/2","type":"function"},{"doc":"","ref":"Ash.SatSolver.html#solve_expression/1","title":"Ash.SatSolver.solve_expression/1","type":"function"},{"doc":"","ref":"Ash.SatSolver.html#split_in_expressions/2","title":"Ash.SatSolver.split_in_expressions/2","type":"function"},{"doc":"Returns true if the candidate filter returns the same or less data than the filter","ref":"Ash.SatSolver.html#strict_filter_subset/2","title":"Ash.SatSolver.strict_filter_subset/2","type":"function"},{"doc":"Returns `true` if the relationship paths are synonymous from a data perspective","ref":"Ash.SatSolver.html#synonymous_relationship_paths?/4","title":"Ash.SatSolver.synonymous_relationship_paths?/4","type":"function"},{"doc":"Transforms a statement to Conjunctive Normal Form(CNF), as lists of lists of integers.","ref":"Ash.SatSolver.html#to_cnf/1","title":"Ash.SatSolver.to_cnf/1","type":"function"},{"doc":"Prepares a filter for comparison","ref":"Ash.SatSolver.html#transform/2","title":"Ash.SatSolver.transform/2","type":"function"},{"doc":"Calls `transform/2` and solves the expression","ref":"Ash.SatSolver.html#transform_and_solve/2","title":"Ash.SatSolver.transform_and_solve/2","type":"function"},{"doc":"Remaps integers back to clauses","ref":"Ash.SatSolver.html#unbind/2","title":"Ash.SatSolver.unbind/2","type":"function"},{"doc":"Utilities and types for sorting.","ref":"Ash.Sort.html","title":"Ash.Sort","type":"module"},{"doc":"Keyset pagination cannot currently be used in conjunction with aggregate and calculation sorting.\nCombining them will result in an error on the query.","ref":"Ash.Sort.html#module-important","title":"Important - Ash.Sort","type":"module"},{"doc":"Builds an expression to be used in a sort statement.\n\nFor example:\n\n```elixir\nAsh.Query.sort(query, Ash.Sort.expr_sort(author.full_name, :string))\n\nAsh.Query.sort(query, [{Ash.Sort.expr_sort(author.full_name, :string), :desc_nils_first}])\n```","ref":"Ash.Sort.html#expr_sort/2","title":"Ash.Sort.expr_sort/2","type":"macro"},{"doc":"A utility for parsing sorts provided from external input. Only allows sorting on public fields.\n\nThe supported formats are:","ref":"Ash.Sort.html#parse_input/3","title":"Ash.Sort.parse_input/3","type":"function"},{"doc":"A comma separated list of fields to sort on, each with an optional prefix.\n\nThe prefixes are:\n\n* \"+\" - Same as no prefix. Sorts `:asc`.\n* \"++\" - Sorts `:asc_nils_first`\n* \"-\" - Sorts `:desc`\n* \"--\" - Sorts `:desc_nils_last`\n\nFor example\n\n    \"foo,-bar,++baz,--buz\"","ref":"Ash.Sort.html#parse_input/3-sort-strings","title":"Sort Strings - Ash.Sort.parse_input/3","type":"function"},{"doc":"Same prefix rules as above, but provided as a list.\n\nFor example:\n\n    [\"foo\", \"-bar\", \"++baz\", \"--buz\"]","ref":"Ash.Sort.html#parse_input/3-a-list-of-sort-strings","title":"A list of sort strings - Ash.Sort.parse_input/3","type":"function"},{"doc":"A handler function may be provided that takes a string, and returns the relevant sort\nIt won't be given any prefixes, only the field. This allows for things like parsing the calculation values\nout of the sort, or setting calculation values if they are not included in the sort string.\n\nTo return calculation parameters, return `{:field, %{param: :value}}`. This will end up as something\nlike `{:field, {%{param: :value}, :desc}}`, with the corresponding sort order.\n\nThis handler function will only be called if you pass in a string or list of strings for the sort.\nAtoms will be assumed to have already been handled. The handler should return `nil` if it is not handling\nthe given field.","ref":"Ash.Sort.html#parse_input/3-handling-specific-values","title":"Handling specific values - Ash.Sort.parse_input/3","type":"function"},{"doc":"Same as `parse_input/2` except raises any errors\n\nSee `parse_input/2` for more.","ref":"Ash.Sort.html#parse_input!/3","title":"Ash.Sort.parse_input!/3","type":"function"},{"doc":"","ref":"Ash.Sort.html#parse_sort/3","title":"Ash.Sort.parse_sort/3","type":"function"},{"doc":"Reverses an Ash sort statement.","ref":"Ash.Sort.html#reverse/1","title":"Ash.Sort.reverse/1","type":"function"},{"doc":"A utility for sorting a list of records at runtime.\n\nFor example:\n\n    Ash.Sort.runtime_sort([record1, record2, record3], name: :asc, type: :desc_nils_last)\n\nKeep in mind that it is unrealistic to expect this runtime sort to always\nbe exactly the same as a sort that may have been applied by your data layer.\nThis is especially true for strings. For example, `Postgres` strings have a\ncollation that affects their sorting, making it unpredictable from the perspective\nof a tool using the database: https://www.postgresql.org/docs/current/collation.html","ref":"Ash.Sort.html#runtime_sort/3","title":"Ash.Sort.runtime_sort/3","type":"function"},{"doc":"","ref":"Ash.Sort.html#t:sort_item/0","title":"Ash.Sort.sort_item/0","type":"type"},{"doc":"","ref":"Ash.Sort.html#t:sort_order/0","title":"Ash.Sort.sort_order/0","type":"type"},{"doc":"","ref":"Ash.Sort.html#t:t/0","title":"Ash.Sort.t/0","type":"type"},{"doc":"Helpers for working with UUIDs","ref":"Ash.UUID.html","title":"Ash.UUID","type":"module"},{"doc":"Generates a new uuid","ref":"Ash.UUID.html#generate/0","title":"Ash.UUID.generate/0","type":"function"},{"doc":"Helpers for working with UUIDs version 7.\n\n[RFC 9562](https://www.rfc-editor.org/rfc/rfc9562#name-uuid-version-7)\n\nUsed for generating UUIDs version 7 with increased clock precision for better monotonicity,\nas described by method 3 of the [Section 6.2](https://www.rfc-editor.org/rfc/rfc9562#name-monotonicity-and-counters\n\nInspired by the work of [Ryan Winchester](https://github.com/ryanwinchester/) on [uuidv7](https://github.com/ryanwinchester/uuidv7)","ref":"Ash.UUIDv7.html","title":"Ash.UUIDv7","type":"module"},{"doc":"iex> UUIDv7.generate()\n    \"018e90d8-06e8-7f9f-bfd7-6730ba98a51b\"\n\n    iex> UUIDv7.bingenerate()\n    <<1, 142, 144, 216, 6, 232, 127, 159, 191, 215, 103, 48, 186, 152, 165, 27>>","ref":"Ash.UUIDv7.html#module-examples","title":"Examples - Ash.UUIDv7","type":"module"},{"doc":"Generates a version 7 UUID in the binary format.","ref":"Ash.UUIDv7.html#bingenerate/0","title":"Ash.UUIDv7.bingenerate/0","type":"function"},{"doc":"iex> UUIDv7.bingenerate()\n    <<1, 142, 144, 216, 6, 232, 127, 159, 191, 215, 103, 48, 186, 152, 165, 27>>","ref":"Ash.UUIDv7.html#bingenerate/0-example","title":"Example - Ash.UUIDv7.bingenerate/0","type":"function"},{"doc":"Decode a string representation of a UUID to the raw binary version.","ref":"Ash.UUIDv7.html#decode/1","title":"Ash.UUIDv7.decode/1","type":"function"},{"doc":"iex> UUIDv7.decode(\"018e90d8-06e8-7f9f-bfd7-6730ba98a51b\")\n    <<1, 142, 144, 216, 6, 232, 127, 159, 191, 215, 103, 48, 186, 152, 165, 27>>","ref":"Ash.UUIDv7.html#decode/1-example","title":"Example - Ash.UUIDv7.decode/1","type":"function"},{"doc":"Encode a raw UUID to the string representation.","ref":"Ash.UUIDv7.html#encode/1","title":"Ash.UUIDv7.encode/1","type":"function"},{"doc":"iex> UUIDv7.encode(<<1, 142, 144, 216, 6, 232, 127, 159, 191, 215, 103, 48, 186, 152, 165, 27>>)\n    \"018e90d8-06e8-7f9f-bfd7-6730ba98a51b\"","ref":"Ash.UUIDv7.html#encode/1-example","title":"Example - Ash.UUIDv7.encode/1","type":"function"},{"doc":"Extract the millisecond timestamp from the UUID.","ref":"Ash.UUIDv7.html#extract_timestamp/1","title":"Ash.UUIDv7.extract_timestamp/1","type":"function"},{"doc":"iex> UUIDv7.extract_timestamp(\"018ecb40-c457-73e6-a400-000398daddd9\")\n    1712807003223","ref":"Ash.UUIDv7.html#extract_timestamp/1-example","title":"Example - Ash.UUIDv7.extract_timestamp/1","type":"function"},{"doc":"Generates a version 7 UUID using submilliseconds for increased clock precision.","ref":"Ash.UUIDv7.html#generate/0","title":"Ash.UUIDv7.generate/0","type":"function"},{"doc":"iex> UUIDv7.generate()\n    \"018e90d8-06e8-7f9f-bfd7-6730ba98a51b\"","ref":"Ash.UUIDv7.html#generate/0-example","title":"Example - Ash.UUIDv7.generate/0","type":"function"},{"doc":"A raw binary representation of a UUID.","ref":"Ash.UUIDv7.html#t:raw/0","title":"Ash.UUIDv7.raw/0","type":"type"},{"doc":"A hex-encoded UUID string.","ref":"Ash.UUIDv7.html#t:t/0","title":"Ash.UUIDv7.t/0","type":"type"},{"doc":"A wrapper for values that are sourced from `Ash.Type.Union`.","ref":"Ash.Union.html","title":"Ash.Union","type":"module"},{"doc":"","ref":"Ash.Union.html#t:t/0","title":"Ash.Union.t/0","type":"type"},{"doc":"A vector struct for Ash.\n\nImplementation based off of https://github.com/pgvector/pgvector-elixir/blob/v0.2.0/lib/pgvector.ex","ref":"Ash.Vector.html","title":"Ash.Vector","type":"module"},{"doc":"Creates a new vector from its binary representation","ref":"Ash.Vector.html#from_binary/1","title":"Ash.Vector.from_binary/1","type":"function"},{"doc":"Creates a new vector from a list or tensor","ref":"Ash.Vector.html#new/1","title":"Ash.Vector.new/1","type":"function"},{"doc":"Converts the vector to its binary representation","ref":"Ash.Vector.html#to_binary/1","title":"Ash.Vector.to_binary/1","type":"function"},{"doc":"Converts the vector to a list","ref":"Ash.Vector.html#to_list/1","title":"Ash.Vector.to_list/1","type":"function"},{"doc":"","ref":"Ash.Vector.html#t:t/0","title":"Ash.Vector.t/0","type":"type"},{"doc":"Generate Mermaid diagrams from a specified domain.","ref":"Ash.Domain.Info.Diagram.html","title":"Ash.Domain.Info.Diagram","type":"module"},{"doc":"We can't easily model Ash relationships with Mermaid diagrams\nbecause they are unidirectional and could be asymmetric.\nMermaid assumes symmetrical, bidirectional relationships.\nIf we try to model all unidirectional relationships as separate\nlines in the diagram it gets very hard to read very quickly.","ref":"Ash.Domain.Info.Diagram.html#module-limitations","title":"Limitations - Ash.Domain.Info.Diagram","type":"module"},{"doc":"Generates a Mermaid Class Diagram for a given domain.\n\nShows only public attributes, calculations, aggregates and actions.\nShows a connecting line for relationships with the type of relationship\nindicated in the attribute list.","ref":"Ash.Domain.Info.Diagram.html#mermaid_class_diagram/2","title":"Ash.Domain.Info.Diagram.mermaid_class_diagram/2","type":"function"},{"doc":"Generates a Mermaid Entity Relationship Diagram for a given domain.\n\nShows only public attributes, calculations, aggregates and actions.\nShows a one-to-one line for relationships as enumerating all unidirectional\nrelationships is far too noisy.","ref":"Ash.Domain.Info.Diagram.html#mermaid_er_diagram/2","title":"Ash.Domain.Info.Diagram.mermaid_er_diagram/2","type":"function"},{"doc":"Generate a Livebook from a specified domain.","ref":"Ash.Domain.Info.Livebook.html","title":"Ash.Domain.Info.Livebook","type":"module"},{"doc":"","ref":"Ash.Domain.Info.Livebook.html#action_header/0","title":"Ash.Domain.Info.Livebook.action_header/0","type":"function"},{"doc":"","ref":"Ash.Domain.Info.Livebook.html#action_input_section/2","title":"Ash.Domain.Info.Livebook.action_input_section/2","type":"function"},{"doc":"","ref":"Ash.Domain.Info.Livebook.html#action_section/2","title":"Ash.Domain.Info.Livebook.action_section/2","type":"function"},{"doc":"","ref":"Ash.Domain.Info.Livebook.html#attr_header/0","title":"Ash.Domain.Info.Livebook.attr_header/0","type":"function"},{"doc":"","ref":"Ash.Domain.Info.Livebook.html#attr_section/1","title":"Ash.Domain.Info.Livebook.attr_section/1","type":"function"},{"doc":"","ref":"Ash.Domain.Info.Livebook.html#domain_section/1","title":"Ash.Domain.Info.Livebook.domain_section/1","type":"function"},{"doc":"","ref":"Ash.Domain.Info.Livebook.html#overview/1","title":"Ash.Domain.Info.Livebook.overview/1","type":"function"},{"doc":"","ref":"Ash.Domain.Info.Livebook.html#resource_section/1","title":"Ash.Domain.Info.Livebook.resource_section/1","type":"function"},{"doc":"Generates policy mermaid charts","ref":"Ash.Policy.Chart.Mermaid.html","title":"Ash.Policy.Chart.Mermaid","type":"module"},{"doc":"","ref":"Ash.Policy.Chart.Mermaid.html#chart/1","title":"Ash.Policy.Chart.Mermaid.chart/1","type":"function"},{"doc":"Tools for generating input to Ash resource actions, as well as for seeds.\n\nThese tools are young, and various factors are not taken into account. For example,\nvalidations and identities are not automatically considered.\n\nIf you want to use this with stream data testing, you will likely want to get familiar with `StreamData`.\n\nMany functions in this module support overrides, which allow passing down either constant values\nor your own generators.\n\nFor example:\n\n```elixir\n# All generated posts will have text as `\"text\"`. Equivalent to providing `StreamData.constant(\"text\")`.\nAsh.Generator.seed_input(Post, %{text: \"text\"})\n```","ref":"Ash.Generator.html","title":"Ash.Generator","type":"module"},{"doc":"Generate input meant to be passed into a resource action.\n\nCurrently input for arguments that are passed to a `manage_relationship` are excluded, and you will\nhave to generate them yourself by passing your own generators/values down. See the module documentation for more.","ref":"Ash.Generator.html#action_input/3","title":"Ash.Generator.action_input/3","type":"function"},{"doc":"Creates the input for the provided action with `action_input/3`, and creates a changeset for that action with that input.\n\nSee `action_input/3` and the module documentation for more.","ref":"Ash.Generator.html#changeset/4","title":"Ash.Generator.changeset/4","type":"function"},{"doc":"Starts and links an agent for a sequence, or returns the existing agent pid if it already exists.\n\nSee `sequence/3` for more.","ref":"Ash.Generator.html#initialize_sequence/1","title":"Ash.Generator.initialize_sequence/1","type":"function"},{"doc":"Generate n changesets and return them as a list.","ref":"Ash.Generator.html#many_changesets/5","title":"Ash.Generator.many_changesets/5","type":"function"},{"doc":"Generate n queries and return them as a list.","ref":"Ash.Generator.html#many_queries/5","title":"Ash.Generator.many_queries/5","type":"function"},{"doc":"Creates a generator map where the keys are required except the list provided","ref":"Ash.Generator.html#mixed_map/2","title":"Ash.Generator.mixed_map/2","type":"function"},{"doc":"Creates the input for the provided action with `action_input/3`, and creates a query for that action with that input.\n\nSee `action_input/3` and the module documentation for more.","ref":"Ash.Generator.html#query/4","title":"Ash.Generator.query/4","type":"function"},{"doc":"Gets input using `seed_input/2` and passes it to `Ash.Seed.seed!/2`, returning the result","ref":"Ash.Generator.html#seed!/2","title":"Ash.Generator.seed!/2","type":"function"},{"doc":"Generate input meant to be passed into `Ash.Seed.seed!/2`.\n\nA map of custom `StreamData` generators can be provided to add to or overwrite the generated input,\nfor example: `Ash.Generator.for_seed(Post, %{text: StreamData.constant(\"Post\")})`","ref":"Ash.Generator.html#seed_input/2","title":"Ash.Generator.seed_input/2","type":"function"},{"doc":"Generates an input `n` times, and passes them all to seed, returning the list of seeded items.","ref":"Ash.Generator.html#seed_many!/3","title":"Ash.Generator.seed_many!/3","type":"function"},{"doc":"Generate globally unique values.\n\nThis is useful for generating values that are unique across all resources, such as email addresses,\nor for generating values that are unique across a single resource, such as identifiers. The values will be unique\nfor anything using the same sequence name.\n\nThe name of the identifier will be used as the name of the agent process, so use a unique name not in use anywhere else.\n\nThe lifecycle of this generator is tied to the process that initially starts it. In general,\nthat will be the test. In the rare case where you are running async processes that need to share a sequence\nthat is not created in the test process, you can initialize a sequence in the test using `initialize_sequence/1`.\n\nExample:\n\n    Ash.Generator.sequence(:unique_email, fn i -> \"user#{i}@example.com\" end) |> Enum.take(3)\n    iex> [\"user0@example.com\", \"user1@example.com\", \"user2@example.com\"]","ref":"Ash.Generator.html#sequence/3","title":"Ash.Generator.sequence/3","type":"function"},{"doc":"By default we use an incrementing integer starting at 0. However, if you want to use something else, you can provide\nyour own sequencer. The initial value will be `nil`, which you can use to detect that you are the start of the sequence.\n\nExample:\n\n    Ash.Generator.sequence(:unique_email, fn i -> \"user#{i}@example.com\" end, fn num -> (num || 1) - 1 end) |> Enum.take(3)\n    iex> [\"user0@example.com\", \"user-1@example.com\", \"user-2@example.com\"]","ref":"Ash.Generator.html#sequence/3-using-a-different-sequencer","title":"Using a different sequencer - Ash.Generator.sequence/3","type":"function"},{"doc":"Stops the agent for a sequence.\n\nSee `sequence/3` for more.","ref":"Ash.Generator.html#stop_sequence/1","title":"Ash.Generator.stop_sequence/1","type":"function"},{"doc":"Helpers for seeding data, useful for quickly creating lots of data either for database seeding or testing.\n\nImportant: this bypasses resource actions, and goes straight to the data layer. No action changes or validations are run.\nThe only thing that it does at the moment is ensure that default values for attributes are set, it does not validate\nthat required attributes are set (although the data layer may do that for you, e.g with ash_postgres).","ref":"Ash.Seed.html","title":"Ash.Seed","type":"module"},{"doc":"Returns `:__keep_nil__`, allowing to ensure a default value is not used when you want the value to be `nil`.","ref":"Ash.Seed.html#keep_nil/0","title":"Ash.Seed.keep_nil/0","type":"function"},{"doc":"Seed using a record (instance of a resource) as input.\n\nIf the passed in struct was retrieved from the data layer already (i.e already seeded),\nthen it is returned and nothing is done. Otherwise, the attributes and relationships are\nused as input to `seed/2`, after having any `%Ash.NotLoaded{}` values stripped out.\n\nAny `nil` values will be overwritten with their default values. To avoid this, either use `seed/2`\nin which providing the key will have it not set the default values.\nIf you want to force `nil` to be accepted and prevent the default value from being set, use the\n`keep_nil/0` function provided here, which returns `:__keep_nil__`. Alternatively, use\n`seed!(Post, %{text: nil})`.\n\nSee `seed!/2` for more information.","ref":"Ash.Seed.html#seed!/1","title":"Ash.Seed.seed!/1","type":"function"},{"doc":"Performs a direct call to the data layer of a resource with the provided input.\n\nIf a list is provided as input, then you will get back that many results.\n\nTo set a tenant, use the tenant option.","ref":"Ash.Seed.html#seed!/3","title":"Ash.Seed.seed!/3","type":"function"},{"doc":"","ref":"Ash.Seed.html#update!/2","title":"Ash.Seed.update!/2","type":"function"},{"doc":"Testing helpers for Ash.","ref":"Ash.Test.html","title":"Ash.Test","type":"module"},{"doc":"Assert that the given changeset, query, or action input has a matching error.\n\nUse the optional second argument to assert that the errors (all together) are of a specific class.","ref":"Ash.Test.html#assert_has_error/4","title":"Ash.Test.assert_has_error/4","type":"function"},{"doc":"Refute that the given changeset, query, or action input has a matching error.\n\nUse the optional second argument to assert that the errors (all together) are of a specific class.","ref":"Ash.Test.html#refute_has_error/4","title":"Ash.Test.refute_has_error/4","type":"function"},{"doc":"Clears the `__metadata__` field and the underlying ecto `__meta__` field\n\nThis allows for easier comparison of changeset/query results","ref":"Ash.Test.html#strip_metadata/1","title":"Ash.Test.strip_metadata/1","type":"function"},{"doc":"A behaviour for implementing tracing for an Ash application.","ref":"Ash.Tracer.html","title":"Ash.Tracer","type":"behaviour"},{"doc":"","ref":"Ash.Tracer.html#c:get_span_context/0","title":"Ash.Tracer.get_span_context/0","type":"callback"},{"doc":"","ref":"Ash.Tracer.html#get_span_context/1","title":"Ash.Tracer.get_span_context/1","type":"function"},{"doc":"","ref":"Ash.Tracer.html#c:set_error/1","title":"Ash.Tracer.set_error/1","type":"callback"},{"doc":"","ref":"Ash.Tracer.html#set_error/2","title":"Ash.Tracer.set_error/2","type":"function"},{"doc":"","ref":"Ash.Tracer.html#c:set_error/2","title":"Ash.Tracer.set_error/2","type":"callback"},{"doc":"","ref":"Ash.Tracer.html#set_error/3","title":"Ash.Tracer.set_error/3","type":"function"},{"doc":"","ref":"Ash.Tracer.html#c:set_handled_error/2","title":"Ash.Tracer.set_handled_error/2","type":"callback"},{"doc":"","ref":"Ash.Tracer.html#set_handled_error/3","title":"Ash.Tracer.set_handled_error/3","type":"function"},{"doc":"Set metadata for the current span.\n\nThis may be called multiple times per span, and should ideally merge with previous metadata.","ref":"Ash.Tracer.html#c:set_metadata/2","title":"Ash.Tracer.set_metadata/2","type":"callback"},{"doc":"","ref":"Ash.Tracer.html#set_metadata/3","title":"Ash.Tracer.set_metadata/3","type":"function"},{"doc":"","ref":"Ash.Tracer.html#c:set_span_context/1","title":"Ash.Tracer.set_span_context/1","type":"callback"},{"doc":"","ref":"Ash.Tracer.html#set_span_context/2","title":"Ash.Tracer.set_span_context/2","type":"function"},{"doc":"","ref":"Ash.Tracer.html#span/4","title":"Ash.Tracer.span/4","type":"macro"},{"doc":"","ref":"Ash.Tracer.html#c:start_span/2","title":"Ash.Tracer.start_span/2","type":"callback"},{"doc":"","ref":"Ash.Tracer.html#start_span/3","title":"Ash.Tracer.start_span/3","type":"function"},{"doc":"","ref":"Ash.Tracer.html#c:stop_span/0","title":"Ash.Tracer.stop_span/0","type":"callback"},{"doc":"","ref":"Ash.Tracer.html#stop_span/1","title":"Ash.Tracer.stop_span/1","type":"function"},{"doc":"","ref":"Ash.Tracer.html#telemetry_span/4","title":"Ash.Tracer.telemetry_span/4","type":"macro"},{"doc":"","ref":"Ash.Tracer.html#c:trace_type?/1","title":"Ash.Tracer.trace_type?/1","type":"callback"},{"doc":"","ref":"Ash.Tracer.html#trace_type?/2","title":"Ash.Tracer.trace_type?/2","type":"function"},{"doc":"","ref":"Ash.Tracer.html#t:metadata/0","title":"Ash.Tracer.metadata/0","type":"type"},{"doc":"","ref":"Ash.Tracer.html#t:span_type/0","title":"Ash.Tracer.span_type/0","type":"type"},{"doc":"","ref":"Ash.Tracer.html#t:t/0","title":"Ash.Tracer.t/0","type":"type"},{"doc":"A simple tracer that can send traces to the current process or call a module with the trace.","ref":"Ash.Tracer.Simple.html","title":"Ash.Tracer.Simple","type":"module"},{"doc":"","ref":"Ash.Tracer.Simple.html#gather_spans/0","title":"Ash.Tracer.Simple.gather_spans/0","type":"function"},{"doc":"A span produced by `Ash.Tracer.Simple`","ref":"Ash.Tracer.Simple.Span.html","title":"Ash.Tracer.Simple.Span","type":"module"},{"doc":"The `Ash.Type` behaviour is used to define a value type in Ash.","ref":"Ash.Type.html","title":"Ash.Type","type":"behaviour"},{"doc":"* `:map` - `Ash.Type.Map`\n* `:keyword` - `Ash.Type.Keyword`\n* `:term` - `Ash.Type.Term`\n* `:atom` - `Ash.Type.Atom`\n* `:string` - `Ash.Type.String`\n* `:integer` - `Ash.Type.Integer`\n* `:file` - `Ash.Type.File`\n* `:float` - `Ash.Type.Float`\n* `:duration_name` - `Ash.Type.DurationName`\n* `:function` - `Ash.Type.Function`\n* `:boolean` - `Ash.Type.Boolean`\n* `:struct` - `Ash.Type.Struct`\n* `:uuid` - `Ash.Type.UUID`\n* `:uuid_v7` - `Ash.Type.UUIDv7`\n* `:binary` - `Ash.Type.Binary`\n* `:date` - `Ash.Type.Date`\n* `:time` - `Ash.Type.Time`\n* `:decimal` - `Ash.Type.Decimal`\n* `:ci_string` - `Ash.Type.CiString`\n* `:naive_datetime` - `Ash.Type.NaiveDatetime`\n* `:utc_datetime` - `Ash.Type.UtcDatetime`\n* `:utc_datetime_usec` - `Ash.Type.UtcDatetimeUsec`\n* `:datetime` - `Ash.Type.DateTime`\n* `:url_encoded_binary` - `Ash.Type.UrlEncodedBinary`\n* `:union` - `Ash.Type.Union`\n* `:module` - `Ash.Type.Module`\n* `:vector` - `Ash.Type.Vector`","ref":"Ash.Type.html#module-built-in-types","title":"Built in types - Ash.Type","type":"behaviour"},{"doc":"To specify a list of values, use `{:array, Type}`. Arrays are special, and have special constraints:\n\n* `:items` (`t:term/0`) - Constraints for the elements of the list. See the contained type's docs for more.\n\n* `:min_length` (`t:non_neg_integer/0`) - A minimum length for the items.\n\n* `:max_length` (`t:non_neg_integer/0`) - A maximum length for the items.\n\n* `:nil_items?` (`t:boolean/0`) - Whether or not the list can contain nil items. The default value is `false`.\n\n* `:remove_nil_items?` (`t:boolean/0`) - Whether or not to remove the nil items from the list instead of adding errors. The default value is `false`.\n\n* `:empty_values` (list of `t:term/0`) - A set of values that, if encountered, will be considered an empty list. The default value is `[\"\"]`.","ref":"Ash.Type.html#module-lists-arrays","title":"Lists/Arrays - Ash.Type","type":"behaviour"},{"doc":"Generally you add `use Ash.Type` to your module (it is possible to add `@behaviour\nAsh.Type` and define everything yourself, but this is more work and error-prone).\n\nOverriding the `{:array, type}` behaviour. By defining the `*_array` versions\nof `cast_input`, `cast_stored`, `dump_to_native` and `apply_constraints`, you can\noverride how your type behaves as a collection. This is how the features of embedded\nresources are implemented. No need to implement them unless you wish to override the\ndefault behaviour. Your type is responsible for handling nil values in each callback as well.\n\nSimple example of a float custom type\n\n```Elixir\ndefmodule GenTracker.AshFloat do\n  use Ash.Type\n\n  @impl Ash.Type\n  def storage_type(_), do: :float\n\n  @impl Ash.Type\n  def cast_input(nil, _), do: {:ok, nil}\n  def cast_input(value, _) do\n    Ecto.Type.cast(:float, value)\n  end\n\n  @impl Ash.Type\n  def cast_stored(nil, _), do: {:ok, nil}\n  def cast_stored(value, _) do\n    Ecto.Type.load(:float, value)\n  end\n\n  @impl Ash.Type\n  def dump_to_native(nil, _), do: {:ok, nil}\n  def dump_to_native(value, _) do\n    Ecto.Type.dump(:float, value)\n  end\nend\n```\n\nAll the Ash built-in types are implemented with `use Ash.Type` so they are good\nexamples to look at to create your own `Ash.Type`.","ref":"Ash.Type.html#module-defining-custom-types","title":"Defining Custom Types - Ash.Type","type":"behaviour"},{"doc":"You can define short `:atom_names` for your custom types by adding them to your Ash configuration:\n\n```Elixir\nconfig :ash, :custom_types, [ash_float: GenTracker.AshFloat]\n```\n\nDoing this will require a recompilation of the `:ash` dependency which can be triggered by calling:\n\n```bash\n$ mix deps.compile ash --force\n```","ref":"Ash.Type.html#module-short-names","title":"Short names - Ash.Type","type":"behaviour"},{"doc":"Composite types are composite *in the data layer*. Many data layers do not support this, but some (like AshPostgres),\ndo. To define a composite type, the following things should be true:\n\n1. A casted value should be a map or struct, for example for a point: `%{x: 1, y: 2}`\n2. The data layer must support composite types, and the data layer representation will be a tuple, i.e `{1, 2}`\n3. Define `def composite?(_), do: true` in your composite type\n4. Define the type & constraints of each item in the tuple, and its name in the map\n   representation: `def composite_types(_), do: [{:x, :integer, []}, {:y, :integer, []}]`.\n   You can also define a storage key for each item in the tuple, if the underlying type implementation\n   has a different reference for an item, i.e `def composite_types(_), do: [{:x, :x_coord, :integer, []}, {:y, :y_coord, :integer, []}]`\n\nWith the above implemented, your composite type can be used in expressions, for example:\n\n```elixir\nAsh.Query.filter(expr(coordinates[:x] == 1))k\n```\n\nAnd you can also *construct* composite types in expressions, for example:\n\n```elixir\ncalculate :coordinates, :composite_point, expr(composite_type(%{x: some_value, y: some_other_value}, Point))\n```","ref":"Ash.Type.html#module-composite-types","title":"Composite Types - Ash.Type","type":"behaviour"},{"doc":"Constraints are a way of validating an input type. This validation can be used in both attributes and arguments. The kinds of constraints you can apply depends on the type of data. You can find all types in `Ash.Type` . Each type has its own page on which the available constraints are listed. For example in `Ash.Type.String` you can find 5 constraints:\n\n- `:max_length`\n- `:min_length`\n- `:match`\n- `:trim?`\n- `:allow_empty?`\n\nYou can also discover these constraints from iex:\n\n```bash\n$ iex -S mix\niex(1)> Ash.Type.String.constraints\n[\n  max_length: [\n    type: :non_neg_integer,\n    doc: \"Enforces a maximum length on the value\"\n  ],\n  min_length: [\n    type: :non_neg_integer,\n    doc: \"Enforces a minimum length on the value\"\n  ],\n  match: [\n    type: {:custom, Ash.Type.String, :match, []},\n    doc: \"Enforces that the string matches a passed in regex\"\n  ],\n  trim?: [type: :boolean, doc: \"Trims the value.\", default: true],\n  allow_empty?: [\n    type: :boolean,\n    doc: \"If false, the value is set to `nil` if it's empty.\",\n    default: false\n  ]\n]\n```","ref":"Ash.Type.html#module-constraints","title":"Constraints - Ash.Type","type":"behaviour"},{"doc":"To show how constraints can be used in a attribute, here is an example attribute describing a username:\n\n```elixir\ndefmodule MyProject.MyDomain.Account do\n  # ...\n\n  code_interface do\n    define :create, action: :create\n  end\n\n  actions do\n    default [:create, :read, :update, :destroy]\n  end\n\n  attributes do\n    uuid_primary_key :id\n\n    attribute :username, :string do\n      constraints [\n        max_length: 20,\n        min_length: 3,\n        match: ~r/^[a-z_-]*$/,\n        trim?: true,\n        allow_empty?: false\n      ]\n    end\n  end\n\n  # ...\nend\n```\n\nIf, when creating or updating this attribute, one of the constraints are not met, an error will be given telling you which constraint was broken. See below:\n\n```elixir\niex(1)> MyProject.MyDomain.Account.create!(%{username: \"hi\"})\n\n** (Ash.Error.Invalid) Invalid Error\n\n* Invalid value provided for username: length must be greater than or equal to 3.\n\n\"hi\"\n\niex(2)> MyProject.MyDomain.Account.create!(%{username: \"Hello there this is a long string\"})\n\n** (Ash.Error.Invalid) Invalid Error\n\n* Invalid value provided for username: length must be less than or equal to 20.\n\n\"Hello there this is a long string\"\n\niex(3)> MyProject.MyDomain.Account.create!(%{username: \"hello there\"})\n** (Ash.Error.Invalid) Invalid Error\n\n* Invalid value provided for username: must match the pattern ~r/^[a-z_-]*$/.\n\n\"hello there\"\n\niex(4)> MyProject.MyDomain.Account.create!(%{username: \"\"})\n** (Ash.Error.Invalid) Invalid Error\n\n* attribute title is required\n```\n\nIt will give you the resource as usual on successful requests:\n\n```elixir\niex(5)> MyProject.MyDomain.Account.create!(%{username: \"hello\"})\n#MyProject.MyDomain.Account<\n  __meta__: #Ecto.Schema.Metadata<:loaded, \"account\">,\n  id: \"7ba467dd-277c-4916-88ae-f62c93fee7a3\",\n  username: \"hello\",\n  ...\n>\n```","ref":"Ash.Type.html#module-attribute-example","title":"Attribute example - Ash.Type","type":"behaviour"},{"doc":"","ref":"Ash.Type.html#c:apply_atomic_constraints/2","title":"Ash.Type.apply_atomic_constraints/2","type":"callback"},{"doc":"","ref":"Ash.Type.html#apply_atomic_constraints/3","title":"Ash.Type.apply_atomic_constraints/3","type":"function"},{"doc":"","ref":"Ash.Type.html#c:apply_atomic_constraints_array/2","title":"Ash.Type.apply_atomic_constraints_array/2","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:apply_constraints/2","title":"Ash.Type.apply_constraints/2","type":"callback"},{"doc":"Confirms if a casted value matches the provided constraints.","ref":"Ash.Type.html#apply_constraints/3","title":"Ash.Type.apply_constraints/3","type":"function"},{"doc":"","ref":"Ash.Type.html#c:apply_constraints_array/2","title":"Ash.Type.apply_constraints_array/2","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:array_constraints/0","title":"Ash.Type.array_constraints/0","type":"callback"},{"doc":"Gets the array constraints for a type","ref":"Ash.Type.html#array_constraints/1","title":"Ash.Type.array_constraints/1","type":"function"},{"doc":"Returns true if the value is a builtin type or adopts the `Ash.Type` behaviour","ref":"Ash.Type.html#ash_type?/1","title":"Ash.Type.ash_type?/1","type":"function"},{"doc":"Returns true if the type is an ash builtin type","ref":"Ash.Type.html#builtin?/1","title":"Ash.Type.builtin?/1","type":"function"},{"doc":"","ref":"Ash.Type.html#c:can_load?/1","title":"Ash.Type.can_load?/1","type":"callback"},{"doc":"Returns true if the type supports nested loads","ref":"Ash.Type.html#can_load?/2","title":"Ash.Type.can_load?/2","type":"function"},{"doc":"","ref":"Ash.Type.html#c:cast_atomic/2","title":"Ash.Type.cast_atomic/2","type":"callback"},{"doc":"","ref":"Ash.Type.html#cast_atomic/3","title":"Ash.Type.cast_atomic/3","type":"function"},{"doc":"","ref":"Ash.Type.html#c:cast_atomic_array/2","title":"Ash.Type.cast_atomic_array/2","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:cast_in_query?/1","title":"Ash.Type.cast_in_query?/1","type":"callback"},{"doc":"Returns `true` if the type should be cast in underlying queries","ref":"Ash.Type.html#cast_in_query?/2","title":"Ash.Type.cast_in_query?/2","type":"function"},{"doc":"","ref":"Ash.Type.html#c:cast_input/2","title":"Ash.Type.cast_input/2","type":"callback"},{"doc":"Casts input (e.g. unknown) data to an instance of the type, or errors\n\nMaps to `Ecto.Type.cast/2`","ref":"Ash.Type.html#cast_input/3","title":"Ash.Type.cast_input/3","type":"function"},{"doc":"","ref":"Ash.Type.html#c:cast_input_array/2","title":"Ash.Type.cast_input_array/2","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:cast_stored/2","title":"Ash.Type.cast_stored/2","type":"callback"},{"doc":"Casts a value from the data store to an instance of the type, or errors\n\nMaps to `Ecto.Type.load/2`","ref":"Ash.Type.html#cast_stored/3","title":"Ash.Type.cast_stored/3","type":"function"},{"doc":"","ref":"Ash.Type.html#c:cast_stored_array/2","title":"Ash.Type.cast_stored_array/2","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:composite?/1","title":"Ash.Type.composite?/1","type":"callback"},{"doc":"Returns true if the type is a composite type","ref":"Ash.Type.html#composite?/2","title":"Ash.Type.composite?/2","type":"function"},{"doc":"","ref":"Ash.Type.html#c:composite_types/1","title":"Ash.Type.composite_types/1","type":"callback"},{"doc":"Returns the wrapped composite types","ref":"Ash.Type.html#composite_types/2","title":"Ash.Type.composite_types/2","type":"function"},{"doc":"","ref":"Ash.Type.html#c:constraints/0","title":"Ash.Type.constraints/0","type":"callback"},{"doc":"Returns the constraint schema for a type","ref":"Ash.Type.html#constraints/1","title":"Ash.Type.constraints/1","type":"function"},{"doc":"","ref":"Ash.Type.html#c:custom_apply_constraints_array?/0","title":"Ash.Type.custom_apply_constraints_array?/0","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:describe/1","title":"Ash.Type.describe/1","type":"callback"},{"doc":"Calls the type's `describe` function with the given constraints","ref":"Ash.Type.html#describe/2","title":"Ash.Type.describe/2","type":"function"},{"doc":"Determine types for a given function or operator.","ref":"Ash.Type.html#determine_types/2","title":"Ash.Type.determine_types/2","type":"function"},{"doc":"","ref":"Ash.Type.html#c:dump_to_embedded/2","title":"Ash.Type.dump_to_embedded/2","type":"callback"},{"doc":"Casts a value from the Elixir type to a value that can be embedded in another data structure.\n\nEmbedded resources expect to be stored in JSON, so this allows things like UUIDs to be stored\nas strings in embedded resources instead of binary.","ref":"Ash.Type.html#dump_to_embedded/3","title":"Ash.Type.dump_to_embedded/3","type":"function"},{"doc":"","ref":"Ash.Type.html#c:dump_to_embedded_array/2","title":"Ash.Type.dump_to_embedded_array/2","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:dump_to_native/2","title":"Ash.Type.dump_to_native/2","type":"callback"},{"doc":"Casts a value from the Elixir type to a value that the data store can persist\n\nMaps to `Ecto.Type.dump/2`","ref":"Ash.Type.html#dump_to_native/3","title":"Ash.Type.dump_to_native/3","type":"function"},{"doc":"","ref":"Ash.Type.html#c:dump_to_native_array/2","title":"Ash.Type.dump_to_native_array/2","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:ecto_type/0","title":"Ash.Type.ecto_type/0","type":"callback"},{"doc":"Returns the ecto compatible type for an Ash.Type.\n\nIf you `use Ash.Type`, this is created for you. For builtin types\nthis may return a corresponding ecto builtin type (atom)","ref":"Ash.Type.html#ecto_type/1","title":"Ash.Type.ecto_type/1","type":"function"},{"doc":"","ref":"Ash.Type.html#c:embedded?/0","title":"Ash.Type.embedded?/0","type":"callback"},{"doc":"Returns true if the type is an embedded resource","ref":"Ash.Type.html#embedded_type?/1","title":"Ash.Type.embedded_type?/1","type":"function"},{"doc":"","ref":"Ash.Type.html#c:equal?/2","title":"Ash.Type.equal?/2","type":"callback"},{"doc":"Determines if two values of a given type are equal.\n\nMaps to `Ecto.Type.equal?/3`","ref":"Ash.Type.html#equal?/3","title":"Ash.Type.equal?/3","type":"function"},{"doc":"The implementation for any overloaded implementations.","ref":"Ash.Type.html#c:evaluate_operator/1","title":"Ash.Type.evaluate_operator/1","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:generator/1","title":"Ash.Type.generator/1","type":"callback"},{"doc":"Returns the StreamData generator for a given type","ref":"Ash.Type.html#generator/2","title":"Ash.Type.generator/2","type":"function"},{"doc":"","ref":"Ash.Type.html#c:get_rewrites/4","title":"Ash.Type.get_rewrites/4","type":"callback"},{"doc":"Gets the load rewrites for a given type, load, calculation and path.\n\nThis is used for defining types that support a nested load statement.\nSee the embedded type and union type implementations for examples of how\nto use this.","ref":"Ash.Type.html#get_rewrites/5","title":"Ash.Type.get_rewrites/5","type":"function"},{"doc":"Gets the type module for a given short name or module","ref":"Ash.Type.html#get_type/1","title":"Ash.Type.get_type/1","type":"function"},{"doc":"","ref":"Ash.Type.html#c:handle_change/3","title":"Ash.Type.handle_change/3","type":"callback"},{"doc":"Process the old casted values alongside the new casted values.\n\nThis is leveraged by embedded types to know if something is being updated\nor destroyed. This is not called on creates.","ref":"Ash.Type.html#handle_change/4","title":"Ash.Type.handle_change/4","type":"function"},{"doc":"","ref":"Ash.Type.html#c:handle_change_array/3","title":"Ash.Type.handle_change_array/3","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:handle_change_array?/0","title":"Ash.Type.handle_change_array?/0","type":"callback"},{"doc":"Handles the change of a given array of values for an attribute change. Runs after casting.","ref":"Ash.Type.html#handle_change_array?/1","title":"Ash.Type.handle_change_array?/1","type":"function"},{"doc":"","ref":"Ash.Type.html#c:include_source/2","title":"Ash.Type.include_source/2","type":"callback"},{"doc":"","ref":"Ash.Type.html#include_source/3","title":"Ash.Type.include_source/3","type":"function"},{"doc":"Useful for typed data layers (like ash_postgres) to instruct them not to attempt to cast input values.\n\nYou generally won't need this, but it can be an escape hatch for certain cases.","ref":"Ash.Type.html#c:init/1","title":"Ash.Type.init/1","type":"callback"},{"doc":"Initializes the constraints according to the underlying type","ref":"Ash.Type.html#init/2","title":"Ash.Type.init/2","type":"function"},{"doc":"","ref":"Ash.Type.html#c:load/4","title":"Ash.Type.load/4","type":"callback"},{"doc":"","ref":"Ash.Type.html#load/5","title":"Ash.Type.load/5","type":"function"},{"doc":"","ref":"Ash.Type.html#c:loaded?/4","title":"Ash.Type.loaded?/4","type":"callback"},{"doc":"","ref":"Ash.Type.html#loaded?/5","title":"Ash.Type.loaded?/5","type":"function"},{"doc":"","ref":"Ash.Type.html#c:matches_type?/2","title":"Ash.Type.matches_type?/2","type":"callback"},{"doc":"Detects as a best effort if an arbitrary value matches the given type","ref":"Ash.Type.html#matches_type?/3","title":"Ash.Type.matches_type?/3","type":"function"},{"doc":"","ref":"Ash.Type.html#c:merge_load/4","title":"Ash.Type.merge_load/4","type":"callback"},{"doc":"","ref":"Ash.Type.html#merge_load/5","title":"Ash.Type.merge_load/5","type":"function"},{"doc":"A map of operators with overloaded implementations.\n\nThese will only be honored if the type is placed in `config :ash, :known_types, [...Type]`\n\nA corresponding `evaluate_operator/1` clause should match.","ref":"Ash.Type.html#c:operator_overloads/0","title":"Ash.Type.operator_overloads/0","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:prepare_change/3","title":"Ash.Type.prepare_change/3","type":"callback"},{"doc":"Process the old casted values alongside the new *un*casted values.\n\nThis is leveraged by embedded types to know if something is being updated\nor destroyed. This is not called on creates.","ref":"Ash.Type.html#prepare_change/4","title":"Ash.Type.prepare_change/4","type":"function"},{"doc":"","ref":"Ash.Type.html#c:prepare_change_array/3","title":"Ash.Type.prepare_change_array/3","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:prepare_change_array?/0","title":"Ash.Type.prepare_change_array?/0","type":"callback"},{"doc":"Prepares a given array of values for an attribute change. Runs before casting.","ref":"Ash.Type.html#prepare_change_array?/1","title":"Ash.Type.prepare_change_array?/1","type":"function"},{"doc":"","ref":"Ash.Type.html#c:rewrite/3","title":"Ash.Type.rewrite/3","type":"callback"},{"doc":"Applies rewrites to a given value.\n\nThis is used for defining types that support a nested load statement.\nSee the embedded type and union type implementations for examples of how\nto use this.","ref":"Ash.Type.html#rewrite/4","title":"Ash.Type.rewrite/4","type":"function"},{"doc":"Returns the list of available type short names","ref":"Ash.Type.html#short_names/0","title":"Ash.Type.short_names/0","type":"function"},{"doc":"","ref":"Ash.Type.html#c:simple_equality?/0","title":"Ash.Type.simple_equality?/0","type":"callback"},{"doc":"Determines if a type can be compared using the `==` operator.","ref":"Ash.Type.html#simple_equality?/1","title":"Ash.Type.simple_equality?/1","type":"function"},{"doc":"","ref":"Ash.Type.html#c:storage_type/0","title":"Ash.Type.storage_type/0","type":"callback"},{"doc":"","ref":"Ash.Type.html#c:storage_type/1","title":"Ash.Type.storage_type/1","type":"callback"},{"doc":"Returns the *underlying* storage type (the underlying type of the *ecto type* of the *ash type*)","ref":"Ash.Type.html#storage_type/2","title":"Ash.Type.storage_type/2","type":"function"},{"doc":"","ref":"Ash.Type.html#t:constraint_error/0","title":"Ash.Type.constraint_error/0","type":"type"},{"doc":"","ref":"Ash.Type.html#t:constraints/0","title":"Ash.Type.constraints/0","type":"type"},{"doc":"","ref":"Ash.Type.html#t:error/0","title":"Ash.Type.error/0","type":"type"},{"doc":"","ref":"Ash.Type.html#t:load_context/0","title":"Ash.Type.load_context/0","type":"type"},{"doc":"","ref":"Ash.Type.html#t:merge_load_context/0","title":"Ash.Type.merge_load_context/0","type":"type"},{"doc":"","ref":"Ash.Type.html#t:rewrite/0","title":"Ash.Type.rewrite/0","type":"type"},{"doc":"","ref":"Ash.Type.html#t:rewrite_data/0","title":"Ash.Type.rewrite_data/0","type":"type"},{"doc":"","ref":"Ash.Type.html#t:t/0","title":"Ash.Type.t/0","type":"type"},{"doc":"Stores an atom as a string in the database\n\nA builtin type that can be referenced via `:atom`","ref":"Ash.Type.Atom.html","title":"Ash.Type.Atom","type":"module"},{"doc":"* `:one_of` (`t:term/0`) - Allows constraining the value of an atom to a pre-defined list","ref":"Ash.Type.Atom.html#module-constraints","title":"Constraints - Ash.Type.Atom","type":"module"},{"doc":"Represents a binary.\n\nA builtin type that can be referenced via `:binary`","ref":"Ash.Type.Binary.html","title":"Ash.Type.Binary","type":"module"},{"doc":"Represents a boolean.\n\nA builtin type that can be referenced via `:boolean`","ref":"Ash.Type.Boolean.html","title":"Ash.Type.Boolean","type":"module"},{"doc":"Stores a case insensitive string in the database\n\nSee `Ash.CiString` for more information.\n\nA builtin type that can be referenced via `:ci_string`","ref":"Ash.Type.CiString.html","title":"Ash.Type.CiString","type":"module"},{"doc":"* `:max_length` (`t:non_neg_integer/0`) - Enforces a maximum length on the value\n\n* `:min_length` (`t:non_neg_integer/0`) - Enforces a minimum length on the value\n\n* `:match` - Enforces that the string matches a passed in regex\n\n* `:trim?` (`t:boolean/0`) - Trims the value. The default value is `true`.\n\n* `:allow_empty?` (`t:boolean/0`) - Sets the value to `nil` if it's empty. The default value is `false`.\n\n* `:casing` - Lowercases or uppercases the value, fully discarding case information.  \n  For example, if you don't set this, a value of `FrEd` could be saved to the data layer.\n  `FrEd` and `fReD` would still compare as equal, but the original casing information  is retained.\n  In many cases, this is what you want. In some cases, however, you want to remove all case information.\n  For example, in an email, you may want to support a user inputting an upper case letter, but discard it\n  when saved.\n   Valid values are :upper, :lower, nil The default value is `nil`.","ref":"Ash.Type.CiString.html#module-constraints","title":"Constraints - Ash.Type.CiString","type":"module"},{"doc":"","ref":"Ash.Type.CiString.html#match/1","title":"Ash.Type.CiString.match/1","type":"function"},{"doc":"Helpers for working with `Comparable`","ref":"Ash.Type.Comparable.html","title":"Ash.Type.Comparable","type":"module"},{"doc":"","ref":"Ash.Type.Comparable.html#defcomparable/3","title":"Ash.Type.Comparable.defcomparable/3","type":"macro"},{"doc":"Represents a date in the database\n\nA builtin type that can be referenced via `:date`","ref":"Ash.Type.Date.html","title":"Ash.Type.Date","type":"module"},{"doc":"Represents a datetime, with configurable precision and timezone.","ref":"Ash.Type.DateTime.html","title":"Ash.Type.DateTime","type":"module"},{"doc":"Represents a decimal.\n\nA builtin type that can be referenced via `:decimal`","ref":"Ash.Type.Decimal.html","title":"Ash.Type.Decimal","type":"module"},{"doc":"* `:max` - Enforces a maximum on the value\n\n* `:min` - Enforces a minimum on the value\n\n* `:greater_than` - Enforces a minimum on the value (exclusive)\n\n* `:less_than` - Enforces a maximum on the value (exclusive)","ref":"Ash.Type.Decimal.html#module-constraints","title":"Constraints - Ash.Type.Decimal","type":"module"},{"doc":"An interval of time, primarily meant to be used in expression functions\n\nValid intervals are (as strings or atoms): [:year, :month, :week, :day, :hour, :minute, :second, :millisecond, :microsecond]","ref":"Ash.Type.DurationName.html","title":"Ash.Type.DurationName","type":"module"},{"doc":"","ref":"Ash.Type.DurationName.html#t:t/0","title":"Ash.Type.DurationName.t/0","type":"type"},{"doc":"A type for abstracting enums into a single type.\n\nFor example, your existing attribute might look like:\n```elixir\nattribute :status, :atom, constraints: [one_of: [:open, :closed]]\n```\n\nBut as that starts to spread around your system, you may find that you want\nto centralize that logic. To do that, use this module to define an Ash type\neasily:\n\n```elixir\ndefmodule MyApp.TicketStatus do\n  use Ash.Type.Enum, values: [:open, :closed]\nend\n```\n\nThen, you can rewrite your original attribute as follows:\n\n```elixir\nattribute :status, MyApp.TicketStatus\n```\n\nValid values are:\n\n* The atom itself, e.g `:open`\n* A string that matches the atom, e.g `\"open\"`\n* A string that matches the atom after being downcased, e.g `\"OPEN\"` or `\"oPeN\"`\n* A string that matches the stringified, downcased atom, after itself being downcased.\n  This allows for enum values like `:Open`, `:SomeState` and `:Some_State`","ref":"Ash.Type.Enum.html","title":"Ash.Type.Enum","type":"behaviour"},{"doc":"If you need to accept inputs beyond those described above while still mapping them to one\nof the enum values, you can override the `match/1` callback.\n\nFor example, if you want to map both the `:half_empty` and `:half_full` states to the same enum\nvalue, you could implement it as follows:\n\n```elixir\ndefmodule MyApp.GlassState do\n  use Ash.Type.Enum, values: [:empty, :half_full, :full]\n\n  def match(:half_empty), do: {:ok, :half_full}\n  def match(\"half_empty\"), do: {:ok, :half_full}\n  def match(value), do: super(value)\nend\n```\n\nIn the provided example, if no additional value is matched, `super(value)` is called, invoking\nthe default implementation of `match/1`. This approach is typically suitable if you only aim to\nextend default matching rather than completely reimplementing it.","ref":"Ash.Type.Enum.html#module-custom-input-values","title":"Custom input values - Ash.Type.Enum","type":"behaviour"},{"doc":"Additional input values are not exposed in derived interfaces. For example, `HALF_EMPTY` will not\nbe present as a possible enum value when using `ash_graphql`.\n\nMoreover, only explicitly matched values are mapped to the enum value. For instance,\n`\"HaLf_emPty\"` would not be accepted by the code provided earlier. If case normalization is\nneeded for additional values, it must be explicitly implemented.","ref":"Ash.Type.Enum.html#module-caveats","title":"Caveats - Ash.Type.Enum","type":"behaviour"},{"doc":"It's possible to associate a description with a value by passing a `{value, description}` tuple\ninside the values list, which becomes a keyword list:\n\n```elixir\ndefmodule MyApp.TicketStatus do\n  use Ash.Type.Enum,\n    values: [\n      open: \"An open ticket\",\n      closed: \"A closed ticket\"\n    ]\nend\n```\n\nThis can be used by extensions to provide detailed descriptions of enum values.\n\nThe description of a value can be retrieved with `description/1`:\n\n```elixir\nMyApp.TicketStatus.description(:open)\niex> \"An open ticket\"\n```","ref":"Ash.Type.Enum.html#module-value-descriptions","title":"Value descriptions - Ash.Type.Enum","type":"behaviour"},{"doc":"The description of the value, if existing","ref":"Ash.Type.Enum.html#c:description/1","title":"Ash.Type.Enum.description/1","type":"callback"},{"doc":"finds the valid value that matches a given input term","ref":"Ash.Type.Enum.html#c:match/1","title":"Ash.Type.Enum.match/1","type":"callback"},{"doc":"true if a given term matches a value","ref":"Ash.Type.Enum.html#c:match?/1","title":"Ash.Type.Enum.match?/1","type":"callback"},{"doc":"The list of valid values (not all input types that match them)","ref":"Ash.Type.Enum.html#c:values/0","title":"Ash.Type.Enum.values/0","type":"callback"},{"doc":"A type that represents a file on the filesystem.\n\n> #### Persistence {: .warning}\n>\n> This type does not support persisting via `Ash.DataLayer`.\n>\n> It is mainly intended to be used in\n> [arguments](dsl-ash-resource.html#actions-action-argument).","ref":"Ash.Type.File.html","title":"Ash.Type.File","type":"module"},{"doc":"This type can cast multiple types of values:\n\n* itself\n* `Plug.Upload`\n* Any value that implements the `Ash.Type.File.Source` protocol.","ref":"Ash.Type.File.html#module-valid-values-to-cast","title":"Valid values to cast - Ash.Type.File","type":"module"},{"doc":"Create a file from an `IO.device()`","ref":"Ash.Type.File.html#from_io/1","title":"Ash.Type.File.from_io/1","type":"function"},{"doc":"iex> path = \"README.md\"\n    ...> {:ok, device} = File.open(path)\n    ...> Ash.Type.File.from_io(device)\n    %Ash.Type.File{source: device, implementation: Ash.Type.File.IO}","ref":"Ash.Type.File.html#from_io/1-example","title":"Example - Ash.Type.File.from_io/1","type":"function"},{"doc":"Create a file from a path.","ref":"Ash.Type.File.html#from_path/1","title":"Ash.Type.File.from_path/1","type":"function"},{"doc":"iex> path = \"README.md\"\n    ...> Ash.Type.File.from_path(path)\n    %Ash.Type.File{source: \"README.md\", implementation: Ash.Type.File.Path}","ref":"Ash.Type.File.html#from_path/1-example","title":"Example - Ash.Type.File.from_path/1","type":"function"},{"doc":"Open the file with the given `modes`.\n\nThis function will delegate to the `open/2` function on the `implementation`.\n\nFor details on the `modes` argument, see the `File.open/2` documentation.","ref":"Ash.Type.File.html#open/2","title":"Ash.Type.File.open/2","type":"function"},{"doc":"iex> path = \"README.md\"\n    ...> file = Ash.Type.File.from_path(path)\n    ...> Ash.Type.File.open(file, [:read])\n    ...> # => {:ok, #PID<0.109.0>}","ref":"Ash.Type.File.html#open/2-example","title":"Example - Ash.Type.File.open/2","type":"function"},{"doc":"Returns the path to the file.\n\nNot every implementation will support this operation. If the implementation\ndoes not support this operation, then `{:error, :not_supported}` will be\nreturned. In this case, use the `open/2` function to access the file.","ref":"Ash.Type.File.html#path/1","title":"Ash.Type.File.path/1","type":"function"},{"doc":"iex> path = \"README.md\"\n    ...> file = Ash.Type.File.from_path(path)\n    ...> Ash.Type.File.path(file)\n    {:ok, \"README.md\"}","ref":"Ash.Type.File.html#path/1-example","title":"Example - Ash.Type.File.path/1","type":"function"},{"doc":"","ref":"Ash.Type.File.html#t:t/0","title":"Ash.Type.File.t/0","type":"type"},{"doc":"Behaviour for file implementations that are compatible with `Ash.Type.File`.","ref":"Ash.Type.File.Implementation.html","title":"Ash.Type.File.Implementation","type":"behaviour"},{"doc":"Open `IO.device()` for the file.\n\nSee `Ash.Type.File.open/2`\n\nThe return pid must point to a process following the\n[Erlang I/O Protocol](https://www.erlang.org/doc/apps/stdlib/io_protocol.html)\nlike `StringIO` or `File`.","ref":"Ash.Type.File.Implementation.html#c:open/2","title":"Ash.Type.File.Implementation.open/2","type":"callback"},{"doc":"Return path of the file on disk.\n\nSee: `Ash.Type.File.path/1`\n\nThis callback is optional. If the file is not stored on disk, this callback\ncan be omitted.","ref":"Ash.Type.File.Implementation.html#c:path/1","title":"Ash.Type.File.Implementation.path/1","type":"callback"},{"doc":"Errors returned by the implementation.","ref":"Ash.Type.File.Implementation.html#t:error/0","title":"Ash.Type.File.Implementation.error/0","type":"type"},{"doc":"The source of the file the implementation operates on.","ref":"Ash.Type.File.Implementation.html#t:source/0","title":"Ash.Type.File.Implementation.source/0","type":"type"},{"doc":"Any `module()` implementing the `Ash.Type.File.Implementation` behaviour.","ref":"Ash.Type.File.Implementation.html#t:t/0","title":"Ash.Type.File.Implementation.t/0","type":"type"},{"doc":"Protocol for allowing the casting of something into an `Ash.Type.File`.","ref":"Ash.Type.File.Source.html","title":"Ash.Type.File.Source","type":"protocol"},{"doc":"```elixir\ndefmodule MyStruct do\n  defstruct [:path]\n\n  @behavior Ash.Type.File.Implementation\n\n  @impl Ash.Type.File.Implementation\n  def path(%__MODULE__{path: path}), do: {:ok, path}\n\n  @impl Ash.Type.File.Implementation\n  def open(%__MODULE__{path: path}, modes), do: File.open(path, modes)\n\n  defimpl Ash.Type.File.Source do\n    def implementation(%MyStruct{} = struct), do: {:ok, MyStruct}\n  end\nend\n```","ref":"Ash.Type.File.Source.html#module-usage","title":"Usage - Ash.Type.File.Source","type":"protocol"},{"doc":"Detect Implementation of the file.\n\nReturns an `:ok` tuple with the implementation module if the file is supported\nand `:error` otherwise.","ref":"Ash.Type.File.Source.html#implementation/1","title":"Ash.Type.File.Source.implementation/1","type":"function"},{"doc":"All the types that implement this protocol.","ref":"Ash.Type.File.Source.html#t:t/0","title":"Ash.Type.File.Source.t/0","type":"type"},{"doc":"Represents a float (floating point number)\n\nA builtin type that be referenced via `:float`","ref":"Ash.Type.Float.html","title":"Ash.Type.Float","type":"module"},{"doc":"* `:max` - Enforces a maximum on the value\n\n* `:min` - Enforces a minimum on the value\n\n* `:greater_than` - Enforces a minimum on the value (exclusive)\n\n* `:less_than` - Enforces a maximum on the value (exclusive)","ref":"Ash.Type.Float.html#module-constraints","title":"Constraints - Ash.Type.Float","type":"module"},{"doc":"Represents a function.\n\nIf the type would be dumped to a native format, `:erlang.term_to_binary(term, [:safe])` is used.\n\nPlease keep in mind, this is *NOT SAFE* to use with external input.\n\nMore information available here: https://erlang.org/doc/man/erlang.html#binary_to_term-2","ref":"Ash.Type.Function.html","title":"Ash.Type.Function","type":"module"},{"doc":"Represents a simple integer\n\nA builtin type that can be referenced via `:integer`","ref":"Ash.Type.Integer.html","title":"Ash.Type.Integer","type":"module"},{"doc":"* `:max` - Enforces a maximum on the value\n\n* `:min` - Enforces a minimum on the value","ref":"Ash.Type.Integer.html#module-constraints","title":"Constraints - Ash.Type.Integer","type":"module"},{"doc":"Represents a keyword list, stored as a `:map` in the database.\n\nA builtin type that can be referenced via `:keyword_list`\n\n* `:fields` (`t:keyword/0`) - Required. The types of the fields in the keyword, and their constraints.  \n  If constraints are specified, only those fields will be in the casted keyword.  \n  For example:  \n      fields:  [\n        amount: [\n          type: :integer,\n          constraints: [\n            max: 10\n          ]\n        ],\n        currency: [\n          type: :string,\n          allow_nil?: false,\n          constraints: [\n            max_length: 3\n          ]\n        ]\n      ]  \n  allow_nil? is true by default\n\n  * `:type` (an `Ash.Type`) - Required.\n\n  * `:allow_nil?` (`t:boolean/0`) - The default value is `true`.\n\n  * `:constraints` (`t:keyword/0`) - The default value is `[]`.","ref":"Ash.Type.Keyword.html","title":"Ash.Type.Keyword","type":"module"},{"doc":"","ref":"Ash.Type.Keyword.html#field_types/1","title":"Ash.Type.Keyword.field_types/1","type":"function"},{"doc":"Represents a map stored in the database.\n\nIn postgres, for example, this represents binary encoded json\n\nA builtin type that can be referenced via `:map`\n\n* `:fields` (`t:keyword/0`) - The types of the fields in the map, and their constraints.  \n  If constraints are specified, only those fields will be in the casted map.  \n  For example:  \n      fields:  [\n        amount: [\n          type: :integer,\n          constraints: [\n            max: 10\n          ]\n        ],\n        currency: [\n          type: :string,\n          allow_nil?: false,\n          constraints: [\n            max_length: 3\n          ]\n        ]\n      ]  \n  allow_nil? is true by default\n\n  * `:type` (an `Ash.Type`) - Required.\n\n  * `:allow_nil?` (`t:boolean/0`) - The default value is `true`.\n\n  * `:constraints` (`t:keyword/0`) - The default value is `[]`.","ref":"Ash.Type.Map.html","title":"Ash.Type.Map","type":"module"},{"doc":"","ref":"Ash.Type.Map.html#field_types/1","title":"Ash.Type.Map.field_types/1","type":"function"},{"doc":"Stores a module as a string in the database.\n\nA builtin type that can be referenced via `:module`.","ref":"Ash.Type.Module.html","title":"Ash.Type.Module","type":"module"},{"doc":"* `:behaviour` (`t:atom/0`) - Allows constraining the module a one which implements a behaviour\n\n* `:protocol` (`t:atom/0`) - Allows constraining the module a one which implements a protocol","ref":"Ash.Type.Module.html#module-constraints","title":"Constraints - Ash.Type.Module","type":"module"},{"doc":"Represents a Naive datetime\n\nA builtin type that can be referenced via `:naive_datetime`","ref":"Ash.Type.NaiveDatetime.html","title":"Ash.Type.NaiveDatetime","type":"module"},{"doc":"Allows defining a new type that is the combination of an existing type and custom constraints\n\nA subtle difference between this type and its supertype (one that will almost certainly not matter\nin any case) is that we use the `apply_constraints` logic of the underlying type in the same step\nas `cast_input`. We do this because new types like these are, generally speaking, considering the constraint\napplication as part of the core type. Other types, if you simply do `Ash.Type.cast_input/3` you will not be\nalso applying their constraints.\n\nFor Example:\n\n```elixir\ndefmodule MyApp.Types.SSN do\n  use Ash.Type.NewType, subtype_of: :string, constraints: [match: ~r/regex for ssn/]\nend\n\ndefmodule MyApp.Types.Metadata do\n  use Ash.Type.NewType, subtype_of: :union, constraints: [types: [\n    foo: [...],\n    bar: [...]\n  ]]\nend\n```","ref":"Ash.Type.NewType.html","title":"Ash.Type.NewType","type":"behaviour"},{"doc":"Returns the constraints schema.","ref":"Ash.Type.NewType.html#constraints/2","title":"Ash.Type.NewType.constraints/2","type":"function"},{"doc":"Returns true if the corresponding type is an Ash.Type.NewType","ref":"Ash.Type.NewType.html#new_type?/1","title":"Ash.Type.NewType.new_type?/1","type":"function"},{"doc":"Returns the underlying subtype constraints","ref":"Ash.Type.NewType.html#c:subtype_constraints/0","title":"Ash.Type.NewType.subtype_constraints/0","type":"callback"},{"doc":"Returns the type that the NewType is a subtype of.","ref":"Ash.Type.NewType.html#c:subtype_of/0","title":"Ash.Type.NewType.subtype_of/0","type":"callback"},{"doc":"Returns the type that the given newtype is a subtype of","ref":"Ash.Type.NewType.html#subtype_of/1","title":"Ash.Type.NewType.subtype_of/1","type":"function"},{"doc":"Returns the modified NewType constraints","ref":"Ash.Type.NewType.html#c:type_constraints/2","title":"Ash.Type.NewType.type_constraints/2","type":"callback"},{"doc":"","ref":"Ash.Type.NewType.html#t:t/0","title":"Ash.Type.NewType.t/0","type":"type"},{"doc":"Stores a string in the database.\n\nA built-in type that can be referenced via `:string`.\n\nBy default, values are trimmed and empty values are set to `nil`.\nYou can use the `allow_empty?` and `trim?` constraints to change these behaviors.","ref":"Ash.Type.String.html","title":"Ash.Type.String","type":"module"},{"doc":"* `:max_length` (`t:non_neg_integer/0`) - Enforces a maximum length on the value\n\n* `:min_length` (`t:non_neg_integer/0`) - Enforces a minimum length on the value\n\n* `:match` - Enforces that the string matches a passed in regex\n\n* `:trim?` (`t:boolean/0`) - Trims the value. The default value is `true`.\n\n* `:allow_empty?` (`t:boolean/0`) - If false, the value is set to `nil` if it's empty. The default value is `false`.","ref":"Ash.Type.String.html#module-constraints","title":"Constraints - Ash.Type.String","type":"module"},{"doc":"","ref":"Ash.Type.String.html#match/1","title":"Ash.Type.String.match/1","type":"function"},{"doc":"Represents a struct.\n\nUse the `instance_of` constraint to specify that it must be an instance of a specific struct.\n\nThis cannot be loaded from a database unless the `instance_of` constraint is provided.\nIf not, it can only be used to cast input, i.e for arguments.","ref":"Ash.Type.Struct.html","title":"Ash.Type.Struct","type":"module"},{"doc":"* `:instance_of` (`t:atom/0`) - The module the struct should be an instance of\n\n* `:preserve_nil_values?` (`t:boolean/0`) - If set to true, when storing, nil values will be kept. Otherwise, nil values will be omitted. The default value is `false`.\n\n* `:fields` (`t:keyword/0`) - The types of the fields in the struct, and their constraints.  \n  For example:  \n      fields:  [\n        amount: [\n          type: :integer,\n          constraints: [\n            max: 10\n          ]\n        ],\n        currency: [\n          type: :string,\n          allow_nil?: false,\n          constraints: [\n            max_length: 3\n          ]\n        ]\n      ]  \n  allow_nil? is true by default\n\n  * `:type` (an `Ash.Type`) - Required.\n\n  * `:allow_nil?` (`t:boolean/0`) - The default value is `true`.\n\n  * `:constraints` (`t:keyword/0`) - The default value is `[]`.","ref":"Ash.Type.Struct.html#module-constraints","title":"Constraints - Ash.Type.Struct","type":"module"},{"doc":"","ref":"Ash.Type.Struct.html#field_types/1","title":"Ash.Type.Struct.field_types/1","type":"function"},{"doc":"Represents a raw elixir term in the database\n\nA builtin type that can be referenced via `:binary`","ref":"Ash.Type.Term.html","title":"Ash.Type.Term","type":"module"},{"doc":"Represents a time in the database\n\nA builtin type that can be referenced via `:time`","ref":"Ash.Type.Time.html","title":"Ash.Type.Time","type":"module"},{"doc":"Represents a UUID.\n\nA builtin type that can be referenced via `:uuid`","ref":"Ash.Type.UUID.html","title":"Ash.Type.UUID","type":"module"},{"doc":"Represents a UUID.\n\nA builtin type that can be referenced via `:uuid_v7`","ref":"Ash.Type.UUIDv7.html","title":"Ash.Type.UUIDv7","type":"module"},{"doc":"A union between multiple types, distinguished with a tag or by attempting to validate.","ref":"Ash.Type.Union.html","title":"Ash.Type.Union","type":"module"},{"doc":"* `:storage` - How the value will be stored when persisted.  \n  `:type_and_value` will store the type and value in a map like so `{type: :type_name, value: the_value}`\n  `:map_with_tag` will store the value directly. This only works if all types have a `tag` and `tag_value` configured.\n   Valid values are :type_and_value, :map_with_tag The default value is `:type_and_value`.\n\n* `:types` - The types to be unioned, a map of an identifier for the enum value to its configuration.  \n  When using `tag` and `tag_value` we are referring to a map key that must equal a certain value\n  in order for the value to be considered an instance of that type.  \n  For example:  \n      types:  [\n        int: [\n          type: :integer,\n          constraints: [\n            max: 10\n          ]\n        ],\n        object: [\n          type: MyObjectType,\n          # The default value is `true`\n          # this passes the tag key/value to the nested type\n          # when casting input\n          cast_tag?: true,\n          tag: :type,\n          tag_value: \"my_object\"\n        ],\n        other_object: [\n          type: MyOtherObjectType,\n          cast_tag?: true,\n          tag: :type,\n          tag_value: \"my_other_object\"\n        ],\n        other_object_without_type: [\n          type: MyOtherObjectTypeWithoutType,\n          cast_tag?: false,\n          tag: :type,\n          tag_value: nil\n        ]\n      ]  \n  IMPORTANT:  \n  This is stored as a map under the hood. Filters over the data will need to take this into account.  \n  Additionally, if you are not using a tag, a value will be considered to be of the given type if it successfully casts.\n  This means that, for example, if you try to cast `\"10\"` as a union of a string and an integer, it will end up as `\"10\"` because\n  it is a string. If you put the integer type ahead of the string type, it will cast first and `10` will be the value.","ref":"Ash.Type.Union.html#module-constraints","title":"Constraints - Ash.Type.Union","type":"module"},{"doc":"Represents a binary that attempts to decode input strings as a url encoded base64 string.\n\nA builtin type that can be referenced via `:url_encoded_binary`","ref":"Ash.Type.UrlEncodedBinary.html","title":"Ash.Type.UrlEncodedBinary","type":"module"},{"doc":"Represents a utc datetime. A wrapper around `:datetime` for backwards compatibility.","ref":"Ash.Type.UtcDatetime.html","title":"Ash.Type.UtcDatetime","type":"module"},{"doc":"Represents a utc datetime with `nanosecond` precision. A wrapper around `:datetime` for backwards compatibility.","ref":"Ash.Type.UtcDatetimeUsec.html","title":"Ash.Type.UtcDatetimeUsec","type":"module"},{"doc":"Represents a vector.\n\nA builtin type that can be referenced via `:vector`","ref":"Ash.Type.Vector.html","title":"Ash.Type.Vector","type":"module"},{"doc":"Tools and utilities used by Ash to manage and conform errors","ref":"Ash.Error.html","title":"Ash.Error","type":"module"},{"doc":"","ref":"Ash.Error.html#ash_error?/1","title":"Ash.Error.ash_error?/1","type":"function"},{"doc":"","ref":"Ash.Error.html#error_descriptions/1","title":"Ash.Error.error_descriptions/1","type":"function"},{"doc":"","ref":"Ash.Error.html#splode_error?/2","title":"Ash.Error.splode_error?/2","type":"function"},{"doc":"","ref":"Ash.Error.html#to_ash_error/3","title":"Ash.Error.to_ash_error/3","type":"function"},{"doc":"","ref":"Ash.Error.html#to_error_class/2","title":"Ash.Error.to_error_class/2","type":"function"},{"doc":"","ref":"Ash.Error.html#t:class/0","title":"Ash.Error.class/0","type":"type"},{"doc":"","ref":"Ash.Error.html#t:class_module/0","title":"Ash.Error.class_module/0","type":"type"},{"doc":"","ref":"Ash.Error.html#t:error_class/0","title":"Ash.Error.error_class/0","type":"type"},{"doc":"","ref":"Ash.Error.html#t:t/0","title":"Ash.Error.t/0","type":"type"},{"doc":"Used when an invalid value is provided for an action argument","ref":"Ash.Error.Action.InvalidArgument.html","title":"Ash.Error.Action.InvalidArgument","type":"exception"},{"doc":"","ref":"Ash.Error.Action.InvalidArgument.html#exception/0","title":"Ash.Error.Action.InvalidArgument.exception/0","type":"function"},{"doc":"Used when an actor is referenced in a filter template, but no actor exists","ref":"Ash.Error.Changes.ActionRequiresActor.html","title":"Ash.Error.Changes.ActionRequiresActor","type":"exception"},{"doc":"","ref":"Ash.Error.Changes.ActionRequiresActor.html#exception/0","title":"Ash.Error.Changes.ActionRequiresActor.exception/0","type":"function"},{"doc":"Used when an invalid value is provided for an action argument","ref":"Ash.Error.Changes.InvalidArgument.html","title":"Ash.Error.Changes.InvalidArgument","type":"exception"},{"doc":"","ref":"Ash.Error.Changes.InvalidArgument.html#exception/0","title":"Ash.Error.Changes.InvalidArgument.exception/0","type":"function"},{"doc":"Used when an invalid value is provided for an attribute change","ref":"Ash.Error.Changes.InvalidAttribute.html","title":"Ash.Error.Changes.InvalidAttribute","type":"exception"},{"doc":"","ref":"Ash.Error.Changes.InvalidAttribute.html#exception/0","title":"Ash.Error.Changes.InvalidAttribute.exception/0","type":"function"},{"doc":"Used when a change is provided that covers multiple attributes/relationships","ref":"Ash.Error.Changes.InvalidChanges.html","title":"Ash.Error.Changes.InvalidChanges","type":"exception"},{"doc":"","ref":"Ash.Error.Changes.InvalidChanges.html#exception/0","title":"Ash.Error.Changes.InvalidChanges.exception/0","type":"function"},{"doc":"Used when an invalid value is provided for a relationship change","ref":"Ash.Error.Changes.InvalidRelationship.html","title":"Ash.Error.Changes.InvalidRelationship","type":"exception"},{"doc":"","ref":"Ash.Error.Changes.InvalidRelationship.html#exception/0","title":"Ash.Error.Changes.InvalidRelationship.exception/0","type":"function"},{"doc":"Used when a change is provided for an attribute that does not exist","ref":"Ash.Error.Changes.NoSuchAttribute.html","title":"Ash.Error.Changes.NoSuchAttribute","type":"exception"},{"doc":"","ref":"Ash.Error.Changes.NoSuchAttribute.html#exception/0","title":"Ash.Error.Changes.NoSuchAttribute.exception/0","type":"function"},{"doc":"Used when a change is provided for an relationship that does not exist","ref":"Ash.Error.Changes.NoSuchRelationship.html","title":"Ash.Error.Changes.NoSuchRelationship","type":"exception"},{"doc":"","ref":"Ash.Error.Changes.NoSuchRelationship.html#exception/0","title":"Ash.Error.Changes.NoSuchRelationship.exception/0","type":"function"},{"doc":"Used when an attribute or relationship is required","ref":"Ash.Error.Changes.Required.html","title":"Ash.Error.Changes.Required","type":"exception"},{"doc":"","ref":"Ash.Error.Changes.Required.html#exception/0","title":"Ash.Error.Changes.Required.exception/0","type":"function"},{"doc":"Used when a stale record is attempted to be updated or deleted","ref":"Ash.Error.Changes.StaleRecord.html","title":"Ash.Error.Changes.StaleRecord","type":"exception"},{"doc":"","ref":"Ash.Error.Changes.StaleRecord.html#exception/0","title":"Ash.Error.Changes.StaleRecord.exception/0","type":"function"},{"doc":"Tooling for creating an Ash exception","ref":"Ash.Error.Exception.html","title":"Ash.Error.Exception","type":"module"},{"doc":"","ref":"Ash.Error.Exception.html#def_ash_error/2","title":"Ash.Error.Exception.def_ash_error/2","type":"macro"},{"doc":"Used when authorization for an action fails","ref":"Ash.Error.Forbidden.html","title":"Ash.Error.Forbidden","type":"exception"},{"doc":"","ref":"Ash.Error.Forbidden.html#exception/0","title":"Ash.Error.Forbidden.exception/0","type":"function"},{"doc":"","ref":"Ash.Error.Forbidden.html#t:t/0","title":"Ash.Error.Forbidden.t/0","type":"type"},{"doc":"Used when a create action would be filtered","ref":"Ash.Error.Forbidden.CannotFilterCreates.html","title":"Ash.Error.Forbidden.CannotFilterCreates","type":"exception"},{"doc":"","ref":"Ash.Error.Forbidden.CannotFilterCreates.html#exception/0","title":"Ash.Error.Forbidden.CannotFilterCreates.exception/0","type":"function"},{"doc":"Used when a domain that has `require_actor? true` is provided no actor","ref":"Ash.Error.Forbidden.DomainRequiresActor.html","title":"Ash.Error.Forbidden.DomainRequiresActor","type":"exception"},{"doc":"","ref":"Ash.Error.Forbidden.DomainRequiresActor.html#exception/0","title":"Ash.Error.Forbidden.DomainRequiresActor.exception/0","type":"function"},{"doc":"Used when a domain that has `authorize :always` is provided authorize?: false","ref":"Ash.Error.Forbidden.DomainRequiresAuthorization.html","title":"Ash.Error.Forbidden.DomainRequiresAuthorization","type":"exception"},{"doc":"","ref":"Ash.Error.Forbidden.DomainRequiresAuthorization.html#exception/0","title":"Ash.Error.Forbidden.DomainRequiresAuthorization.exception/0","type":"function"},{"doc":"Raised in cases where access to a specific field was prevented","ref":"Ash.Error.Forbidden.ForbiddenField.html","title":"Ash.Error.Forbidden.ForbiddenField","type":"exception"},{"doc":"","ref":"Ash.Error.Forbidden.ForbiddenField.html#exception/0","title":"Ash.Error.Forbidden.ForbiddenField.exception/0","type":"function"},{"doc":"Used when initial data was not supplied when it was required","ref":"Ash.Error.Forbidden.InitialDataRequired.html","title":"Ash.Error.Forbidden.InitialDataRequired","type":"exception"},{"doc":"","ref":"Ash.Error.Forbidden.InitialDataRequired.html#exception/0","title":"Ash.Error.Forbidden.InitialDataRequired.exception/0","type":"function"},{"doc":"Used when unreachable code/conditions are reached in the framework","ref":"Ash.Error.Forbidden.MustPassStrictCheck.html","title":"Ash.Error.Forbidden.MustPassStrictCheck","type":"exception"},{"doc":"","ref":"Ash.Error.Forbidden.MustPassStrictCheck.html#exception/0","title":"Ash.Error.Forbidden.MustPassStrictCheck.exception/0","type":"function"},{"doc":"A placeholder exception that the user should never see","ref":"Ash.Error.Forbidden.Placeholder.html","title":"Ash.Error.Forbidden.Placeholder","type":"exception"},{"doc":"","ref":"Ash.Error.Forbidden.Placeholder.html#exception/0","title":"Ash.Error.Forbidden.Placeholder.exception/0","type":"function"},{"doc":"Raised when policy authorization for an action fails","ref":"Ash.Error.Forbidden.Policy.html","title":"Ash.Error.Forbidden.Policy","type":"exception"},{"doc":"","ref":"Ash.Error.Forbidden.Policy.html#exception/0","title":"Ash.Error.Forbidden.Policy.exception/0","type":"function"},{"doc":"Print a report of an authorization failure from authorization information.\n\nOptions:\n\n- `:help_text?`: Defaults to true. Displays help text at the top of the policy breakdown.\n- `:success?`: Defaults to false. Changes the messaging/graphics around to indicate successful policy authorization.\n- `:must_pass_strict_check?`: Defaults to false. Adds a message about this authorization requiring passing strict check.","ref":"Ash.Error.Forbidden.Policy.html#get_breakdown/4","title":"Ash.Error.Forbidden.Policy.get_breakdown/4","type":"function"},{"doc":"Print a report of an authorization failure from a forbidden error\n\nOptions:\n\n- `:help_text?`: Defaults to true. Displays help text at the top of the policy breakdown.","ref":"Ash.Error.Forbidden.Policy.html#report/1","title":"Ash.Error.Forbidden.Policy.report/1","type":"function"},{"doc":"","ref":"Ash.Error.Forbidden.Policy.html#report/2","title":"Ash.Error.Forbidden.Policy.report/2","type":"function"},{"doc":"Used when an unknown/generic framework error occurs","ref":"Ash.Error.Framework.html","title":"Ash.Error.Framework","type":"exception"},{"doc":"","ref":"Ash.Error.Framework.html#exception/0","title":"Ash.Error.Framework.exception/0","type":"function"},{"doc":"","ref":"Ash.Error.Framework.html#t:t/0","title":"Ash.Error.Framework.t/0","type":"type"},{"doc":"Used when unreachable code/conditions are reached in the framework","ref":"Ash.Error.Framework.AssumptionFailed.html","title":"Ash.Error.Framework.AssumptionFailed","type":"exception"},{"doc":"","ref":"Ash.Error.Framework.AssumptionFailed.html#exception/0","title":"Ash.Error.Framework.AssumptionFailed.exception/0","type":"function"},{"doc":"Used when a change that is only atomic cannot be done atomically","ref":"Ash.Error.Framework.CanNotBeAtomic.html","title":"Ash.Error.Framework.CanNotBeAtomic","type":"exception"},{"doc":"","ref":"Ash.Error.Framework.CanNotBeAtomic.html#exception/0","title":"Ash.Error.Framework.CanNotBeAtomic.exception/0","type":"function"},{"doc":"Used when unreachable code/conditions are reached in the framework","ref":"Ash.Error.Framework.FlagAssertionFailed.html","title":"Ash.Error.Framework.FlagAssertionFailed","type":"exception"},{"doc":"","ref":"Ash.Error.Framework.FlagAssertionFailed.html#exception/0","title":"Ash.Error.Framework.FlagAssertionFailed.exception/0","type":"function"},{"doc":"Used when a callback returns an invalid type","ref":"Ash.Error.Framework.InvalidReturnType.html","title":"Ash.Error.Framework.InvalidReturnType","type":"exception"},{"doc":"","ref":"Ash.Error.Framework.InvalidReturnType.html#exception/0","title":"Ash.Error.Framework.InvalidReturnType.exception/0","type":"function"},{"doc":"Used when an action that must be atomic cannot be done atomically","ref":"Ash.Error.Framework.MustBeAtomic.html","title":"Ash.Error.Framework.MustBeAtomic","type":"exception"},{"doc":"","ref":"Ash.Error.Framework.MustBeAtomic.html#exception/0","title":"Ash.Error.Framework.MustBeAtomic.exception/0","type":"function"},{"doc":"Used when the sycnrhonous engine cannot proceed","ref":"Ash.Error.Framework.SynchronousEngineStuck.html","title":"Ash.Error.Framework.SynchronousEngineStuck","type":"exception"},{"doc":"","ref":"Ash.Error.Framework.SynchronousEngineStuck.html#exception/0","title":"Ash.Error.Framework.SynchronousEngineStuck.exception/0","type":"function"},{"doc":"The top level invalid error","ref":"Ash.Error.Invalid.html","title":"Ash.Error.Invalid","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.html#exception/0","title":"Ash.Error.Invalid.exception/0","type":"function"},{"doc":"","ref":"Ash.Error.Invalid.html#t:t/0","title":"Ash.Error.Invalid.t/0","type":"type"},{"doc":"Used when page option is passed but pagination is not enabled.","ref":"Ash.Error.Invalid.ActionRequiresPagination.html","title":"Ash.Error.Invalid.ActionRequiresPagination","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.ActionRequiresPagination.html#exception/0","title":"Ash.Error.Invalid.ActionRequiresPagination.exception/0","type":"function"},{"doc":"Used when atomics for the given action type are not not supported by the data layer, but one is used.","ref":"Ash.Error.Invalid.AtomicsNotSupported.html","title":"Ash.Error.Invalid.AtomicsNotSupported","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.AtomicsNotSupported.html#exception/0","title":"Ash.Error.Invalid.AtomicsNotSupported.exception/0","type":"function"},{"doc":"Used when an invalid primary key is given to `Ash.get/2`","ref":"Ash.Error.Invalid.InvalidPrimaryKey.html","title":"Ash.Error.Invalid.InvalidPrimaryKey","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.InvalidPrimaryKey.html#exception/0","title":"Ash.Error.Invalid.InvalidPrimaryKey.exception/0","type":"function"},{"doc":"Used when no limit is provided, pagination is required, and no default page size is configured","ref":"Ash.Error.Invalid.LimitRequired.html","title":"Ash.Error.Invalid.LimitRequired","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.LimitRequired.html#exception/0","title":"Ash.Error.Invalid.LimitRequired.exception/0","type":"function"},{"doc":"Used when multiple results are returned in a case where only one result was expected","ref":"Ash.Error.Invalid.MultipleResults.html","title":"Ash.Error.Invalid.MultipleResults","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.MultipleResults.html#exception/0","title":"Ash.Error.Invalid.MultipleResults.exception/0","type":"function"},{"doc":"Used when an identity name is used that does not reference identity on the resource","ref":"Ash.Error.Invalid.NoIdentityFound.html","title":"Ash.Error.Invalid.NoIdentityFound","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.NoIdentityFound.html#exception/0","title":"Ash.Error.Invalid.NoIdentityFound.exception/0","type":"function"},{"doc":"Used when an identity name is used that does not reference identity on the resource","ref":"Ash.Error.Invalid.NoMatchingBulkStrategy.html","title":"Ash.Error.Invalid.NoMatchingBulkStrategy","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.NoMatchingBulkStrategy.html#exception/0","title":"Ash.Error.Invalid.NoMatchingBulkStrategy.exception/0","type":"function"},{"doc":"Used when an action name is provided that doesn't exist","ref":"Ash.Error.Invalid.NoPrimaryAction.html","title":"Ash.Error.Invalid.NoPrimaryAction","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.NoPrimaryAction.html#exception/0","title":"Ash.Error.Invalid.NoPrimaryAction.exception/0","type":"function"},{"doc":"Used when an action name is provided that doesn't exist","ref":"Ash.Error.Invalid.NoSuchAction.html","title":"Ash.Error.Invalid.NoSuchAction","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.NoSuchAction.html#exception/0","title":"Ash.Error.Invalid.NoSuchAction.exception/0","type":"function"},{"doc":"Used when an input is provided to an action or calculation that is not accepted","ref":"Ash.Error.Invalid.NoSuchInput.html","title":"Ash.Error.Invalid.NoSuchInput","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.NoSuchInput.html#exception/0","title":"Ash.Error.Invalid.NoSuchInput.exception/0","type":"function"},{"doc":"Used when a resource or alias is provided that doesn't exist","ref":"Ash.Error.Invalid.NoSuchResource.html","title":"Ash.Error.Invalid.NoSuchResource","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.NoSuchResource.html#exception/0","title":"Ash.Error.Invalid.NoSuchResource.exception/0","type":"function"},{"doc":"Used when page[:count] option is passed but the action's pagination is not countable.","ref":"Ash.Error.Invalid.NonCountableAction.html","title":"Ash.Error.Invalid.NonCountableAction","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.NonCountableAction.html#exception/0","title":"Ash.Error.Invalid.NonCountableAction.exception/0","type":"function"},{"doc":"Used when Ash.stream is used with an action that does not support keyset pagination","ref":"Ash.Error.Invalid.NonStreamableAction.html","title":"Ash.Error.Invalid.NonStreamableAction","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.NonStreamableAction.html#exception/0","title":"Ash.Error.Invalid.NonStreamableAction.exception/0","type":"function"},{"doc":"Used when `page: false` is provided but pagination is required","ref":"Ash.Error.Invalid.PaginationRequired.html","title":"Ash.Error.Invalid.PaginationRequired","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.PaginationRequired.html#exception/0","title":"Ash.Error.Invalid.PaginationRequired.exception/0","type":"function"},{"doc":"Used when a resource or alias is provided that cannot be used with the given domain","ref":"Ash.Error.Invalid.ResourceNotAllowed.html","title":"Ash.Error.Invalid.ResourceNotAllowed","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.ResourceNotAllowed.html#exception/0","title":"Ash.Error.Invalid.ResourceNotAllowed.exception/0","type":"function"},{"doc":"Used when a tenant is not specified","ref":"Ash.Error.Invalid.TenantRequired.html","title":"Ash.Error.Invalid.TenantRequired","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.TenantRequired.html#exception/0","title":"Ash.Error.Invalid.TenantRequired.exception/0","type":"function"},{"doc":"Used when a request to a domain times out.","ref":"Ash.Error.Invalid.Timeout.html","title":"Ash.Error.Invalid.Timeout","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.Timeout.html#exception/0","title":"Ash.Error.Invalid.Timeout.exception/0","type":"function"},{"doc":"Used when timeouts are not supported by the data layer, but one is set","ref":"Ash.Error.Invalid.TimeoutNotSupported.html","title":"Ash.Error.Invalid.TimeoutNotSupported","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.TimeoutNotSupported.html#exception/0","title":"Ash.Error.Invalid.TimeoutNotSupported.exception/0","type":"function"},{"doc":"Used when a given resource is unavailable.\n\nThis might happen due to locking at the data layer, or something\nyou implement yourself.","ref":"Ash.Error.Invalid.Unavailable.html","title":"Ash.Error.Invalid.Unavailable","type":"exception"},{"doc":"","ref":"Ash.Error.Invalid.Unavailable.html#exception/0","title":"Ash.Error.Invalid.Unavailable.exception/0","type":"function"},{"doc":"Used when an invalid query is provided in a load","ref":"Ash.Error.Load.InvalidQuery.html","title":"Ash.Error.Load.InvalidQuery","type":"exception"},{"doc":"","ref":"Ash.Error.Load.InvalidQuery.html#exception/0","title":"Ash.Error.Load.InvalidQuery.exception/0","type":"function"},{"doc":"Used when attempting to load a relationship that does not exist","ref":"Ash.Error.Load.NoSuchRelationship.html","title":"Ash.Error.Load.NoSuchRelationship","type":"exception"},{"doc":"","ref":"Ash.Error.Load.NoSuchRelationship.html#exception/0","title":"Ash.Error.Load.NoSuchRelationship.exception/0","type":"function"},{"doc":"Used when a value is provided for a keyset that cannot be Base64 decoded.","ref":"Ash.Error.Page.InvalidKeyset.html","title":"Ash.Error.Page.InvalidKeyset","type":"exception"},{"doc":"","ref":"Ash.Error.Page.InvalidKeyset.html#exception/0","title":"Ash.Error.Page.InvalidKeyset.exception/0","type":"function"},{"doc":"Used when the data_layer does not support aggregates, or filtering/sorting them","ref":"Ash.Error.Query.AggregatesNotSupported.html","title":"Ash.Error.Query.AggregatesNotSupported","type":"exception"},{"doc":"","ref":"Ash.Error.Query.AggregatesNotSupported.html#exception/0","title":"Ash.Error.Query.AggregatesNotSupported.exception/0","type":"function"},{"doc":"Used when a calculation requires a primary key but was not supplied with one","ref":"Ash.Error.Query.CalculationRequiresPrimaryKey.html","title":"Ash.Error.Query.CalculationRequiresPrimaryKey","type":"exception"},{"doc":"","ref":"Ash.Error.Query.CalculationRequiresPrimaryKey.html#exception/0","title":"Ash.Error.Query.CalculationRequiresPrimaryKey.exception/0","type":"function"},{"doc":"Used when the data_layer does not support calculations, or filtering/sorting them","ref":"Ash.Error.Query.CalculationsNotSupported.html","title":"Ash.Error.Query.CalculationsNotSupported","type":"exception"},{"doc":"","ref":"Ash.Error.Query.CalculationsNotSupported.html#exception/0","title":"Ash.Error.Query.CalculationsNotSupported.exception/0","type":"function"},{"doc":"Used when an invalid value is provided for an action argument","ref":"Ash.Error.Query.InvalidArgument.html","title":"Ash.Error.Query.InvalidArgument","type":"exception"},{"doc":"","ref":"Ash.Error.Query.InvalidArgument.html#exception/0","title":"Ash.Error.Query.InvalidArgument.exception/0","type":"function"},{"doc":"Used when an invalid value is provided for a calculation argument","ref":"Ash.Error.Query.InvalidCalculationArgument.html","title":"Ash.Error.Query.InvalidCalculationArgument","type":"exception"},{"doc":"","ref":"Ash.Error.Query.InvalidCalculationArgument.html#exception/0","title":"Ash.Error.Query.InvalidCalculationArgument.exception/0","type":"function"},{"doc":"Used when an invalid expression is used in a filter","ref":"Ash.Error.Query.InvalidExpression.html","title":"Ash.Error.Query.InvalidExpression","type":"exception"},{"doc":"","ref":"Ash.Error.Query.InvalidExpression.html#exception/0","title":"Ash.Error.Query.InvalidExpression.exception/0","type":"function"},{"doc":"Used when an invalid reference is used in a filter","ref":"Ash.Error.Query.InvalidFilterReference.html","title":"Ash.Error.Query.InvalidFilterReference","type":"exception"},{"doc":"","ref":"Ash.Error.Query.InvalidFilterReference.html#exception/0","title":"Ash.Error.Query.InvalidFilterReference.exception/0","type":"function"},{"doc":"Used when an invalid value is provided for a filter","ref":"Ash.Error.Query.InvalidFilterValue.html","title":"Ash.Error.Query.InvalidFilterValue","type":"exception"},{"doc":"","ref":"Ash.Error.Query.InvalidFilterValue.html#exception/0","title":"Ash.Error.Query.InvalidFilterValue.exception/0","type":"function"},{"doc":"Used when an invalid limit is provided","ref":"Ash.Error.Query.InvalidLimit.html","title":"Ash.Error.Query.InvalidLimit","type":"exception"},{"doc":"","ref":"Ash.Error.Query.InvalidLimit.html#exception/0","title":"Ash.Error.Query.InvalidLimit.exception/0","type":"function"},{"doc":"Used when an invalid load is provided","ref":"Ash.Error.Query.InvalidLoad.html","title":"Ash.Error.Query.InvalidLoad","type":"exception"},{"doc":"","ref":"Ash.Error.Query.InvalidLoad.html#exception/0","title":"Ash.Error.Query.InvalidLoad.exception/0","type":"function"},{"doc":"Used when an invalid offset is provided","ref":"Ash.Error.Query.InvalidOffset.html","title":"Ash.Error.Query.InvalidOffset","type":"exception"},{"doc":"","ref":"Ash.Error.Query.InvalidOffset.html#exception/0","title":"Ash.Error.Query.InvalidOffset.exception/0","type":"function"},{"doc":"Used when an invalid page option is provided","ref":"Ash.Error.Query.InvalidPage.html","title":"Ash.Error.Query.InvalidPage","type":"exception"},{"doc":"","ref":"Ash.Error.Query.InvalidPage.html#exception/0","title":"Ash.Error.Query.InvalidPage.exception/0","type":"function"},{"doc":"A generic error that can be used to add an error to a query for a specific field","ref":"Ash.Error.Query.InvalidQuery.html","title":"Ash.Error.Query.InvalidQuery","type":"exception"},{"doc":"","ref":"Ash.Error.Query.InvalidQuery.html#exception/0","title":"Ash.Error.Query.InvalidQuery.exception/0","type":"function"},{"doc":"Used when an invalid sort order is provided","ref":"Ash.Error.Query.InvalidSortOrder.html","title":"Ash.Error.Query.InvalidSortOrder","type":"exception"},{"doc":"","ref":"Ash.Error.Query.InvalidSortOrder.html#exception/0","title":"Ash.Error.Query.InvalidSortOrder.exception/0","type":"function"},{"doc":"Used when the data_layer does not support a given lock type","ref":"Ash.Error.Query.LockNotSupported.html","title":"Ash.Error.Query.LockNotSupported","type":"exception"},{"doc":"","ref":"Ash.Error.Query.LockNotSupported.html#exception/0","title":"Ash.Error.Query.LockNotSupported.exception/0","type":"function"},{"doc":"Due to the filter-based implementation of keyset pagination, it cannot be used with sorts on calculations.\n\nWe could solve this problem by making the keyset only be the primary key of the record,\nand then fetching that value loading the calculations/aggregates that we need. If we do this\nwe should either: 1.) make it a new pagination mode or 2.) add an option like `mode: :strict | :fetch`\nto pagination options.\n\nLet me know if you're reading this and want to help implement it.","ref":"Ash.Error.Query.NoComplexSortsWithKeysetPagination.html","title":"Ash.Error.Query.NoComplexSortsWithKeysetPagination","type":"exception"},{"doc":"","ref":"Ash.Error.Query.NoComplexSortsWithKeysetPagination.html#exception/0","title":"Ash.Error.Query.NoComplexSortsWithKeysetPagination.exception/0","type":"function"},{"doc":"Used when a resource would be read but has no read action","ref":"Ash.Error.Query.NoReadAction.html","title":"Ash.Error.Query.NoReadAction","type":"exception"},{"doc":"","ref":"Ash.Error.Query.NoReadAction.html#exception/0","title":"Ash.Error.Query.NoReadAction.exception/0","type":"function"},{"doc":"Used when an attribute that doesn't exist is used in a query","ref":"Ash.Error.Query.NoSuchAttribute.html","title":"Ash.Error.Query.NoSuchAttribute","type":"exception"},{"doc":"","ref":"Ash.Error.Query.NoSuchAttribute.html#exception/0","title":"Ash.Error.Query.NoSuchAttribute.exception/0","type":"function"},{"doc":"Used when a field(attrbute, calculation, aggregate or relationship) that doesn't exist is used in a query","ref":"Ash.Error.Query.NoSuchField.html","title":"Ash.Error.Query.NoSuchField","type":"exception"},{"doc":"","ref":"Ash.Error.Query.NoSuchField.html#exception/0","title":"Ash.Error.Query.NoSuchField.exception/0","type":"function"},{"doc":"Used when a filter predicate that does not exist is referenced","ref":"Ash.Error.Query.NoSuchFilterPredicate.html","title":"Ash.Error.Query.NoSuchFilterPredicate","type":"exception"},{"doc":"","ref":"Ash.Error.Query.NoSuchFilterPredicate.html#exception/0","title":"Ash.Error.Query.NoSuchFilterPredicate.exception/0","type":"function"},{"doc":"Used when an function that doesn't exist is used in a query","ref":"Ash.Error.Query.NoSuchFunction.html","title":"Ash.Error.Query.NoSuchFunction","type":"exception"},{"doc":"","ref":"Ash.Error.Query.NoSuchFunction.html#exception/0","title":"Ash.Error.Query.NoSuchFunction.exception/0","type":"function"},{"doc":"Used when an operator that doesn't exist is used in a query","ref":"Ash.Error.Query.NoSuchOperator.html","title":"Ash.Error.Query.NoSuchOperator","type":"exception"},{"doc":"","ref":"Ash.Error.Query.NoSuchOperator.html#exception/0","title":"Ash.Error.Query.NoSuchOperator.exception/0","type":"function"},{"doc":"Used when an relationship that doesn't exist is used in a query","ref":"Ash.Error.Query.NoSuchRelationship.html","title":"Ash.Error.Query.NoSuchRelationship","type":"exception"},{"doc":"","ref":"Ash.Error.Query.NoSuchRelationship.html#exception/0","title":"Ash.Error.Query.NoSuchRelationship.exception/0","type":"function"},{"doc":"Used when an entity that not exist is referenced","ref":"Ash.Error.Query.NotFound.html","title":"Ash.Error.Query.NotFound","type":"exception"},{"doc":"","ref":"Ash.Error.Query.NotFound.html#exception/0","title":"Ash.Error.Query.NotFound.exception/0","type":"function"},{"doc":"Used when a relationship is filtered and the destination does not have a default read action","ref":"Ash.Error.Query.ReadActionRequired.html","title":"Ash.Error.Query.ReadActionRequired","type":"exception"},{"doc":"","ref":"Ash.Error.Query.ReadActionRequired.html#exception/0","title":"Ash.Error.Query.ReadActionRequired.exception/0","type":"function"},{"doc":"Used when an actor is referenced in a filter template, but no actor exists","ref":"Ash.Error.Query.ReadActionRequiresActor.html","title":"Ash.Error.Query.ReadActionRequiresActor","type":"exception"},{"doc":"","ref":"Ash.Error.Query.ReadActionRequiresActor.html#exception/0","title":"Ash.Error.Query.ReadActionRequiresActor.exception/0","type":"function"},{"doc":"Used when a filter or argument is required in a query","ref":"Ash.Error.Query.Required.html","title":"Ash.Error.Query.Required","type":"exception"},{"doc":"","ref":"Ash.Error.Query.Required.html#exception/0","title":"Ash.Error.Query.Required.exception/0","type":"function"},{"doc":"Used when attempting to sort on a field that cannot be used for sorting","ref":"Ash.Error.Query.UnsortableField.html","title":"Ash.Error.Query.UnsortableField","type":"exception"},{"doc":"","ref":"Ash.Error.Query.UnsortableField.html#exception/0","title":"Ash.Error.Query.UnsortableField.exception/0","type":"function"},{"doc":"Used when the data_layer does not support a provided predicate","ref":"Ash.Error.Query.UnsupportedPredicate.html","title":"Ash.Error.Query.UnsupportedPredicate","type":"exception"},{"doc":"","ref":"Ash.Error.Query.UnsupportedPredicate.html#exception/0","title":"Ash.Error.Query.UnsupportedPredicate.exception/0","type":"function"},{"doc":"Used when no data was provided to the simple data layer","ref":"Ash.Error.SimpleDataLayer.NoDataProvided.html","title":"Ash.Error.SimpleDataLayer.NoDataProvided","type":"exception"},{"doc":"","ref":"Ash.Error.SimpleDataLayer.NoDataProvided.html#exception/0","title":"Ash.Error.SimpleDataLayer.NoDataProvided.exception/0","type":"function"},{"doc":"A placeholder for a stacktrace so that we can avoid printing it everywhere","ref":"Ash.Error.Stacktrace.html","title":"Ash.Error.Stacktrace","type":"module"},{"doc":"","ref":"Ash.Error.Stacktrace.html#t:t/0","title":"Ash.Error.Stacktrace.t/0","type":"type"},{"doc":"The top level unknown error container","ref":"Ash.Error.Unknown.html","title":"Ash.Error.Unknown","type":"exception"},{"doc":"","ref":"Ash.Error.Unknown.html#exception/0","title":"Ash.Error.Unknown.exception/0","type":"function"},{"doc":"","ref":"Ash.Error.Unknown.html#t:t/0","title":"Ash.Error.Unknown.t/0","type":"type"},{"doc":"Used when an unknown error occurs","ref":"Ash.Error.Unknown.UnknownError.html","title":"Ash.Error.Unknown.UnknownError","type":"exception"},{"doc":"","ref":"Ash.Error.Unknown.UnknownError.html#exception/0","title":"Ash.Error.Unknown.UnknownError.exception/0","type":"function"},{"doc":"Ensures that all identities have a `pre_check_with` configured, or raises.","ref":"Ash.DataLayer.Verifiers.RequirePreCheckWith.html","title":"Ash.DataLayer.Verifiers.RequirePreCheckWith","type":"module"},{"doc":"Ensures that all resources for a given domain are not embeds.","ref":"Ash.Domain.Verifiers.EnsureNoEmbeds.html","title":"Ash.Domain.Verifiers.EnsureNoEmbeds","type":"module"},{"doc":"Ensures that all related resources are included in a domain.","ref":"Ash.Domain.Verifiers.ValidateRelatedResourceInclusion.html","title":"Ash.Domain.Verifiers.ValidateRelatedResourceInclusion","type":"module"},{"doc":"Adds field policies for any missing fields","ref":"Ash.Policy.Authorizer.Transformers.AddMissingFieldPolicies.html","title":"Ash.Policy.Authorizer.Transformers.AddMissingFieldPolicies","type":"module"},{"doc":"","ref":"Ash.Policy.Authorizer.Transformers.AddMissingFieldPolicies.html#after?/1","title":"Ash.Policy.Authorizer.Transformers.AddMissingFieldPolicies.after?/1","type":"function"},{"doc":"","ref":"Ash.Policy.Authorizer.Transformers.AddMissingFieldPolicies.html#after_compile?/0","title":"Ash.Policy.Authorizer.Transformers.AddMissingFieldPolicies.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Authorizer.Transformers.AddMissingFieldPolicies.html#before?/1","title":"Ash.Policy.Authorizer.Transformers.AddMissingFieldPolicies.before?/1","type":"function"},{"doc":"","ref":"Ash.Policy.Authorizer.Transformers.AddMissingFieldPolicies.html#transform/1","title":"Ash.Policy.Authorizer.Transformers.AddMissingFieldPolicies.transform/1","type":"function"},{"doc":"Cache field policies for each field","ref":"Ash.Policy.Authorizer.Transformers.CacheFieldPolicies.html","title":"Ash.Policy.Authorizer.Transformers.CacheFieldPolicies","type":"module"},{"doc":"","ref":"Ash.Policy.Authorizer.Transformers.CacheFieldPolicies.html#after?/1","title":"Ash.Policy.Authorizer.Transformers.CacheFieldPolicies.after?/1","type":"function"},{"doc":"","ref":"Ash.Policy.Authorizer.Transformers.CacheFieldPolicies.html#after_compile?/0","title":"Ash.Policy.Authorizer.Transformers.CacheFieldPolicies.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Authorizer.Transformers.CacheFieldPolicies.html#before?/1","title":"Ash.Policy.Authorizer.Transformers.CacheFieldPolicies.before?/1","type":"function"},{"doc":"","ref":"Ash.Policy.Authorizer.Transformers.CacheFieldPolicies.html#transform/1","title":"Ash.Policy.Authorizer.Transformers.CacheFieldPolicies.transform/1","type":"function"},{"doc":"Persists attribute_names and attributes_by_name.","ref":"Ash.Resource.Transformers.AttributesByName.html","title":"Ash.Resource.Transformers.AttributesByName","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.AttributesByName.html#after?/1","title":"Ash.Resource.Transformers.AttributesByName.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.AttributesByName.html#after_compile?/0","title":"Ash.Resource.Transformers.AttributesByName.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.AttributesByName.html#before?/1","title":"Ash.Resource.Transformers.AttributesByName.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.AttributesByName.html#transform/1","title":"Ash.Resource.Transformers.AttributesByName.transform/1","type":"function"},{"doc":"Creates the attribute for belongs_to relationships that have `define_attribute?: true`","ref":"Ash.Resource.Transformers.BelongsToAttribute.html","title":"Ash.Resource.Transformers.BelongsToAttribute","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.BelongsToAttribute.html#after?/1","title":"Ash.Resource.Transformers.BelongsToAttribute.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.BelongsToAttribute.html#after_compile?/0","title":"Ash.Resource.Transformers.BelongsToAttribute.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.BelongsToAttribute.html#before?/1","title":"Ash.Resource.Transformers.BelongsToAttribute.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.BelongsToAttribute.html#transform/1","title":"Ash.Resource.Transformers.BelongsToAttribute.transform/1","type":"function"},{"doc":"Stores the set of valid input keys for each action","ref":"Ash.Resource.Transformers.CacheActionInputs.html","title":"Ash.Resource.Transformers.CacheActionInputs","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.CacheActionInputs.html#after?/1","title":"Ash.Resource.Transformers.CacheActionInputs.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheActionInputs.html#after_compile?/0","title":"Ash.Resource.Transformers.CacheActionInputs.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheActionInputs.html#before?/1","title":"Ash.Resource.Transformers.CacheActionInputs.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheActionInputs.html#transform/1","title":"Ash.Resource.Transformers.CacheActionInputs.transform/1","type":"function"},{"doc":"Persists commonly used calculation information.","ref":"Ash.Resource.Transformers.CacheCalculations.html","title":"Ash.Resource.Transformers.CacheCalculations","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.CacheCalculations.html#after?/1","title":"Ash.Resource.Transformers.CacheCalculations.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheCalculations.html#after_compile?/0","title":"Ash.Resource.Transformers.CacheCalculations.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheCalculations.html#before?/1","title":"Ash.Resource.Transformers.CacheCalculations.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheCalculations.html#transform/1","title":"Ash.Resource.Transformers.CacheCalculations.transform/1","type":"function"},{"doc":"Validates and caches the primary key of a resource","ref":"Ash.Resource.Transformers.CachePrimaryKey.html","title":"Ash.Resource.Transformers.CachePrimaryKey","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.CachePrimaryKey.html#after?/1","title":"Ash.Resource.Transformers.CachePrimaryKey.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CachePrimaryKey.html#after_compile?/0","title":"Ash.Resource.Transformers.CachePrimaryKey.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CachePrimaryKey.html#before?/1","title":"Ash.Resource.Transformers.CachePrimaryKey.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CachePrimaryKey.html#transform/1","title":"Ash.Resource.Transformers.CachePrimaryKey.transform/1","type":"function"},{"doc":"Persists commonly used relationship information.","ref":"Ash.Resource.Transformers.CacheRelationships.html","title":"Ash.Resource.Transformers.CacheRelationships","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.CacheRelationships.html#after?/1","title":"Ash.Resource.Transformers.CacheRelationships.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheRelationships.html#after_compile?/0","title":"Ash.Resource.Transformers.CacheRelationships.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheRelationships.html#before?/1","title":"Ash.Resource.Transformers.CacheRelationships.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheRelationships.html#transform/1","title":"Ash.Resource.Transformers.CacheRelationships.transform/1","type":"function"},{"doc":"Stores the set of unique keys for a resource","ref":"Ash.Resource.Transformers.CacheUniqueKeys.html","title":"Ash.Resource.Transformers.CacheUniqueKeys","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.CacheUniqueKeys.html#after?/1","title":"Ash.Resource.Transformers.CacheUniqueKeys.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheUniqueKeys.html#after_compile?/0","title":"Ash.Resource.Transformers.CacheUniqueKeys.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheUniqueKeys.html#before?/1","title":"Ash.Resource.Transformers.CacheUniqueKeys.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CacheUniqueKeys.html#transform/1","title":"Ash.Resource.Transformers.CacheUniqueKeys.transform/1","type":"function"},{"doc":"Creates an automatically named `has_many` relationship for each many_to_many.","ref":"Ash.Resource.Transformers.CreateJoinRelationship.html","title":"Ash.Resource.Transformers.CreateJoinRelationship","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.CreateJoinRelationship.html#after?/1","title":"Ash.Resource.Transformers.CreateJoinRelationship.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CreateJoinRelationship.html#after_compile?/0","title":"Ash.Resource.Transformers.CreateJoinRelationship.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CreateJoinRelationship.html#before?/1","title":"Ash.Resource.Transformers.CreateJoinRelationship.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.CreateJoinRelationship.html#transform/1","title":"Ash.Resource.Transformers.CreateJoinRelationship.transform/1","type":"function"},{"doc":"Sets the default `accept` for each action","ref":"Ash.Resource.Transformers.DefaultAccept.html","title":"Ash.Resource.Transformers.DefaultAccept","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.DefaultAccept.html#after?/1","title":"Ash.Resource.Transformers.DefaultAccept.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.DefaultAccept.html#after_compile?/0","title":"Ash.Resource.Transformers.DefaultAccept.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.DefaultAccept.html#before?/1","title":"Ash.Resource.Transformers.DefaultAccept.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.DefaultAccept.html#transform/1","title":"Ash.Resource.Transformers.DefaultAccept.transform/1","type":"function"},{"doc":"Transform any read actions which contain a `get_by` option.","ref":"Ash.Resource.Transformers.GetByReadActions.html","title":"Ash.Resource.Transformers.GetByReadActions","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.GetByReadActions.html#after_compile?/0","title":"Ash.Resource.Transformers.GetByReadActions.after_compile?/0","type":"function"},{"doc":"Guesses the `destination_attribute` for has many and has one relationships unless provided","ref":"Ash.Resource.Transformers.HasDestinationField.html","title":"Ash.Resource.Transformers.HasDestinationField","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.HasDestinationField.html#after?/1","title":"Ash.Resource.Transformers.HasDestinationField.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.HasDestinationField.html#after_compile?/0","title":"Ash.Resource.Transformers.HasDestinationField.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.HasDestinationField.html#before?/1","title":"Ash.Resource.Transformers.HasDestinationField.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.HasDestinationField.html#transform/1","title":"Ash.Resource.Transformers.HasDestinationField.transform/1","type":"function"},{"doc":"Guesses the `destination_attribute_on_join_resource` for many to many relationships unless provided.","ref":"Ash.Resource.Transformers.ManyToManyDestinationAttributeOnJoinResource.html","title":"Ash.Resource.Transformers.ManyToManyDestinationAttributeOnJoinResource","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.ManyToManyDestinationAttributeOnJoinResource.html#after?/1","title":"Ash.Resource.Transformers.ManyToManyDestinationAttributeOnJoinResource.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.ManyToManyDestinationAttributeOnJoinResource.html#after_compile?/0","title":"Ash.Resource.Transformers.ManyToManyDestinationAttributeOnJoinResource.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.ManyToManyDestinationAttributeOnJoinResource.html#before?/1","title":"Ash.Resource.Transformers.ManyToManyDestinationAttributeOnJoinResource.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.ManyToManyDestinationAttributeOnJoinResource.html#transform/1","title":"Ash.Resource.Transformers.ManyToManyDestinationAttributeOnJoinResource.transform/1","type":"function"},{"doc":"Guesses the `source_attribute_on_join_resource` for many to many relationships unless provided.","ref":"Ash.Resource.Transformers.ManyToManySourceAttributeOnJoinResource.html","title":"Ash.Resource.Transformers.ManyToManySourceAttributeOnJoinResource","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.ManyToManySourceAttributeOnJoinResource.html#after?/1","title":"Ash.Resource.Transformers.ManyToManySourceAttributeOnJoinResource.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.ManyToManySourceAttributeOnJoinResource.html#after_compile?/0","title":"Ash.Resource.Transformers.ManyToManySourceAttributeOnJoinResource.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.ManyToManySourceAttributeOnJoinResource.html#before?/1","title":"Ash.Resource.Transformers.ManyToManySourceAttributeOnJoinResource.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.ManyToManySourceAttributeOnJoinResource.html#transform/1","title":"Ash.Resource.Transformers.ManyToManySourceAttributeOnJoinResource.transform/1","type":"function"},{"doc":"Ensures that all actions have unique names.","ref":"Ash.Resource.Transformers.RequireUniqueActionNames.html","title":"Ash.Resource.Transformers.RequireUniqueActionNames","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.RequireUniqueActionNames.html#after?/1","title":"Ash.Resource.Transformers.RequireUniqueActionNames.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.RequireUniqueActionNames.html#after_compile?/0","title":"Ash.Resource.Transformers.RequireUniqueActionNames.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.RequireUniqueActionNames.html#before?/1","title":"Ash.Resource.Transformers.RequireUniqueActionNames.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.RequireUniqueActionNames.html#transform/1","title":"Ash.Resource.Transformers.RequireUniqueActionNames.transform/1","type":"function"},{"doc":"Confirms that a resource does not have multiple fields(attributes, calculations, aggregates, and relationships) with the same name.","ref":"Ash.Resource.Transformers.RequireUniqueFieldNames.html","title":"Ash.Resource.Transformers.RequireUniqueFieldNames","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.RequireUniqueFieldNames.html#after?/1","title":"Ash.Resource.Transformers.RequireUniqueFieldNames.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.RequireUniqueFieldNames.html#after_compile?/0","title":"Ash.Resource.Transformers.RequireUniqueFieldNames.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.RequireUniqueFieldNames.html#before?/1","title":"Ash.Resource.Transformers.RequireUniqueFieldNames.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.RequireUniqueFieldNames.html#transform/1","title":"Ash.Resource.Transformers.RequireUniqueFieldNames.transform/1","type":"function"},{"doc":"Validates the primary action configuration\n\nIf multiple primary actions exist this results in an error.","ref":"Ash.Resource.Transformers.SetPrimaryActions.html","title":"Ash.Resource.Transformers.SetPrimaryActions","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.SetPrimaryActions.html#after?/1","title":"Ash.Resource.Transformers.SetPrimaryActions.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.SetPrimaryActions.html#after_compile?/0","title":"Ash.Resource.Transformers.SetPrimaryActions.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.SetPrimaryActions.html#before?/1","title":"Ash.Resource.Transformers.SetPrimaryActions.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.SetPrimaryActions.html#transform/1","title":"Ash.Resource.Transformers.SetPrimaryActions.transform/1","type":"function"},{"doc":"Sets the `source` key on relationships to be the resource they were defined on","ref":"Ash.Resource.Transformers.SetRelationshipSource.html","title":"Ash.Resource.Transformers.SetRelationshipSource","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.SetRelationshipSource.html#after?/1","title":"Ash.Resource.Transformers.SetRelationshipSource.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.SetRelationshipSource.html#after_compile?/0","title":"Ash.Resource.Transformers.SetRelationshipSource.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.SetRelationshipSource.html#before?/1","title":"Ash.Resource.Transformers.SetRelationshipSource.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.SetRelationshipSource.html#transform/1","title":"Ash.Resource.Transformers.SetRelationshipSource.transform/1","type":"function"},{"doc":"Persists global changes/validations and what type they go on.","ref":"Ash.Resource.Transformers.ValidationsAndChangesForType.html","title":"Ash.Resource.Transformers.ValidationsAndChangesForType","type":"module"},{"doc":"","ref":"Ash.Resource.Transformers.ValidationsAndChangesForType.html#after?/1","title":"Ash.Resource.Transformers.ValidationsAndChangesForType.after?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.ValidationsAndChangesForType.html#after_compile?/0","title":"Ash.Resource.Transformers.ValidationsAndChangesForType.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.ValidationsAndChangesForType.html#before?/1","title":"Ash.Resource.Transformers.ValidationsAndChangesForType.before?/1","type":"function"},{"doc":"","ref":"Ash.Resource.Transformers.ValidationsAndChangesForType.html#transform/1","title":"Ash.Resource.Transformers.ValidationsAndChangesForType.transform/1","type":"function"},{"doc":"Ensures that the field at the end of the path is an attribute or calculation.","ref":"Ash.Resource.Verifiers.EnsureAggregateFieldIsAttributeOrCalculation.html","title":"Ash.Resource.Verifiers.EnsureAggregateFieldIsAttributeOrCalculation","type":"module"},{"doc":"","ref":"Ash.Resource.Verifiers.EnsureAggregateFieldIsAttributeOrCalculation.html#verify/1","title":"Ash.Resource.Verifiers.EnsureAggregateFieldIsAttributeOrCalculation.verify/1","type":"function"},{"doc":"Confirms that a resource does not use reserved names for field names.\n\nReserved field names are: [:__struct__, :__meta__, :__metadata__, :__order__, :__lateral_join_source__, :*, :calculations, :aggregates, :relationships, :as].","ref":"Ash.Resource.Verifiers.NoReservedFieldNames.html","title":"Ash.Resource.Verifiers.NoReservedFieldNames","type":"module"},{"doc":"","ref":"Ash.Resource.Verifiers.NoReservedFieldNames.html#verify/1","title":"Ash.Resource.Verifiers.NoReservedFieldNames.verify/1","type":"function"},{"doc":"Validates that accept and reject lists only contain valid attributes","ref":"Ash.Resource.Verifiers.ValidateAccept.html","title":"Ash.Resource.Verifiers.ValidateAccept","type":"module"},{"doc":"Confirms that all action types declared on a resource are supported by its data layer","ref":"Ash.Resource.Verifiers.ValidateActionTypesSupported.html","title":"Ash.Resource.Verifiers.ValidateActionTypesSupported","type":"module"},{"doc":"Confirms that all aggregates are supported by the data layer","ref":"Ash.Resource.Verifiers.ValidateAggregatesSupported.html","title":"Ash.Resource.Verifiers.ValidateAggregatesSupported","type":"module"},{"doc":"Confirms that eager identities are not declared on a resource with no primary read.","ref":"Ash.Resource.Verifiers.ValidateEagerIdentities.html","title":"Ash.Resource.Verifiers.ValidateEagerIdentities","type":"module"},{"doc":"Confirms that all action types declared on a resource are supported by its data layer","ref":"Ash.Resource.Verifiers.ValidateManagedRelationshipOpts.html","title":"Ash.Resource.Verifiers.ValidateManagedRelationshipOpts","type":"module"},{"doc":"Ensures that the multitenancy configuration is valid for the given resource","ref":"Ash.Resource.Verifiers.ValidateMultitenancy.html","title":"Ash.Resource.Verifiers.ValidateMultitenancy","type":"module"},{"doc":"Validates and caches the primary key of a resource","ref":"Ash.Resource.Verifiers.ValidatePrimaryKey.html","title":"Ash.Resource.Verifiers.ValidatePrimaryKey","type":"module"},{"doc":"Validates that all relationships point to valid fields","ref":"Ash.Resource.Verifiers.ValidateRelationshipAttributes.html","title":"Ash.Resource.Verifiers.ValidateRelationshipAttributes","type":"module"},{"doc":"Shows a warning on potentially incompatible relationship attributes.","ref":"Ash.Resource.Verifiers.ValidateRelationshipAttributesMatch.html","title":"Ash.Resource.Verifiers.ValidateRelationshipAttributesMatch","type":"module"},{"doc":"","ref":"Ash.Resource.Verifiers.ValidateRelationshipAttributesMatch.html#verify/1","title":"Ash.Resource.Verifiers.ValidateRelationshipAttributesMatch.verify/1","type":"function"},{"doc":"Raises an error on update or destroy actions with `require_atomic?` set to\ntrue when it is known at compile time that they will not be atomic.","ref":"Ash.Resource.Verifiers.VerifyActionsAtomic.html","title":"Ash.Resource.Verifiers.VerifyActionsAtomic","type":"module"},{"doc":"","ref":"Ash.Resource.Verifiers.VerifyActionsAtomic.html#verify/1","title":"Ash.Resource.Verifiers.VerifyActionsAtomic.verify/1","type":"function"},{"doc":"Returns an error if a generic action calls a Reactor module without specifying\nan argument for all expected inputs.","ref":"Ash.Resource.Verifiers.VerifyGenericActionReactorInputs.html","title":"Ash.Resource.Verifiers.VerifyGenericActionReactorInputs","type":"module"},{"doc":"","ref":"Ash.Resource.Verifiers.VerifyGenericActionReactorInputs.html#verify/1","title":"Ash.Resource.Verifiers.VerifyGenericActionReactorInputs.verify/1","type":"function"},{"doc":"Raises an error on potentially incompatible identity attributes.","ref":"Ash.Resource.Verifiers.VerifyIdentityFields.html","title":"Ash.Resource.Verifiers.VerifyIdentityFields","type":"module"},{"doc":"","ref":"Ash.Resource.Verifiers.VerifyIdentityFields.html#verify/1","title":"Ash.Resource.Verifiers.VerifyIdentityFields.verify/1","type":"function"},{"doc":"Raises an error when a required primary key is missing","ref":"Ash.Resource.Verifiers.VerifyPrimaryKeyPresent.html","title":"Ash.Resource.Verifiers.VerifyPrimaryKeyPresent","type":"module"},{"doc":"","ref":"Ash.Resource.Verifiers.VerifyPrimaryKeyPresent.html#verify/1","title":"Ash.Resource.Verifiers.VerifyPrimaryKeyPresent.verify/1","type":"function"},{"doc":"Verifies that standard context keys are not used as calculation arguments","ref":"Ash.Resource.Verifiers.VerifyReservedCalculationArguments.html","title":"Ash.Resource.Verifiers.VerifyReservedCalculationArguments","type":"module"},{"doc":"","ref":"Ash.Resource.Verifiers.VerifyReservedCalculationArguments.html#verify/1","title":"Ash.Resource.Verifiers.VerifyReservedCalculationArguments.verify/1","type":"function"},{"doc":"Represents a predicate which can be simplified and/or compared with other predicates\n\nSimplification and comparison will need more documentation, but ultimately it\nis the logic that allows us to have a flexible and powerful authorization\nsystem.","ref":"Ash.Filter.Predicate.html","title":"Ash.Filter.Predicate","type":"behaviour"},{"doc":"As long as at least one predicate of the type defined in your module,\n(and this callback is implemented), it will be called with all of the\nother predicates present in a filter. The return value is relatively\ncomplex, but it should be a list of boolean statements. E.g.\n`{op, left, right}` and `{:not, predicate}` (nested as deep as necessary).\n\nThe best way to do it is to find lists of predicates that are mutually\nexclusive or mutually inclusive, and pass those lists into\n`Ash.SatSolver.mutually_exclusive/1` and `Ash.SatSolver.mutually_inclusive/1`","ref":"Ash.Filter.Predicate.html#c:bulk_compare/1","title":"Ash.Filter.Predicate.bulk_compare/1","type":"callback"},{"doc":"Checks with each predicate module to see if it has a comparison\nwith","ref":"Ash.Filter.Predicate.html#compare/2","title":"Ash.Filter.Predicate.compare/2","type":"function"},{"doc":"Compare two predicates. If possible, use `c:bulk_compare/1` instead","ref":"Ash.Filter.Predicate.html#c:compare/2","title":"Ash.Filter.Predicate.compare/2","type":"callback"},{"doc":"Simplify to a more primitive statement.\n\nFor example, `x in [1, 2]` simplifies to `x == 1 or x == 2`.\nSimplifying to filter expressions that already have comparisons\nlets you avoid writing that logic for a given predicate.","ref":"Ash.Filter.Predicate.html#c:simplify/1","title":"Ash.Filter.Predicate.simplify/1","type":"callback"},{"doc":"","ref":"Ash.Filter.Predicate.html#t:comparison/0","title":"Ash.Filter.Predicate.comparison/0","type":"type"},{"doc":"","ref":"Ash.Filter.Predicate.html#t:predicate/0","title":"Ash.Filter.Predicate.predicate/0","type":"type"},{"doc":"Represents a boolean expression","ref":"Ash.Query.BooleanExpression.html","title":"Ash.Query.BooleanExpression","type":"module"},{"doc":"","ref":"Ash.Query.BooleanExpression.html#new/3","title":"Ash.Query.BooleanExpression.new/3","type":"function"},{"doc":"","ref":"Ash.Query.BooleanExpression.html#optimized_new/3","title":"Ash.Query.BooleanExpression.optimized_new/3","type":"function"},{"doc":"Represents a function call/AST node in an Ash query expression","ref":"Ash.Query.Call.html","title":"Ash.Query.Call","type":"module"},{"doc":"Determines if a given related entity exists.","ref":"Ash.Query.Exists.html","title":"Ash.Query.Exists","type":"module"},{"doc":"","ref":"Ash.Query.Exists.html#can_return_nil?/1","title":"Ash.Query.Exists.can_return_nil?/1","type":"function"},{"doc":"","ref":"Ash.Query.Exists.html#new/3","title":"Ash.Query.Exists.new/3","type":"function"},{"doc":"A function is a predicate with an arguments list.\n\nFor more information on being a predicate, see `Ash.Filter.Predicate`. Most of the complexities\nare there. A function must meet both behaviours.","ref":"Ash.Query.Function.html","title":"Ash.Query.Function","type":"behaviour"},{"doc":"The number and types of arguments supported.","ref":"Ash.Query.Function.html#c:args/0","title":"Ash.Query.Function.args/0","type":"callback"},{"doc":"Whether or not the function return nil.","ref":"Ash.Query.Function.html#c:can_return_nil?/1","title":"Ash.Query.Function.can_return_nil?/1","type":"callback"},{"doc":"Whether or not the function can be evaluated eagerly. For example, `now()` cannot be.","ref":"Ash.Query.Function.html#c:eager_evaluate?/0","title":"Ash.Query.Function.eager_evaluate?/0","type":"callback"},{"doc":"Evaluate the operator with provided inputs","ref":"Ash.Query.Function.html#evaluate/1","title":"Ash.Query.Function.evaluate/1","type":"function"},{"doc":"Evaluate a function when all arguments are known valid values","ref":"Ash.Query.Function.html#c:evaluate/1","title":"Ash.Query.Function.evaluate/1","type":"callback"},{"doc":"If `true`, will be allowed to evaluate `nil` inputs.\n\nIf `false` (the default), any `nil` inputs will cause a `nil` return.","ref":"Ash.Query.Function.html#c:evaluate_nil_inputs?/0","title":"Ash.Query.Function.evaluate_nil_inputs?/0","type":"callback"},{"doc":"The name of the function","ref":"Ash.Query.Function.html#c:name/0","title":"Ash.Query.Function.name/0","type":"callback"},{"doc":"Instantiate a new function with the provided arguments","ref":"Ash.Query.Function.html#c:new/1","title":"Ash.Query.Function.new/1","type":"callback"},{"doc":"","ref":"Ash.Query.Function.html#new/2","title":"Ash.Query.Function.new/2","type":"function"},{"doc":"Attaches the appropriate suffix to refer to an ordinal number, e.g 1 -> \"1st\"","ref":"Ash.Query.Function.html#ordinal/1","title":"Ash.Query.Function.ordinal/1","type":"function"},{"doc":"Evaluate a function when some or no arguments are known valid values","ref":"Ash.Query.Function.html#c:partial_evaluate/1","title":"Ash.Query.Function.partial_evaluate/1","type":"callback"},{"doc":"Whether or not the function is a predicate (takes a reference as the first argument, a value as the second, and returns a boolean)","ref":"Ash.Query.Function.html#c:predicate?/0","title":"Ash.Query.Function.predicate?/0","type":"callback"},{"doc":"Whether or not the function should be usable when parsing input.","ref":"Ash.Query.Function.html#c:private?/0","title":"Ash.Query.Function.private?/0","type":"callback"},{"doc":"The return type for each corresponding set of args.","ref":"Ash.Query.Function.html#c:returns/0","title":"Ash.Query.Function.returns/0","type":"callback"},{"doc":"","ref":"Ash.Query.Function.html#try_cast_arguments/2","title":"Ash.Query.Function.try_cast_arguments/2","type":"function"},{"doc":"","ref":"Ash.Query.Function.html#t:arg/0","title":"Ash.Query.Function.arg/0","type":"type"},{"doc":"Represents the negation of the contained expression","ref":"Ash.Query.Not.html","title":"Ash.Query.Not","type":"module"},{"doc":"","ref":"Ash.Query.Not.html#new/1","title":"Ash.Query.Not.new/1","type":"function"},{"doc":"An operator is a predicate with a `left` and a `right`\n\nFor more information on being a predicate, see `Ash.Filter.Predicate`. Most of the complexities\nare there. An operator must meet both behaviours.","ref":"Ash.Query.Operator.html","title":"Ash.Query.Operator","type":"behaviour"},{"doc":"Whether or not the operator can evaluate to nil.","ref":"Ash.Query.Operator.html#c:can_return_nil?/1","title":"Ash.Query.Operator.can_return_nil?/1","type":"callback"},{"doc":"Evaluate the operator with provided inputs","ref":"Ash.Query.Operator.html#evaluate/1","title":"Ash.Query.Operator.evaluate/1","type":"function"},{"doc":"Evaluates the operator in Elixir","ref":"Ash.Query.Operator.html#c:evaluate/1","title":"Ash.Query.Operator.evaluate/1","type":"callback"},{"doc":"If `true`, will be allowed to evaluate `nil` inputs.\n\nIf `false` (the default), any `nil` inputs will cause a `nil` return.","ref":"Ash.Query.Operator.html#c:evaluate_nil_inputs?/0","title":"Ash.Query.Operator.evaluate_nil_inputs?/0","type":"callback"},{"doc":"Create a new predicate. There are various return types possible:\n\n  * `{:ok, left, right}` - Return the left/right values of the operator\n  * `{:ok, operator}` - Return the operator itself, this or the one above are acceptable\n  * `{:known, boolean}` - If the value is already known, e.g `1 == 1`\n  * `{:error, error}` - If there was an error creating the operator","ref":"Ash.Query.Operator.html#c:new/2","title":"Ash.Query.Operator.new/2","type":"callback"},{"doc":"Create a new operator. Pass the module and the left and right values","ref":"Ash.Query.Operator.html#new/3","title":"Ash.Query.Operator.new/3","type":"function"},{"doc":"Get type overloads for the given operator","ref":"Ash.Query.Operator.html#operator_overloads/1","title":"Ash.Query.Operator.operator_overloads/1","type":"function"},{"doc":"","ref":"Ash.Query.Operator.html#operator_symbols/0","title":"Ash.Query.Operator.operator_symbols/0","type":"function"},{"doc":"","ref":"Ash.Query.Operator.html#operators/0","title":"Ash.Query.Operator.operators/0","type":"function"},{"doc":"","ref":"Ash.Query.Operator.html#c:predicate?/0","title":"Ash.Query.Operator.predicate?/0","type":"callback"},{"doc":"The types that the expression can return. Should be one entry in the list for each entry in `types`.","ref":"Ash.Query.Operator.html#c:returns/0","title":"Ash.Query.Operator.returns/0","type":"callback"},{"doc":"The implementation of the inspect protocol.\n\nIf not defined, it will be inferred","ref":"Ash.Query.Operator.html#c:to_string/2","title":"Ash.Query.Operator.to_string/2","type":"callback"},{"doc":"The types accepted by the operator. Defaults to `[:same, :any]`, which is any values of the same type.","ref":"Ash.Query.Operator.html#c:types/0","title":"Ash.Query.Operator.types/0","type":"callback"},{"doc":"Used to access values from the \"source\" of a given expression.\n\nThis is used in cases where expressions are given for some relationship path, for example:any()\n\n```elixir\n has_many :foo, Foo do\n   filter expr(priority == :foo and type == parent(foo_type))\n end\n```\n\nThis is supported on a case by case basis by a given data layer and in specific usages.","ref":"Ash.Query.Parent.html","title":"Ash.Query.Parent","type":"module"},{"doc":"","ref":"Ash.Query.Parent.html#new/1","title":"Ash.Query.Parent.new/1","type":"function"},{"doc":"Represents a relation/attribute reference","ref":"Ash.Query.Ref.html","title":"Ash.Query.Ref","type":"module"},{"doc":"Returns the referenced field","ref":"Ash.Query.Ref.html#name/1","title":"Ash.Query.Ref.name/1","type":"function"},{"doc":"Subtracts the given interval from the current time in UTC.\n\nFor example:\n   deleted_at > ago(7, :day)\n\nDocumentation + available intervals inspired by the corresponding ecto interval implementation","ref":"Ash.Query.Function.Ago.html","title":"Ash.Query.Function.Ago","type":"module"},{"doc":"","ref":"Ash.Query.Function.Ago.html#args/0","title":"Ash.Query.Function.Ago.args/0","type":"function"},{"doc":"Gets an element in the list by index","ref":"Ash.Query.Function.At.html","title":"Ash.Query.Function.At","type":"module"},{"doc":"","ref":"Ash.Query.Function.At.html#args/0","title":"Ash.Query.Function.At.args/0","type":"function"},{"doc":"Constructs a composite type in a way that is natively understood by the data layer\n\nTo do this, provide a tuple matching the format expected by the type in question.\nCheck that type's documentation for this information.","ref":"Ash.Query.Function.CompositeType.html","title":"Ash.Query.Function.CompositeType","type":"module"},{"doc":"","ref":"Ash.Query.Function.CompositeType.html#args/0","title":"Ash.Query.Function.CompositeType.args/0","type":"function"},{"doc":"Returns true if the first string contains the second.\n\nCase insensitive strings are accounted for on either side.\n\n   contains(\"foo\", \"fo\")\n   true\n\n   contains(%Ash.CiString{:string \"foo\"}, \"FoO\")\n   true\n\n   contains(\"foo\", %Ash.CiString{:string \"FOO\"})\n   true","ref":"Ash.Query.Function.Contains.html","title":"Ash.Query.Function.Contains","type":"module"},{"doc":"","ref":"Ash.Query.Function.Contains.html#args/0","title":"Ash.Query.Function.Contains.args/0","type":"function"},{"doc":"Returns the count of nil.\n\n    count_nil([nil, 1, nil]) # 2","ref":"Ash.Query.Function.CountNils.html","title":"Ash.Query.Function.CountNils","type":"module"},{"doc":"","ref":"Ash.Query.Function.CountNils.html#args/0","title":"Ash.Query.Function.CountNils.args/0","type":"function"},{"doc":"Adds the given interval to the current time in UTC\n\nFor example:\n   activates_at < date_add(today(), 7, :day)\n\nDocumentation + available intervals inspired by the corresponding ecto interval implementation","ref":"Ash.Query.Function.DateAdd.html","title":"Ash.Query.Function.DateAdd","type":"module"},{"doc":"","ref":"Ash.Query.Function.DateAdd.html#args/0","title":"Ash.Query.Function.DateAdd.args/0","type":"function"},{"doc":"Adds the given interval to the current time in UTC\n\nFor example:\n   activates_at < datetime_add(now(), 7, :day)\n\nDocumentation + available intervals inspired by the corresponding ecto interval implementation","ref":"Ash.Query.Function.DateTimeAdd.html","title":"Ash.Query.Function.DateTimeAdd","type":"module"},{"doc":"","ref":"Ash.Query.Function.DateTimeAdd.html#args/0","title":"Ash.Query.Function.DateTimeAdd.args/0","type":"function"},{"doc":"If the predicate is truthy, the provided exception is raised with the provided values.\n\nThis exception is not \"raised\" in the Elixir sense, but the entire expression fails to\nevaluate with the given error. Various data layers will handle this differently.","ref":"Ash.Query.Function.Error.html","title":"Ash.Query.Function.Error","type":"module"},{"doc":"","ref":"Ash.Query.Function.Error.html#args/0","title":"Ash.Query.Function.Error.args/0","type":"function"},{"doc":"Adds the given interval from the current time in UTC.\n\nFor example:\n   expires_at < from_now(7, :day)\n\nDocumentation + available intervals inspired by the corresponding ecto interval implementation","ref":"Ash.Query.Function.Fragment.html","title":"Ash.Query.Function.Fragment","type":"module"},{"doc":"","ref":"Ash.Query.Function.Fragment.html#args/0","title":"Ash.Query.Function.Fragment.args/0","type":"function"},{"doc":"","ref":"Ash.Query.Function.Fragment.html#casted_new/1","title":"Ash.Query.Function.Fragment.casted_new/1","type":"function"},{"doc":"Adds the given interval from the current time in UTC.\n\nFor example:\n   expires_at < from_now(7, :day)\n\nDocumentation + available intervals inspired by the corresponding ecto interval implementation","ref":"Ash.Query.Function.FromNow.html","title":"Ash.Query.Function.FromNow","type":"module"},{"doc":"","ref":"Ash.Query.Function.FromNow.html#args/0","title":"Ash.Query.Function.FromNow.args/0","type":"function"},{"doc":"Gets the value at the provided path in the value, which must be a map or embed.\n\nIf you are using a datalayer that provides a `type` function (like AshPostgres), it is a good idea to\nwrap your call in that function, e.g `type(author[:bio][:title], :string)`, since data layers that depend\non knowing types may not be able to infer the type from the path. Ash may eventually be able to figure out\nthe type, in the case that the path consists of only embedded attributes.\n\nIf an atom key is provided, access is *indiscriminate* of atoms vs strings. The atom key is checked first.\nIf a string key is provided, that is the only thing that is checked. If the value will or may be a struct, be sure to use atoms.\n\nThe data layer may handle this differently, for example, AshPostgres only checks\nstrings at the data layer (because thats all it can be in the database anyway).\n\nAvailable in query expressions using bracket syntax, e.g `foo[:bar][:baz]`.","ref":"Ash.Query.Function.GetPath.html","title":"Ash.Query.Function.GetPath","type":"module"},{"doc":"","ref":"Ash.Query.Function.GetPath.html#args/0","title":"Ash.Query.Function.GetPath.args/0","type":"function"},{"doc":"If predicate is truthy, then the second argument is returned, otherwise the third.","ref":"Ash.Query.Function.If.html","title":"Ash.Query.Function.If","type":"module"},{"doc":"","ref":"Ash.Query.Function.If.html#args/0","title":"Ash.Query.Function.If.args/0","type":"function"},{"doc":"","ref":"Ash.Query.Function.If.html#partial_evaluate/1","title":"Ash.Query.Function.If.partial_evaluate/1","type":"function"},{"doc":"true if the provided field is nil","ref":"Ash.Query.Function.IsNil.html","title":"Ash.Query.Function.IsNil","type":"module"},{"doc":"","ref":"Ash.Query.Function.IsNil.html#args/0","title":"Ash.Query.Function.IsNil.args/0","type":"function"},{"doc":"Runs the provided MFA and returns the result as a known value.\n\nEvaluated just before running the query.","ref":"Ash.Query.Function.Lazy.html","title":"Ash.Query.Function.Lazy","type":"module"},{"doc":"","ref":"Ash.Query.Function.Lazy.html#args/0","title":"Ash.Query.Function.Lazy.args/0","type":"function"},{"doc":"Returns the length of a list attribute defined by the composite type `{:array, Type}`.\n\n    length(roles)\n\nIf the attribute allows nils:\n\n    length(roles || [])","ref":"Ash.Query.Function.Length.html","title":"Ash.Query.Function.Length","type":"module"},{"doc":"","ref":"Ash.Query.Function.Length.html#args/0","title":"Ash.Query.Function.Length.args/0","type":"function"},{"doc":"Multiplies the value by negative one","ref":"Ash.Query.Function.Minus.html","title":"Ash.Query.Function.Minus","type":"module"},{"doc":"","ref":"Ash.Query.Function.Minus.html#args/0","title":"Ash.Query.Function.Minus.args/0","type":"function"},{"doc":"Returns the current datetime","ref":"Ash.Query.Function.Now.html","title":"Ash.Query.Function.Now","type":"module"},{"doc":"","ref":"Ash.Query.Function.Now.html#args/0","title":"Ash.Query.Function.Now.args/0","type":"function"},{"doc":"Rounds a float, decimal or integer to the given number of points","ref":"Ash.Query.Function.Round.html","title":"Ash.Query.Function.Round","type":"module"},{"doc":"","ref":"Ash.Query.Function.Round.html#args/0","title":"Ash.Query.Function.Round.args/0","type":"function"},{"doc":"Downcase a string","ref":"Ash.Query.Function.StringDowncase.html","title":"Ash.Query.Function.StringDowncase","type":"module"},{"doc":"","ref":"Ash.Query.Function.StringDowncase.html#args/0","title":"Ash.Query.Function.StringDowncase.args/0","type":"function"},{"doc":"Joins a list of values.\n\nIgnores `nil` values and concatenates the remaining non-nil values. An optional\njoiner can be provided.\n\n    string_join([first_name, last_name], \" \")\n\n    string_join([item_a, item_b])","ref":"Ash.Query.Function.StringJoin.html","title":"Ash.Query.Function.StringJoin","type":"module"},{"doc":"","ref":"Ash.Query.Function.StringJoin.html#args/0","title":"Ash.Query.Function.StringJoin.args/0","type":"function"},{"doc":"Trims whitespace from a string","ref":"Ash.Query.Function.StringLength.html","title":"Ash.Query.Function.StringLength","type":"module"},{"doc":"","ref":"Ash.Query.Function.StringLength.html#args/0","title":"Ash.Query.Function.StringLength.args/0","type":"function"},{"doc":"Split a string into a list of strings\n\nSplits a string on the given delimiter. The delimiter defaults to a single space. Also supports options.\n\nKeep in mind, this function does *not* support regexes the way that `String.split/3` does, only raw strings.\n\n    string_split(employee_code)\n    string_split(full_name, \"foo\")\n    string_split(full_name, \"foo\", trim?: true)","ref":"Ash.Query.Function.StringSplit.html","title":"Ash.Query.Function.StringSplit","type":"module"},{"doc":"* `:trim?` (`t:boolean/0`) - Whether or not to trim empty strings from the beginning or end of the result. Equivalent to the `trim` option to `String.split/3` The default value is `false`.","ref":"Ash.Query.Function.StringSplit.html#module-options","title":"Options - Ash.Query.Function.StringSplit","type":"module"},{"doc":"","ref":"Ash.Query.Function.StringSplit.html#args/0","title":"Ash.Query.Function.StringSplit.args/0","type":"function"},{"doc":"Trims whitespace from a string","ref":"Ash.Query.Function.StringTrim.html","title":"Ash.Query.Function.StringTrim","type":"module"},{"doc":"","ref":"Ash.Query.Function.StringTrim.html#args/0","title":"Ash.Query.Function.StringTrim.args/0","type":"function"},{"doc":"Returns the current datetime","ref":"Ash.Query.Function.Today.html","title":"Ash.Query.Function.Today","type":"module"},{"doc":"","ref":"Ash.Query.Function.Today.html#args/0","title":"Ash.Query.Function.Today.args/0","type":"function"},{"doc":"Casts the value to a given type. Can also be used to provide type hints to data layers, where appropriate.","ref":"Ash.Query.Function.Type.html","title":"Ash.Query.Function.Type","type":"module"},{"doc":"","ref":"Ash.Query.Function.Type.html#args/0","title":"Ash.Query.Function.Type.args/0","type":"function"},{"doc":"","ref":"Ash.Query.Operator.Basic.html","title":"Ash.Query.Operator.Basic","type":"module"},{"doc":"","ref":"Ash.Query.Operator.Basic.html#operator_modules/0","title":"Ash.Query.Operator.Basic.operator_modules/0","type":"function"},{"doc":"left == right\n\nThe simplest operator, matches if the left and right are equal.\n\nFor comparison, this compares as mutually exclusive with other equality\nand `is_nil` checks that have the same reference on the left side","ref":"Ash.Query.Operator.Eq.html","title":"Ash.Query.Operator.Eq","type":"module"},{"doc":"","ref":"Ash.Query.Operator.Eq.html#evaluate/1","title":"Ash.Query.Operator.Eq.evaluate/1","type":"function"},{"doc":"","ref":"Ash.Query.Operator.Eq.html#name/0","title":"Ash.Query.Operator.Eq.name/0","type":"function"},{"doc":"","ref":"Ash.Query.Operator.Eq.html#operator/0","title":"Ash.Query.Operator.Eq.operator/0","type":"function"},{"doc":"left > right\n\nIn comparison, simplifies to `not(left < right + 1)`, so it will never need to be compared against.","ref":"Ash.Query.Operator.GreaterThan.html","title":"Ash.Query.Operator.GreaterThan","type":"module"},{"doc":"","ref":"Ash.Query.Operator.GreaterThan.html#evaluate/1","title":"Ash.Query.Operator.GreaterThan.evaluate/1","type":"function"},{"doc":"","ref":"Ash.Query.Operator.GreaterThan.html#name/0","title":"Ash.Query.Operator.GreaterThan.name/0","type":"function"},{"doc":"","ref":"Ash.Query.Operator.GreaterThan.html#operator/0","title":"Ash.Query.Operator.GreaterThan.operator/0","type":"function"},{"doc":"left >= right\n\nIn comparison, simplifies to `not(left < right)`, so it will never need to be compared against.","ref":"Ash.Query.Operator.GreaterThanOrEqual.html","title":"Ash.Query.Operator.GreaterThanOrEqual","type":"module"},{"doc":"","ref":"Ash.Query.Operator.GreaterThanOrEqual.html#evaluate/1","title":"Ash.Query.Operator.GreaterThanOrEqual.evaluate/1","type":"function"},{"doc":"","ref":"Ash.Query.Operator.GreaterThanOrEqual.html#name/0","title":"Ash.Query.Operator.GreaterThanOrEqual.name/0","type":"function"},{"doc":"","ref":"Ash.Query.Operator.GreaterThanOrEqual.html#operator/0","title":"Ash.Query.Operator.GreaterThanOrEqual.operator/0","type":"function"},{"doc":"left in [1, 2, 3]\n\nthis predicate matches if the left is in the list on the right\n\nFor comparison, this simplifies to a set of \"or equals\", e.g\n`{:or, {:or, {:or, left == 1}, left == 2}, left == 3}`","ref":"Ash.Query.Operator.In.html","title":"Ash.Query.Operator.In","type":"module"},{"doc":"","ref":"Ash.Query.Operator.In.html#evaluate/1","title":"Ash.Query.Operator.In.evaluate/1","type":"function"},{"doc":"","ref":"Ash.Query.Operator.In.html#name/0","title":"Ash.Query.Operator.In.name/0","type":"function"},{"doc":"","ref":"Ash.Query.Operator.In.html#operator/0","title":"Ash.Query.Operator.In.operator/0","type":"function"},{"doc":"left is_nil true/false\n\nThis predicate matches if the left is nil when the right is `true` or if the\nleft is not nil when the right is `false`","ref":"Ash.Query.Operator.IsNil.html","title":"Ash.Query.Operator.IsNil","type":"module"},{"doc":"","ref":"Ash.Query.Operator.IsNil.html#name/0","title":"Ash.Query.Operator.IsNil.name/0","type":"function"},{"doc":"","ref":"Ash.Query.Operator.IsNil.html#operator/0","title":"Ash.Query.Operator.IsNil.operator/0","type":"function"},{"doc":"left < right\n\nDoes not simplify, but is used as the simplification value for\n`Ash.Query.Operator.LessThanOrEqual`, `Ash.Query.Operator.GreaterThan` and\n`Ash.Query.Operator.GreaterThanOrEqual`.\n\nWhen comparing predicates, it is mutually exclusive with `Ash.Query.Operator.IsNil`.\nAdditionally, it compares as mutually inclusive with any `Ash.Query.Operator.Eq` and\nany `Ash.Query.Operator.LessThan` who's right sides are less than it, and mutually\nexclusive with any `Ash.Query.Operator.Eq` or `Ash.Query.Operator.GreaterThan` who's\nright side's are greater than or equal to it.","ref":"Ash.Query.Operator.LessThan.html","title":"Ash.Query.Operator.LessThan","type":"module"},{"doc":"","ref":"Ash.Query.Operator.LessThan.html#evaluate/1","title":"Ash.Query.Operator.LessThan.evaluate/1","type":"function"},{"doc":"","ref":"Ash.Query.Operator.LessThan.html#name/0","title":"Ash.Query.Operator.LessThan.name/0","type":"function"},{"doc":"","ref":"Ash.Query.Operator.LessThan.html#operator/0","title":"Ash.Query.Operator.LessThan.operator/0","type":"function"},{"doc":"left <= right\n\nIn comparison, simplifies to `left < right + 1`, so it will never need to be compared against.","ref":"Ash.Query.Operator.LessThanOrEqual.html","title":"Ash.Query.Operator.LessThanOrEqual","type":"module"},{"doc":"","ref":"Ash.Query.Operator.LessThanOrEqual.html#evaluate/1","title":"Ash.Query.Operator.LessThanOrEqual.evaluate/1","type":"function"},{"doc":"","ref":"Ash.Query.Operator.LessThanOrEqual.html#name/0","title":"Ash.Query.Operator.LessThanOrEqual.name/0","type":"function"},{"doc":"","ref":"Ash.Query.Operator.LessThanOrEqual.html#operator/0","title":"Ash.Query.Operator.LessThanOrEqual.operator/0","type":"function"},{"doc":"left != right\n\nIn comparison, simplifies to `not(left == right)`","ref":"Ash.Query.Operator.NotEq.html","title":"Ash.Query.Operator.NotEq","type":"module"},{"doc":"","ref":"Ash.Query.Operator.NotEq.html#evaluate/1","title":"Ash.Query.Operator.NotEq.evaluate/1","type":"function"},{"doc":"","ref":"Ash.Query.Operator.NotEq.html#name/0","title":"Ash.Query.Operator.NotEq.name/0","type":"function"},{"doc":"","ref":"Ash.Query.Operator.NotEq.html#operator/0","title":"Ash.Query.Operator.NotEq.operator/0","type":"function"},{"doc":"This check is true when the current action is being run \"through\" a relationship.","ref":"Ash.Policy.Check.AccessingFrom.html","title":"Ash.Policy.Check.AccessingFrom","type":"module"},{"doc":"","ref":"Ash.Policy.Check.AccessingFrom.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.AccessingFrom.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.AccessingFrom.html#strict_check/3","title":"Ash.Policy.Check.AccessingFrom.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.AccessingFrom.html#type/0","title":"Ash.Policy.Check.AccessingFrom.type/0","type":"function"},{"doc":"This check is true when the action name matches the provided action name.","ref":"Ash.Policy.Check.Action.html","title":"Ash.Policy.Check.Action","type":"module"},{"doc":"","ref":"Ash.Policy.Check.Action.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.Action.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Action.html#strict_check/3","title":"Ash.Policy.Check.Action.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Action.html#type/0","title":"Ash.Policy.Check.Action.type/0","type":"function"},{"doc":"This check is true when the action type matches the provided type","ref":"Ash.Policy.Check.ActionType.html","title":"Ash.Policy.Check.ActionType","type":"module"},{"doc":"","ref":"Ash.Policy.Check.ActionType.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.ActionType.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ActionType.html#strict_check/3","title":"Ash.Policy.Check.ActionType.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ActionType.html#type/0","title":"Ash.Policy.Check.ActionType.type/0","type":"function"},{"doc":"This check is true when the value of the specified attribute of the actor equals the specified value.","ref":"Ash.Policy.Check.ActorAttributeEquals.html","title":"Ash.Policy.Check.ActorAttributeEquals","type":"module"},{"doc":"","ref":"Ash.Policy.Check.ActorAttributeEquals.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.ActorAttributeEquals.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ActorAttributeEquals.html#strict_check/3","title":"Ash.Policy.Check.ActorAttributeEquals.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ActorAttributeEquals.html#type/0","title":"Ash.Policy.Check.ActorAttributeEquals.type/0","type":"function"},{"doc":"This check is true when there is an actor specified, and false when the actor is `nil`.","ref":"Ash.Policy.Check.ActorPresent.html","title":"Ash.Policy.Check.ActorPresent","type":"module"},{"doc":"","ref":"Ash.Policy.Check.ActorPresent.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.ActorPresent.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ActorPresent.html#strict_check/3","title":"Ash.Policy.Check.ActorPresent.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ActorPresent.html#type/0","title":"Ash.Policy.Check.ActorPresent.type/0","type":"function"},{"doc":"This check is true when attribute changes correspond to the provided options.","ref":"Ash.Policy.Check.ChangingAttributes.html","title":"Ash.Policy.Check.ChangingAttributes","type":"module"},{"doc":"","ref":"Ash.Policy.Check.ChangingAttributes.html#auto_filter/3","title":"Ash.Policy.Check.ChangingAttributes.auto_filter/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ChangingAttributes.html#auto_filter_not/3","title":"Ash.Policy.Check.ChangingAttributes.auto_filter_not/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ChangingAttributes.html#check/4","title":"Ash.Policy.Check.ChangingAttributes.check/4","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ChangingAttributes.html#expand_description/3","title":"Ash.Policy.Check.ChangingAttributes.expand_description/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ChangingAttributes.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.ChangingAttributes.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ChangingAttributes.html#reject/3","title":"Ash.Policy.Check.ChangingAttributes.reject/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ChangingAttributes.html#requires_original_data?/2","title":"Ash.Policy.Check.ChangingAttributes.requires_original_data?/2","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ChangingAttributes.html#strict_check/3","title":"Ash.Policy.Check.ChangingAttributes.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ChangingAttributes.html#strict_check_context/1","title":"Ash.Policy.Check.ChangingAttributes.strict_check_context/1","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ChangingAttributes.html#type/0","title":"Ash.Policy.Check.ChangingAttributes.type/0","type":"function"},{"doc":"This check is true when the specified relationship is changing","ref":"Ash.Policy.Check.ChangingRelationships.html","title":"Ash.Policy.Check.ChangingRelationships","type":"module"},{"doc":"","ref":"Ash.Policy.Check.ChangingRelationships.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.ChangingRelationships.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ChangingRelationships.html#strict_check/3","title":"Ash.Policy.Check.ChangingRelationships.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ChangingRelationships.html#type/0","title":"Ash.Policy.Check.ChangingRelationships.type/0","type":"function"},{"doc":"This check is true when the value of the specified key or path in the changeset or query context equals the specified value.","ref":"Ash.Policy.Check.ContextEquals.html","title":"Ash.Policy.Check.ContextEquals","type":"module"},{"doc":"","ref":"Ash.Policy.Check.ContextEquals.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.ContextEquals.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ContextEquals.html#strict_check/3","title":"Ash.Policy.Check.ContextEquals.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.ContextEquals.html#type/0","title":"Ash.Policy.Check.ContextEquals.type/0","type":"function"},{"doc":"The check module used for `expr`s in policies","ref":"Ash.Policy.Check.Expression.html","title":"Ash.Policy.Check.Expression","type":"module"},{"doc":"","ref":"Ash.Policy.Check.Expression.html#auto_filter/3","title":"Ash.Policy.Check.Expression.auto_filter/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Expression.html#auto_filter_not/3","title":"Ash.Policy.Check.Expression.auto_filter_not/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Expression.html#check/4","title":"Ash.Policy.Check.Expression.check/4","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Expression.html#expand_description/3","title":"Ash.Policy.Check.Expression.expand_description/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Expression.html#reject/3","title":"Ash.Policy.Check.Expression.reject/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Expression.html#requires_original_data?/2","title":"Ash.Policy.Check.Expression.requires_original_data?/2","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Expression.html#strict_check/3","title":"Ash.Policy.Check.Expression.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Expression.html#strict_check_context/1","title":"Ash.Policy.Check.Expression.strict_check_context/1","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Expression.html#type/0","title":"Ash.Policy.Check.Expression.type/0","type":"function"},{"doc":"This check is true when the field provided is being referenced anywhere in a filter statement.","ref":"Ash.Policy.Check.FilteringOn.html","title":"Ash.Policy.Check.FilteringOn","type":"module"},{"doc":"","ref":"Ash.Policy.Check.FilteringOn.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.FilteringOn.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.FilteringOn.html#strict_check/3","title":"Ash.Policy.Check.FilteringOn.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.FilteringOn.html#type/0","title":"Ash.Policy.Check.FilteringOn.type/0","type":"function"},{"doc":"This check is true when the field or relationship, or path to field, is being loaded and false when it is not.","ref":"Ash.Policy.Check.Loading.html","title":"Ash.Policy.Check.Loading","type":"module"},{"doc":"","ref":"Ash.Policy.Check.Loading.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.Loading.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Loading.html#strict_check/3","title":"Ash.Policy.Check.Loading.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Loading.html#type/0","title":"Ash.Policy.Check.Loading.type/0","type":"function"},{"doc":"This check is true when the specified function returns true","ref":"Ash.Policy.Check.Matches.html","title":"Ash.Policy.Check.Matches","type":"module"},{"doc":"","ref":"Ash.Policy.Check.Matches.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.Matches.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Matches.html#requires_original_data?/2","title":"Ash.Policy.Check.Matches.requires_original_data?/2","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Matches.html#strict_check/3","title":"Ash.Policy.Check.Matches.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Matches.html#type/0","title":"Ash.Policy.Check.Matches.type/0","type":"function"},{"doc":"This check passes if the data relates to the actor via the specified relationship or path of relationships.","ref":"Ash.Policy.Check.RelatesToActorVia.html","title":"Ash.Policy.Check.RelatesToActorVia","type":"module"},{"doc":"","ref":"Ash.Policy.Check.RelatesToActorVia.html#auto_filter/3","title":"Ash.Policy.Check.RelatesToActorVia.auto_filter/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatesToActorVia.html#auto_filter_not/3","title":"Ash.Policy.Check.RelatesToActorVia.auto_filter_not/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatesToActorVia.html#check/4","title":"Ash.Policy.Check.RelatesToActorVia.check/4","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatesToActorVia.html#expand_description/3","title":"Ash.Policy.Check.RelatesToActorVia.expand_description/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatesToActorVia.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.RelatesToActorVia.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatesToActorVia.html#requires_original_data?/2","title":"Ash.Policy.Check.RelatesToActorVia.requires_original_data?/2","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatesToActorVia.html#strict_check/3","title":"Ash.Policy.Check.RelatesToActorVia.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatesToActorVia.html#strict_check_context/1","title":"Ash.Policy.Check.RelatesToActorVia.strict_check_context/1","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatesToActorVia.html#type/0","title":"Ash.Policy.Check.RelatesToActorVia.type/0","type":"function"},{"doc":"This check is true when the specified relationship is being changed to the current actor.","ref":"Ash.Policy.Check.RelatingToActor.html","title":"Ash.Policy.Check.RelatingToActor","type":"module"},{"doc":"","ref":"Ash.Policy.Check.RelatingToActor.html#auto_filter/3","title":"Ash.Policy.Check.RelatingToActor.auto_filter/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatingToActor.html#auto_filter_not/3","title":"Ash.Policy.Check.RelatingToActor.auto_filter_not/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatingToActor.html#check/4","title":"Ash.Policy.Check.RelatingToActor.check/4","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatingToActor.html#expand_description/3","title":"Ash.Policy.Check.RelatingToActor.expand_description/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatingToActor.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.RelatingToActor.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatingToActor.html#reject/3","title":"Ash.Policy.Check.RelatingToActor.reject/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatingToActor.html#requires_original_data?/2","title":"Ash.Policy.Check.RelatingToActor.requires_original_data?/2","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatingToActor.html#strict_check/3","title":"Ash.Policy.Check.RelatingToActor.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatingToActor.html#strict_check_context/1","title":"Ash.Policy.Check.RelatingToActor.strict_check_context/1","type":"function"},{"doc":"","ref":"Ash.Policy.Check.RelatingToActor.html#type/0","title":"Ash.Policy.Check.RelatingToActor.type/0","type":"function"},{"doc":"This check is true when the resource matches the provided resource name or names.","ref":"Ash.Policy.Check.Resource.html","title":"Ash.Policy.Check.Resource","type":"module"},{"doc":"","ref":"Ash.Policy.Check.Resource.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.Resource.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Resource.html#strict_check/3","title":"Ash.Policy.Check.Resource.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Resource.html#type/0","title":"Ash.Policy.Check.Resource.type/0","type":"function"},{"doc":"This check is true when the field is being selected and false when it is not.","ref":"Ash.Policy.Check.Selecting.html","title":"Ash.Policy.Check.Selecting","type":"module"},{"doc":"","ref":"Ash.Policy.Check.Selecting.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.Selecting.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Selecting.html#strict_check/3","title":"Ash.Policy.Check.Selecting.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Selecting.html#type/0","title":"Ash.Policy.Check.Selecting.type/0","type":"function"},{"doc":"This check is always the result provided","ref":"Ash.Policy.Check.Static.html","title":"Ash.Policy.Check.Static","type":"module"},{"doc":"","ref":"Ash.Policy.Check.Static.html#prefer_expanded_description?/0","title":"Ash.Policy.Check.Static.prefer_expanded_description?/0","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Static.html#strict_check/3","title":"Ash.Policy.Check.Static.strict_check/3","type":"function"},{"doc":"","ref":"Ash.Policy.Check.Static.html#type/0","title":"Ash.Policy.Check.Static.type/0","type":"function"},{"doc":"Cascade a resource's destroy action to a related resource's destroy action.\n\nAdds an after-action hook that explicitly calls destroy on any records related\nvia the named relationship.  It will optimise for bulk destroys where\npossible.\n\n> #### Beware database constraints {: .warning}\n>\n> Think carefully before using this change with data layers which enforce\n> referential integrity (ie PostgreSQL and SQLite) and you may need to defer\n> constraints for the relationship in question.\n>\n> See also:\n>   1. [`postgres.references.reference.deferrable` DSL](https://hexdocs.pm/ash_postgres/dsl-ashpostgres-datalayer.html#postgres-references-reference-deferrable)\n>   2. [`sqlite.references.reference.deferrable` DSL](https://hexdocs.pm/ash_sqlite/dsl-ashsqlite-datalayer.html#sqlite-references-reference-deferrable)\n>   3. [PostgreSQL's `SET CONSTRAINTS` documentation](https://www.postgresql.org/docs/current/sql-set-constraints.html)\n>   4. [SQLite's `PRAGMA defer_foreign_keys` documentation](https://www.sqlite.org/pragma.html#pragma_defer_foreign_keys)\n\n> #### Cascading notifications {: .tip}\n>\n> By default notifications are disabled for the related destroy. This is to avoid potentially sending a **lot** of notifications for high-cardinality relationships.","ref":"Ash.Resource.Change.CascadeDestroy.html","title":"Ash.Resource.Change.CascadeDestroy","type":"module"},{"doc":"* `:relationship` (`t:atom/0`) - Required. The name of the relationship to work on\n\n* `:action` (`t:atom/0`) - The name of the destroy action to call on the related resource. Uses the primary destroy by default.\n\n* `:read_action` (`t:atom/0`) - The name of the read action to call on the related resource to find results to be destroyed\n\n* `:return_notifications?` (`t:boolean/0`) - Return notifications for all destroyed records? The default value is `false`.","ref":"Ash.Resource.Change.CascadeDestroy.html#module-options","title":"Options - Ash.Resource.Change.CascadeDestroy","type":"module"},{"doc":"change {Ash.Resource.Change.CascadeDestroy, relationship: :comments, action: :destroy}\n\n  or, equivalently using `Ash.Resource.Change.Builtins.cascade_destroy/2`:\n\n    change cascade_destroy(:comments, action: :destroy)","ref":"Ash.Resource.Change.CascadeDestroy.html#module-example","title":"Example - Ash.Resource.Change.CascadeDestroy","type":"module"},{"doc":"Cascade a resource's update action to a related resource's update action.\n\nAdds an after-action hook that explicitly calls update on any records related\nvia the named relationship.  It will optimise for bulk updates where\npossible.\n\nAllows you to copy fields from the arguments or changes to the destination,\nthis way you can cascade a bunch of changes downstream.\n\n\n> #### Beware database constraints {: .warning}\n>\n> Think carefully before using this change with data layers which enforce\n> referential integrity (ie PostgreSQL and SQLite) and you may need to defer\n> constraints for the relationship in question.\n>\n> See also:\n>   1. [`postgres.references.reference.deferrable` DSL](https://hexdocs.pm/ash_postgres/dsl-ashpostgres-datalayer.html#postgres-references-reference-deferrable)\n>   2. [`sqlite.references.reference.deferrable` DSL](https://hexdocs.pm/ash_sqlite/dsl-ashsqlite-datalayer.html#sqlite-references-reference-deferrable)\n>   3. [PostgreSQL's `SET CONSTRAINTS` documentation](https://www.postgresql.org/docs/current/sql-set-constraints.html)\n>   4. [SQLite's `PRAGMA defer_foreign_keys` documentation](https://www.sqlite.org/pragma.html#pragma_defer_foreign_keys)\n\n> #### Cascading notifications {: .tip}\n>\n> By default notifications are disabled for the related updates. This is to avoid potentially sending a **lot** of notifications for high-cardinality relationships.","ref":"Ash.Resource.Change.CascadeUpdate.html","title":"Ash.Resource.Change.CascadeUpdate","type":"module"},{"doc":"* `:relationship` (`t:atom/0`) - Required. The name of the relationship to work on\n\n* `:action` (`t:atom/0`) - The name of the update action to call on the related resource. Uses the primary update by default.\n\n* `:copy_inputs` (list of `t:atom/0`) - A list of fields to copy & pass on to the downstream update. The source action cannot be atomic. The default value is `[]`.\n\n* `:read_action` (`t:atom/0`) - The name of the read action to call on the related resource to find results to be updated\n\n* `:return_notifications?` (`t:boolean/0`) - Return notifications for all updated records? The default value is `false`.","ref":"Ash.Resource.Change.CascadeUpdate.html#module-options","title":"Options - Ash.Resource.Change.CascadeUpdate","type":"module"},{"doc":"change {Ash.Resource.Change.CascadeUpdate, relationship: :comments, action: :update_all, copy_inputs: [:name]}\n\n    or, equivalently using `Ash.Resource.Change.Builtins.cascade_update/2`:\n\n    change cascade_update(:comments, action: :update_all, copy_inputs: [:name])","ref":"Ash.Resource.Change.CascadeUpdate.html#module-example","title":"Example - Ash.Resource.Change.CascadeUpdate","type":"module"},{"doc":"The context for a change.\n\nThis is passed into various callbacks for `Ash.Resource.Change`.","ref":"Ash.Resource.Change.Context.html","title":"Ash.Resource.Change.Context","type":"module"},{"doc":"","ref":"Ash.Resource.Change.Context.html#t:t/0","title":"Ash.Resource.Change.Context.t/0","type":"type"},{"doc":"Refetches the record being updated or destroyed, and locks it with the given type.","ref":"Ash.Resource.Change.GetAndLock.html","title":"Ash.Resource.Change.GetAndLock","type":"module"},{"doc":"Refetches the record being updated or destroyed, and locks it for update.","ref":"Ash.Resource.Change.GetAndLockForUpdate.html","title":"Ash.Resource.Change.GetAndLockForUpdate","type":"module"},{"doc":"Increments an attribute's value by the amount specified, which defaults to 1.","ref":"Ash.Resource.Change.Increment.html","title":"Ash.Resource.Change.Increment","type":"module"},{"doc":"Apply an \"optimistic lock\" on a record being updated or destroyed.","ref":"Ash.Resource.Change.OptimisticLock.html","title":"Ash.Resource.Change.OptimisticLock","type":"module"},{"doc":"Optimistic Locking is the process of only allowing an update to occur if the version of a record that you have in memory is the same as the version in the database.\nOtherwise, an error is returned. On success, it increments the version while performing the action.\n\nOptimistic locking may used for two primary purposes:","ref":"Ash.Resource.Change.OptimisticLock.html#module-what-is-optimistic-locking","title":"What is Optimistic Locking? - Ash.Resource.Change.OptimisticLock","type":"module"},{"doc":"For example, if a user is editing a form that contains `State` and `County` fields, and they change the `County`, while another user has used the form to change the `State`, you could end up with a mismatch between `State` and `County`.\n\nWith optimistic locking, the user will instead get an error message that the record has been changed since they last looked.","ref":"Ash.Resource.Change.OptimisticLock.html#module-user-experience","title":"User Experience - Ash.Resource.Change.OptimisticLock","type":"module"},{"doc":"Optimistic locking can make actions safe to run concurrently even if they can't be performed in a single query (atomically), by returning an error if the resource in the data layer does not have the same version as the one being edited.\n\nThis tells the user that they need to reload and try again.","ref":"Ash.Resource.Change.OptimisticLock.html#module-concurrency-safety","title":"Concurrency Safety - Ash.Resource.Change.OptimisticLock","type":"module"},{"doc":"Validates that the action is the specified action.","ref":"Ash.Resource.Validation.ActionIs.html","title":"Ash.Resource.Validation.ActionIs","type":"module"},{"doc":"Context for a validation.","ref":"Ash.Resource.Validation.Context.html","title":"Ash.Resource.Validation.Context","type":"module"},{"doc":"","ref":"Ash.Resource.Validation.Context.html#t:t/0","title":"Ash.Resource.Validation.Context.t/0","type":"type"},{"doc":"A utility for limiting the number of concurrent async operations\n\nBecause this is an optimization, we opt to run something synchronously\nif there is no async task available in the slot. The idea here is that\nthe *vast* majority of things we do async will be fast enough not to\nwarrant always waiting for an async slot to be free. We may add in some\nsmarter heuristics later (i.e choosing to wait for a task instead of\ndoing the work sync), but for now this is a good start.","ref":"Ash.Actions.Read.AsyncLimiter.html","title":"Ash.Actions.Read.AsyncLimiter","type":"module"},{"doc":"","ref":"Ash.Actions.Read.AsyncLimiter.html#async_or_inline/4","title":"Ash.Actions.Read.AsyncLimiter.async_or_inline/4","type":"function"},{"doc":"","ref":"Ash.Actions.Read.AsyncLimiter.html#await_all/1","title":"Ash.Actions.Read.AsyncLimiter.await_all/1","type":"function"},{"doc":"","ref":"Ash.Actions.Read.AsyncLimiter.html#await_at_least_one/1","title":"Ash.Actions.Read.AsyncLimiter.await_at_least_one/1","type":"function"},{"doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Ash.Actions.Read.AsyncLimiter.html#child_spec/1","title":"Ash.Actions.Read.AsyncLimiter.child_spec/1","type":"function"},{"doc":"","ref":"Ash.Actions.Read.AsyncLimiter.html#start_link/1","title":"Ash.Actions.Read.AsyncLimiter.start_link/1","type":"function"},{"doc":"A value placed in changeset.data to indicate that the original data is not available","ref":"Ash.Changeset.OriginalDataNotAvailable.html","title":"Ash.Changeset.OriginalDataNotAvailable","type":"module"},{"doc":"","ref":"Ash.Changeset.OriginalDataNotAvailable.html#t:t/0","title":"Ash.Changeset.OriginalDataNotAvailable.t/0","type":"type"},{"doc":"Functions for working with the context provided to various callbacks in Ash.","ref":"Ash.Context.html","title":"Ash.Context","type":"module"},{"doc":"Copies keys from the given context map into a keyword list. Does *not* copy the `:domain` key.\n\nKeys copied:\n\n* `:actor`\n* `:authorize?`\n* `:tracer`\n* `:tenant`","ref":"Ash.Context.html#to_opts/2","title":"Ash.Context.to_opts/2","type":"function"},{"doc":"A module for defining custom functions that can be called in Ash expressions.\n\nFor example:\n\n```elixir\ndefmodule MyApp.Expressions.LevenshteinDistance do\n  use Ash.CustomExpression,\n    name: :levenshtein,\n    arguments: [\n      [:string, :string]\n    ]\n\n  def expression(AshPostgres.DataLayer, [left, right]) do\n    {:ok, expr(fragment(\"levenshtein(?, ?)\", left, right))}\n  end\n\n  # It is good practice to always define an expression for `Ash.DataLayer.Simple`,\n  # as that is what Ash will use to run your custom expression in Elixir.\n  # This allows us to completely avoid communicating with the database in some cases.\n\n  def expression(data_layer, [left, right]) when data_layer in [\n    Ash.DataLayer.Ets,\n    Ash.DataLayer.Simple\n  ] do\n    {:ok, expr(fragment(&__MODULE__.levenshtein/2, left, right))}\n  end\n\n  # always define this fallback clause as well\n  def expression(_data_layer, _args), do: :unknown\n\n  @doc \"Computes the levenshtein distance of two strings\"\n  def levenshtein(left, right) do\n    # ......\n  end\nend\n```","ref":"Ash.CustomExpression.html","title":"Ash.CustomExpression","type":"behaviour"},{"doc":"- `name` - The name of the custom expression. This is the name that will be used in Ash expressions.\n- `arguments` - A list of lists of types that the custom expression accepts. Each list represents a set of arguments that the custom expression can accept.\n- `predicate?` - Whether this expression can be exposed as a predicate in filter interfaces. Defaults to `false`.","ref":"Ash.CustomExpression.html#module-options","title":"Options - Ash.CustomExpression","type":"behaviour"},{"doc":"Use compile-time configuration to register your custom expressions\n\n```elixir\nconfig :ash, :custom_expressions, [MyApp.Expressions.LevenshteinDistance]\n```","ref":"Ash.CustomExpression.html#module-registering-your-expression","title":"Registering Your Expression - Ash.CustomExpression","type":"behaviour"},{"doc":"","ref":"Ash.CustomExpression.html#c:arguments/0","title":"Ash.CustomExpression.arguments/0","type":"callback"},{"doc":"","ref":"Ash.CustomExpression.html#c:expression/2","title":"Ash.CustomExpression.expression/2","type":"callback"},{"doc":"","ref":"Ash.CustomExpression.html#c:name/0","title":"Ash.CustomExpression.name/0","type":"callback"},{"doc":"Codemods for working with Ash.Domain modules","ref":"Ash.Domain.Igniter.html","title":"Ash.Domain.Igniter","type":"module"},{"doc":"Adds a resource reference to a domain's `resources` block","ref":"Ash.Domain.Igniter.html#add_resource_reference/3","title":"Ash.Domain.Igniter.add_resource_reference/3","type":"function"},{"doc":"List all domain modules found in the project","ref":"Ash.Domain.Igniter.html#list_domains/1","title":"Ash.Domain.Igniter.list_domains/1","type":"function"},{"doc":"Removes a resource reference from a domain's `resources` block","ref":"Ash.Domain.Igniter.html#remove_resource_reference/3","title":"Ash.Domain.Igniter.remove_resource_reference/3","type":"function"},{"doc":"A behavior of additional callbacks that extensions can implement, specific to Ash.\n\nIt is not necessary to adopt this behavior, but it is recommended to do so if you want to define these\nfunctions on your extension. These functions are invoked when their relevant Mix task is run.","ref":"Ash.Extension.html","title":"Ash.Extension","type":"behaviour"},{"doc":"","ref":"Ash.Extension.html#c:codegen/1","title":"Ash.Extension.codegen/1","type":"callback"},{"doc":"","ref":"Ash.Extension.html#c:install/5","title":"Ash.Extension.install/5","type":"callback"},{"doc":"","ref":"Ash.Extension.html#c:migrate/1","title":"Ash.Extension.migrate/1","type":"callback"},{"doc":"","ref":"Ash.Extension.html#c:reset/1","title":"Ash.Extension.reset/1","type":"callback"},{"doc":"","ref":"Ash.Extension.html#c:rollback/1","title":"Ash.Extension.rollback/1","type":"callback"},{"doc":"","ref":"Ash.Extension.html#c:setup/1","title":"Ash.Extension.setup/1","type":"callback"},{"doc":"","ref":"Ash.Extension.html#c:tear_down/1","title":"Ash.Extension.tear_down/1","type":"callback"},{"doc":"","ref":"Ash.Extension.html#t:argv/0","title":"Ash.Extension.argv/0","type":"type"},{"doc":"","ref":"Ash.Extension.html#t:igniter/0","title":"Ash.Extension.igniter/0","type":"type"},{"doc":"Codemods and utilities for working with Ash & Igniter","ref":"Ash.Igniter.html","title":"Ash.Igniter","type":"module"},{"doc":"Adds a codegen task, or updates the name to be ` _and_name`","ref":"Ash.Igniter.html#codegen/2","title":"Ash.Igniter.codegen/2","type":"function"},{"doc":"","ref":"Ash.Igniter.html#csv_option/3","title":"Ash.Igniter.csv_option/3","type":"function"},{"doc":"Represents a policy group on an Ash.Resource","ref":"Ash.Policy.PolicyGroup.html","title":"Ash.Policy.PolicyGroup","type":"module"},{"doc":"Returns the conflicting new information.","ref":"Ash.Query.UpsertConflict.html","title":"Ash.Query.UpsertConflict","type":"module"},{"doc":"","ref":"Ash.Query.UpsertConflict.html#new/1","title":"Ash.Query.UpsertConflict.new/1","type":"function"},{"doc":"The Reactor step which is used to execute generic actions.","ref":"Ash.Reactor.ActionStep.html","title":"Ash.Reactor.ActionStep","type":"module"},{"doc":"A reactor step which runs a step-module or an anonymous function, and enqueues any returned\nnotifications before returning.\n\nThe following return values are supported: `{:ok, result}`, `{:ok, result, notifications}`,\n`{:ok, result, notifications, new_steps}`\n\nExample:\n\n```elixir\nash_step :maybe_update_post do\n  run fn %{post: post, new_amount_of_likes: new_amount_of_likes}, ctx ->\n    opts = Ash.Context.to_opts(ctx, return_notifications?: true)\n    if post.amount_of_likes != new_amount_of_likes do\n      Post.update(post, %{amount_of_likes: new_amount_of_likes}, opts)\n    else\n      {:ok, post}\n    end\nend\n```","ref":"Ash.Reactor.AshStep.html","title":"Ash.Reactor.AshStep","type":"module"},{"doc":"* `run` - a one or two arity function or MFA which will be called as the run\n  function of the step.\n* `compensate` - a one to three arity function or MFA which will be called as\n  the compensate function of the step.  Optional.\n* `undo` - a one to three arity function or MFA which will be called as the\n  undo function of this step.  Optional.","ref":"Ash.Reactor.AshStep.html#module-options","title":"Options - Ash.Reactor.AshStep","type":"module"},{"doc":"The Reactor stop which is used to execute create actions in bulk.","ref":"Ash.Reactor.BulkCreateStep.html","title":"Ash.Reactor.BulkCreateStep","type":"module"},{"doc":"The Reactor stop which is used to execute create actions in bulk.","ref":"Ash.Reactor.BulkUpdateStep.html","title":"Ash.Reactor.BulkUpdateStep","type":"module"},{"doc":"The Reactor step which is used to execute change steps.","ref":"Ash.Reactor.ChangeStep.html","title":"Ash.Reactor.ChangeStep","type":"module"},{"doc":"The Reactor step which is used to execute create actions.","ref":"Ash.Reactor.CreateStep.html","title":"Ash.Reactor.CreateStep","type":"module"},{"doc":"The Reactor step which is used to execute update actions.","ref":"Ash.Reactor.DestroyStep.html","title":"Ash.Reactor.DestroyStep","type":"module"},{"doc":"The `action` entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.Action.html","title":"Ash.Reactor.Dsl.Action","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.Action.html#t:t/0","title":"Ash.Reactor.Dsl.Action.t/0","type":"type"},{"doc":"Add a load statement to an action.","ref":"Ash.Reactor.Dsl.ActionLoad.html","title":"Ash.Reactor.Dsl.ActionLoad","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.ActionLoad.html#t:t/0","title":"Ash.Reactor.Dsl.ActionLoad.t/0","type":"type"},{"doc":"Responsible for transforming actions.","ref":"Ash.Reactor.Dsl.ActionTransformer.html","title":"Ash.Reactor.Dsl.ActionTransformer","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.ActionTransformer.html#after?/1","title":"Ash.Reactor.Dsl.ActionTransformer.after?/1","type":"function"},{"doc":"","ref":"Ash.Reactor.Dsl.ActionTransformer.html#after_compile?/0","title":"Ash.Reactor.Dsl.ActionTransformer.after_compile?/0","type":"function"},{"doc":"Specify the actor used to execute an action.","ref":"Ash.Reactor.Dsl.Actor.html","title":"Ash.Reactor.Dsl.Actor","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.Actor.html#t:t/0","title":"Ash.Reactor.Dsl.Actor.t/0","type":"type"},{"doc":"The ash_step DSL module.\n\nSee `d:Reactor.step`.","ref":"Ash.Reactor.Dsl.AshStep.html","title":"Ash.Reactor.Dsl.AshStep","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.AshStep.html#t:t/0","title":"Ash.Reactor.Dsl.AshStep.t/0","type":"type"},{"doc":"The `bulk_create` entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.BulkCreate.html","title":"Ash.Reactor.Dsl.BulkCreate","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.BulkCreate.html#t:t/0","title":"Ash.Reactor.Dsl.BulkCreate.t/0","type":"type"},{"doc":"The `bulk_update` entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.BulkUpdate.html","title":"Ash.Reactor.Dsl.BulkUpdate","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.BulkUpdate.html#t:t/0","title":"Ash.Reactor.Dsl.BulkUpdate.t/0","type":"type"},{"doc":"The `change` entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.Change.html","title":"Ash.Reactor.Dsl.Change","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.Change.html#t:t/0","title":"Ash.Reactor.Dsl.Change.t/0","type":"type"},{"doc":"The `create` entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.Create.html","title":"Ash.Reactor.Dsl.Create","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.Create.html#t:t/0","title":"Ash.Reactor.Dsl.Create.t/0","type":"type"},{"doc":"The `destroy` entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.Destroy.html","title":"Ash.Reactor.Dsl.Destroy","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.Destroy.html#t:t/0","title":"Ash.Reactor.Dsl.Destroy.t/0","type":"type"},{"doc":"The `inputs` entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.Inputs.html","title":"Ash.Reactor.Dsl.Inputs","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.Inputs.html#t:t/0","title":"Ash.Reactor.Dsl.Inputs.t/0","type":"type"},{"doc":"The `load` step entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.Load.html","title":"Ash.Reactor.Dsl.Load","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.Load.html#t:t/0","title":"Ash.Reactor.Dsl.Load.t/0","type":"type"},{"doc":"Ensures that the required middlewares are added to the Reactor.","ref":"Ash.Reactor.Dsl.MiddlewareTransformer.html","title":"Ash.Reactor.Dsl.MiddlewareTransformer","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.MiddlewareTransformer.html#after?/1","title":"Ash.Reactor.Dsl.MiddlewareTransformer.after?/1","type":"function"},{"doc":"","ref":"Ash.Reactor.Dsl.MiddlewareTransformer.html#after_compile?/0","title":"Ash.Reactor.Dsl.MiddlewareTransformer.after_compile?/0","type":"function"},{"doc":"The `read` entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.Read.html","title":"Ash.Reactor.Dsl.Read","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.Read.html#t:t/0","title":"Ash.Reactor.Dsl.Read.t/0","type":"type"},{"doc":"The `read_one` entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.ReadOne.html","title":"Ash.Reactor.Dsl.ReadOne","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.ReadOne.html#t:t/0","title":"Ash.Reactor.Dsl.ReadOne.t/0","type":"type"},{"doc":"Specify the tenant used to execute an action.","ref":"Ash.Reactor.Dsl.Tenant.html","title":"Ash.Reactor.Dsl.Tenant","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.Tenant.html#t:t/0","title":"Ash.Reactor.Dsl.Tenant.t/0","type":"type"},{"doc":"The `transaction` entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.Transaction.html","title":"Ash.Reactor.Dsl.Transaction","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.Transaction.html#t:t/0","title":"Ash.Reactor.Dsl.Transaction.t/0","type":"type"},{"doc":"The `update` entity for the `Ash.Reactor` reactor extension.","ref":"Ash.Reactor.Dsl.Update.html","title":"Ash.Reactor.Dsl.Update","type":"module"},{"doc":"","ref":"Ash.Reactor.Dsl.Update.html#t:t/0","title":"Ash.Reactor.Dsl.Update.t/0","type":"type"},{"doc":"The Reactor step which is used to execute load steps.","ref":"Ash.Reactor.LoadStep.html","title":"Ash.Reactor.LoadStep","type":"module"},{"doc":"","ref":"Ash.Reactor.LoadStep.html#run/3","title":"Ash.Reactor.LoadStep.run/3","type":"function"},{"doc":"A custom step which merges any number of `inputs` results into a single map.","ref":"Ash.Reactor.MergeInputsStep.html","title":"Ash.Reactor.MergeInputsStep","type":"module"},{"doc":"Reactor middleware used to collect and emit notifications upon successful\ncompletion of the Reactor.","ref":"Ash.Reactor.Notifications.html","title":"Ash.Reactor.Notifications","type":"module"},{"doc":"When the reactor completes successfully, publish any queued notifications.","ref":"Ash.Reactor.Notifications.html#complete/2","title":"Ash.Reactor.Notifications.complete/2","type":"function"},{"doc":"Add notifications to the queue to be published on reactor success.","ref":"Ash.Reactor.Notifications.html#enqueue_notifications/2","title":"Ash.Reactor.Notifications.enqueue_notifications/2","type":"function"},{"doc":"When the reactor fails, discard any queued notifications.","ref":"Ash.Reactor.Notifications.html#error/2","title":"Ash.Reactor.Notifications.error/2","type":"function"},{"doc":"When halting the reactor, store any queued notifications in the context for\neventual resumption.","ref":"Ash.Reactor.Notifications.html#halt/1","title":"Ash.Reactor.Notifications.halt/1","type":"function"},{"doc":"When starting a reactor, start an agent to act as a temporary store of\nnotifications.","ref":"Ash.Reactor.Notifications.html#init/1","title":"Ash.Reactor.Notifications.init/1","type":"function"},{"doc":"Dispatch notifications.","ref":"Ash.Reactor.Notifications.html#publish/2","title":"Ash.Reactor.Notifications.publish/2","type":"function"},{"doc":"The Reactor step which is used to execute get actions.","ref":"Ash.Reactor.ReadOneStep.html","title":"Ash.Reactor.ReadOneStep","type":"module"},{"doc":"","ref":"Ash.Reactor.ReadOneStep.html#run/3","title":"Ash.Reactor.ReadOneStep.run/3","type":"function"},{"doc":"The Reactor step which is used to execute read actions.","ref":"Ash.Reactor.ReadStep.html","title":"Ash.Reactor.ReadStep","type":"module"},{"doc":"","ref":"Ash.Reactor.ReadStep.html#run/3","title":"Ash.Reactor.ReadStep.run/3","type":"function"},{"doc":"Reactor middleware which threads Ash's tracing information through to new\nprocesses spawned by Reactor.","ref":"Ash.Reactor.Tracer.html","title":"Ash.Reactor.Tracer","type":"module"},{"doc":"The Reactor step which is used to wrap other steps in an Ash data layer\ntransaction.","ref":"Ash.Reactor.TransactionStep.html","title":"Ash.Reactor.TransactionStep","type":"module"},{"doc":"","ref":"Ash.Reactor.TransactionStep.html#run/3","title":"Ash.Reactor.TransactionStep.run/3","type":"function"},{"doc":"The Reactor step which is used to execute update actions.","ref":"Ash.Reactor.UpdateStep.html","title":"Ash.Reactor.UpdateStep","type":"module"},{"doc":"Introspection target for a filter for read actions and relationships","ref":"Ash.Resource.Dsl.Filter.html","title":"Ash.Resource.Dsl.Filter","type":"module"},{"doc":"Codemods for working with Ash.Resource modules","ref":"Ash.Resource.Igniter.html","title":"Ash.Resource.Igniter","type":"module"},{"doc":"Adds the given code block to the resource's `actions` block","ref":"Ash.Resource.Igniter.html#add_action/3","title":"Ash.Resource.Igniter.add_action/3","type":"function"},{"doc":"Adds the given code block to the resource's `attributes` block","ref":"Ash.Resource.Igniter.html#add_attribute/3","title":"Ash.Resource.Igniter.add_attribute/3","type":"function"},{"doc":"Adds a bypass to the top of the resource's `policies` block","ref":"Ash.Resource.Igniter.html#add_bypass/4","title":"Ash.Resource.Igniter.add_bypass/4","type":"function"},{"doc":"Adds a policy to the bottom of the resource's `policies` block","ref":"Ash.Resource.Igniter.html#add_policy/4","title":"Ash.Resource.Igniter.add_policy/4","type":"function"},{"doc":"Gets the domain from the given resource module","ref":"Ash.Resource.Igniter.html#domain/2","title":"Ash.Resource.Igniter.domain/2","type":"function"},{"doc":"List all resource modules found in the project","ref":"Ash.Resource.Igniter.html#list_resources/1","title":"Ash.Resource.Igniter.list_resources/1","type":"function"},{"doc":"","ref":"Ash.Resource.Igniter.html#resource_mods/0","title":"Ash.Resource.Igniter.resource_mods/0","type":"function"},{"doc":"The context passed into manual update action functions","ref":"Ash.Resource.ManualCreate.Context.html","title":"Ash.Resource.ManualCreate.Context","type":"module"},{"doc":"","ref":"Ash.Resource.ManualCreate.Context.html#t:t/0","title":"Ash.Resource.ManualCreate.Context.t/0","type":"type"},{"doc":"The context passed into manual update action functions","ref":"Ash.Resource.ManualDestroy.Context.html","title":"Ash.Resource.ManualDestroy.Context","type":"module"},{"doc":"","ref":"Ash.Resource.ManualDestroy.Context.html#t:t/0","title":"Ash.Resource.ManualDestroy.Context.t/0","type":"type"},{"doc":"The context passed into manual relationship functions","ref":"Ash.Resource.ManualRelationship.Context.html","title":"Ash.Resource.ManualRelationship.Context","type":"module"},{"doc":"","ref":"Ash.Resource.ManualRelationship.Context.html#t:t/0","title":"Ash.Resource.ManualRelationship.Context.t/0","type":"type"},{"doc":"The context passed into manual update action functions","ref":"Ash.Resource.ManualUpdate.Context.html","title":"Ash.Resource.ManualUpdate.Context","type":"module"},{"doc":"","ref":"Ash.Resource.ManualUpdate.Context.html#t:t/0","title":"Ash.Resource.ManualUpdate.Context.t/0","type":"type"},{"doc":"The context for a preparation.","ref":"Ash.Resource.Preparation.Context.html","title":"Ash.Resource.Preparation.Context","type":"module"},{"doc":"","ref":"Ash.Resource.Preparation.Context.html#t:t/0","title":"Ash.Resource.Preparation.Context.t/0","type":"type"},{"doc":"Converts a value to a tenant. To add this to a resource, implement the protocol like so:application\n\nWhat this should do is entirely dependent on how you've set up your tenants. This example assumes\nthat you want the tenant to be `org_#{organization_id}`, but it could also be something like\n`organization.schema`.\n\n```elixir\ndefmodule MyApp.Organization do\n  use Ash.Resource, ...\n\n  ...\n\n  defimpl Ash.ToTenant do\n    def to_tenant(%{id: id}, _resource), do: \"org_#{id}\"\n  end\nend\n```","ref":"Ash.ToTenant.html","title":"Ash.ToTenant","type":"protocol"},{"doc":"","ref":"Ash.ToTenant.html#to_tenant/2","title":"Ash.ToTenant.to_tenant/2","type":"function"},{"doc":"","ref":"Ash.ToTenant.html#t:t/0","title":"Ash.ToTenant.t/0","type":"type"},{"doc":"Provides utilities to implement and work with `Comparable` types","ref":"Comp.html","title":"Comp","type":"module"},{"doc":"Compare left and right term","ref":"Comp.html#compare/2","title":"Comp.compare/2","type":"function"},{"doc":"iex> Comp.compare(1, 2)\n    :lt\n    iex> Comp.compare(2, 1)\n    :gt\n    iex> Comp.compare(1, 1)\n    :eq","ref":"Comp.html#compare/2-examples","title":"Examples - Comp.compare/2","type":"function"},{"doc":"Helper to define ordering relation for pair of types,\naccepts two `term :: type` pairs\nand block of code where relation is described.","ref":"Comp.html#defcomparable/3","title":"Comp.defcomparable/3","type":"macro"},{"doc":"iex> quote do\n    ...>   use Comp\n    ...>   defmodule Foo do\n    ...>     defstruct [:value, :meta]\n    ...>   end\n    ...>   defmodule Bar do\n    ...>     defstruct [:value, :meta]\n    ...>   end\n    ...>   defcomparable %Foo{value: left} :: Foo, %Foo{value: right} :: Foo do\n    ...>     Comp.compare(left, right)\n    ...>   end\n    ...>   defcomparable %Foo{value: left} :: Foo, %Bar{value: right} :: Bar do\n    ...>     Comp.compare(left, right)\n    ...>   end\n    ...>   defcomparable %Foo{value: left} :: Foo, right :: Integer do\n    ...>     Comp.compare(left, right)\n    ...>   end\n    ...> end\n    ...> |> Code.compile_quoted\n    iex> quote do\n    ...>   x = %Foo{value: 1, meta: 1}\n    ...>   y = %Foo{value: 1, meta: 2}\n    ...>   Comp.equal?(x, y) && Comp.equal?(y, x)\n    ...> end\n    ...> |> Code.eval_quoted\n    ...> |> elem(0)\n    true\n    iex> quote do\n    ...>   x = %Foo{value: 1, meta: 1}\n    ...>   y = %Bar{value: 1, meta: 2}\n    ...>   Comp.equal?(x, y) && Comp.equal?(y, x)\n    ...> end\n    ...> |> Code.eval_quoted\n    ...> |> elem(0)\n    true\n    iex> quote do\n    ...>   x = %Foo{value: 1, meta: 1}\n    ...>   y = 1\n    ...>   Comp.equal?(x, y) && Comp.equal?(y, x)\n    ...> end\n    ...> |> Code.eval_quoted\n    ...> |> elem(0)\n    true","ref":"Comp.html#defcomparable/3-examples","title":"Examples - Comp.defcomparable/3","type":"macro"},{"doc":"","ref":"Comp.html#eq/0","title":"Comp.eq/0","type":"macro"},{"doc":"Is left term equal to right term?","ref":"Comp.html#equal?/2","title":"Comp.equal?/2","type":"function"},{"doc":"iex> Comp.equal?(1, 1)\n    true\n    iex> Comp.equal?(1, :hello)\n    false","ref":"Comp.html#equal?/2-examples","title":"Examples - Comp.equal?/2","type":"function"},{"doc":"Is left term greater or equal to right term?","ref":"Comp.html#greater_or_equal?/2","title":"Comp.greater_or_equal?/2","type":"function"},{"doc":"iex> Comp.greater_or_equal?(1, 1)\n    true\n    iex> Comp.greater_or_equal?(1, 2)\n    false\n    iex> Comp.greater_or_equal?(2, 1)\n    true","ref":"Comp.html#greater_or_equal?/2-examples","title":"Examples - Comp.greater_or_equal?/2","type":"function"},{"doc":"Is left term greater than right term?","ref":"Comp.html#greater_than?/2","title":"Comp.greater_than?/2","type":"function"},{"doc":"iex> Comp.greater_than?(1, 1)\n    false\n    iex> Comp.greater_than?(1, 2)\n    false\n    iex> Comp.greater_than?(2, 1)\n    true","ref":"Comp.html#greater_than?/2-examples","title":"Examples - Comp.greater_than?/2","type":"function"},{"doc":"","ref":"Comp.html#gt/0","title":"Comp.gt/0","type":"macro"},{"doc":"Is left term less or equal to right term?","ref":"Comp.html#less_or_equal?/2","title":"Comp.less_or_equal?/2","type":"function"},{"doc":"iex> Comp.less_or_equal?(1, 1)\n    true\n    iex> Comp.less_or_equal?(1, 2)\n    true\n    iex> Comp.less_or_equal?(2, 1)\n    false","ref":"Comp.html#less_or_equal?/2-examples","title":"Examples - Comp.less_or_equal?/2","type":"function"},{"doc":"Is left term less than right term?","ref":"Comp.html#less_than?/2","title":"Comp.less_than?/2","type":"function"},{"doc":"iex> Comp.less_than?(1, 1)\n    false\n    iex> Comp.less_than?(1, 2)\n    true\n    iex> Comp.less_than?(2, 1)\n    false","ref":"Comp.html#less_than?/2-examples","title":"Examples - Comp.less_than?/2","type":"function"},{"doc":"","ref":"Comp.html#lt/0","title":"Comp.lt/0","type":"macro"},{"doc":"Returns the biggest of the two given terms, if terms are equal - then the first one is returned","ref":"Comp.html#max/2","title":"Comp.max/2","type":"function"},{"doc":"iex> Comp.max(1, 1)\n    1\n    iex> Comp.max(1, 2)\n    2\n    iex> Comp.max(2, 1)\n    2","ref":"Comp.html#max/2-examples","title":"Examples - Comp.max/2","type":"function"},{"doc":"Returns the smallest of the two given terms, if terms are equal - then the first one is returned","ref":"Comp.html#min/2","title":"Comp.min/2","type":"function"},{"doc":"iex> Comp.min(1, 1)\n    1\n    iex> Comp.min(1, 2)\n    1\n    iex> Comp.min(2, 1)\n    1","ref":"Comp.html#min/2-examples","title":"Examples - Comp.min/2","type":"function"},{"doc":"Is left term not equal to right term?","ref":"Comp.html#not_equal?/2","title":"Comp.not_equal?/2","type":"function"},{"doc":"iex> Comp.not_equal?(1, 1)\n    false\n    iex> Comp.not_equal?(1, :hello)\n    true","ref":"Comp.html#not_equal?/2-examples","title":"Examples - Comp.not_equal?/2","type":"function"},{"doc":"","ref":"Comp.html#type_of/1","title":"Comp.type_of/1","type":"function"},{"doc":"","ref":"Comp.html#t:left/0","title":"Comp.left/0","type":"type"},{"doc":"","ref":"Comp.html#t:right/0","title":"Comp.right/0","type":"type"},{"doc":"Protocol which describes ordering relation for pair of types","ref":"Comparable.html","title":"Comparable","type":"protocol"},{"doc":"Accepts struct with fields :left and :right and returns ord value","ref":"Comparable.html#compare/1","title":"Comparable.compare/1","type":"function"},{"doc":"","ref":"Comparable.html#t:ord/0","title":"Comparable.ord/0","type":"type"},{"doc":"","ref":"Comparable.html#t:t/0","title":"Comparable.t/0","type":"type"},{"doc":"","ref":"Comparable.Type.Any.To.Any.html","title":"Comparable.Type.Any.To.Any","type":"module"},{"doc":"","ref":"Comparable.Type.Ash.CiString.To.Ash.CiString.html","title":"Comparable.Type.Ash.CiString.To.Ash.CiString","type":"module"},{"doc":"","ref":"Comparable.Type.Ash.CiString.To.BitString.html","title":"Comparable.Type.Ash.CiString.To.BitString","type":"module"},{"doc":"","ref":"Comparable.Type.Atom.To.BitString.html","title":"Comparable.Type.Atom.To.BitString","type":"module"},{"doc":"","ref":"Comparable.Type.BitString.To.Ash.CiString.html","title":"Comparable.Type.BitString.To.Ash.CiString","type":"module"},{"doc":"","ref":"Comparable.Type.BitString.To.Atom.html","title":"Comparable.Type.BitString.To.Atom","type":"module"},{"doc":"","ref":"Comparable.Type.BitString.To.Decimal.html","title":"Comparable.Type.BitString.To.Decimal","type":"module"},{"doc":"","ref":"Comparable.Type.Date.To.Date.html","title":"Comparable.Type.Date.To.Date","type":"module"},{"doc":"","ref":"Comparable.Type.DateTime.To.DateTime.html","title":"Comparable.Type.DateTime.To.DateTime","type":"module"},{"doc":"","ref":"Comparable.Type.Decimal.To.BitString.html","title":"Comparable.Type.Decimal.To.BitString","type":"module"},{"doc":"","ref":"Comparable.Type.Decimal.To.Decimal.html","title":"Comparable.Type.Decimal.To.Decimal","type":"module"},{"doc":"","ref":"Comparable.Type.Decimal.To.Float.html","title":"Comparable.Type.Decimal.To.Float","type":"module"},{"doc":"","ref":"Comparable.Type.Decimal.To.Integer.html","title":"Comparable.Type.Decimal.To.Integer","type":"module"},{"doc":"","ref":"Comparable.Type.Float.To.Decimal.html","title":"Comparable.Type.Float.To.Decimal","type":"module"},{"doc":"","ref":"Comparable.Type.Integer.To.Decimal.html","title":"Comparable.Type.Integer.To.Decimal","type":"module"},{"doc":"","ref":"Comparable.Type.List.To.List.html","title":"Comparable.Type.List.To.List","type":"module"},{"doc":"","ref":"Comparable.Type.Map.To.Map.html","title":"Comparable.Type.Map.To.Map","type":"module"},{"doc":"","ref":"Comparable.Type.NaiveDateTime.To.NaiveDateTime.html","title":"Comparable.Type.NaiveDateTime.To.NaiveDateTime","type":"module"},{"doc":"","ref":"Comparable.Type.Time.To.Time.html","title":"Comparable.Type.Time.To.Time","type":"module"},{"doc":"","ref":"Comparable.Type.Tuple.To.Tuple.html","title":"Comparable.Type.Tuple.To.Tuple","type":"module"},{"doc":"Runs all codegen tasks for any extension on any resource/domain in your application.","ref":"Mix.Tasks.Ash.Codegen.html","title":"mix ash.codegen","type":"task"},{"doc":"Runs all codegen tasks for any extension on any resource/domain in your application.","ref":"Mix.Tasks.Ash.Codegen.html#run/1","title":"Mix.Tasks.Ash.Codegen.run/1","type":"function"},{"doc":"Generates a base resource","ref":"Mix.Tasks.Ash.Gen.BaseResource.html","title":"mix ash.gen.base_resource","type":"task"},{"doc":"```bash\nmix ash.gen.base_resource MyApp.Resource\n```","ref":"Mix.Tasks.Ash.Gen.BaseResource.html#module-example","title":"Example - mix ash.gen.base_resource","type":"task"},{"doc":"Generates an Ash.Domain","ref":"Mix.Tasks.Ash.Gen.Domain.html","title":"mix ash.gen.domain","type":"task"},{"doc":"```bash\nmix ash.gen.domain MyApp.Accounts\n```","ref":"Mix.Tasks.Ash.Gen.Domain.html#module-example","title":"Example - mix ash.gen.domain","type":"task"},{"doc":"Generates an Ash.Type.Enum","ref":"Mix.Tasks.Ash.Gen.Enum.html","title":"mix ash.gen.enum","type":"task"},{"doc":"```bash\nmix ash.gen.enum MyApp.Support.Ticket.Types.Status open,closed --short-name ticket_status\n```","ref":"Mix.Tasks.Ash.Gen.Enum.html#module-example","title":"Example - mix ash.gen.enum","type":"task"},{"doc":"- `--short-name`, `-s`: Register the type under the provided shortname, so it can be referenced like `:short_name` instead of the module name.","ref":"Mix.Tasks.Ash.Gen.Enum.html#module-options","title":"Options - mix ash.gen.enum","type":"task"},{"doc":"Generate and configure an Ash.Resource.\n\nIf the domain does not exist, we create it. If it does, we add the resource to it if it is not already present.","ref":"Mix.Tasks.Ash.Gen.Resource.html","title":"mix ash.gen.resource","type":"task"},{"doc":"```bash\nmix ash.gen.resource Helpdesk.Support.Ticket \\\n  --default-actions read \\\n  --uuid-primary-key id \\\n  --attribute subject:string:required:public \\\n  --relationship belongs_to:representative:Helpdesk.Support.Representative \\\n  --timestamps \\\n  --extend postgres,graphql\n\n```","ref":"Mix.Tasks.Ash.Gen.Resource.html#module-example","title":"Example - mix ash.gen.resource","type":"task"},{"doc":"* `--attribute` or `-a` - An attribute or comma separated list of attributes to add, as `name:type`. Modifiers: `primary_key`, `public`, `sensitive`, and `required`. i.e `-a name:string:required`\n* `--relationship` or `-r` - A relationship or comma separated list of relationships to add, as `type:name:dest`. Modifiers: `public`. `belongs_to` only modifiers: `primary_key`, `sensitive`, and `required`. i.e `-r belongs_to:author:MyApp.Accounts.Author:required`\n* `--default-actions` or `-da` - A csv list of default action types to add, i.e `-da read,create`. The `create` and `update` actions accept the public attributes being added.\n* `--uuid-primary-key` or `-u` - Adds a UUID primary key with that name. i.e `-u id`\n* `--uuid-v7-primary-key` or `-u` - Adds a UUID primary key with that name. i.e `-u7 id`\n* `--integer-primary-key` or `-i` - Adds an integer primary key with that name. i.e `-i id`\n* `--domain` or `-d` - The domain module to add the resource to. i.e `-d MyApp.MyDomain`. This defaults to the resource's module name, minus the last segment.\n* `--extend` or `-e` - A comma separated list of modules or builtins to extend the resource with. i.e `-e postgres,Some.Extension`\n* `--base` or `-b` - The base module to use for the resource. i.e `-b Ash.Resource`. Requires that the module is in `config :your_app, :base_resources`\n* `--timestamps` or `-t` - If set adds `inserted_at` and `updated_at` timestamps to the resource.","ref":"Mix.Tasks.Ash.Gen.Resource.html#module-options","title":"Options - mix ash.gen.resource","type":"task"},{"doc":"Generates a Livebook for each Ash domain.","ref":"Mix.Tasks.Ash.GenerateLivebook.html","title":"mix ash.generate_livebook","type":"task"},{"doc":"* `--filename` - Specify the name of the generated Livebook file. Default: `livebook.livemd`","ref":"Mix.Tasks.Ash.GenerateLivebook.html#module-command-line-options","title":"Command line options - mix ash.generate_livebook","type":"task"},{"doc":"","ref":"Mix.Tasks.Ash.GenerateLivebook.html#domains/0","title":"Mix.Tasks.Ash.GenerateLivebook.domains/0","type":"function"},{"doc":"Generates a Livebook for each Ash domain","ref":"Mix.Tasks.Ash.GenerateLivebook.html#run/1","title":"Mix.Tasks.Ash.GenerateLivebook.run/1","type":"function"},{"doc":"Generates a Mermaid Flow Chart for a given resource's policies.","ref":"Mix.Tasks.Ash.GeneratePolicyCharts.html","title":"mix ash.generate_policy_charts","type":"task"},{"doc":"This mix task requires the Mermaid CLI to be installed on your system.\n\nSee https://github.com/mermaid-js/mermaid-cli","ref":"Mix.Tasks.Ash.GeneratePolicyCharts.html#module-prerequisites","title":"Prerequisites - mix ash.generate_policy_charts","type":"task"},{"doc":"* `--only` - only generates the given Flow file\n  * `--format` - Can be set to one of either:\n    * `plain` - Prints just the mermaid output as text. This is the default.\n    * `md` - Prints the mermaid diagram in a markdown code block.\n    * `svg` - Generates an SVG\n    * `pdf` - Generates a PDF\n    * `png` - Generates a PNG","ref":"Mix.Tasks.Ash.GeneratePolicyCharts.html#module-command-line-options","title":"Command line options - mix ash.generate_policy_charts","type":"task"},{"doc":"Generates a Mermaid Flow Chart for a given resource's policies.","ref":"Mix.Tasks.Ash.GeneratePolicyCharts.html#run/1","title":"Mix.Tasks.Ash.GeneratePolicyCharts.run/1","type":"function"},{"doc":"Generates a Mermaid Resource Diagram for each Ash domain.","ref":"Mix.Tasks.Ash.GenerateResourceDiagrams.html","title":"mix ash.generate_resource_diagrams","type":"task"},{"doc":"This mix task requires the Mermaid CLI to be installed on your system.\n\nSee https://github.com/mermaid-js/mermaid-cli","ref":"Mix.Tasks.Ash.GenerateResourceDiagrams.html#module-prerequisites","title":"Prerequisites - mix ash.generate_resource_diagrams","type":"task"},{"doc":"* `--type` - `er` or `class` (defaults to `class`)\n  * `--only` - only generates for the given domain\n  * `--format` - Can be set to one of either:\n    * `plain` - Prints just the mermaid output as text. This is the default.\n    * `md` - Prints the mermaid diagram in a markdown code block.\n    * `svg` - Generates an SVG\n    * `pdf` - Generates a PDF\n    * `png` - Generates a PNG","ref":"Mix.Tasks.Ash.GenerateResourceDiagrams.html#module-command-line-options","title":"Command line options - mix ash.generate_resource_diagrams","type":"task"},{"doc":"Generates Mermaid Resource Diagrams for each Ash domain","ref":"Mix.Tasks.Ash.GenerateResourceDiagrams.html#run/1","title":"Mix.Tasks.Ash.GenerateResourceDiagrams.run/1","type":"function"},{"doc":"Installs Ash into a project. Should be called with `mix igniter.install ash`","ref":"Mix.Tasks.Ash.Install.html","title":"mix ash.install","type":"task"},{"doc":"Runs all migration tasks for any extension on any resource/domain in your application.","ref":"Mix.Tasks.Ash.Migrate.html","title":"mix ash.migrate","type":"task"},{"doc":"Runs all migration tasks for any extension on any resource/domain in your application.","ref":"Mix.Tasks.Ash.Migrate.html#run/1","title":"Mix.Tasks.Ash.Migrate.run/1","type":"function"},{"doc":"Adds an extension or extensions to the domain/resource\n\nExtensions can either be a fully qualified module name, or one of the following list, based on the thing being extended","ref":"Mix.Tasks.Ash.Patch.Extend.html","title":"mix ash.patch.extend","type":"task"},{"doc":"- `json_api` - `AshJsonApi.Domain`\n- `graphql` - `AshGraphql.Domain`","ref":"Mix.Tasks.Ash.Patch.Extend.html#module-ash-domain","title":"Ash.Domain - mix ash.patch.extend","type":"task"},{"doc":"- `postgres` - `AshPostgres.DataLayer`\n- `sqlite` - `AshSqlite.DataLayer`\n- `mysql` - `AshMysql.DataLayer`\n- `ets` - `Ash.DataLayer.Ets`\n- `mnesia` - `Ash.DataLayer.Mnesia`\n- `embedded` - `data_layer: :embedded`\n- `json_api` - `AshJsonApi.Resource`\n- `graphql` - `AshGraphql.Resource`","ref":"Mix.Tasks.Ash.Patch.Extend.html#module-ash-resource","title":"Ash.Resource - mix ash.patch.extend","type":"task"},{"doc":"```bash\nmix ash.patch.extend My.Domain.Resource postgres,Ash.Policy.Authorizer\n```","ref":"Mix.Tasks.Ash.Patch.Extend.html#module-example","title":"Example - mix ash.patch.extend","type":"task"},{"doc":"Runs all tear down tasks for any extension on any resource/domain in your application, followed by setup tasks.","ref":"Mix.Tasks.Ash.Reset.html","title":"mix ash.reset","type":"task"},{"doc":"Runs all tear down & setup tasks for any extension on any resource/domain in your application.","ref":"Mix.Tasks.Ash.Reset.html#run/1","title":"Mix.Tasks.Ash.Reset.run/1","type":"function"},{"doc":"Runs all rollback tasks for any extension on any resource/domain in your application.","ref":"Mix.Tasks.Ash.Rollback.html","title":"mix ash.rollback","type":"task"},{"doc":"Runs all rollback tasks for any extension on any resource/domain in your application.","ref":"Mix.Tasks.Ash.Rollback.html#run/1","title":"Mix.Tasks.Ash.Rollback.run/1","type":"function"},{"doc":"Runs all setup tasks for any extension on any resource/domain in your application.","ref":"Mix.Tasks.Ash.Setup.html","title":"mix ash.setup","type":"task"},{"doc":"Runs all setup tasks for any extension on any resource/domain in your application.","ref":"Mix.Tasks.Ash.Setup.html#run/1","title":"Mix.Tasks.Ash.Setup.run/1","type":"function"},{"doc":"Runs all tear down tasks for any extension on any resource/domain in your application.","ref":"Mix.Tasks.Ash.TearDown.html","title":"mix ash.tear_down","type":"task"},{"doc":"Runs all tear_down tasks for any extension on any resource/domain in your application.","ref":"Mix.Tasks.Ash.TearDown.html#run/1","title":"Mix.Tasks.Ash.TearDown.run/1","type":"function"},{"doc":"![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-black-text.png?raw=true#gh-light-mode-only)\n![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-white-text.png?raw=true#gh-dark-mode-only)\n\n![Elixir CI](https://github.com/ash-project/ash/workflows/Ash%20CI/badge.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Hex version badge](https://img.shields.io/hexpm/v/ash.svg)](https://hex.pm/packages/ash)\n[![Hexdocs badge](https://img.shields.io/badge/docs-hexdocs-purple)](https://hexdocs.pm/ash)\n\n# Ash Framework\n\nWelcome! Here you will find everything you need to know to get started with and use Ash. This documentation is best viewed on [hexdocs](https://hexdocs.pm/ash).","ref":"readme.html","title":"Home","type":"extras"},{"doc":"- [What is Ash?](documentation/topics/about_ash/what-is-ash.md)\n- [Get Started](documentation/tutorials/get-started.md)\n- [See the roadmap](https://github.com/orgs/ash-project/projects/3)","ref":"readme.html#dive-in","title":"Dive In - Home","type":"extras"},{"doc":"[**Tutorials**](#tutorials) walk you through a series of steps to accomplish a goal. These are **learning-oriented**, and are a great place for beginners to start.\n\n---\n\n[**Topics**](#topics) provide a high level overview of a specific concept or feature. These are **understanding-oriented**, and are perfect for discovering design patterns, features, and tools related to a given topic.\n\n---\n\n[**How-to**](#how-to) guides are **goal-oriented** recipes for accomplishing specific tasks. These are also good to browse to get an idea of how Ash works and what is possible with it.\n\n---\n\n[**Reference**](#reference) documentation is produced automatically from our source code. It comes in the form of module documentation and DSL documentation. This documentation is **information-oriented**. Use the sidebar and the search bar to find relevant reference information.","ref":"readme.html#about-the-documentation","title":"About the Documentation - Home","type":"extras"},{"doc":"- [Get Started](documentation/tutorials/get-started.md)\n\n---","ref":"readme.html#tutorials","title":"Tutorials - Home","type":"extras"},{"doc":"","ref":"readme.html#topics","title":"Topics - Home","type":"extras"},{"doc":"- [What is Ash?](documentation/topics/about_ash/what-is-ash.md)\n- [Our Design Principles](documentation/topics/about_ash/design-principles.md)\n- [Contributing to Ash](documentation/topics/about_ash/contributing-to-ash.md)\n- [Alternatives](documentation/topics/about_ash/alternatives.md)","ref":"readme.html#about-ash","title":"About Ash - Home","type":"extras"},{"doc":"- [Domains](documentation/topics/resources/domains.md)\n- [Attributes](documentation/topics/resources/attributes.md)\n- [Relationships](documentation/topics/resources/relationships.md)\n- [Calculations](documentation/topics/resources/calculations.md)\n- [Aggregates](documentation/topics/resources/aggregates.md)\n- [Code Interfaces](documentation/topics/resources/code-interfaces.md)\n- [Identities](documentation/topics/resources/identities.md)\n- [Validations](documentation/topics/resources/validations.md)\n- [Changes](documentation/topics/resources/changes.md)\n- [Preparations](documentation/topics/resources/preparations.md)\n- [Embedded Resources](documentation/topics/resources/embedded-resources.md)\n- [Notifiers](documentation/topics/resources/notifiers.md)","ref":"readme.html#resources","title":"Resources - Home","type":"extras"},{"doc":"- [Actions](documentation/topics/actions/actions.md)\n- [Read Actions](documentation/topics/actions/read-actions.md)\n- [Create Actions](documentation/topics/actions/create-actions.md)\n- [Update Actions](documentation/topics/actions/update-actions.md)\n- [Destroy Actions](documentation/topics/actions/destroy-actions.md)\n- [Generic Actions](documentation/topics/actions/generic-actions.md)\n- [Manual Actions](documentation/topics/actions/manual-actions.md)","ref":"readme.html#actions","title":"Actions - Home","type":"extras"},{"doc":"- [Actors & Authorization](documentation/topics/security/actors-and-authorization.md)\n- [Sensitive Data](documentation/topics/security/sensitive-data.md)\n- [Policies](documentation/topics/security/policies.md)","ref":"readme.html#security","title":"Security - Home","type":"extras"},{"doc":"- [Project Structure](documentation/topics/development/project-structure.md)\n- [Generators](documentation/topics/development/generators.md)\n- [Testing](documentation/topics/development/testing.md)\n- [Development Utilities](documentation/topics/development/development-utilities.md)\n- [Upgrading to 3.0](documentation/topics/development/upgrading-to-3.0.md)\n- [Error Handling](documentation/topics/development/error-handling.md)","ref":"readme.html#development","title":"Development - Home","type":"extras"},{"doc":"- [Monitoring](documentation/topics/advanced/monitoring.md)\n- [Multitenancy](documentation/topics/advanced/multitenancy.md)\n- [Reactor](documentation/topics/advanced/reactor.md)\n- [Timeouts](documentation/topics/advanced/timeouts.md)\n- [Writing Extensions](documentation/topics/advanced/writing-extensions.md)\n\n---","ref":"readme.html#advanced","title":"Advanced - Home","type":"extras"},{"doc":"- [Test Resources](documentation/how-to/test-resources.livemd)\n- [Authorize Access to Resources](documentation/how-to/authorize-access-to-resources.livemd)\n- [Encrypt Attributes](documentation/how-to/encrypt-attributes.livemd)\n- [Prevent Concurrent Writes](documentation/how-to/prevent-concurrent-writes.livemd)\n- [Wrap External APIs](documentation/how-to/wrap-external-apis.livemd)\n\n---","ref":"readme.html#how-to","title":"How-to - Home","type":"extras"},{"doc":"- [Glossary](documentation/topics/reference/glossary.md)\n- [Expressions](documentation/topics/reference/expressions.md)\n- [Ash.Resource DSL](documentation/dsls/DSL:-Ash.Resource.md)\n- [Ash.Domain DSL](documentation/dsls/DSL:-Ash.Domain.md)\n- [Ash.Reactor DSL](documentation/dsls/DSL:-Ash.Reactor.md)\n- [Ash.Notifier.PubSub DSL](documentation/dsls/DSL:-Ash.Notifier.PubSub.md)\n- [Ash.Policy.Authorizer DSL](documentation/dsls/DSL:-Ash.Policy.Authorizer.md)\n- [Ash.DataLayer.Ets DSL](documentation/dsls/DSL:-Ash.DataLayer.Ets.md)\n- [Ash.DataLayer.Mnesia DSL](documentation/dsls/DSL:-Ash.DataLayer.Mnesia.md)\n- For other reference documentation, see the sidebar & search bar","ref":"readme.html#reference","title":"Reference - Home","type":"extras"},{"doc":"The Ash ecosystem consists of numerous packages, all of which have their own documentation. If you can't find something in this documentation, don't forget to search in any potentially relevant package.","ref":"readme.html#packages","title":"Packages - Home","type":"extras"},{"doc":"- [AshPostgres](https://hexdocs.pm/ash_postgres) | PostgreSQL data layer\n- [AshSqlite](https://hexdocs.pm/ash_sqlite) | SQLite data layer\n- [AshCsv](https://hexdocs.pm/ash_csv) | CSV data layer\n- [AshCubdb](https://hexdocs.pm/ash_cubdb) | CubDB data layer","ref":"readme.html#data-layers","title":"Data Layers - Home","type":"extras"},{"doc":"- [AshJsonApi](https://hexdocs.pm/ash_json_api) | JSON:API builder\n- [AshGraphql](https://hexdocs.pm/ash_graphql) | GraphQL builder","ref":"readme.html#api-extensions","title":"API Extensions - Home","type":"extras"},{"doc":"- [AshPhoenix](https://hexdocs.pm/ash_phoenix) | Phoenix integrations\n- [AshAuthentication](https://hexdocs.pm/ash_authentication) | Authenticate users with password, OAuth, and more\n- [AshAuthenticationPhoenix](https://hexdocs.pm/ash_authentication_phoenix) | Integrations for AshAuthentication and Phoenix","ref":"readme.html#web","title":"Web - Home","type":"extras"},{"doc":"- [AshMoney](https://hexdocs.pm/ash_money) | A money data type for Ash\n- [AshDoubleEntry](https://hexdocs.pm/ash_double_entry) | A double entry system backed by Ash Resources","ref":"readme.html#finance","title":"Finance - Home","type":"extras"},{"doc":"- [AshOban](https://hexdocs.pm/ash_oban) | Background jobs and scheduled jobs for Ash, backed by Oban\n- [AshArchival](https://hexdocs.pm/ash_archival) | Archive resources instead of deleting them\n- [AshStateMachine](https://hexdocs.pm/ash_state_machine) | Create state machines for resources\n- [AshPaperTrail](https://hexdocs.pm/ash_paper_trail) | Keep a history of changes to resources\n- [AshCloak](https://hexdocs.pm/ash_cloak) | Encrypt attributes of a resource","ref":"readme.html#resource-utilities","title":"Resource Utilities - Home","type":"extras"},{"doc":"- [AshAdmin](https://hexdocs.pm/ash_admin) | A push-button admin interface\n- [AshAppsignal](https://hexdocs.pm/ash_appsignal) | Monitor your Ash resources with AppSignal","ref":"readme.html#admin-monitoring","title":"Admin & Monitoring - Home","type":"extras"},{"doc":"- [Smokestack](https://hexdocs.pm/smokestack) | Declarative test factories for Ash resources","ref":"readme.html#testing","title":"Testing - Home","type":"extras"},{"doc":"# Get Started\n\n>","ref":"get-started.html","title":"Get Started","type":"extras"},{"doc":">\n> We have a basic step by step tutorial in Livebook that introduces you to Ash. No prior Ash knowledge is required.\n> The Livebook tutorial is self contained and separate from the documentation below.\n> [![Run in Livebook](https://livebook.dev/badge/v1/pink.svg)](https://livebook.dev/run?url=https%3A%2F%2Fgithub.com%2Fash-project%2Fash_tutorial%2Fblob%2Fmaster%2Foverview.livemd)","ref":"get-started.html#learn-with-livebook-tip","title":"Learn with Livebook {: .tip} - Get Started","type":"extras"},{"doc":"In this guide we will:\n\n1. Create a new Elixir application and add Ash as a dependency\n2. Create a simple set of resources and see how they can be used\n3. Go over some core concepts of Ash\n4. Find out what material might be good to visit next","ref":"get-started.html#goals","title":"Goals - Get Started","type":"extras"},{"doc":"If you want to follow along yourself, you will need the following things:\n\n1. [Elixir and Erlang installed](https://elixir-lang.org/install.html)\n2. A text editor to make the changes that we make\n3. A terminal to run the examples using `iex`","ref":"get-started.html#requirements","title":"Requirements - Get Started","type":"extras"},{"doc":"For this tutorial, we'll use examples based around creating a help desk.\n\nWe will make the following resources:\n\n- `Helpdesk.Support.Ticket`\n- `Helpdesk.Support.Representative`\n\nThe actions we will be able to take on these resources include:\n\n- Opening a new Ticket\n- Closing a Ticket\n- Assigning a Ticket to a representative","ref":"get-started.html#steps","title":"Steps - Get Started","type":"extras"},{"doc":"<!-- tabs-open -->","ref":"get-started.html#create-a-new-project","title":"Create a new project - Get Started","type":"extras"},{"doc":"First, to use `mix igniter.new`, the archive must be installed.\n\nTo install it, run\n\n```bash\nmix archive.install hex igniter_new\n```\n\nThen, create a new project:\n\n```elixir\nmix igniter.new helpdesk --install ash && cd helpdesk\n```\n\nIf you already know that you want to use Phoenix and Ash together, you can use\n\n```elixir\n# install the archive\nmix archive.install hex phx_new\n\n# use the `--with` flag to generate the project with phx.new and add Ash\nmix igniter.new helpdesk --install ash --with phx.new && cd helpdesk\n```\n\nIt is a good idea to make it a git repository and commit the initial project. You'll be able to see what changes we made, and can save your changes once we're done.\n\n```bash\n# Run in your terminal\ngit init\ngit add -A\ngit commit -m \"first commit\"\ngit branch -M main\n```\n\nOpen the project in your text editor, and we'll get started.\n\n>","ref":"get-started.html#using-igniter-recommended","title":"Using Igniter (recommended) - Get Started","type":"extras"},{"doc":">\n> Add the `--example` flag to get the example code add directly to your app!\n>\n> ```bash\n> mix igniter.new helpdesk --install ash --extend ets --example\n> ```\n>\n> Already know you want to use `AshPostgres`? Use the `--extend` argument.\n>\n> ```bash\n> mix igniter.new helpdesk --install ash,ash_postgres --example --extend postgres`\n> ```\n>\n> Want to start with a Phoenix app setup too? Use the `--with` argument.\n>\n> ```bash\n> mix archive.install hex phx_new\n>\n> mix igniter.new helpdesk \\\n>   --install ash,ash_postgres \\\n>   --with phx.new \\\n>   --extend postgres \\\n>   --example\n> ```\n>\n> If you generate this code, you can browse the rest of the guide, but the code shown will already be present in your application 🥳","ref":"get-started.html#want-to-skip-to-the-end-info","title":"Want to skip to the end? {: .info} - Get Started","type":"extras"},{"doc":"We first create a new project with the `--sup` flag to add a supervision tree. This will be necessary for other follow-up tutorials.\n\n```bash\n# In your terminal\nmix new --sup helpdesk && cd helpdesk\n```\n\nIt is a good idea to make it a git repository and commit the initial project. You'll be able to see what changes we made, and can save your changes once we're done.\n\n```bash\n# Run in your terminal\ngit init\ngit add -A\ngit commit -m \"first commit\"\ngit branch -M main\n```\n\nOpen the project in your text editor, and we'll get started.","ref":"get-started.html#using-mix","title":"Using Mix - Get Started","type":"extras"},{"doc":"Add the `ash` and `picosat_elixir` dependencies to your `mix.exs`\n\n```elixir\ndefp deps do\n  [\n    {:ash, \"~> 3.0\"},\n    {:picosat_elixir, \"~> 0.2\"}\n  ]\nend\n```\n\nAnd then run `mix deps.get && mix deps.compile` to install the dependencies\n\n#### Formatting\n\nTo ensure that your code stays formatted like the examples here, you can add `:ash` as an import dependency in your `.formatter.exs`:\n\n```elixir\n[\n  # ...\n  import_deps: [..., :ash],\n  # ...\n]\n```\n\n<!-- tabs-close -->\n\n>","ref":"get-started.html#add-ash-to-your-application","title":"Add Ash to your application - Get Started","type":"extras"},{"doc":">\n> If you have trouble compiling `picosat_elixir`, then replace `{:picosat_elixir, \"~> 0.2\"}` with `{:simple_sat, \"~> 0.1\"}` to use a simpler (but mildly slower) solver. You can always switch back to `picosat_elixir` later once you're done with the tutorial.\n\n> #### Note {: .neutral}\n>\n> For more auto-formatting options, see the [Development Utilities guide](/documentation/topics/development/development-utilities.md).\n\nAnd run `mix deps.get`, to install the dependency.","ref":"get-started.html#picosat-installation-issues-info","title":"Picosat installation issues? {: .info} - Get Started","type":"extras"},{"doc":"The basic building blocks of an Ash application are Ash resources. They are tied together by a domain module, which will allow you to interact with those resources.","ref":"get-started.html#building-your-first-ash-domain","title":"Building your first Ash Domain - Get Started","type":"extras"},{"doc":"Let's start by creating our first resource along with our first domain. We will create the following files:\n\n- The domain `Helpdesk.Support`, in `lib/helpdesk/support.ex`\n- Our Ticket resource `Helpdesk.Support.Ticket`, in `lib/helpdesk/support/ticket.ex`.\n\nTo create the required folders and files, you can use the following command in your terminal:\n\n```bash\nmkdir -p lib/helpdesk/support && touch $_/ticket.ex\ntouch lib/helpdesk/support.ex\n```\n\nYour project structure should now include the following files:\n\n```\nlib/\n├─ helpdesk/\n│  ├─ support/\n│  │  ├─ ticket.ex\n│  ├─ support.ex\n```\n\nAdd the following to the files we created\n\n```elixir\n# lib/helpdesk/support.ex\n\ndefmodule Helpdesk.Support do\n  use Ash.Domain\n\n  resources do\n    resource Helpdesk.Support.Ticket\n  end\nend\n```\n\n```elixir\n# lib/helpdesk/support/ticket.ex\n\ndefmodule Helpdesk.Support.Ticket do\n  # This turns this module into a resource\n  use Ash.Resource, domain: Helpdesk.Support\n\n  actions do\n    # Use the default implementation of the :read action\n    defaults [:read]\n\n    # and a create action, which we'll customize later\n    create :create\n  end\n\n  # Attributes are the simple pieces of data that exist on your resource\n  attributes do\n    # Add an autogenerated UUID primary key called `:id`.\n    uuid_primary_key :id\n\n    # Add a string type attribute called `:subject`\n    attribute :subject, :string\n  end\nend\n```\n\nNext, add your domain to your `config.exs`, and configure some backwards compatibility configuration.\n\nRun the following to create your `config.exs` if it doesn't already exist\n\n```elixir\nmkdir -p config\ntouch config/config.exs\n```\n\nand add the following contents to it.\n\n```elixir\n# in config/config.exs\nimport Config\n\nconfig :helpdesk, :ash_domains, [Helpdesk.Support]\n\nconfig :ash,\n  include_embedded_source_by_default?: false,\n  default_page_type: :keyset\n\nconfig :ash, :policies,\n  no_filter_static_forbidden_reads?: false\n```","ref":"get-started.html#creating-our-first-resource","title":"Creating our first resource - Get Started","type":"extras"},{"doc":"Run `iex -S mix` in your project's root directory and try out the following.\n\nTo create a ticket, we first make an `Ash.Changeset` for the `:create` action of the `Helpdesk.Support.Ticket` resource. Then we pass it to the `Ash.create!/1` function.\n\n```elixir\nHelpdesk.Support.Ticket\n|> Ash.Changeset.for_create(:create)\n|> Ash.create!()\n```\n\nThis returns what we call a `record` which is an instance of a resource.\n\n```elixir\n#Helpdesk.Support.Ticket<\n  ...,\n  id: \"c0f8dc32-a018-4eb4-8656-d5810118f4ea\",\n  subject: nil,\n  ...\n>\n```","ref":"get-started.html#try-our-first-resource-out","title":"Try our first resource out - Get Started","type":"extras"},{"doc":"One thing you may have noticed earlier is that we created a ticket without providing any input, and as a result our ticket had a `subject` of `nil`. Additionally, we don't have any other data on the ticket. Lets add a `status` attribute, ensure that `subject` can't be `nil`, and provide a better interface by giving the `:create` action a better name, and accepting `:subject` as part of the action.\n\nWe'll start with the attribute changes:\n\n```elixir\n# lib/helpdesk/support/ticket.ex\n\nattributes do\n  ...\n  attribute :subject, :string do\n    # Don't allow `nil` values\n    allow_nil? false\n\n    # Allow this attribute to be public. By default, all attributes are private.\n    public? true\n  end\n\n  # status is either `open` or `closed`. We can add more statuses later\n  attribute :status, :atom do\n    # Constraints allow you to provide extra rules for the value.\n    # The available constraints depend on the type\n    # See the documentation for each type to know what constraints are available\n    # Since atoms are generally only used when we know all of the values\n    # it provides a `one_of` constraint, that only allows those values\n    constraints [one_of: [:open, :closed]]\n\n    # The status defaulting to open makes sense\n    default :open\n\n    # We also don't want status to ever be `nil`\n    allow_nil? false\n  end\nend\n```\n\nAnd then replace the `:create` action with `:open`, and accept `:subject` as input.\n\n```elixir\n# lib/helpdesk/support/ticket.ex\n\nactions do\n  ...\n  create :open do\n    accept [:subject]\n  end\nend\n```\n\nLet's try these changes in `iex`:\n\nWe use `create!` with an exclamation point here because that will raise the error which gives a nicer view of the error in `iex`\n\n```elixir\n# Use this to pick up changes you've made to your code, or restart your session\nrecompile()\n\nHelpdesk.Support.Ticket\n|> Ash.Changeset.for_create(:open, %{subject: \"My mouse won't click!\"})\n|> Ash.create!()\n```\n\nAnd we can see our newly created ticket with a subject and a status.\n\n```elixir\n#Helpdesk.Support.Ticket<\n  ...\n  id: \"3c94d310-7b5e-41f0-9104-5b193b831a5d\",\n  status: :open,\n  subject: \"My mouse won't click!\",\n  ...\n>\n```\n\nIf we didn't include a subject, or left off the arguments completely, we would see an error instead\n\n```text\n** (Ash.Error.Invalid) Invalid Error\n\n* attribute subject is required\n```","ref":"get-started.html#customizing-our-actions","title":"Customizing our Actions - Get Started","type":"extras"},{"doc":"Now let's add some logic to close a ticket. This time we'll add an `update` action.\n\nHere we will use a `change`. Changes allow you to customize how an action executes with very fine-grained control. There are built-in changes that are automatically available as functions, but you can define your own and pass it in as shown below. You can add multiple, and they will be run in order. See the `Ash.Changeset` module documentation for more.\n\n```elixir\n# lib/helpdesk/support/ticket.ex\n\nactions do\n  ...\n  update :close do\n    # We don't want to accept any input here\n    accept []\n\n    validate attribute_does_not_equal(:status, :closed) do\n      message \"Ticket is already closed\"\n    end\n\n    change set_attribute(:status, :closed)\n    # A custom change could be added like so:\n    #\n    # change MyCustomChange\n    # change {MyCustomChange, opt: :val}\n  end\nend\n```\n\nTry out opening and closing a ticket in `iex`:\n\n```elixir\n# Use this to pick up changes you've made to your code, or restart your session\nrecompile()\n\n# parenthesis so you can paste into iex\nticket = (\n  Helpdesk.Support.Ticket\n  |> Ash.Changeset.for_create(:open, %{subject: \"My mouse won't click!\"})\n  |> Ash.create!()\n)\n\nticket\n|> Ash.Changeset.for_update(:close)\n|> Ash.update!()\n\n#Helpdesk.Support.Ticket<\n  ...\n  status: :closed,\n  subject: \"My mouse won't click!\",\n  ...\n>\n```","ref":"get-started.html#updates-and-validations","title":"Updates and validations - Get Started","type":"extras"},{"doc":"So far we haven't used a data layer that does any persistence, like storing records in a database. All that this simple resource does is return the record back to us. You can see this lack of persistence by attempting to use a `read` action:\n\n```elixir\nAsh.read!(Helpdesk.Support.Ticket)\n```\n\nWhich will raise an error explaining that there is no data to be read for that resource.\n\nIn order to save our data somewhere, we need to add a data layer to our resources. Before we do that, however, let's go over how Ash allows us to work against many different data layers (or even no data layer at all).\n\nResources without a data layer will implicitly be using `Ash.DataLayer.Simple`. This data is not persisted anywhere, and must be provided when running queries. It provides a utility for just this purpose, `Ash.DataLayer.Simple.set_data/2`.\n\nTry the following in `iex`. We will open some tickets, and close some of them, and then use `Ash.DataLayer.Simple.set_data/2` to use those tickets.\n\n```elixir\n# Ash.Query is a macro, so it must be required\nrequire Ash.Query\n\ntickets =\n  for i <- 0..5 do\n    ticket =\n      Helpdesk.Support.Ticket\n      |> Ash.Changeset.for_create(:open, %{subject: \"Issue #{i}\"})\n      |> Ash.create!()\n\n    if rem(i, 2) == 0 do\n      ticket\n      |> Ash.Changeset.for_update(:close)\n      |> Ash.update!()\n    else\n      ticket\n    end\n  end\n```\n\nFind the tickets where the subject contains `\"2\"`. Note that the we're setting the ticket data that we're querying using `set_data`.\n\n```elixir\nHelpdesk.Support.Ticket\n|> Ash.Query.filter(contains(subject, \"2\"))\n|> Ash.DataLayer.Simple.set_data(tickets)\n|> Ash.read!()\n```\n\nFind the tickets that are _closed_ and their subject does _not_ contain `\"4\"`\n\n```elixir\nHelpdesk.Support.Ticket\n|> Ash.Query.filter(status == :closed and not(contains(subject, \"4\")))\n|> Ash.DataLayer.Simple.set_data(tickets)\n|> Ash.read!()\n```\n\nThe examples above could be easily implemented with `Enum.filter`, but the real power here is to allow you to use the same tools when working with any data layer.\n\nEven though it doesn't persist data in any way, `Ash.DataLayer.Simple` can be useful to model static data, or be used for resources where all the actions are manual and inject data from other sources.","ref":"get-started.html#querying-without-persistence","title":"Querying without persistence - Get Started","type":"extras"},{"doc":"Before we get into working with relationships, let's add some real persistence to our resource. This will let us add relationships and try out querying data.\n\nThere is a built in data layer that is useful for testing and prototyping, that uses [ETS](https://elixir-lang.org/getting-started/mix-otp/ets.html). ETS (Erlang Term Storage) is OTP's in-memory database, so the data won't actually stick around beyond the lifespan of your program, but it's a simple way to try things out.\n\nTo add it to your resource, modify it like so:\n\n```elixir\n# lib/helpdesk/support/ticket.ex\n\nuse Ash.Resource,\n  domain: Helpdesk.Support,\n  data_layer: Ash.DataLayer.Ets\n```\n\nNow we can slightly modify our code above, by removing the `Ash.DataLayer.Simple.set_data/2` calls, and we can see our persistence in action. Remember, ETS is in-memory, meaning restarting your application/iex session will remove all of the data.\n\n```elixir\n# Use this to pick up changes you've made to your code, or restart your session\nrecompile()\n\nrequire Ash.Query\n\nfor i <- 0..5 do\n  ticket =\n    Helpdesk.Support.Ticket\n    |> Ash.Changeset.for_create(:open, %{subject: \"Issue #{i}\"})\n    |> Ash.create!()\n\n  if rem(i, 2) == 0 do\n    ticket\n    |> Ash.Changeset.for_update(:close)\n    |> Ash.update!()\n  end\nend\n\n# Show the tickets where the subject contains \"2\"\nHelpdesk.Support.Ticket\n|> Ash.Query.filter(contains(subject, \"2\"))\n|> Ash.read!()\n\n# Show the tickets that are closed and their subject does not contain \"4\"\nHelpdesk.Support.Ticket\n|> Ash.Query.filter(status == :closed and not(contains(subject, \"4\")))\n|> Ash.read!()\n```","ref":"get-started.html#adding-basic-persistence","title":"Adding basic persistence - Get Started","type":"extras"},{"doc":"Now we want to be able to assign a Ticket to a Representative. First, let's create the Representative resource:\n\n```elixir\n# lib/helpdesk/support/representative.ex\n\ndefmodule Helpdesk.Support.Representative do\n  # This turns this module into a resource using the in memory ETS data layer\n  use Ash.Resource,\n    domain: Helpdesk.Support,\n    data_layer: Ash.DataLayer.Ets\n\n  actions do\n    # Add the default simple actions\n    defaults [:read]\n\n    create :create do\n      accept [:name]\n    end\n  end\n\n  # Attributes are the simple pieces of data that exist on your resource\n  attributes do\n    # Add an autogenerated UUID primary key called `:id`.\n    uuid_primary_key :id\n\n    # Add a string type attribute called `:name`\n    attribute :name, :string do\n      # Make the attribute public in order to give a name when calling functions from `Ash.Changeset`.\n      public? true\n    end\n  end\n\n  relationships do\n    # `has_many` means that the destination attribute is not unique, therefore many related records could exist.\n    # We assume that the destination attribute is `representative_id` based\n    # on the module name of this resource and that the source attribute is `id`.\n    has_many :tickets, Helpdesk.Support.Ticket\n  end\nend\n```\n\nNow let's modify our Ticket resource to have the inverse relationship to the Representative.\n\n```elixir\n# lib/helpdesk/support/ticket.ex\n\nrelationships do\n  # belongs_to means that the destination attribute is unique, meaning only one related record could exist.\n  # We assume that the destination attribute is `representative_id` based\n  # on the name of this relationship and that the source attribute is `representative_id`.\n  # We create `representative_id` automatically.\n  belongs_to :representative, Helpdesk.Support.Representative\nend\n```\n\nFinally, let's add our new Representative resource to our domain module\n\n```elixir\n# lib/helpdesk/support.ex\n\nresources do\n ...\n resource Helpdesk.Support.Representative\nend\n```\n\nYou may notice that if you don't add the resource to your domain, or if you don't add the `belongs_to` relationship, that you'll get helpful errors at compile time. Helpful compile time validations are a core concept of Ash as we really want to ensure that your application is valid.","ref":"get-started.html#adding-relationships","title":"Adding relationships - Get Started","type":"extras"},{"doc":"The simplest way to work with belongs to relationships is to allow directly editing the underlying id field.\n\n>","ref":"get-started.html#working-with-relationships","title":"Working with relationships - Get Started","type":"extras"},{"doc":">\n> There are a wide array of options when managing relationships, and we won't cover all of them here. See the [Managing Relationships guide](/documentation/topics/resources/relationships.md#managing-relationships) for more.\n\nAdd the `assign` action to allow us to assign a Ticket to a Representative.\n\n```elixir\n# lib/helpdesk/support/ticket.ex\n\nupdate :assign do\n  accept [:representative_id]\nend\n```\n\nLet's try it out in our `iex` console!\n\nUse `recompile` to pick up changes you've made to your code, or just restart your session.\n\n```elixir\nrecompile()\n```","ref":"get-started.html#managing-relationships-tip","title":"managing relationships {: .tip} - Get Started","type":"extras"},{"doc":"```elixir\nticket = (\n  Helpdesk.Support.Ticket\n  |> Ash.Changeset.for_create(:open, %{subject: \"I can't find my hand!\"})\n  |> Ash.create!()\n)\n```","ref":"get-started.html#open-a-ticket","title":"Open a Ticket - Get Started","type":"extras"},{"doc":"```elixir\nrepresentative = (\n  Helpdesk.Support.Representative\n  |> Ash.Changeset.for_create(:create, %{name: \"Joe Armstrong\"})\n  |> Ash.create!()\n)\n```","ref":"get-started.html#create-a-representative","title":"Create a Representative - Get Started","type":"extras"},{"doc":"```elixir\nticket\n|> Ash.Changeset.for_update(:assign, %{representative_id: representative.id})\n|> Ash.update!()\n```","ref":"get-started.html#assign-that-representative-to-the-ticket","title":"Assign that Representative to the Ticket - Get Started","type":"extras"},{"doc":"What you've seen above barely scratches the surface of what Ash can do. In a lot of ways, it will look very similar to other tools that you've seen. If all that you ever used was the above, then realistically you won't see much benefit to using Ash.\n\nWhere Ash shines however, is all of the tools that can work _with_ your resources. You have the ability to extend the framework yourself, and apply consistent design patterns that enable unparalleled efficiency, power and flexibility as your application grows.\n\n#### Get Help\n\n- Check out [ElixirForum](https://elixirforum.com/c/ash-framework-forum)\n- Join our [Discord server](https://discord.gg/D7FNG2q)\n- Open a [GitHub issue](https://github.com/ash-project/ash/issues/new/choose)\n\n#### Persist your data\n\nSee [The AshPostgres getting started guide](https://hexdocs.pm/ash_postgres) to see how to back your resources with Postgres. This is highly recommended, as the Postgres data layer provides tons of advanced capabilities.\n\n#### Add a web API\n\nCheck out [AshJsonApi](https://hexdocs.pm/ash_json_api) and [AshGraphql](https://hexdocs.pm/ash_graphql) extensions to build APIs around your resource\n\n#### Authorize access and work with users\n\nSee the [Policies guide](/documentation/topics/security/policies.md) for information on how to authorize access to your resources using actors and policies.\n\n#### Clean up your code that uses Ash?\n\nCreating and using changesets manually can be verbose, and they all look very similar. Luckily, Ash has your back and can help you build high quality interfaces for you!\n\nCheck out the [Code Interface Guide](/documentation/topics/resources/code-interfaces.md) to derive things like `Helpdesk.Support.Ticket.assign!(representative.id)`","ref":"get-started.html#what-next","title":"What next? - Get Started","type":"extras"},{"doc":"# What is Ash?\n\nAsh is an opinionated, composable set of application building blocks designed for extensibility. It shines when building web apps, APIs and services (though it can be used for any kind of Elixir application). It has integrations for Phoenix, LiveView, Postgres, GraphQL, Oban, and many more.\n\nTo achieve this Ash provides a \"Resource\" abstraction you use to model the heart of your application. These resources then determine the database schema, API endpoints, state machines, background jobs, and more. Resources are the source of truth for your entire application, and everything stems from them.\n\nAsh is a declarative framework with deep extensibility. We provide a suite of extensions informed from building production apps, as well as a toolkit so you can build your own. We provide escape hatches ranging from the simple and small to the ability to override large pieces of behavior. Your Ash application is just an Elixir application, so if you want to do something completely custom then Ash won’t get in your way.\n\nIt is not a web framework, like Phoenix or Rails. It is a framework for building your application layer, independent of how it is exposed or consumed. It is not an **alternative** to frameworks like Phoenix, rather a **complement** to them.\n\n> #### Model your domain, derive the rest {: .info}\n>\n> Ash derives significant portions of your application directly from your resources, with little to no effort required. This allows you to focus on what matters most: your business logic.\n> We leverage the best of the Elixir ecosystem under the hood, providing a single unified tool-chain for our users.\n\n---\n\nA good analogy is design systems in the world of web development. When you use a design system, you get a set of components that are designed to work together, and you can build your application by combining these components in different ways. Ash is like a design system for your application's domain model.\n\nOr, for a less technical analogy, Ash is like a fully stocked workshop. When you arrive at the workshop, you may need to learn where everything is, but once you do, you have everything you need to build anything you can dream up.","ref":"what-is-ash.html","title":"What is Ash?","type":"extras"},{"doc":"The fundamental idea behind Ash is that when the various components of your system can have consistent expectations of how the other components around them work, you can ultimately do a significant amount more, with less. For example, once you've defined your resources, it takes only a few additional lines of code to have your database structure generated, and a full featured API built around it.\n\nAsh has many use cases, with varying degrees of complexity. Ash helps you on day 1 of your project, removing boiler plate and allowing you to focus on the essential complexity of your application. It also helps you on year 5, lending consistency, code reuse, and maintainability.\n\n> #### Ash is a force multiplier {: .tip}\n>\n> Things that once took days or weeks can be done in hours, and to a degree of quality that would have been unreasonable before. Entire classes of bugs are eliminated. And the best part is, you can do all of this without sacrificing the flexibility, robustness and ecosystem that Elixir is known for.","ref":"what-is-ash.html#why-should-i-use-it","title":"Why should I use it? - What is Ash?","type":"extras"},{"doc":"","ref":"what-is-ash.html#watch-the-elixirconf-2023-talk","title":"Watch the ElixirConf 2023 Talk - What is Ash?","type":"extras"},{"doc":"# Design Principles\n\nThe design principles behind Ash allows us to build an extremely flexible and powerful set of tools, without locking users into specific choices at any level. The framework acts as a spinal cord for your application, with extension points at every level to allow for custom behavior. What follows are the core tenets behind Ash Framework.","ref":"design-principles.html","title":"Design Principles","type":"extras"},{"doc":"\"Anything, not Everything\" means building a framework capable of doing anything, not providing a framework that already does everything. The first is possible, the second is not. Our primary goal is to provide a framework that _unlocks_ potential, and frees developers to work on the things that make their application special.\n\nTo this end, there are many prebuilt extensions to use, but there is also a rich suite of tools to build your _own_ extensions. In this way, you can make the framework work for you, instead of struggling to fit your application to a strictly prescribed pattern. Use as much of Ash as you can, and leverage the amazing Elixir ecosystem for everything else.","ref":"design-principles.html#anything-not-everything","title":"Anything, not Everything - Design Principles","type":"extras"},{"doc":"The real superpower behind Ash is the declarative design pattern. All behavior is driven by explicit, static declarations. A resource, for example, is really just a configuration file. On its own it does nothing. It is provided to code that reads that configuration and acts accordingly.\n\nYou can read more about some simple declarative design patterns outside of the context of Ash Framework in [An Incremental Approach to Declarative Design](https://zachdaniel.dev/incremental-declarative-design).","ref":"design-principles.html#declarative-introspectable-derivable","title":"Declarative, Introspectable, Derivable - Design Principles","type":"extras"},{"doc":"While convention has value, we believe that explicit configuration ultimately leads to more discoverable, maintainable and flexible applications than a convention driven approach. This means that we never do things like assume that files with a given name are a certain type of thing, or that because a file is in a certain location, it should perform a specific function.","ref":"design-principles.html#configuration-over-convention","title":"Configuration over Convention - Design Principles","type":"extras"},{"doc":"While Ash does have lofty goals and a roadmap, the priority for development is always what the _current_ users of Ash need or are having trouble with. We focus on simple, pragmatic, and integrated solutions that meld well with the rest of the framework.\n\nA high priority is placed on ensuring that our users don't experience feature whip-lash due to poorly thought out implementations, and that any breaking changes (a rare occurrence) have a clean and simple upgrade path. This is something made much easier by the declarative pattern.","ref":"design-principles.html#pragmatism-first","title":"Pragmatism First - Design Principles","type":"extras"},{"doc":"The Ash community comes together and collaborates to make sure that we can all build our software quickly, effectively and in a way that will age gracefully. We have a strict code of conduct, and love working with people of any experience level or background. To experience this first-hand, participate on [ElixirForum](https://elixirforum.com/c/elixir-framework-forums/ash-framework-forum/123) or join our [discord](https://discord.gg/D7FNG2q)!\n\n>","ref":"design-principles.html#community","title":"Community - Design Principles","type":"extras"},{"doc":">\n>  Ash is _not_ a Domain Driven Design framework, if we're talking about \"proper\" Domain Driven Design as it is taught and discussed today. Domain Driven Design comes with a considerable amount of baggage and unnecessary complexity. While we identify with the *goals* of Domain Driven Design, we believe that a simpler approach is more effective, and that much of what DDD teaches are actually _implementation_ details, and not _design_ concepts. If the name wasn't taken, we would surely have claimed it for ourselves. If you must have a similar term for Ash, consider it a \"Resource-oriented, Declarative Design Application Framework\".","ref":"design-principles.html#domain-driven-design-info","title":"Domain Driven Design? {: .info} - Design Principles","type":"extras"},{"doc":"# Contributing to Ash","ref":"contributing-to-ash.html","title":"Contributing to Ash","type":"extras"},{"doc":"We are delighted to have anyone contribute to Ash, regardless of their skill level or background. We welcome contributions both large and small, from typos and documentation improvements, to bug fixes and features. There is a place for everyone's contribution here. Check the issue tracker or join the ElixirForum/discord server to see how you can help! Make sure to read the rules below as well.","ref":"contributing-to-ash.html#welcome","title":"Welcome! - Contributing to Ash","type":"extras"},{"doc":"- We have a zero tolerance policy for failure to abide by our code of conduct. It is very standard, but please make sure\n  you have read it.\n- Issues may be opened to propose new ideas, to ask questions, or to file bugs.\n- Before working on a feature, please talk to the core team/the rest of the community via a proposal. We are\n  building something that needs to be cohesive and well thought out across all use cases. Our top priority is\n  supporting real life use cases like yours, but we have to make sure that we do that in a sustainable way. The\n  best compromise there is to make sure that discussions are centered around the _use case_ for a feature, rather\n  than the proposed feature itself.\n- Before starting work, please comment on the issue and/or ask in the discord if anyone is handling an issue. Be aware that if you've commented on an issue that you'd like to tackle it, but no one can reach you and/or demand/need arises sooner, it may still need to be done before you have a chance to finish. However, we will make all efforts to allow you to finish anything you claim.","ref":"contributing-to-ash.html#rules","title":"Rules - Contributing to Ash","type":"extras"},{"doc":"# Alternatives\n\nThere aren't really any alternatives to Ash that we are aware of that do all of the same things, but there are many different packages out there that do some of the things that Ash does.\n\nThis is a living document, and is not comprehensive. We are not *vouching* for any of these packages, but rather listing them here for your convenience to investigate on your own.\n\nWant to add or edit this list? Open a [pull request](https://github.com/ash-project/ash/edit/main/documentation/topics/about_ash/alternatives.md) Want a more comprehensive list? Check out the [Awesome Elixir](https://github.com/h4cc/awesome-elixir).","ref":"alternatives.html","title":"Alternatives","type":"extras"},{"doc":"These frameworks have similar overarching goals of helping you build your application layer.\n\n- [Commanded](https://hexdocs.pm/commanded) - An event sourced application framework.\n- [Sleeky](https://hexdocs.pm/sleeky) - Billed as a lightweight alternative to Ash. Inspired by Ash, but more tightly built on top of ecto.","ref":"alternatives.html#application-frameworks","title":"Application Frameworks - Alternatives","type":"extras"},{"doc":"- [Boundary](https://hexdocs.pm/boundary) - A library for defining boundaries in your application.\n- [Phoenix Contexts](https://hexdocs.pm/phoenix/contexts.html) - Phoenix ships with a concept called \"contexts\", which provide some generators with application design guidance.","ref":"alternatives.html#application-design","title":"Application Design - Alternatives","type":"extras"},{"doc":"- [Absinthe](https://hexdocs.pm/absinthe) - A GraphQL toolkit for Elixir. This is what `AshGraphql` uses under the hood, but you can also use Absinthe directly.\n- [Phoenix](https://hexdocs.pm/phoenix) - Phoenix is a web framework for Elixir. It is not necessarily an API framework, but has all the tools you need to build APIs by hand.\n- [JSONAPI Elixir](https://hexdocs.pm/jsonapi) - A library for building JSONAPI compliant APIs in Elixir on top of Ecto.\n- [Open API Spex](https://github.com/open-api-spex) - A library for generating OpenAPI (Swagger) documentation for your API. We generate these for you in AshJsonApi, but you can use this library to build open api specifications of your hand-written API","ref":"alternatives.html#building-apis","title":"Building APIs - Alternatives","type":"extras"},{"doc":"- [Ecto](https://hexdocs.pm/ecto) - Ecto is a database wrapper and query generator for Elixir. In many cases, Ash uses Ecto under the hood, but it is also available to build on top of directly.\n- [Flop](https://hexdocs.pm/flop) - A library designed to easily apply filtering, ordering, and pagination to Ecto queries.","ref":"alternatives.html#working-with-data","title":"Working with Data - Alternatives","type":"extras"},{"doc":"- [mix phx.gen.auth](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.Auth.html) - A mix task that generates authentication for a Phoenix application. Some folks prefer to use this over `AshAuthentication` even if they are using Ash.\n- [Assent](https://hexdocs.pm/assent) - Multi-provider authentication framework.","ref":"alternatives.html#authentication","title":"Authentication - Alternatives","type":"extras"},{"doc":"- [Bodyguard](https://hexdocs.pm/bodyguard) - A phoenix-context-based policy authorization framework.","ref":"alternatives.html#authorization","title":"Authorization - Alternatives","type":"extras"},{"doc":"- [Ecto](https://hexdocs.pm/ecto) - Ecto can be used to validate data at the edge, using things like schema-less changesets.\n- [Drops](https://hexdocs.pm/drops) - a collection of small modules that provide useful extensions and functions that can be used to work with data effectively.\n- [GuardedStruct](https://github.com/mishka-group/mishka_developer_tools/blob/master/guidance/guarded-struct.md) - validation, sanitization, and construction of structs, supporting nested structs.","ref":"alternatives.html#validation","title":"Validation - Alternatives","type":"extras"},{"doc":"# Changelog\n\n<!-- changelog -->\n\n## [v3.4.8](https://github.com/ash-project/ash/compare/v3.4.7...v3.4.8) (2024-09-09)","ref":"changelog.html","title":"Changelog","type":"extras"},{"doc":"- [`Ash.Policy.Authorizer`] support passing a forbidden error for policy breakdowns per the docs\n\n- [`Ash.Policy.Authorizer`] don't report the action as the actor for policy breakdowns\n\n- [`Ash.Changeset`] check `changeset.action` before raising a required primary action error\n\n- [bulk actions] ensure proper return types for `:stream` strategy bulk update/destroys\n\n## [v3.4.7](https://github.com/ash-project/ash/compare/v3.4.6...v3.4.7) (2024-09-06)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [`Ash.Resource.Igniter`] add `add_bypass` and `add_policy` igniter utilities\n\n## [v3.4.6](https://github.com/ash-project/ash/compare/v3.4.5...v3.4.6) (2024-09-06)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [loading relationships] don't select destination attributes that don't exist\n\n- [`Ash.Filter.Runtime`] properly pass actor when running filters at runtime\n\n- [`Ash.Type.Struct`] misplaced curly bracket when handling struct type casting\n\n- [bulk/atomic updates] properly leverage atomic upgrade read action for an update action","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [`Ash.Policy.Authorizer`] show informative error explaining the use of filter checks with create actions\n\n- [`Ash.Policy.Authorizer`] show the actor's primary key in policy breakdowns\n\n- [`Ash.Policy.Authorizer`] add an expanded description option to checks\n\n- [`Ash.Policy.Authorizer`] use expanded description to display filled in filter templates in policy breakdowns\n\n- [`Ash.Changeset` ] Add `Ash.Changeset.is_valid/1` guard. (#1437)\n\n## [v3.4.5](https://github.com/ash-project/ash/compare/v3.4.4...v3.4.5) (2024-09-05)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [update actions] fix type definition for `atomic_upgrade_with`\n\n## [v3.4.4](https://github.com/ash-project/ash/compare/v3.4.3...v3.4.4) (2024-09-05)\n\n## [v3.4.3](https://github.com/ash-project/ash/compare/v3.4.2...v3.4.3) (2024-09-04)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [loading relationships] properly await tasks from lazy loading multiple relationships\n\n## [v3.4.2](https://github.com/ash-project/ash/compare/v3.4.1...v3.4.2) (2024-09-04)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [soft destroys] honor `return_destroyed?` in soft destroy actions\n\n- [`Ash.Resource.Change`] correctly handle return values of batch callbacks (#1424)\n\n- [read actions] ensure that async limiter is cleared up front\n\n- [bulk creates] honor bulk upsert condition (#1432)\n\n- [bulk updates] ensure that update_defaults are set on streaming updates\n\n- [bulk actions] honor `skip_global_validations?` in bulk actions\n\n- [pagination] honor the `countable` option in pagination\n\n- [read actions] return proper data shape when doing a read in a transaction\n\n- [notifications] ensure that `from` is properly set on all notifications\n\n- [notifications] fix typo in bulk destroy not clearing ash_started_transaction state\n\n- [calculations] traverse calculated relationships when rewriting transient calculation values\n\n- [calculations] don't unload calculation dependencies when `lazy?` is set\n\n- [`Ash.DataLayer.Ets`] handle no_attributes when joining lateral join relationship data\n\n- [`Ash.DataLayer.Ets`] fix ets lateral join source field usage\n\n- [`Ash.DataLayer.Ets`] properly apply distinct in ets","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"These configurations default to the current behavior, but in 4.0 (someday) will\nbe removed, and the new option will be the only option.\n\n- [pagination] make default page type configurable, defaulting to `:offset`.\n\n```elixir\n# set this configuration to adopt the new preferred behavior\nconfig :ash,\n  default_page_type: :keyset\n```\n\n- [`Ash.Policy.Authorizer`] make read policies more consistent, always preferring to filter over raise\n\nCurrently, some read actions can still return a `Forbidden` error, even\nthough policies are meant to filter out records by default. Now, it will always\nfilter, unless you set `access_type :strict` in the policy.\n\n```elixir\n# set this configuration to adopt the new preferred behavior\nconfig :ash, :policies,\n  no_filter_static_forbidden_reads?: false\n```","ref":"changelog.html#improvements-with-backwards-compatibility-configurations","title":"Improvements with backwards compatibility configurations - Changelog","type":"extras"},{"doc":"- [`Ash.Policy.Authorizer`] show an explanation when a forbidden is because no policies applied\n\n- [`Ash.Policy.Authorizer`] error at compile for bypasses that will have no effect\n\n- [`Ash.Resource.ManualRead`] add `load_relationships/5` callback to manual reads\n\n- [`mix ash.gen.resource`] add `uuid-v7-primary-key` option to `mix ash.gen.resource`\n\n- [`Ash.Resource.Change.CascadeUpdate`] add cascade update built in change (#1398)\n\n- [`Ash.Resource.Change.CascadeDestroy`] add `read_action` option to `cascade_destroy`\n\n- [inline aggregates] support `expr` and `expr_type` options when building aggregates\n\n- [create actions] Implement condition for upsert (#1386)\n\n- [optimization] do not add relationship filter when building relationship authorization\n\n- [optimization] don't list telemetry handlers if app is compiling\n\n- [optimization] do not call tracer `set_metadata` with span type that it ignores (#1400)\n\n- [optimization] optimize filter expr traversal\n\n- [optimization] Add a case for handling mapsets in Filter.map (#1427)\n\n- [optimization] Cache always selected fields and use mapsets for building select list (#1428)\n\n- [optimization] add pattern for Ash.Query.Call in Filter.map (#1416)\n\n- [optimization] prevent unnecessary calls to `Ash.load`\n\n- [optimization] cache action known inputs individually\n\n- [optimization] cache action required inputs all together\n\n- [optimization] optimize to avoid inspects in changesets\n\n- [optimization] optimize to avoid expensive `String.valid?` check in uuid type\n\n- [optimization] add `async?` option to calculations, default to false\n\n- [optimization] optimize field checking for loading fields in query\n\n- [optimization] allow functions in tracers for lazy loading metadata\n\n- [optimization] don't start processes for single items in list\n\n- [optimization] Optimize option validation with compile time validators (#1387)\n\n## [v3.4.1](https://github.com/ash-project/ash/compare/v3.4.0...v3.4.1) (2024-08-13)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [authorization] properly pass actor, action, tenant etc. to lazy loaded relationships\n\n## [v3.4.0](https://github.com/ash-project/ash/compare/v3.3.3...v3.4.0) (2024-08-12)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [`Ash.Policy.Authorizer`] add policy groups\n\n- [authorization] support `authorize_with` option on `Ash.read`, allowing to error if any forbidden matching data exists\n\n- [`Ash.Resource`] Add `@type t` typespec to resource if it doesn't exist","ref":"changelog.html#features","title":"Features: - Changelog","type":"extras"},{"doc":"- [calculations] remove pattern match error when exceptions come from calculations\n\n- [calculations] resolve nested expression calculation references in runtime filters\n\n- [arrays] Fix error with nil value on structure types (#1380)\n\n- [bulk actions] Pass options without :templated tuple to after_batch (#1376)\n\n- [bulk actions] `after_batch` arguments for `bulk_create` with `return_records?` disabled (#1371)\n\n- [bulk actions] set `upsert?` option when managing relationships in bulk creation\n\n- [`Ash.Resource`] check for `nil` resource_calculation in `Ash.Resource.loaded?/2`\n\n- [`Ash.Expr`] properly consider not-loaded record calculations as `:unknown`\n\n- [atomic updates] handle `nil` in atomic array casting\n\n- [aggregates] respect previously validated-for-action query for aggregates\n\n- [`mix ash.gen.resource`] use `timestamps()` instead of `timestamps`\n\n- [belongs_to relationships] prefer `source_attribute` is required, instead of relationship name","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [performance] optimizations around allocating strings\n\n- [performance] optimizations around list operations for embedded resources\n\n- [performance] prune calculations made unnecessary by field policies\n\n- [performance] add optimized path for casting embeds when they are simple\n\n- [performance] add `include_embedded_source_by_default?` config to optimize embeds\n\n- [error messages] show proper error message when trying to accept non-writable attributes\n\n- [error messages] add \"hints\" to `NoSuchInput` errors to make any errors clearer\n\n- [`Ash.Expr`] warn on usage of `== nil`\n\n- [`Ash.Expr`] implement `Comp` for atoms & strings, comparing atoms as strings\n\n- [embedded resources] increase cases where embedded attribute can be updated atomically\n\n- [`Ash.Type.Struct`] support `:fields` constraint on `:struct` type, enabling persistence\n\n- [bulk actions] Warn on bulk action `return_stream?` without any other `return_*?` options enabled. (#1370)\n\n- [calculations] ensure the called calculation function is always in the stacktrace\n\n- [dependencies] remove `:comparable` as a dependency\n\n- [`Ash.Resource`] Add default values to resulting Resource struct (#1364)\n\n## [v3.3.3](https://github.com/ash-project/ash/compare/v3.3.2...v3.3.3) (2024-08-01)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- delete ash_notifications from pdict after reading\n\n## [v3.3.2](https://github.com/ash-project/ash/compare/v3.3.1...v3.3.2) (2024-08-01)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [`Ash.Igniter`] properly parse multiple occurrences of :keep arguments\n\n- [calculations] properly key nested calculations and add additional tests\n\n- [calculations] pass relationship path down when merging query loads\n\n- [`mix ash.codegen`] don't set `--name nil` when calling codegen tasks\n\n- [`Ash.Filter`] fix behavior of synthesized joins across data layers","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [`mix ash.gen.resource`] add `--timestamps` argument to add timestamps to the resource\n\n## [v3.3.1](https://github.com/ash-project/ash/compare/v3.3.0...v3.3.1) (2024-07-30)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [`mix ash.gen.domain`] properly parse domain module in `mix ash.gen.domain`\n\n- [`Ash.Resource.Change`, `Ash.Resource.Validation`] properly handle mixed atomic & non-atomic validations/changes\n\n- [`Ash.Filter`] properly find data layer predicates when name is provided as a string\n\n- [relationships] set `accessing_from` and join read action for many_to_many relationships correctly (#1355)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [`Ash.Resource.Change`] implement `change/3` automatically if batch callbacks are defined\n\n## [v3.3.0](https://github.com/ash-project/ash/compare/v3.2.6...v3.3.0) (2024-07-27)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [`Ash.Type.File`] Add Ash.Type.File (#1337)","ref":"changelog.html#features","title":"Features: - Changelog","type":"extras"},{"doc":"- [bulk actions] ensure that statuses are set correctly on bulk actions\n\n- [bulk actions] properly transfer process context(tracers) for bulk actions\n\n- [embedded resources] properly display identity/primary key mismatch error on lists of embeds\n\n- [`Ash.Type.NewType`] apply constraints to NewType even when casting an array (#1341)\n\n- [`Ash.Query`] pass reuse_values? true when loading in Ash.Query.apply_to/2 (#1346)\n\n- [code interfaces] honor `skip_unknown_inputs` in code interfaces\n\n- [notifications] don't gather notifications except for in the top level transaction starter\n\n- [generic actions] support `skip_unknown_inputs` on generic actions\n\n- [atomic updates] ensure `changed?` context is set on atomic changesets (we assume it is `true`, its up to extensions to handle)\n\n- [`Ash.Type.CiString`, `Ash.Type.String`] Update string/ci_string generators to ensure min_length (#1335)\n\n- [`Ash`] handle `{record, action, input}` types in `Ash.can?`\n\n- [bulk actions] only call `batch_change` if it is defined, never `change` in bulk create","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [`mix ash.gen.resource`] better positional argument handling with igniter\n\n- [`Ash.Expr`] use `:utc_datetime_usec` for `now()` return type\n\n- [`mix ash.install`] don't install sat solver in initial installation\n\n- [`Ash.Policy.Authorizer`] validate that a solver exists at compile time when using policies\n\n- [`Ash.Type.Enum`] Expose type t() on Ash.Type.Enum implementations (#1338)\n\n- [`Ash.Resource`] add :\\* as a valid value in `skip_unknown_inputs`\n\n- [`Ash.Resource`] add `skip_unknown_inputs` to individual actions\n\n- [embedded resources] add `skip_unknown_inputs` constraint to embedded resources\n\n- [embedded resources] automatically fall back to a default domain when working with embeds\n\n- [`Ash`] handle 3 tuple in `Ash.can?`\n\n- [`Ash.Error`] add `Ash.Error.error_descriptions`\n\n## [v3.2.6](https://github.com/ash-project/ash/compare/v3.2.5...v3.2.6) (2024-07-22)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [bulk actions] fallback to `authorize_with` when authorizing bulk destroy actions\n\n- [bulk actions] don't refer to non-existent `batch_change/4`","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [bulk actions] Replace incorrect function_exported?-checks in bulk-actions, add has-defs for change modules (#1330)\n\n## [v3.2.5](https://github.com/ash-project/ash/compare/v3.2.4...v3.2.5) (2024-07-22)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [destroy actions] apply atomic validations on non-bulk destroy actions\n\n- [`Ash.Policy.Info`] add default to private_fields_policy in Ash.Policy.Info (#1329)\n\n- [relating_to_actor] make `relating_to_actor` built-in-check aware of atomics\n\n- [`Ash.Expr`] remove redundant overload of `Ash.Expr.get_path` (#1328)\n\n- [`Ash.Type.NewType`] cast_input/2 of Ash.Type.NewType returning :ok (#1324)\n\n- [`Ash.Reactor`] warnings emitted by removed reactor behaviour function. (#1325)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [bulk actions] add `authorize_with` fallback option to bulk actions\n\n- [`Ash.Policy.Authorizer`] allow policy conditions to be applied inside their block\n\n## [v3.2.4](https://github.com/ash-project/ash/compare/v3.2.3...v3.2.4) (2024-07-18)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [transaction hooks] fix warning on transaction hooks violating their semantics\n\n## [v3.2.3](https://github.com/ash-project/ash/compare/v3.2.2...v3.2.3) (2024-07-18)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [`mix ash.patch.extend`] properly convert extension string into a module\n\n- [`mix ash.patch.extend`] only display available to extend\n\n- [`mix ash.install`] mix igniter.install ash --example case clause error (#1317)\n\n- [multitenancy] only use attribute for filtering when multitenancy strategy == :attribute","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [`Ash.Resource.Igniter`] Add `Ash.Resource.Igniter.domain` to get the domain of a resource\n\n## [v3.2.2](https://github.com/ash-project/ash/compare/v3.2.1...v3.2.2) (2024-07-17)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [`Ash.Reactor`] Add ash_step wrapper (#1311)","ref":"changelog.html#features","title":"Features: - Changelog","type":"extras"},{"doc":"- [bulk destroys] honor atomic validations in destroy actions using `filter`\n\n- [Ash.Type.Vector] handle casting nil vectors (#1316)\n\n- [Ash.Type] don't override `nil` handling in `Ash.Type.cast_input/3`\n\n## [v3.2.1](https://github.com/ash-project/ash/compare/v3.2.0...v3.2.1) (2024-07-17)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- properly honor the `include_nil?` option\n\n- store after_action hooks added outside of changes for atomic upgrade\n\n- don't use `type/3` in string interpolation\n\n- properly pass `include_nil?` from when building query aggregates","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- allow skipping initialization of types in unions\n\n## [v3.2.0](https://github.com/ash-project/ash/compare/v3.1.8...v3.2.0) (2024-07-15)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [field policies] Allow field policies to hide private fields (#1289)\n\nUse the `private_fields :include | :show | :hide` option in the `field_policies` section of your resource to control how private fields are handled by field policies.\n\nFor example:\n\n```elixir\n# hide all private fields when authorizing\nfield_policies :hide\n\n# the current behavior. Private fields are ignored by field policies\nfield_policies :show\n\n# private fields can have field policies like any other field\nfield_policies :include\n```","ref":"changelog.html#features","title":"Features: - Changelog","type":"extras"},{"doc":"- [`Ash.Domain.Igniter`] add `Ash.Domain.Igniter.list_domains/1`\n\n- [`Ash.Resource.Igniter`] add `Ash.Resource.Igniter.list_resources/1`\n\n## [v3.1.8](https://github.com/ash-project/ash/compare/v3.1.7...v3.1.8) (2024-07-14)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [bulk actions] use `unpaginated_read` when simulating streaming for low limit queries\n\n## [v3.1.7](https://github.com/ash-project/ash/compare/v3.1.6...v3.1.7) (2024-07-14)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Query] don't use `:same` return type for most operators\n\n- [Ash.Query] don't use returns as basis type unless explicitly allowed\n\n## [v3.1.6](https://github.com/ash-project/ash/compare/v3.1.5...v3.1.6) (2024-07-14)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Query] ensure `today` has properly configured returns type\n\n- [Ash.Type] module type apply_constraints for nil fix (#1313)\n\n## [v3.1.5](https://github.com/ash-project/ash/compare/v3.1.4...v3.1.5) (2024-07-14)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Type] don't specify that `get_path` is a predicate function","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Expr] add `Ash.Expr.determine_type(mod, children)`\n\n- [Ash.Query] add return typing to functions\n\n## [v3.1.4](https://github.com/ash-project/ash/compare/v3.1.3...v3.1.4) (2024-07-13)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [code interface] properly omit destroyed result in code interfaces\n\n- [Ash.Type.Integer] properly compare `expr` to `min` with `min` integer constraint\n\n- [Ash.Reactor] Make action ctx-values from reactor-ctx take precedence if set. (#1308)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Resource.Change] support returning a list of atomics from atomic change callbacks\n\n- [Ash.Type] add `cast_atomic_constraints` callback and use it in core types\n\n- [Ash.Expr] improve type signature for `if/3`\n\n- [Ash.Expr] simpler and/or short circuiting\n\n## [v3.1.3](https://github.com/ash-project/ash/compare/v3.1.2...v3.1.3) (2024-07-11)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [bulk actions] ensure that errors in queries do not raise in atomic upgrades/single atomics\n\n- [Ash.Type.Integer] use correct contraint when validating min int (#1298)\n\n- [Ash.Filter] don't refer to private attributes when parsing filter inputs that refer to relationships (#1280)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Query] add `strict?` option to `Ash.Query.load` (#1302)\n\n## [v3.1.2](https://github.com/ash-project/ash/compare/v3.1.1...v3.1.2) (2024-07-10)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [bulk actions] ensure that manual action configurations are honored for bulk actions\n\n## [v3.1.1](https://github.com/ash-project/ash/compare/v3.1.0...v3.1.1) (2024-07-10)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [ash.install] installer doesn't need to add spark as a dependency, just run its installer\n\n## [v3.1.0](https://github.com/ash-project/ash/compare/v3.0.16...v3.1.0) (2024-07-09)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Generators] add `mix ash.install` (call with `mix igniter.install ash`)\n\n- [Generators] add `mix ash.gen.resource`\n\n- [Generators] add `mix ash.gen.base_resource`\n\n- [Generators] add `mix ash.gen.domain`\n\n- [Generators] add `mix ash.extend`\n\n- [Ash.Type.UUIDv7] Add built in `Ash.Type.UUIDv7` type, and `uuid_v7_primary_key` builder","ref":"changelog.html#features","title":"Features: - Changelog","type":"extras"},{"doc":"- [atomics] sort primary key changes ahead of others in atomic changes\n\n- [Ash.Changeet] fix typespec for Changeset.around_transaction/2 (#1292)\n\n- [multitenancy] ensure tenancy is always enforced on create/update/destroy actions\n\n- [loading relationships] lateral join on `from_many? true` relationships\n\n- [calculations] don't reuse calculations/aggregates if `authorize?` is true\n\n- [aggregates] ensure aggregate context is fully configured in `Ash.aggregate`\n\n- [bulk actions] properly transfer changeset.context on streamed batch changesets\n\n- [bulk actions] ensure notifications are dispatched from bulk actions\n\n- [lazy loading] lazy-loading logic for calculations/aggregates was inversed (#1275)\n\n- [error handling] properly match on async task exceptions\n\n- [policies] ensure `context` is available in policy template expressions\n\n- [policies] ensure forbidden errors behave the same when using implicit bulk version of code interface functions\n\n- [manual relationships] compare keys in manual relationships when using 'complex' types (#1270)\n\n- [Ash.Filter] cover more cases in filter input parsing (#1261)\n\n- [has_one relationships] automatically set `from_many?` if a `has_one` has a `sort` applied\n\n- [Ash.Filter] fix match error when synthesizing joins across data layers\n\n- [Ash.DataLayer.Ets] properly support multitenancy when referencing relationships\n\n- [Ash.Type.Union] initialize & validate each subtype of a union","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Type.Enum] allow overriding `cast_stored/2` and `dump_to_native/2`\n\n- [Ash.DataLayer.Simple] support offset in the simple data layer\n\n- [Ash.Changeset] allow after_action hooks in fully atomic changesets\n\n## [v3.0.16](https://github.com/ash-project/ash/compare/v3.0.15...v3.0.16) (2024-06-21)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [bulk updates] use the proper opts when calling manual updates in bulk updates\n\n- [pagination] apply pagination at runtime for non lateral join queries\n\n- [multitenancy] consider multitenancy when checking if through-join is unique\n\n- [Ash.Changeset] don't run any `before_action` hooks if changeset is invalidated in prior hook\n\n- [atomic upgrade] only prevent atomic upgrade when hooks were explicitly added","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Error] retain error context on overridden messages\n\n## [v3.0.15](https://github.com/ash-project/ash/compare/v3.0.14...v3.0.15) (2024-06-18)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [Ash.Type] add optional `matches_type?/2` callback to `Ash.Type`\n\n- [Ash.Domain] add `backwards_compatible_interface?` option to `use Ash.Domain`\n\n## [v3.0.14](https://github.com/ash-project/ash/compare/v3.0.13...v3.0.14) (2024-06-18)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [many-to-many relationships] apply join relationship filter when loading many_to_many relationships\n\n- [Ash.Query] ensure we honor any computed select changes when loading through attributes","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Policy.Authorier] add `subject` and `context` keys to policy context\n\n## [v3.0.13](https://github.com/ash-project/ash/compare/v3.0.12...v3.0.13) (2024-06-17)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [parallelism] don't start async limiter tasks if async is disabled\n\n- [Ash.Domain] properly set default timeout to `:infinity`\n\n- [upserts] pass down `identity` when doing upserts, for new feature support\n\n- [Ash.Changeset] ensure that `before_transaction` hook errors fail the operation\n\n- [Ash.Changeset] ensure that `before_transaction` hook errors still trigger `after_transaction` hooks\n\n- [bulk updates] abort bulk updates on before transaction hook errors\n\n## [v3.0.12](https://github.com/ash-project/ash/compare/v3.0.11...v3.0.12) (2024-06-14)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [atomic updates] fix expression interpolation for cast_atomic for integer, decimal, float\n\n- [generic actions] set default argument values on generic actions\n\n- [generic actions] support `^arg/1` and similar constructions in filter policies on generic actions","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Resource] set a `module` when validating accepts\n\n## [v3.0.11](https://github.com/ash-project/ash/compare/v3.0.10...v3.0.11) (2024-06-11)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [loading through attributes] only apply load through for attributes that are being selected directly\n\n- [relationship loading] ensure we lateral join with `from_many?: true` or any `:many` cardinality relationships\n\n- [create/update/destroy actions] correctly load paginated relationships after create, update, delete (#1229)\n\n- [bulk create/update/destroy] load relationships on bulk operations (#1234)\n\n- [Ash.Type.Atom] return proper `{:ok, value}` from `Ash.Type.Atom.apply_constraints/2`\n\n- [Ash.Filter] fix the compare/2 implementations (#1232)\n\n- [Ash.Filter] return proper value from short-circuit filter hydration\n\n- [Ash.Seed] fix seed not working when :**keep_nil** is generated using seed_input (#1228)\n\n- [Ash.Generator] pass resource to Ash.Seed.seed! in Ash.Generator.seed! (#1227)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Resource] validate `require_attributes` (error) and `allow_nil_input` (warning) at compile time\n\n- [Ash.Seed] add tenant option to Ash.Seed.seed! (#1230)\n\n## [v3.0.10](https://github.com/ash-project/ash/compare/v3.0.9...v3.0.10) (2024-06-06)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [Ash.Union] ensure that union types w/ explicit tags have constraints applied\n\n- [multitenancy] don't update tenant on update, instead enforce it\n\n- [compare/2 validation] Do not compare nil values in `compare` validation (#1223)\n\n- [bulk actions] ensure context is properly set on bulk manual action invocations","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Resource] detect invalid resources placed in relationships on domains verifier\n\n- [Ash.Resource] warn at compile time on types that don't define `atomic_update/2`\n\n## [v3.0.9](https://github.com/ash-project/ash/compare/v3.0.8...v3.0.9) (2024-05-31)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [Ash.Filter] use correct boolean operation names in Filter.find/4 (#1214)\n\n- [aggregates] when hydrating nested aggregates, use correct related resource/path pair\n\n- [aggregates] retain `ref_path` when authorizing aggregates\n\n- [relationship loading] ensure that belongs_to relationships are properly not reloaded with `lazy?: true`\n\n- [bulk actions] implement rollback on after hooks for bulk actions\n\n- [bulk actions] check if in transaction before trying to roll it back","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- compatibility with elixir 1.17\n\n## [v3.0.8](https://github.com/ash-project/ash/compare/v3.0.7...v3.0.8) (2024-05-28)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [bulk updates] missing `else` caused manual updates not to work with `bulk_update`\n\n- [Ash.Policy.Authorizer] properly compose multiple filter-checks in policy conditions\n\n- [Ash.Policy.Authorizer] properly honor trailing policies that are constantly false","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Notifier] verify notifiers all use the `Ash.Notifier` behaviour\n\n## [v3.0.7](https://github.com/ash-project/ash/compare/v3.0.6...v3.0.7) (2024-05-24)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [identities] support `nils_distinct?` on identities\n\n- [identties] support `where` option on `identities`\n\n- [identities] allow calculations in identity keys\n\n## [v3.0.6](https://github.com/ash-project/ash/compare/v3.0.5...v3.0.6) (2024-05-23)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [policies] don't raise an error when authorizing against previous values without atomic upgrades\n\n- [calculations] handle subquery-requiring calculations in `calculate/2`, ensuring we have a primary key\n\n- [Ash.DataLayer] resolve mixup between atomic upsert vs update capability of datalayers (#1198)\n\n## [v3.0.5](https://github.com/ash-project/ash/compare/v3.0.4...v3.0.5) (2024-05-23)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [mix ash.*] only use `Mix.deps_tree` if defined (its only defined for elixir 1.15+)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [atomic upgrade] add `atomic_upgrade?` flag to update/destroy actions\n\n- [atomic upgrade] do not do atomic upgrade by default unless `require_atomic?` is `true`\n\n- [atomic upgrade] allow configuring the read action used by atomic upgrades\n\n## [v3.0.4](https://github.com/ash-project/ash/compare/v3.0.3...v3.0.4) (2024-05-22)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [bulk update/destroy] ensure that all notifications are sent\n\n## [3.0.3](https://github.com/ash-project/ash/compare/v3.0.2...3.0.3) (2024-05-22)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [relationship pagination] allow retrieving the count of paginated relationships (#1183)\n\n- [Ash.Reactor] Add `bulk_create` step type.\n- [Ash.Reactor] Add `bulk_update` step type. (#1185)","ref":"changelog.html#features","title":"Features: - Changelog","type":"extras"},{"doc":"- [Ash.Actions.Read] properly hydrate and scope sorts with query context\n\n- [Ash.Changeset] handle list of atomic conditions coming from atomic validation implementation (#1194) (#1195)\n\n- [embedded resources] handle nil value for old_values when casting arrays (#1191)\n\n- [Ash.Query] use `Ash.Sort.parse_input/3` in `Ash.Query.sort_input/2`\n\n- [Ash.Resource.Validation.Changing] works correctly in atomics, and can eagerly detect changing (#1178)\n\n- [atomic updates] check the where condition before checking validation atomicity (#1177)\n\n- [bulk actions] don't emit after batch notifications if `notify?: false`\n\n- [Ash.Resource] prefer resource domain over option domain (#1176)\n\n- [bulk update/destroy] don't require domain for empty stream bulk update and destroy (#1175)\n\n- [Ash.Generator] only return valid non nil values items from generator (#1121)\n\n- [bulk destroy] properly validate action when calling bulk destroy\n\n- [code interface] allow all strategies for bulk actions in code interfaces by default\n- [code interfaces] honor `get?` for bulk update/bulk destroy","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Query] support anonymous aggregates and calculations in sorts\n\n- [sensitive fields] Implement `show_sensitive?` config (#1180)\n\n- [Ash.Query] support `filter_input` and `sort_input` in `Ash.Query.build/2`\n\n- [Ash.Changeset] add `template_requires_actor` check for changesets\n\n- [bulk update/destroy] don't use queries for streaming if they have hooks\n\n- [Ash.Policy.Check.ChangingAttributes] consider `from: nil` in `changing_attributes/1` check\n\n## [v3.0.2](https://github.com/ash-project/ash/compare/v3.0.1...v3.0.2) (2024-05-15)","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [Ash.Expr] add pattern matching for clarity on values accepted by `ref/1` and `ref/2`\n\n- [Ash.Expr] add `can_return_nil?/1` callback to Ash expressions, allowing for various optimizations\n\n- [Ash.Type.NewType] raise argument error on unknown options in `Ash.Type.NewType`. Helps with typos & misunderstandings\n\n- [embedded resources] use the `source` configuration for attributes in embedded resources (it was previously just ignored)\n\n- [Ash.Policy.Authorizer] better type specification for checks, to get better autocomplete and compile time validation\n\n- [Ash.Error.Invalid.NoSuchInput] added a `did_you_mean` field and used it in the error message","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [Ash.Resource] properly persist simple_notifiers (they were being ignored before)\n\n- [code interface] accept single ids in code interface as subject for destroy/update\n\n- [bulk update] ensure that the `changed?` context is set in after action hooks on batches\n\n- [relationships] allow for inferred domains when authorizing join queries\n\n- [Ash.Expr] don't treat `nil` as not a valid value when type casting lists\n\n- [atomic upgrade] keep data's metadata in atomic upgraded update (#1165)\n\n## [v3.0.1](https://github.com/ash-project/ash/compare/v3.0.0...v3.0.1) (2024-05-14)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"- [Ash.Resource.Change.Builtins] Add `cascade_destroy` to builtin changes.","ref":"changelog.html#features","title":"Features: - Changelog","type":"extras"},{"doc":"- [calculations] calculation eager evaluation bug caused `exists` to eager evaluate when we didn't actually have the related data\n\n- [field policies] fix field policy rewrite errors on non-success cases (#1163)\n\n- [embedded resources] fix embedded resource authorization (#1159) (#1160)\n\n- infinite recursion if query is empty (#1158)\n\n- [Ash.DataLayer.Ets] ensure that changeset filters are honored in ETS destroy/update_query\n\n- [update/destroy actions] don't rollback transactions on stale records, ignore stale records in bulk actions\n\n- [bulk creates] don't check required belongs to fields until after setting them in bulk creation\n\n- [code interface] check require_reference? when generating update code interface (#1152)\n\n## [v3.0.0](https://github.com/ash-project/ash/compare/v3.0.0...2.0)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"We are starting the changelog fresh. See `documentation/2.0-CHANGELOG.md` in GitHub for the old changelogs.","ref":"changelog.html#3-0","title":"3.0 - Changelog","type":"extras"},{"doc":"For a guide on adjusting to these breaking changes, see the [upgrade guide](/documentation/topics/development/upgrading-to-3.0.md)\n\n- [Ash.Api] has been renamed to `Ash.Domain`, and references to the concept have been renamed as well, i.e in options and in the DSL\n- [Ash] we now call functions on this, isntead of the domain. i.e `Ash.create` and `Ash.read`. The generated functions are now marked as deprecated\n- [Ash] remove process context functionality. You can no longer store the actor/tenant in the context with `Ash.set_actor` and so on\n- [private?] deprecate `private?: false` in favor of the more explicit `public?: true`\n- [default_accept] default `default_accept` is now `[]`\n- [action lifecycle] after transaction hooks cannot be added from inside of other lifecycle hooks\n- [Ash.NotLoaded] use `%Ash.NotLoaded{}` for unselected values, instead of `nil`\n- [require_atomic?] now defaults to `true`, requiring opt-out of atomic behavior\n- [authorization] default `api.authorization.authorize` to `:by_default`\n- [Ash.Registry] has been removed\n- [actions] `domain` must always be known when constructing changesets\n- [Ash.Notifier] `requires_original_data?/2` callback defaults to `false`\n- [Ash.Notifier.PubSub] default to `previous_values?: false`, allowing notifications to be sent for atomic updates\n- [unknown inputs] all action invocations now use `UnknownInput` errors when given an input they don't accept\n- [policies] `requires_original_data?/2` callback on checks defaults to `false`\n- [Ash.Calculation] has been renamed to `Ash.Resource.Calculation`\n- [Ash.Resource.Calculation] \"strict mode\" has been added and defaults to `true`. This causes only explicitly requested fields from relationships to be loaded\n- [Ash.Query.Calculation] positional arguments are now an options list\n- [calculations] anonymous function calculations in a resource now take lists and return lists, instead of a single record (like standard calculations do)\n- [context] The context argument passed to many different callbacks is now a struct, tailored to that specific context. For example, in a calculation you will receive an `Ash.Resource.Calculation.Context`\n- [after_action/before_action] These builtin changes now accept a 3rd context argument\n- [picosat_elixir] is now optional (`simple_sat` is now an alternative)\n- [Ash.Changeset] `Ash.Changeset.new!` has been removed\n- [Ash.Changeset] `Ash.Changeset.new/2` has been removed (`Ash.Changeset.new/1` is still available)\n- [Ash.Changeset] `changeset.filters` is now `changeset.filter`\n- [Ash.Changeset] reverse order of before action & before transaction hooks. They now run in the action they are added. They used to run in reverse order.\n- [Ash.CiString] `Ash.CiString.new/1` returns `nil` on `nil` input\n- [belongs_to.attribute_writable?] add `attribute_public?` for controlling publicity, and default `attribute_writable?` to `true`.\n- [Ash.Filter.TemplateHelpers] removed, all functions needed for expressions are now defined in `Ash.Expr`\n- [Ash.Expr] keyword lists are no longer special cased in ash expressions, and requiring pinning like any other value.\n- [Ash.Resource] default read actions are now paginatable with keyset and offset pagination (but pagination is not required)\n- [Ash.Resource] default actions require explicit accept lists (or will use `default_accept`). i.e `defaults [:read, create: [:first_name, :last_name]]`\n- [Ash.Resource] `simple_notifiers` is now an option to `use Ash.Resource`, instead of being in the DSL at `resource.simple_notifiers`\n- [Ash.Flow] has been removed and put in its own package `ash_flow`. It is being deprecated in favor of `Reactor`\n- [Ash.Error] the implementation has been extracted out to `Splode`. Defining new `Ash.Error`s is now done by defining a new `Splode.Error`\n- [Ash.Query] swap position of sort order and arguments in calculation sorting, i.e instead of `calculation: {:asc, %{...args}}` it is now `calculation: {%{...args}, :asc}`\n- [Ash.Resource.Aggregate] add `include_nil?` aggregate option, and default it to `false` (so `list` and `first` aggregates do not consider `nil` values by default)\n- [Ash.Policy.FilterCheck] now accepts `context` arguments, like `Ash.Policy.FilterCheckWithContext`\n- [Ash.Policy.FilterCheckWithContext] has been removed, use `Ash.Policy.FilterCheck`","ref":"changelog.html#breaking-changes","title":"Breaking Changes: - Changelog","type":"extras"},{"doc":"- [Ash.Type] add new remove_nil_items? array type constraint (#1116)\n- [Ash.Query] Paginatable relationships (#1050)\n- [Ash.DataLayer] new `calculate/3` callback that allows for data layers to compute the result of expressions outside the context of a query. Used to power `Ash.calculate/3`.\n- [validations] new builtin validations, `attributes_present/2` and `attributes_absent/2`\n- [multitenancy] configurable multitenancy behaviour on read actions (#1030)\n- [Ash.Reactor] Add new `change` step type which can be used to modify changesets.\n- [Ash.Changeset] add `Ash.Changeset.update_change/2` function and builtin change (#976)\n- [Ash.Domain] code interfaces can now be defined on the domain\n- [Ash.Domain] policies can now be defined on the domain, and will run before resource policies\n- [Ash.ToTenant] add `Ash.ToTenant`, allowing for passing arbitrary values as tenants\n- [Ash] add `Ash.read_first` (like `Ash.read_one`, but applies a limit automatically)\n- [Ash] support a second optional `input` option for `create`, `update` and `destroy`, allowing for things like `Ash.create!(Post, %{text: \"text\"}, opts)`\n- [sensitive?] support `sensitive?` option in query aggregate/calculation (#963)\n- [Ash.Resource] support `require_reference?: false` on code interfaces, for when an update or destroy action uniquely identifies a record (or for bulk update/destroy)\n- [Ash.Resource] notifiers can now be specified for specific actions, using the `notifiers` option\n- [mix ash.rollback] delegates to extensions to trigger their rollback tasks\n- [Ash.Query] add `Ash.Query.apply_to/3`, to \"apply\" the query to a set of records (i.e filter, sort, distinct, etc.)\n- [Ash.CustomExpression] Use `Ash.CustomExpression` to extend Ash's expression syntax in a data-layer agnostic way\n- [code interface] Code interface functions now support bulk actions, in a \"do what I mean\" way. For example: `Domain.deactive(post)` can also be `Post |> Ash.Query.filter(active == true) |> Domain.deactive()`","ref":"changelog.html#features","title":"Features: - Changelog","type":"extras"},{"doc":"- [Ash.Actions.Sort] allow providing a stream of records to sort, and performance improvements\n- [bulk actions] add `read_action` option to bulk actions (#1088)\n- [Ash.stream] support streaming with offset, or even _no_ pagination\n- [Ash.DataLayer.Ets] add debug logging, similar to ecto query debug logging\n- [Ash.DataLayer.Ets] support update_query, destroy_query and `Ash.Changeset.filter/2`\n- [Embedded resources] don't add `autogenerated_id` to embeds if they don't have a primary key\n- [Ash.Resource] you can now omit the return type of generic actions, indicating it either succeeds or fails, returning `:ok` or `{:error, error}`\n- [Ash.Resource] Generic actions can now accept a Reactor module, running it directly. (#993)\n- [Ash.Resource] support `allow_nil_input` dsl option in update/destroy actions (#964)\n- [Ash.Resource] The `filter` option can now be supplied multiple times in read actions and in relationships. They will be combined with `and`\n- [Ash.Resource] private attributes can now be accepted as action inputs\n- [Ash.Expr] is now imported automatically into places you will likely use it, like changes, validations, checks and calculations.\n- [Ash.Query] is now required automatically in places you will likely use it, as above\n- [sortable?] fields may mark themselves as unusable in sorts by using `sortable? false`\n- [sensitive?] calculations and aggregates may now also be marked as `sensitive?`","ref":"changelog.html#improvements","title":"Improvements: - Changelog","type":"extras"},{"doc":"- [Ash.Type] apply array type `nil_items?` constraint after item constraints are applied (#1115)\n- [Ash.DataLayer.Ets] fix ETS data layer's support for lateral joining\n- [bulk actions] ensure transaction is rolled back on data layer errors during streaming\n- [bulk actions] set `notify?: true` when `return_notifications?: true` is set\n- [Ash.Changeset] `attributes_present?/2` -> `attribute_present?/2`\n- [Ash.Filter] don't eager evaluate `type/3` because data layers require type information\n- [Ash.Changeset] when comparing identities for `manage_relationship`, we now properly cast the values. Before, `\"1\"` and `1` were not considered equal for integer primary keys/identity fields\n- Many more bug fixes were added, but few are relevant enough to list here","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Changelog","type":"extras"},{"doc":"# Domains\n\nDomains serve three primary purposes:\n\n1. They group related resources together, providing organization and structure to your project.\n2. They allow you to define a centralized [code interface](/documentation/topics/resources/code-interfaces.md)\n3. They allow you to configure certain cross-cutting concerns of those resources in a single place.\n\nIf you are familiar with a [Phoenix Context](https://hexdocs.pm/phoenix/contexts.html), you can think of a domain as the Ash equivalent.","ref":"domains.html","title":"Domains","type":"extras"},{"doc":"In an `Ash.Domain`, you will typically see something like this:\n\n```elixir\ndefmodule MyApp.Tweets do\n  use Ash.Domain\n\n  resources do\n    resource MyApp.Tweets.Tweet\n    resource MyApp.Tweets.Comment\n  end\nend\n```\n\nWith this definition, you can do things like placing all of these resources into a GraphQL Api with AshGraphql. You'd see a line like this:\n\n```elixir\nuse AshGraphql, domains: [MyApp.Tweets]\n```","ref":"domains.html#grouping-resources","title":"Grouping Resources - Domains","type":"extras"},{"doc":"Working with our domain & resources in code *can* be done the long form way, by building changesets/queries/action inputs and calling the relevant function in `Ash`. However, we generally want to expose a well defined code API for working with our resources. This makes our code much clearer, and gives us nice things like auto complete and inline documentation.\n\n```elixir\ndefmodule MyApp.Tweets do\n  use Ash.Domain\n\n  resources do\n    resource MyApp.Tweets.Tweet do\n      # define a function called `tweet` that uses\n      # the `:create` action on MyApp.Tweets.Tweet\n      define :tweet, action: :create, args: [:text]\n    end\n\n    resource MyApp.Tweets.Comment do\n      # define a function called `comment` that uses\n      # the `:create` action on MyApp.Tweets.Comment\n      define :comment, action: :create, args: [:tweet_id, :text]\n    end\n  end\nend\n```\n\nWith these definitions, we can now do things like this:\n\n```elixir\ntweet = MyApp.Tweets.tweet!(\"My first tweet!\", actor: user1)\ncomment = MyApp.Tweets.comment!(tweet.id, \"What a cool tweet!\", actor: user2)\n```","ref":"domains.html#centralized-code-interface-documentation-topics-resources-code-interfaces-md","title":"Centralized [Code Interface](/documentation/topics/resources/code-interfaces.md) - Domains","type":"extras"},{"doc":"","ref":"domains.html#configuring-cross-cutting-concerns","title":"Configuring Cross-cutting Concerns - Domains","type":"extras"},{"doc":"`Ash.Domain` comes with a number of built-in configuration options. See `d:Ash.Domain` for more.\n\nFor example:\n\n```elixir\ndefmodule MyApp.Tweets do\n  use Ash.Domain\n\n  resources do\n    resource MyApp.Tweets.Tweet\n    resource MyApp.Tweets.Comment\n  end\n\n  execution do\n    # raise the default timeout for all actions in this domain from 30s to 60s\n    timeout :timer.seconds(60)\n  end\n\n  authorization do\n    # disable using the authorize?: false flag when calling actions\n    authorize :always\n  end\nend\n```","ref":"domains.html#built-in-configuration","title":"Built in configuration - Domains","type":"extras"},{"doc":"Extensions will often come with \"domain extensions\" to allow you to configure the behavior of all resources within a domain, as it pertains to that extension. For example:\n\n```elixir\ndefmodule MyApp.Tweets do\n  use Ash.Domain,\n    extensions: [AshGraphql.Domain]\n\n  graphql do\n    # skip authorization for these resources\n    authorize? false\n  end\n\n  resources do\n    resource MyApp.Tweets.Tweet\n    resource MyApp.Tweets.Comment\n  end\nend\n```","ref":"domains.html#extensions","title":"Extensions - Domains","type":"extras"},{"doc":"You can also use `Ash.Policy.Authorizer` on your domains. This allows you to add policies that apply to *all* actions using this domain. For example:\n\n```elixir\ndefmodule MyApp.Tweets do\n  use Ash.Domain,\n    extensions: [Ash.Policy.Authorizer]\n\n  resources do\n    resource MyApp.Tweets.Tweet\n    resource MyApp.Tweets.Comment\n  end\n\n  policies do\n    # add a bypass up front to allow administrators to do whatever they want\n    bypass actor_attribute_equals(:is_admin, true) do\n      authorize_if always()\n    end\n\n    # forbid all access from disabled users\n    policy actor_attribute_equals(:disabled, true) do\n      forbid_if always()\n    end\n  end\nend\n```","ref":"domains.html#policies","title":"Policies - Domains","type":"extras"},{"doc":"# Attributes\n\nAttributes specify the `name`, `type` and additional configuration of a simple property of a record. When using SQL data layers, for example, an attribute would correspond to a column in a database table. For information on types, see `Ash.Type`.\n\nTo see all of the options available when building attributes, see `d:Ash.Resource.Dsl.attributes.attribute`\n\nIf you are looking to compute values on demand, see the [Calculations guide](/documentation/topics/resources/calculations.md) and the [aggregates guide](/documentation/topics/resources/aggregates.md).","ref":"attributes.html","title":"Attributes","type":"extras"},{"doc":"In Ash there are 4 special attributes these are:\n\n- `create_timestamp`\n- `update_timestamp`\n- `integer_primary_key`\n- `uuid_primary_key`\n\nThese are really just shorthand for an attribute with specific options set. They're outlined below.\n\n### `create_timestamp`\n\nYou may recognise this if you have used Ecto before. This attribute will record the time at which each row is created, by default it uses `DateTime.utc_now/1`.\n\n`create_timestamp :inserted_at` is equivalent to an attribute with these options:\n\n```elixir\nattribute :inserted_at, :utc_datetime_usec do\n  writable? false\n  default &DateTime.utc_now/0\n  match_other_defaults? true\n  allow_nil? false\nend\n```\n\n### `update_timestamp`\n\nThis is also similar in Ecto. This attribute records the last time a row was updated, also using `DateTime.utc_now/1` by default.\n\n`update_timestamp :updated_at` is equivalent to:\n\n```elixir\nattribute :updated_at, :utc_datetime_usec do\n  writable? false\n  default &DateTime.utc_now/0\n  update_default &DateTime.utc_now/0\n  match_other_defaults? true\n  allow_nil? false\nend\n```\n\n### `uuid_primary_key`\n\nThis attribute is used in almost every resource. It generates a UUID every time a new record is made.\n`uuid_primary_key :id` is equivalent to:\n\n```elixir\nattribute :id, :uuid do\n  writable? false\n  default &Ash.UUID.generate/0\n  primary_key? true\n  allow_nil? false\nend\n```\n\n### `integer_primary_key`\n\nCreates a generated integer primary key. Keep in mind that not all data layers support auto incrementing ids, but for SQL data layers this is a very common practice. For those that don't, it is your own job to provide values for the primary key. We generally suggest using UUIDs over integers, as there are [a lot of good reasons to not use autoincrementing integer ids](https://www.clever-cloud.com/blog/engineering/2015/05/20/why-auto-increment-is-a-terrible-idea/).\n\n`integer_primary_key :id` is equivalent to:\n\n```elixir\nattribute :id, :integer do\n  writable? false\n  generated? true\n  primary_key? true\n  allow_nil? false\nend\n```","ref":"attributes.html#special-attributes","title":"Special attributes - Attributes","type":"extras"},{"doc":"# Relationships\n\nRelationships describe the connections between resources and are a core component of Ash. Defining relationships enables you to do things like\n\n- Loading related data\n- Filtering on related data\n- Managing related records through changes on a single resource\n- Authorizing based on the state of related data","ref":"relationships.html","title":"Relationships","type":"extras"},{"doc":"A relationship exists between a source resource and a destination resource. These are defined in the `relationships` block of the source resource. For example, if `MyApp.Tweet` is the source resource, and `MyApp.User` is the destination resource, we could define a relationship called `:owner` like this:\n\n```elixir\ndefmodule MyApp.Tweet do\n  use Ash.Resource,\n    data_layer: my_data_layer\n\n  attributes do\n    uuid_primary_key :id\n    attribute :body, :string\n  end\n\n  relationships do\n    belongs_to :owner, MyApp.User\n  end\nend\n```","ref":"relationships.html#relationships-basics","title":"Relationships Basics - Relationships","type":"extras"},{"doc":"See [Managing Relationships](/documentation/topics/resources/relationships.md#managing-relationships) for more information.\n\nYour data layer may enforce foreign key constraints, see the following guides for more information:\n\n- [AshPostgres references](https://hexdocs.pm/ash_postgres/references.html)","ref":"relationships.html#managing-related-data","title":"Managing related data - Relationships","type":"extras"},{"doc":"There are four kinds of relationships:\n\n- [`belongs_to`](#belongs-to)\n- [`has_one`](#has-one)\n- [`has_many`](#has-many)\n- [`many_to_many`](#many-to-many)\n\nEach of these relationships has a `source` resource and a `destination` resource with a corresponding attribute on the source resource (`source_attribute`), and destination resource (`destination_attribute`). Relationships will validate that their configured attributes exist at compile time.\n\nYou don't need to have a corresponding \"reverse\" relationship for every relationship, i.e if you have a `MyApp.Tweet` resource with `belongs_to :user, MyApp.User` you aren't required to have a `has_many :tweets, MyApp.Tweet` on `MyApp.User`. All that is required is that the attributes used by the relationship exist.","ref":"relationships.html#kinds-of-relationships","title":"Kinds of relationships - Relationships","type":"extras"},{"doc":"```elixir\n# on MyApp.Tweet\nbelongs_to :owner, MyApp.User\n```\n\nA `belongs_to` relationship means that there is an attribute (`source_attribute`) on the source resource that uniquely identifies a record with a matching attribute (`destination_attribute`) in the destination. In the example above, the source attribute on `MyApp.Tweet` is `:owner_id` and the destination attribute on `MyApp.User` is `:id`.\n\n#### Attribute Defaults\n\nBy default, the `source_attribute` is defined as `: _id` of the type `:uuid` on the source resource and the `destination_attribute` is assumed to be `:id`. You can override the attribute names by specifying the `source_attribute` and `destination_attribute` options like so:\n\n```elixir\nbelongs_to :owner, MyApp.User do\n  # defaults to : _id (i.e. :owner_id)\n  source_attribute :custom_attribute_name\n\n  # defaults to :id\n  destination_attribute :custom_attribute_name\nend\n```\n\nYou can further customize the `source_attribute` using options such as:\n\n- `d:Ash.Resource.Dsl.relationships.belongs_to|define_attribute?` to define it yourself\n- `d:Ash.Resource.Dsl.relationships.belongs_to|attribute_type` to modify the default type\n- `d:Ash.Resource.Dsl.relationships.belongs_to|attribute_public?` to make the source attribute `public?: true`\n\nFor example:\n\n```elixir\nbelongs_to :owner, MyApp.User do\n  attribute_type :integer\n  attribute_writable? false\nend\n```\n\nOr if you wanted to define the attribute yourself,\n\n```elixir\nattributes do\n  attribute :owner_foo, MyApp.CustomType\nend\n\n...\nrelationships do\n  belongs_to :owner, MyApp.User do\n    define_attribute? false\n    source_attribute :owner_foo\n  end\nend\n```\n\n#### Customizing default belongs_to attribute type\n\nDestination attributes that are added by default are assumed to be `:uuid`. To change this, set the following configuration in `config.exs`:\n\n```elixir\nconfig :ash, :default_belongs_to_type, :integer\n```\n\nSee the docs for more: `d:Ash.Resource.Dsl.relationships.belongs_to`","ref":"relationships.html#belongs-to","title":"Belongs To - Relationships","type":"extras"},{"doc":"```elixir\n# on MyApp.User\nhas_one :profile, MyApp.Profile\n```\n\nA `has_one` relationship means that there is a unique attribute (`destination_attribute`) on the destination resource that identifies a record with a matching unique attribute (`source_resource`) in the source. In the example above, the source attribute on `MyApp.User` is `:id` and the destination attribute on `MyApp.Profile` is `:user_id`.\n\nA `has_one` is similar to a `belongs_to` except the reference attribute is on\nthe destination resource, instead of the source.\n\n#### Attribute Defaults\n\nBy default, the `source_attribute` is assumed to be `:id`, and `destination_attribute` defaults to ` _id`.\n\nSee the docs for more: `d:Ash.Resource.Dsl.relationships.has_one`","ref":"relationships.html#has-one","title":"Has One - Relationships","type":"extras"},{"doc":"```elixir\n# on MyApp.User\nhas_many :tweets, MyApp.Tweet\n```\n\nA `has_many` relationship means that there is a non-unique attribute (`destination_attribute`) on the destination resource that identifies a record with a matching attribute (`source_attribute`) in the source. In the example above, the source attribute on `MyApp.User` is `:id` and the destination attribute on `MyApp.Tweet` is `:user_id`.\n\nA `has_many` relationship is similar to a `has_one` because the reference attribute exists on the destination resource. The only difference between this and `has_one` is that the destination attribute is not unique, and therefore will produce a list of related items. In the example above, `:tweets` corresponds to a list of `MyApp.Tweet` records.\n\n#### Attribute Defaults\n\nBy default, the `source_attribute` is assumed to be `:id`, and `destination_attribute` defaults to ` _id`.\n\nSee the docs for more: `d:Ash.Resource.Dsl.relationships.has_many`","ref":"relationships.html#has-many","title":"Has Many - Relationships","type":"extras"},{"doc":"A `many_to_many` relationship can be used to relate many source resources to many destination resources. To achieve this, the `source_attribute` and `destination_attribute` are defined on a join resource. A `many_to_many` relationship can be thought of as a combination of a `has_many` relationship on the source/destination resources and a `belongs_to` relationship on the join resource.\n\nFor example, consider two resources `MyApp.Tweet` and `MyApp.Hashtag` representing tweets and hashtags. We want to be able to associate a tweet with many hashtags, and a hashtag with many tweets. To do this, we could define the following `many_to_many` relationship:\n\n```elixir\n# on MyApp.Tweet\nmany_to_many :hashtags, MyApp.Hashtag do\n  through MyApp.TweetHashtag\n  source_attribute_on_join_resource :tweet_id\n  destination_attribute_on_join_resource :hashtag_id\nend\n```\n\nThe `through` option specifies the \"join\" resource that will be used to store the relationship. We need to define this resource as well:\n\n```elixir\ndefmodule MyApp.TweetHashtag do\n  use Ash.Resource,\n    data_layer: your_data_layer\n\n  postgres do\n    table \"tweet_hashtags\"\n    repo MyApp.Repo\n  end\n\n  relationships do\n    belongs_to :tweet, MyApp.Tweet, primary_key?: true, allow_nil?: false\n    belongs_to :hashtag, MyApp.Hashtag, primary_key?: true, allow_nil?: false\n  end\n\n  actions do\n    defaults [:read, :destroy, create: :*, update: :*]\n  end\nend\n```\n\nIt is convention to name this resource `  ` however this is not required. The attributes on the join resource must match the `source_attribute_on_join_resource` and `destination_attribute_on_join_resource` options on the `many_to_many` relationship. The relationships on the join resource are standard `belongs_to` relationships, and can be configured as such. In this case, we have specified that the `:tweet_id` and `:hashtag_id` attributes form the primary key for the join resource, and that they cannot be `nil`.\n\nNow that we have a resource with the proper attributes, Ash will use this automatically under the hood when\nperforming relationship operations like filtering and loading.\n\nSee the docs for more: `d:Ash.Resource.Dsl.relationships.many_to_many`","ref":"relationships.html#many-to-many","title":"Many To Many - Relationships","type":"extras"},{"doc":"There are two ways to load relationships:\n\n- in the query using `Ash.Query.load/2`\n- directly on records using `Ash.load/3`","ref":"relationships.html#loading-related-data","title":"Loading related data - Relationships","type":"extras"},{"doc":"Given a single record or a set of records, it is possible to load their relationships by calling the `load` function on the record's parent domain. For example:\n\n```elixir\n# user = %User{...}\nAsh.load(user, :tweets)\n\n# users = [%User{...}, %User{...}, ....]\nAsh.load(users, :tweets)\n```\n\nThis will fetch the tweets for each user, and set them in the corresponding `tweets` key.\n\n```elixir\n%User{\n  ...\n  tweets: [\n    %Tweet{...},\n    %Tweet{...},\n    ...\n  ]\n}\n```\n\nSee `Ash.load/3` for more information.","ref":"relationships.html#on-records","title":"On records - Relationships","type":"extras"},{"doc":"The following will return a list of users with their tweets loaded identically to the previous example:\n\n```elixir\nUser\n|> Ash.Query.load(:tweets)\n|> Ash.read()\n```\n\nAt present, loading relationships in the query is fundamentally the same as loading on records. Eventually, data layers will be able to optimize these loads (potentially including them as joins in the main query).\n\nSee `Ash.Query.load/2` for more information.","ref":"relationships.html#in-the-query","title":"In the query - Relationships","type":"extras"},{"doc":"Multiple relationships can be loaded at once, i.e\n\n```elixir\nAsh.load(users, [:tweets, :followers])\n```\n\nNested relationships can be loaded:\n\n```elixir\nAsh.load(users, followers: [:tweets, :followers])\n```\n\nThe queries used for loading can be customized by providing a query as the value.\n\n```elixir\nfollowers = Ash.Query.sort(User, follower_count: :asc)\n\nAsh.load(users, followers: followers)\n```\n\nNested loads will be included in the parent load.\n\n```elixir\nfollowers =\n  User\n  |> Ash.Query.sort(follower_count: :asc)\n  |> Ash.Query.load(:followers)\n\n# Will load followers and followers of those followers\nAsh.load(users, followers: followers)\n```","ref":"relationships.html#more-complex-data-loading","title":"More complex data loading - Relationships","type":"extras"},{"doc":"This is really useful when creating customized relationships that aren't joined with simple attribute matches. For example:\n\n```elixir\nhas_many :higher_priority_tickets, __MODULE__ do\n  no_attributes? true\n  # parent/1 in this case puts the expression on this current resource\n  # so this is \"tickets with priority higher than this ticket\"\n  filter expr(priority > parent(priority))\nend\n```\n\nThis can also be very useful when combined with multitenancy. Specifically, if you have a tenant resource like `Organization`,\nyou can use `no_attributes?` to do things like `has_many :employees, Employee, no_attributes?: true`, which lets you avoid having an\nunnecessary `organization_id` field on `Employee`. The same works in reverse: `has_one :organization, Organization, no_attributes?: true`\nallows relating the employee to their organization.\n\n\n>","ref":"relationships.html#no_attributes-true","title":"no_attributes? true - Relationships","type":"extras"},{"doc":">\n>  1. You can still manage relationships from one to the other, but \"relate\" and \"unrelate\" will have no effect, because there are no fields to change.\n>  2. Loading the relationship on a list of resources will not behave as expected in all circumstances involving multitenancy. For example, if you get a list of `Organization` and then try to load `employees`, you would need to set a single tenant on the load query, meaning you'll get all organizations back with the set of employees from one tenant. This could eventually be solved, but for now it is considered an edge case.","ref":"relationships.html#caveats-for-using-no_attributes-warning","title":"Caveats for using `no_attributes?` {: .warning} - Relationships","type":"extras"},{"doc":"Manual relationships allow you to express complex or non-typical relationships between resources in a standard way. Individual data layers may interact with manual relationships in their own way, so see their corresponding guides. In general, you should try to use manual relationships sparingly, as you can do *a lot* with filters on relationships, and the `no_attributes?` flag.","ref":"relationships.html#manual-relationships","title":"Manual Relationships - Relationships","type":"extras"},{"doc":"In our Helpdesk example, we'd like to have a way to find tickets\n\nIn the `Representative` resource, define a `has_many` relationship as `manual` and point to the module where\nit will be implemented.\n\n```elixir\nrelationships do\n  has_many :tickets_above_threshold, Helpdesk.Support.Ticket do\n    manual Helpdesk.Support.Ticket.Relationships.TicketsAboveThreshold\n  end\nend\n```\n\nUsing Ash to get the destination records is ideal, so you can authorize access like normal\nbut if you need to use a raw ecto query here, you can. As long as you return the right structure.\n\nThe `TicketsAboveThreshold` module is implemented as follows.\n\n```elixir\ndefmodule Helpdesk.Support.Ticket.Relationships.TicketsAboveThreshold do\n  use Ash.Resource.ManualRelationship\n  require Ash.Query\n\n  def load(records, _opts, %{query: query} = context) do\n    # Use existing records to limit results\n    rep_ids = Enum.map(records, & &1.id)\n\n    {:ok,\n     query\n     |> Ash.Query.filter(representative_id in ^rep_ids)\n     |> Ash.Query.filter(priority > representative.priority_threshold)\n     |> Ash.read!(Ash.Context.to_opts(context))\n     # Return the items grouped by the primary key of the source, i.e representative.id => [...tickets above threshold]\n     |> Enum.group_by(& &1.representative_id)}\n  end\nend\n```","ref":"relationships.html#example","title":"Example - Relationships","type":"extras"},{"doc":"Since you likely want to support things like filtering your relationship when being loaded, you will want to make sure that you use the query being provided. However, depending on how you're loading the relationship, you may need to do things like fetch extra records. To do this, you might do things like\n\n```elixir\ndef load(records, _opts, %{query: query, ..}) do\n  # unset some fields\n  fetch_query = Ash.Query.unset(query, [:limit, :offset])\n\n  # or, to be more safe/explicit, you might make a new query, explicitly setting only a few fields\n  fetch_query = query.resource |> Ash.Query.filter(^query.filter) |> Ash.Query.sort(query.sort)\n\n  ...\nend\n```","ref":"relationships.html#reusing-the-query","title":"Reusing the Query - Relationships","type":"extras"},{"doc":"When using `Ash.Query.load` or `Ash.load` with the `strict?: true` option, the query\nthat is provided to the load callback might be configured with a select-statement that doesn't \nload the attributes you want to group matching results by. If your codebase utilizes the strict\nloading functionality, it is therefore recommended to use `Ash.Query.ensure_selected` on the\nquery to ensure the required attributes are indeed fetched.\n\n```elixir\n\n# Here only :id & :priority is set, which will then configure the relationship query to only\n# select those attributes\n{:ok, rep} = Ash.load(representative, [tickets_above_threshold: [:id, :priority]], strict?: true)\n\ndefmodule Helpdesk.Support.Ticket.Relationships.TicketsAboveThreshold do\n  use Ash.Resource.ManualRelationship\n  require Ash.Query\n\n  def load(records, _opts, %{query: query, actor: actor, authorize?: authorize?}) do\n    rep_ids = Enum.map(records, & &1.id)\n\n    {:ok,\n     query\n     # If this isn't added, representative_id would be set to %Ash.NotLoaded, causing the\n     # Enum.group_by call below to fail mapping results to the correct records.\n     |> Ash.Query.ensure_selected([:representative_id])\n     |> Ash.Query.filter(representative_id in ^rep_ids)\n     |> Ash.Query.filter(priority > representative.priority_threshold)\n     |> Helpdesk.Support.read!(actor: actor, authorize?: authorize?)\n     |> Enum.group_by(& &1.representative_id)}\n  end\nend\n```","ref":"relationships.html#query-when-loading-with-strict-true","title":"Query when loading with strict?: true - Relationships","type":"extras"},{"doc":"Lets say the records come from some totally unrelated source, or you can't just modify the query to fetch the records you need. You can fetch the records you need and then apply the query to them in memory.\n\n```elixir\ndef load(records, _opts, %{query: query, ..}) do\n  # fetch the data from the other source, which is capable of sorting\n  data = get_other_data(data, query.sort)\n\n  query\n  # unset the sort since we already applied that\n  |> Ash.Query.unset([:sort])\n  # apply the query in memory (filtering, distinct, limit, offset)\n  |> Ash.Query.apply_to(data)\nend\n```","ref":"relationships.html#fetching-the-records-and-then-applying-a-query","title":"Fetching the records and then applying a query - Relationships","type":"extras"},{"doc":"In Ash, managing related data is done via `Ash.Changeset.manage_relationship/4`. There are various ways to leverage the functionality expressed there. If you are working with changesets directly, you can call that function. However, if you want that logic to be portable (e.g available in `ash_graphql` mutations and `ash_json_api` actions), then you want to use the following `argument` + `change` pattern:\n\n```elixir\nactions do\n  update :update do\n    argument :add_comment, :map do\n      allow_nil? false\n    end\n\n    argument :tags, {:array, :uuid} do\n      allow_nil? false\n    end\n\n    # First argument is the name of the action argument to use\n    # Second argument is the relationship to be managed\n    # Third argument is options. For more, see `Ash.Changeset.manage_relationship/4`. This accepts the same options.\n    change manage_relationship(:add_comment, :comments, type: :create)\n\n    # Second argument can be omitted, as the argument name is the same as the relationship\n    change manage_relationship(:tags, type: :append_and_remove)\n  end\nend\n```\n\nWith this, those arguments can be used in action input:\n\n```elixir\npost\n|> Ash.Changeset.for_update(:update, %{tags: [tag1.id, tag2.id], add_comment: %{text: \"comment text\"}})\n|> Ash.update!()\n```","ref":"relationships.html#managing-relationships","title":"Managing Relationships - Relationships","type":"extras"},{"doc":"Notice how we provided a map as input to `add_comment`, and a list of UUIDs as an input to `manage_relationship`. When providing maps or lists of maps, you are generally just providing input that will eventually be passed into actions on the destination resource. However, you can also provide individual values or lists of values. By default, we assume that value maps to the primary key of the destination resource, but you can use the `value_is_key` option to modify that behavior. For example, if you wanted adding a comment to take a list of strings, you could say:\n\n```elixir\nargument :add_comment, :string\n\n...\nchange manage_relationship(:add_comment, :comments, type: :create, value_is_key: :text)\n```\n\nAnd then you could use it like so:\n\n```elixir\npost\n|> Ash.Changeset.for_update(:update, %{tags: [tag1.id, tag2.id], add_comment: \"comment text\"})\n|> Ash.update!()\n```","ref":"relationships.html#argument-types","title":"Argument Types - Relationships","type":"extras"},{"doc":"Determining what will happen when managing related data can be complicated, as the nature of the problem itself is quite complicated. In some simple cases, like `type: :create`, there may be only one action that will be called. But in order to support all of the various ways that related resources may need to be managed, Ash provides a rich set of options to determine what happens with the provided input. Tools like `AshPhoenix.Form` can look at your arguments that have a corresponding `manage_relationship` change, and derive the structure of those nested forms. Tools like `AshGraphql` can derive complex input objects to allow manipulating those relationships over a graphql Api. This all works because the options are, ultimately, quite explicit. It can be determined exactly what actions might be called, and therefore what input could be needed.\n\nTo see all of the options available, see `Ash.Changeset.manage_relationship/4`","ref":"relationships.html#derived-behavior","title":"Derived behavior - Relationships","type":"extras"},{"doc":"# Calculations\n\nCalculations in Ash allow for displaying complex values as a top level value of a resource.","ref":"calculations.html","title":"Calculations","type":"extras"},{"doc":"","ref":"calculations.html#primer","title":"Primer - Calculations","type":"extras"},{"doc":"","ref":"calculations.html#declaring-calculations-on-a-resource","title":"Declaring calculations on a resource - Calculations","type":"extras"},{"doc":"The simplest kind of calculation refers to an Ash expression. For example:\n\n```elixir\ncalculations do\n  calculate :full_name, :string, expr(first_name <> \" \" <> last_name)\nend\n```\n\nSee the [Expressions guide](/documentation/topics/reference/expressions.md) for more.","ref":"calculations.html#expression-calculations","title":"Expression Calculations - Calculations","type":"extras"},{"doc":"When calculations require more complex code or can't be pushed down into the data layer, a module that uses `Ash.Resource.Calculation` can be used.\n\n```elixir\ndefmodule Concat do\n  # An example concatenation calculation, that accepts the delimiter as an argument,\n  #and the fields to concatenate as options\n  use Ash.Resource.Calculation\n\n  # Optional callback that verifies the passed in options (and optionally transforms them)\n  @impl true\n  def init(opts) do\n    if opts[:keys] && is_list(opts[:keys]) && Enum.all?(opts[:keys], &is_atom/1) do\n      {:ok, opts}\n    else\n      {:error, \"Expected a `keys` option for which keys to concat\"}\n    end\n  end\n\n  @impl true\n  # A callback to tell Ash what keys must be loaded/selected when running this calculation\n  # you can include related data here, but be sure to include the attributes you need from said related data\n  # i.e `posts: [:title, :body]`.\n  def load(_query, opts, _context) do\n    opts[:keys]\n  end\n\n  @impl true\n  def calculate(records, opts, %{separator: separator}) do\n    Enum.map(records, fn record ->\n      Enum.map_join(opts[:keys], separator, fn key ->\n        to_string(Map.get(record, key))\n      end)\n    end)\n  end\n\n  # You can implement this callback to make this calculation possible in the data layer\n  # *and* in elixir. Ash expressions are already executable in Elixir or in the data layer, but this gives you fine grain control over how it is done\n  # @impl true\n  # def expression(opts, context) do\n  # end\nend\n\n# Usage in a resource\ncalculations do\n  calculate :full_name, :string, {Concat, keys: [:first_name, :last_name]} do\n    # You need to use the [allow_empty?: true, trim?: false] constraints here.\n    # The separator could be an empty string or require a leading or trailing space,\n    # but would be trimmed or even set to `nil` without the constraints shown below.\n    argument :separator, :string do\n      allow_nil? false\n      constraints [allow_empty?: true, trim?: false]\n      default \"\"\n    end\n  end\nend\n```\n\nSee the documentation for the calculations section in [Resource DSL docs](dsl-ash-resource.html#calculations) and the `Ash.Resource.Calculation` docs for more information.\n\nThe calculations declared on a resource allow for declaring a set of named calculations that can be used by extensions.\nThey can also be loaded in the query using `Ash.Query.load/2`, or after the fact using `Ash.load/3`. Calculations declared on the resource will be keys in the resource's struct.","ref":"calculations.html#module-calculations","title":"Module Calculations - Calculations","type":"extras"},{"doc":"Example:\n\n```elixir\nUser\n|> Ash.Query.calculate(:full_name, {Concat, keys: [:first_name, :last_name]}, :string, %{separator: \",\"})\n```\n\nSee the documentation for `Ash.Query.calculate/4` for more information.","ref":"calculations.html#custom-calculations-in-the-query","title":"Custom calculations in the query - Calculations","type":"extras"},{"doc":"Using the above example with arguments, you can load a calculation with arguments like so:\n\n```elixir\nload(full_name: [separator: \",\"])\n```\n\nIf the calculation uses an expression, you can also filter and sort on it like so:\n\n```elixir\nquery\n|> Ash.Query.filter(full_name(separator: \" \") == \"Zach Daniel\")\n|> Ash.Query.sort(full_name: {%{separator: \" \"}, :asc})\n```","ref":"calculations.html#arguments-in-calculations","title":"Arguments in calculations - Calculations","type":"extras"},{"doc":"# Aggregates\n\nAggregates in Ash allow for retrieving summary information over groups of related data. A simple example might be to show the \"count of published posts for a user\". Aggregates allow us quick and performant access to this data, in a way that supports being filtered/sorted on automatically. More aggregate types can be added, but you will be restricted to only the supported types. In cases where aggregates don't suffice, use [Calculations](/documentation/topics/resources/calculations.md), which are intended to be much more flexible.","ref":"aggregates.html","title":"Aggregates","type":"extras"},{"doc":"Aggregates are defined in an `aggregates` section. For all possible types, see below.\nFor a full reference, see `d:Ash.Resource.Dsl.aggregates`.\n\n```elixir\naggregates do\n  count :count_of_posts, :posts do\n    filter expr(published == true)\n  end\nend\n```","ref":"aggregates.html#declaring-aggregates-on-a-resource","title":"Declaring aggregates on a resource - Aggregates","type":"extras"},{"doc":"Aggregates are loaded and filtered on in the same way that calculations are. Lets look at some examples:","ref":"aggregates.html#using-an-aggregate","title":"Using an aggregate - Aggregates","type":"extras"},{"doc":"```elixir\nUser\n|> Ash.Query.load(:count_of_posts)\n|> Map.get(:count_of_posts)\n# => 10\n\nusers\n|> Ash.load!(:count_of_posts)\n|> Enum.map(&(&1.count_of_posts)\n# => [3, 5, 2]\n```","ref":"aggregates.html#loading-aggregates-in-a-query-or-on-records","title":"Loading aggregates in a query or on records - Aggregates","type":"extras"},{"doc":"```elixir\nrequire Ash.Query\n\nUser\n|> Ash.Query.filter(count_of_posts > 10)\n|> Ash.read!()\n```","ref":"aggregates.html#filtering-on-aggregates","title":"Filtering on aggregates - Aggregates","type":"extras"},{"doc":"```elixir\nUser\n|> Ash.Query.sort(count_of_posts: :asc)\n|> Ash.read!()\n```","ref":"aggregates.html#sorting-aggregates","title":"Sorting aggregates - Aggregates","type":"extras"},{"doc":"- `count` - counts related items meeting the criteria.\n- `exists` - checks if any related items meet the criteria.\n- `first` - gets the first related value matching the criteria. Must specify the `field`.\n- `sum` - sums the related items meeting the criteria. Must specify the `field`.\n- `list` - lists the related values. Must specify the `field`.\n- `max` - gets the maximum related value. Must specify the `field`.\n- `min` - gets the minimum related value. Must specify the `field`.\n- `avg` - gets the average related value. Must specify the `field`.\n- `custom` - allows for a custom aggregate. Implementation depends on the data layer. Must provide an `implementation`.\n\nThe declared set of named aggregates can be used by extensions and referred to throughout your application As an escape hatch, they can also be loaded in the query using `Ash.Query.load/2`, or after the fact using `Ash.load/3`. Aggregates declared on the resource will be keys in the resource's struct.\n\nSee the docs on `d:Ash.Resource.Dsl.aggregates` for more information.","ref":"aggregates.html#aggregate-types","title":"Aggregate types - Aggregates","type":"extras"},{"doc":"Custom aggregates can be added to the query and will be placed in the `aggregates` key of the results. This is an escape hatch, and is not the primary way that you should be using aggregates. It does, however, allow for dynamism, i.e if you are accepting user input that determines what the filter and/or field should be, that kind of thing.\n\nExample:\n\n```elixir\nUser\n|> Ash.Query.aggregate(\n  :count_of_posts,\n  :count,\n  :posts,\n  query: [\n    filter: [published: published?]\n  ]\n)\n```\n\nSee the documentation for `Ash.Query.aggregate/4` for more information.","ref":"aggregates.html#custom-aggregates-in-the-query","title":"Custom aggregates in the query - Aggregates","type":"extras"},{"doc":"Join filters allows for more complex aggregate queries, including joining with predicates based on multiple related values.","ref":"aggregates.html#join-filters","title":"Join Filters - Aggregates","type":"extras"},{"doc":"```elixir\n  aggregates do\n    sum :saved_money, [:redeems, :deal], :amount do\n      # where any redeem of the deal is redeemed\n      filter expr(redeems.redeemed == true)\n\n      # where the `redeems` are `redeemed`\n      join_filter :redeems, expr(redeemed == true)\n\n      # where the `redeems.deal.active` == `redeems.require_active`\n      join_filter [:redeems, :deal], expr(active == parent(require_active))\n    end\n  end\n```","ref":"aggregates.html#example","title":"Example - Aggregates","type":"extras"},{"doc":"Aggregates can be created in-line in expressions, with their relationship path specified and any options provided that match the options given to `Ash.Query.Aggregate.new/4`. For example:\n\n```elixir\ncalculate :grade, :decimal, expr(\n  count(answers, query: [filter: expr(correct == true)]) /\n  count(answers, query: [filter: expr(correct == false)])\n)\n```\n\nSee the [Expressions guide](/documentation/topics/reference/expressions.md#inline-aggregates) for more.","ref":"aggregates.html#inline-aggregates","title":"Inline Aggregates - Aggregates","type":"extras"},{"doc":"# Validations\n\nValidations are similar to [changes](/documentation/topics/resources/changes.md), except they cannot modify the changeset. They can only continue, or add an error.","ref":"validations.html","title":"Validations","type":"extras"},{"doc":"There are a number of builtin validations that can be used, and are automatically imported into your resources. See `Ash.Resource.Validation.Builtins` for more.\n\nSome examples of usage of builtin validations\n\n```elixir\nvalidate match(:email, ~r/@/)\n\nvalidate compare(:age, greater_than_or_equal_to: 18) do\n  message \"must be over 18 to sign up\"\nend\n\nvalidate present(:last_name) do\n  where [present(:first_name), present(:middle_name)]\n  message \"must also be supplied if setting first name and middle_name\"\nend\n```","ref":"validations.html#builtin-validations","title":"Builtin Validations - Validations","type":"extras"},{"doc":"```elixir\ndefmodule MyApp.Validations.IsPrime do\n  # transform and validate opts\n\n  use Ash.Resource.Validation\n\n  @impl true\n  def init(opts) do\n    if is_atom(opts[:attribute]) do\n      {:ok, opts}\n    else\n      {:error, \"attribute must be an atom!\"}\n    end\n  end\n\n  @impl true\n  def validate(changeset, opts, _context) do\n    value = Ash.Changeset.get_attribute(changeset, opts[:attribute])\n    # this is a function I made up for example\n    if is_nil(value) || Math.is_prime?(value) do\n      :ok\n    else\n      # The returned error will be passed into `Ash.Error.to_ash_error/3`\n      {:error, field: opts[:attribute], message: \"must be prime\"}\n    end\n  end\nend\n```\n\nThis could then be used in a resource via:\n\n```elixir\nvalidate {MyApp.Validations.IsPrime, attribute: :foo}\n```","ref":"validations.html#custom-validations","title":"Custom Validations - Validations","type":"extras"},{"doc":"You can also use anonymous functions for validations. Keep in mind, these cannot be made atomic. This is great for prototyping, but we generally recommend using a module, both for organizational purposes, and to allow adding atomic behavior.\n\n```elixir\nvalidate fn changeset, _context ->\n  # put your code here\nend\n```","ref":"validations.html#anonymous-function-validations","title":"Anonymous Function Validations - Validations","type":"extras"},{"doc":"The `where` can be used to perform validations conditionally.\n\nThe value of the `where` option can either be a validation or a list of validations. All of the `where`-validations must first pass for the main validation to be applied. For expressing complex conditionals, passing a list of built-in validations to `where` can serve as an alternative to writing a custom validation module.","ref":"validations.html#where","title":"Where - Validations","type":"extras"},{"doc":"```elixir\nvalidate present(:other_number), where: absent(:that_number)\n```\n\n```elixir\nvalidate present(:other_number) do\n  where {MyApp.Validations.IsPrime, attribute: :foo}\nend\n```\n\n```elixir\nvalidate present(:other_number),\n  where: [\n    numericality(:large_number, greater_than: 100),\n    one_of(:magic_number, [7, 13, 123])\n  ]\n```","ref":"validations.html#examples","title":"Examples - Validations","type":"extras"},{"doc":"You can place a validation in any create, update, or destroy action. For example:\n\n```elixir\nactions do\n  create :create do\n    validate compare(:age, greater_than_or_equal_to: 18)\n  end\nend\n```\n\nOr you can use the global validations block to validate on all actions of a given type. Where statements can be used in either. Note the warning about running on destroy actions below.\n\n```elixir\nvalidations do\n  validate present([:foo, :bar], at_least: 1) do\n    on [:create, :update]\n    where present(:baz)\n  end\nend\n```\n\nThe validations section allows you to add validations across multiple actions of a changeset\n\n>","ref":"validations.html#action-vs-global-validations","title":"Action vs Global Validations - Validations","type":"extras"},{"doc":">\n> By default, validations in the global `validations` block will run on create and update only. Many validations don't make sense in the context of destroys. To make them run on destroy, use `on: [:create, :update, :destroy]`","ref":"validations.html#running-on-destroy-actions-warning","title":"Running on destroy actions {: .warning} - Validations","type":"extras"},{"doc":"```elixir\nvalidations do\n  validate present([:foo, :bar]), on: :update\n  validate present([:foo, :bar, :baz], at_least: 2), on: :create\n  validate present([:foo, :bar, :baz], at_least: 2), where: [action_is(:action1, :action2)]\n  validate absent([:foo, :bar, :baz], exactly: 1), on: [:update, :destroy]\n  validate {MyCustomValidation, [foo: :bar]}, on: :create\nend\n```","ref":"validations.html#examples","title":"Examples - Validations","type":"extras"},{"doc":"To make a validation atomic, you have to implement the `c:Ash.Resource.Validation.atomic/3` callback. This callback returns an atomic instruction, or a list of atomic instructions, or an error/indication that the validation cannot be done atomically. For our `IsPrime` example above, this would look something like:\n\n```elixir\ndefmodule MyApp.Validations.IsPrime do\n  # transform and validate opts\n\n  use Ash.Resource.Validation\n\n  ...\n\n  def atomic(changeset, opts, context) do\n    # lets ignore that there is no easy/built-in way to check prime numbers in postgres\n    {:atomic,\n      # the list of attributes that are involved in the validation\n      [opts[:attribute]],\n      # the condition that should cause the error\n      # here we refer to the new value or the current value\n      expr(not(fragment(\"is_prime(?)\", ^atomic_ref(opts[:attribute])))),\n      # the error expression\n      expr(\n        error(^InvalidAttribute, %{\n          field: ^opts[:attribute],\n          # the value that caused the error\n          value: ^atomic_ref(opts[:attribute]),\n          # the message to display\n          message: ^(context.message || \"%{field} must be prime\"),\n          vars: %{field: ^opts[:attribute]}\n        })\n      )\n    }\n  end\nend\n```\n\nIn some cases, validations operate on arguments only and therefore have no need of atomic behavior. for this, you can call `validate/3` directly from `atomic/3`. The builtin `Ash.Resource.Validation.Builtins.argument_equals/2` validation does this, for example.\n\n```elixir\n@impl true\ndef atomic(changeset, opts, context) do\n  validate(changeset, opts, context)\nend\n```","ref":"validations.html#atomic-validations","title":"Atomic Validations - Validations","type":"extras"},{"doc":"# Changes\n\nChanges are the primary way of customizing create/update/destroy action behavior. If you are familiar with `Plug`, you can think of an `Ash.Resource.Change` as the equivalent of a `Plug` for changesets. At its most basic, a change will take a changeset and return a new changeset. Changes can be simple, like setting or modifying an attribute value, or more complex, attaching hooks to be executed within the lifecycle of the action.","ref":"changes.html","title":"Changes","type":"extras"},{"doc":"There are a number of builtin changes that can be used, and are automatically imported into your resources. See `Ash.Resource.Change.Builtins` for more.\n\nSome examples of usage of builtin changes\n\n```elixir\n# set the `owner` to the current actor\nchange relate_actor(:owner)\n\n# set `commited_at` to the current timestamp when the action is called\nchange set_attribute(:committed_at, &DateTime.utc_now/0)\n\n# optimistic lock using the `version` attribute\nchange optimistic_lock(:version)\n```","ref":"changes.html#builtin-changes","title":"Builtin Changes - Changes","type":"extras"},{"doc":"```elixir\ndefmodule MyApp.Changes.Slugify do\n\n  use Ash.Resource.Change\n\n  # transform and validate opts\n  @impl true\n  def init(opts) do\n    if is_atom(opts[:attribute]) do\n      {:ok, opts}\n    else\n      {:error, \"attribute must be an atom!\"}\n    end\n  end\n\n  @impl true\n  def change(changeset, opts, _context) do\n    case Ash.Changeset.fetch_change(changeset, opts[:attribute]) do\n      {:ok, new_value} ->\n        slug = String.replace(new_value, ~r/\\s+/, \"-\")\n        Ash.Changeset.force_change_attribute(changeset, opts[:attribute], slug)\n      :error ->\n        changeset\n    end\n  end\nend\n```\n\nThis could then be used in a resource via:\n\n```elixir\nchange {MyApp.Changes.Slugify, attribute: :foo}\n```","ref":"changes.html#custom-changes","title":"Custom Changes - Changes","type":"extras"},{"doc":"You can also use anonymous functions for changes. Keep in mind, these cannot be made atomic, or support batching. This is great for prototyping, but we generally recommend using a module, both for organizational purposes, and to allow adding atomic/batch behavior.\n\n```elixir\nchange fn changeset, _context ->\n  # put your code here\nend\n```","ref":"changes.html#anonymous-function-changes","title":"Anonymous Function Changes - Changes","type":"extras"},{"doc":"The `where` can be used to perform changes conditionally. This functions by running the validations in the `where`, and if the validation returns an error, we discard the error and skip the operation. This means that even custom validations can be used in conditions.\n\nFor example:\n\n```elixir\nchange {Slugify, attribute: :foo} do\n  where [attribute_equals(:slugify, true)]\nend\n```","ref":"changes.html#where","title":"Where - Changes","type":"extras"},{"doc":"You can place a change on any create, update, or destroy action. For example:\n\n```elixir\nactions do\n  create :create do\n    change {Slugify, attribute: :name}\n  end\nend\n```\n\nOr you can use the global changes block to apply to all actions of a given type. Where statements can be used in both cases. Use `on` to determine the types of actions the validation runs on. By default, it only runs on create and update actions.\n\n```elixir\nchanges do\n  change {Slugify, attribute: :name} do\n    on [:create]\n  end\nend\n```\n\nThe changes section allows you to add changes across multiple actions of a resource.\n\n>","ref":"changes.html#action-vs-global-changes","title":"Action vs Global Changes - Changes","type":"extras"},{"doc":">\n> By default, changes in the global `changes` block will run on create and update only. Many changes don't make sense in the context of destroys. To make them run on destroy, use `on: [:create, :update, :destroy]`","ref":"changes.html#running-on-destroy-actions-warning","title":"Running on destroy actions {: .warning} - Changes","type":"extras"},{"doc":"```elixir\nchanges do\n  change relate_actor(:owner)\n  change set_attribute(:committed_at, &DateTime.utc_now/0)\n  change optimistic_lock(:version), on: [:create, :update, :destroy]\n  change {Slugify, [attribute: :foo]}, on: :create\nend\n```","ref":"changes.html#examples","title":"Examples - Changes","type":"extras"},{"doc":"To make a change atomic, you have to implement the `c:Ash.Resource.Change.atomic/3` callback. This callback returns a map of changes to attributes that should be changed atomically. We will also honor any `c:Ash.Resource.Change.after_batch/3` functionality to run code after atomic changes have been applied (only if `atomic/3` callback has also been defined). Note that `c:Ash.Resource.Change.before_batch/3` is not supported in this scenario and will be ignored.\n\n```elixir\ndefmodule MyApp.Changes.Slugify do\n  # transform and validate opts\n\n  use Ash.Resource.Change\n\n  ...\n\n  def atomic(changeset, opts, context) do\n    {:atomic, %{\n      opts[:attribute] => expr(\n        fragment(\"regexp_replace(?, ?, ?)\", ^ref(opts[:attribute]), ~r/\\s+/, \"-\")\n      )\n    }}\n  end\nend\n```\n\nIn some cases, changes operate only on arguments or context, or otherwise can do their work regardless of atomicity. In these cases, you can make your atomic callback call the `change/3` function\n\n```elixir\n@impl true\ndef atomic(changeset, opts, context) do\n  {:ok, change(changeset, opts, context)}\nend\n```\n\nIn other cases, a change may not be necessary in a fully atomic action. For this, you can simply return `:ok`\n\n```elixir\n@impl true\ndef atomic(_changeset, _opts, _context) do\n  :ok\nend\n```","ref":"changes.html#atomic-changes","title":"Atomic Changes - Changes","type":"extras"},{"doc":"Changes can support being run on batches of changesets, using the `c:Ash.Resource.Change.batch_change/3`, `c:Ash.Resource.Change.before_batch/3`, and `c:Ash.Resource.Change.after_batch/3` callbacks.\n\n>","ref":"changes.html#batches","title":"Batches - Changes","type":"extras"},{"doc":">\n> `c:Ash.Resource.Change.batch_change/3` must be defined for `c:Ash.Resource.Change.before_batch/3` and `c:Ash.Resource.Change.after_batch/3` to be called!\n>\n> The one exception is that `after_batch/3` is called after atomic changes as well as batches, so it will be called in cases that `atomic/3` is defined. `before_batch/3` is ignored when calling changes atomically.\n\nFor some changes, this may not be necessary at all, i.e the `Slugify` example has no benefit from batching. If no batch callbacks are added, your change will be run on a loop over the changesets. For the sake of example, however, we will show what it might look like to implement batching for our `Slugify` example.\n\n```elixir\ndefmodule MyApp.Changes.Slugify do\n  # transform and validate opts\n\n  use Ash.Resource.Change\n\n  @impl true\n  def init(opts) do\n    if is_atom(opts[:attribute]) do\n      {:ok, opts}\n    else\n      {:error, \"attribute must be an atom!\"}\n    end\n  end\n\n  @impl true\n  def batch_change(changeset, opts, context) do\n    # here we could run queries or do common work required\n    # for a given batch of changesets.\n    # in this example, however, we just return the changesets with\n    # the change logic applied.\n    Enum.map(changesets, &change(&1, opts, context))\n  end\nend\n```","ref":"changes.html#when-do-we-use-batch-callbacks-warning","title":"When do we use batch callbacks? {: .warning} - Changes","type":"extras"},{"doc":"# Preparations\n\nPreparations are the primary way of customizing read action behavior. If you are familiar with `Plug`, you can think of an `Ash.Resource.Preparation` as the equivalent of a `Plug` for queries. At its most basic, a preparation will take a query and return a new query. Queries can be simple, like adding a filter or a sort, or more complex, attaching hooks to be executed within the lifecycle of the action.","ref":"preparations.html","title":"Preparations","type":"extras"},{"doc":"There are builtin preparations that can be used, and are automatically imported into your resources. See `Ash.Resource.Preparation.Builtins` for more.\n\nThe primary preparation you will use is `build/1`, which passes the arguments through to `Ash.Query.build/2` when the preparation is run. See that function for what options can be provided.\n\nSome examples of usage of builtin preparations\n\n```elixir\n# sort by inserted at descending\nprepare build(sort: [inserted_at: :desc])\n\n# only show the top 5 results\nprepare build(sort: [total_points: :desc], limit: 5)\n```","ref":"preparations.html#builtin-preparations","title":"Builtin Preparations - Preparations","type":"extras"},{"doc":"```elixir\ndefmodule MyApp.Preparations.Top5 do\n  use Ash.Resource.Preparation\n\n  # transform and validate opts\n  @impl true\n  def init(opts) do\n    if is_atom(opts[:attribute]) do\n      {:ok, opts}\n    else\n      {:error, \"attribute must be an atom!\"}\n    end\n  end\n\n  @impl true\n  def prepare(query, opts, _context) do\n    attribute = opts[:attribute]\n\n    query\n    |> Ash.Query.sort([{attribute, :desc}])\n    |> Ash.Query.limit(5)\n  end\nend\n```\n\nThis could then be used in a resource via:\n\n```elixir\nprepare {MyApp.Preparations.Top5, attribute: :foo}\n```","ref":"preparations.html#custom-preparations","title":"Custom Preparations - Preparations","type":"extras"},{"doc":"You can also use anonymous functions for preparations. This is great for prototyping, but we generally recommend using a module for organizational purposes.\n\n```elixir\nprepare fn query, _context ->\n  # put your code here\nend\n```","ref":"preparations.html#anonymous-function-queries","title":"Anonymous Function Queries - Preparations","type":"extras"},{"doc":"You can place a preparation on a read action, like so:\n\n```elixir\nactions do\n  read :read do\n    prepare {Top5, attribute: :name}\n  end\nend\n```\n\nOr you can use the global preparations block to apply to all read actions.\n\n```elixir\npreparations do\n  prepare {Top5, attribute: :name}\nend\n```\n\nThe preparations section allows you to add preparations across multiple actions of a resource.","ref":"preparations.html#action-vs-global-preparations","title":"Action vs Global Preparations - Preparations","type":"extras"},{"doc":"# Code Interface\n\nOne of the ways that we interact with our resources is via hand-written code. The general pattern for that looks like building a query or a changeset for a given action, and calling it via functions like `Ash.read/2` and `Ash.create/2`. This, however, is just one way to use Ash, and is designed to help you build tools that work with resources, and to power things like `AshPhoenix.Form`, `AshGraphql.Resource` and `AshJsonApi.Resource`. When working with your resources in code, we generally want something more idiomatic and simple. For example, on a domain called `Helpdesk.Support`.\n\n```elixir\nresources do\n  resource Ticket do\n    define :open_ticket, args: [:subject], action: :open\n  end\nend\n```\n\nThis simple setup now allows you to open a ticket with `Helpdesk.Support.open_ticket(subject)`. You can cause it to raise errors instead of return them with `Helpdesk.Support.open_ticket!(subject)`. For information on the options and additional inputs these defined functions take, look at the generated function documentation, which you can do in iex with `h Helpdesk.Support.open_ticket`. For more information on the code interface, read the DSL documentation: `d:Ash.Domain.Dsl.resource.interfaces`.","ref":"code-interfaces.html","title":"Code Interface","type":"extras"},{"doc":"You can define a code interface on individual resources as well, using the `code_interface` block. The DSL is the same as the DSL for defining it in the `domain`. For example:\n\n```elixir\ncode_interface do\n  # the action open can be omitted because it matches the functon name\n  define :open, args: [:subject]\nend\n```\n\nThese will then be called on the resource itself, i.e `Helpdesk.Support.Ticket.open(subject)`.","ref":"code-interfaces.html#code-interfaces-on-the-resource","title":"Code interfaces on the resource - Code Interface","type":"extras"},{"doc":"If the action is an update or destroy, it will take a record or a changeset as its _first_ argument.\nIf the action is a read action, it will take a starting query as an _opt in the last_ argument.\n\nAll functions will have an optional last argument that accepts options. See `Ash.Resource.Interface.interface_options/2` for valid options.\n\nFor reads:\n\n- `:query` - a query to start the action with, can be used to filter/sort the results of the action.\n\nFor creates:\n\n- `:changeset` - a changeset to start the action with\n\nThey will also have an optional second to last argument that is a freeform map to provide action input. It _must be a map_.\nIf it is a keyword list, it will be assumed that it is actually `options` (for convenience).\nThis allows for the following behaviour:\n\n```elixir\n# Because the 3rd argument is a keyword list, we use it as options\nAccounts.register_user(username, password, [tenant: \"organization_22\"])\n# Because the 3rd argument is a map, we use it as action input\nAccounts.register_user(username, password, %{key: \"val\"})\n# When all arguments are provided it is unambiguous\nAccounts.register_user(username, password, %{key: \"val\"}, [tenant: \"organization_22\"])\n```","ref":"code-interfaces.html#using-the-code-interface","title":"Using the code interface - Code Interface","type":"extras"},{"doc":"Resource calculations can be run dynamically using `Ash.calculate/3`, but\nyou can also expose them using the code_interface with `define_calculation`.\n\nFor example:\n\n```elixir\ncalculations do\n  calculate :full_name, :string, expr(first_name <> ^arg(:separator) <> last_name) do\n    argument :separator, :string do\n      allow_nil? false\n      default \" \"\n    end\n  end\nend\n\n# in your domain\nresource User do\n  define_calculation :full_name, args: [:first_name, :last_name, {:optional, :separator}]\n  # or if you want to take a record as an argument\n  define_calculation :full_name, args: [:_record]\nend\n```\n\nThis could now be used like so:\n\n```elixir\nAccounts.full_name(\"Jessie\", \"James\", \"-\")\n# or with a record as an argument\nAccounts.full_name(user)\n```\n\nThis allows for running calculations without an instance of a resource, normally done via `Ash.load(user, :full_name)`\n\nBy default, configured args will be provided for any matching named reference _or_ argument. This is normally fine, but in the case that you have an argument and a reference with the same name, you can specify it by supplying `{:arg, :name}` and `{:ref, :name}`. For example:\n\n```elixir\ndefine_calculation :id_matches, args: [{:arg, :id}, {:ref, :id}]\n```\n\nTo make arguments optional, wrap them in `{:optional, ..}`, for example:\n\n```elixir\ndefine_calculation :id_matches, args: [{:arg, :id}, {:optional, {:ref, :id}}]\n```","ref":"code-interfaces.html#calculations","title":"Calculations - Code Interface","type":"extras"},{"doc":"","ref":"code-interfaces.html#bulk-atomic-actions","title":"Bulk & atomic actions - Code Interface","type":"extras"},{"doc":"Updates support a list, stream, or query as the first argument. This allows for bulk updates. In this mode, an `%Ash.BulkResult{}` is returned.\n\n>","ref":"code-interfaces.html#bulk-updates-destroys","title":"Bulk Updates & Destroys - Code Interface","type":"extras"},{"doc":">\n> You cannot provide \"any enumerable\", only lists, streams (a function or a %Stream{}), and queries. We have to be able to distinguish the input as a bulk input and not input to the action itself.\n\nFor example:\n\n```elixir\nPost\n|> Ash.Query.filter(author_id == ^author_id)\n|> MyApp.Blog.archive_post!()\n# => %Ash.BulkResult{}\n\n[%Post{}, %Post{}]\n|> MyApp.Blog.destroy_post!()\n# => %Ash.BulkResult{}\nend\n```\n\nYou can pass options to the bulk operation with the `bulk_options` option to your code interface function.","ref":"code-interfaces.html#valid-inputs-warning","title":"Valid inputs {: .warning} - Code Interface","type":"extras"},{"doc":"For bulk creates, you can provide a list or stream of inputs. In this mode also, an `%Ash.BulkResult{}` is returned.\n\n>","ref":"code-interfaces.html#bulk-creates","title":"Bulk Creates - Code Interface","type":"extras"},{"doc":">\n> You cannot provide \"any enumerable\", only lists, streams (a function or a %Stream{}). We have to be able to distinguish the input as a bulk input and not input to the action itself.\n\nAny arguments on the code interface will be applied to _all_ inputs given as a list, and the arguments will come first.\n\n```elixir\n[%{title: \"Post 1\"}, %{title: \"Post 2\"}, ...]\n# if `:special` is an action argument, it will be applied to all inputs\n|> MyApp.Blog.create_post!(:special, bulk_options: [batch_size: 10])\n```","ref":"code-interfaces.html#valid-inputs-warning","title":"Valid inputs {: .warning} - Code Interface","type":"extras"},{"doc":"The `:stream?` option allows you to return a stream to be enumerated later.\n\nFor example:\n\n```elixir\nMyApp.Blog.my_posts(stream?: true, actor: me)\n# => #Stream<...>\n```","ref":"code-interfaces.html#returning-streams-from-read-actions","title":"Returning streams from read actions - Code Interface","type":"extras"},{"doc":"# Embedded Resources\n\nEmbedded resources are stored as maps in attributes of other resources. They are great for storing structured data, and support a whole range of useful features that resources support. For example, you can have calculations, validations, policies and even relationships on embedded resources. Here is an example of a simple embedded resource:\n\n```elixir\ndefmodule MyApp.Profile do\n  use Ash.Resource,\n    data_layer: :embedded # Use the atom `:embedded` as the data layer.\n\n  attributes do\n    attribute :first_name, :string, public?: true\n    attribute :last_name, :string, public?: true\n  end\nend\n```\n\n>","ref":"embedded-resources.html","title":"Embedded Resources","type":"extras"},{"doc":">\n> Embedded resources cannot have aggregates, or expression calculations that rely on data-layer-specific capabilities.","ref":"embedded-resources.html#embedded-resources-can-t-do-everything-info","title":"Embedded resources can't do everything {: .info} - Embedded Resources","type":"extras"},{"doc":"Embedded resources define an `Ash.Type` under the hood, meaning you can use them anywhere you would use an Ash type.\n\n```elixir\ndefmodule MyApp.User do\n  use Ash.Resource, ...\n\n  attributes do\n    ...\n\n    attribute :profile, MyApp.Profile, public?: true\n    attribute :profiles, {:array, MyApp.Profile}, public?: true # You can also have an array of embeds\n  end\nend\n```","ref":"embedded-resources.html#adding-embedded-resource-attributes","title":"Adding embedded resource attributes - Embedded Resources","type":"extras"},{"doc":"By default, all fields on an embedded resource will be included in the data layer, including keys with nil values. To prevent this, add the `embed_nil_values?` option to `use Ash.Resource`. For example:\n\n```elixir\ndefmodule YourEmbed do\n  use Ash.Resource,\n    data_layer: :embedded,\n    embed_nil_values?: false\nend\n```","ref":"embedded-resources.html#handling-nil-values","title":"Handling nil values - Embedded Resources","type":"extras"},{"doc":"If you manually supply instances of the embedded structs, the structs you provide are used with no validation. For example:\n\n```elixir\nAsh.Changeset.for_update(user, :update, %{profile: %MyApp.Profile{first_name: \"first_name\", last_name: \"last_name\"}})\n```\n\nHowever, you can also treat embedded resources like regular resources that can be \"created\", \"updated\", and \"destroyed\".\nTo do this, provide maps as the input, instead of structs. In the example above, if you just wanted to change the `first_name`, you'd provide:\n\n```elixir\nAsh.Changeset.for_update(user, :update, %{profile: %{first_name: \"first_name\"}})\n```\n\nThis will call the primary `update` action on the resource. This allows you to define an action on the embed, and add validations to it. For example, you might have something like this:\n\n```elixir\ndefmodule MyApp.Profile do\n  use Ash.Resource,\n    data_layer: :embedded # Use the atom `:embedded` as the data layer.\n\n  attributes do\n    attribute :first_name, :string, public?: true\n    attribute :last_name, :string, public?: true\n  end\n\n  validations do\n    validate present([:first_name, :last_name], at_least: 1)\n  end\nend\n```","ref":"embedded-resources.html#editing-embedded-attributes","title":"Editing embedded attributes - Embedded Resources","type":"extras"},{"doc":"Calculations can be added to embedded resources. When you use an embedded resource, you declare what calculations to load via a `constraint`.\nFor example:\n\n```elixir\ndefmodule MyApp.Profile do\n  use Ash.Resource,\n    data_layer: :embedded # Use the atom `:embedded` as the data layer.\n\n  attributes do\n    attribute :first_name, :string, public?: true\n    attribute :last_name, :string, public?: true\n  end\n\n  calculations do\n    calculate :full_name, :string, concat([:first_name, :last_name], \" \")\n  end\nend\n\ndefmodule MyApp.User do\n  use Ash.Resource,\n    ...\n\n  attributes do\n    attribute :profile, MyApp.Profile do\n      public? true\n      constraints [load: [:full_name]]\n    end\n  end\nend\n```","ref":"embedded-resources.html#calculations","title":"Calculations - Embedded Resources","type":"extras"},{"doc":"Remember: default actions are already implemented for a resource, with no need to add them. They are called `:create`, `:update`, `:destroy`, and `:read`. You can use those without defining them. You only need to define them if you wish to override their configuration.","ref":"embedded-resources.html#determining-what-action-s-will-be-called","title":"Determining what action(s) will be called: - Embedded Resources","type":"extras"},{"doc":"- If the current value is `nil` - a `create` with the provided values\n- If the current value is not `nil` - an `update` with the provided values\n- If the current value is not `nil` and the _new value_ is `nil` - a `destroy` with the original value","ref":"embedded-resources.html#single-embeds","title":"Single Embeds - Embedded Resources","type":"extras"},{"doc":"All values in the original array are destroyed, and all maps in the new array are used to `create` new records.","ref":"embedded-resources.html#array-embeds","title":"Array Embeds - Embedded Resources","type":"extras"},{"doc":"Adding a primary key to your embedded resources is especially useful when managing lists of data. Specifically, it allows you to consider changes to elements with matching primary key values as `updates`.\n\nFor example:\n\n```elixir\ndefmodule MyApp.Tag do\n  use Ash.Resource,\n    data_layer: :embedded\n\n  attributes do\n    uuid_primary_key :id\n    attribute :name, :string, public?: true\n    attribute :counter, :integer, public?: true\n  end\n\n  validations do\n    validate {Increasing, field: :counter}, on: :update\n  end\nend\n```\n\nNow, you can accept input meant to `update` individual list items. The entire list must still be provided, but any items with a matching id will be considered an `update` instead of a `destroy` + `create`.","ref":"embedded-resources.html#adding-a-primary-key","title":"Adding a primary key - Embedded Resources","type":"extras"},{"doc":"#### Single Embeds with primary keys\n\n- If you provide a struct, instead of a map, the value provided is used as the new relationship value directly.\n- If the current value is `nil` - a `create` with the provided values\n- If the current value is not `nil` and the primary keys match - an `update` with the provided values\n- If the current value is not `nil` and the primary keys _don't_ match - a `destroy` of the original value and a `create` of the new value\n- If the current value is not `nil` and the _new value_ is `nil` - a `destroy` with the original value\n\n#### Array Embeds with primary keys\n\n- If you provide structs, instead of maps, the value provided is used as the new relationship value directly.\n- Any values in the original list with no primary key matching in the new list are `destroy`ed.\n- Any values in the new list with no primary key matching in the original list are `create`d.\n- Any values with a primary key match in the original list and the new list are `update`d","ref":"embedded-resources.html#determining-what-action-s-will-be-called-with-a-primary-key","title":"Determining what action(s) will be called with a primary key: - Embedded Resources","type":"extras"},{"doc":"Identities can be added on an embedded resource, which will ensure that for any given list, they are unique on that identity. For example, if you had an embedded resource called `Tag`, you could add an identity on `name` to ensure that nothing has duplicate tag names.","ref":"embedded-resources.html#identities","title":"Identities - Embedded Resources","type":"extras"},{"doc":"The AshJsonApi extension exposes these attributes as maps. However, the AshGraphql extension allows you\nto specify a type (but not queries/mutations) for an embedded resource. If you do, instead of being treated as a `:json` type it will get its own named input object type and field type.","ref":"embedded-resources.html#usage-in-extensions","title":"Usage in Extensions - Embedded Resources","type":"extras"},{"doc":"When building changesets for embedded resources, the source changeset will be available in action changes under `changeset.context.__source__`.\nThis allows you to customize the action based on the details of the parent changeset.","ref":"embedded-resources.html#accessing-the-source-changeset","title":"Accessing the source changeset - Embedded Resources","type":"extras"},{"doc":"# Identities\n\nIdentities are a way to declare that a record (an instance of a resource) can be uniquely identified by a set of attributes. This information can be used in various ways throughout the framework. The primary key of the resource does not need to be listed as an identity.","ref":"identities.html","title":"Identities","type":"extras"},{"doc":"Identities are defined at the top level of a resource module, eg.\n\n```elixir\ndefmodule MyApp.MyResource do\n  use Ash.Resource #, ...\n  # ...\n\n  identities do\n    # If the `email` attribute must be unique across all records\n    identity :unique_email, [:email]\n\n    # If the `username` attribute must be unique for every record with a given `site` value\n    identity :special_usernames, [:username, :site]\n  end\nend\n```\n\nSee `d:Ash.Resource.Dsl.identities` for the full range of options available when defining identities.","ref":"identities.html#defining-an-identity","title":"Defining an identity - Identities","type":"extras"},{"doc":"This will allow these fields to be passed to `Ash.get/3`, e.g `Ash.get(Resource, %{email: \"foo\"})`.","ref":"identities.html#using-ash-get","title":"Using `Ash.get` - Identities","type":"extras"},{"doc":"Create actions support the `upsert?: true` option, if the data layer supports it. An `upsert?` involves checking for a conflict on some set of attributes, and translating the behavior to an update in the case one is found. By default, the primary key is used when looking for duplicates, but you can set `[upsert?: true, upsert_identity: :identity_name]` to tell it to look for conflicts on a specific identity.","ref":"identities.html#using-upserts","title":"Using upserts - Identities","type":"extras"},{"doc":"Tools like `AshPostgres` will create unique constraints in the database automatically for each identity. These unique constraints will honor other configuration on your resource, like the `base_filter` and [attribute multitenancy](/documentation/topics/multitenancy.md#attribute-multitenancy)","ref":"identities.html#creating-unique-constraints","title":"Creating unique constraints - Identities","type":"extras"},{"doc":"Setting `eager_check?: true` on an identity will allow that identity to be checked when building a create changeset over the resource. This allows for showing quick up-front validations about whether some value is taken, for example. If the resource does not have the domain configured, you can specify the domain to use with `eager_check_with: DomainName`.\n\nIf you are using `AshPhoenix.Form`, for example, this looks for a conflicting record on each call to `Form.validate/2`.\nFor updates, it is only checked if one of the involved fields is being changed.\n\nFor creates, The identity is checked unless your are performing an `upsert`, and the `upsert_identity` is this identity. Keep in mind that for this to work properly, you will need to pass the `upsert?: true, upsert_identity: :identity_name` _when creating the changeset_. The `primary?` read action is used to search for a record. This will error if you have not configured one.","ref":"identities.html#eager-checking","title":"Eager Checking - Identities","type":"extras"},{"doc":"`pre_check?` behaves the same as `eager_check?`, but it runs just prior to the action being committed. Useful for data layers that don't support transactions/unique constraints, or manual resources with identities. `Ash.DataLayer.Ets` will require you to set `pre_check?` since the ETS data layer has no built in support for unique constraints. The domain can be manually specified with `pre_check_with: DomainName`.","ref":"identities.html#pre-checking","title":"Pre Checking - Identities","type":"extras"},{"doc":"# Notifiers","ref":"notifiers.html","title":"Notifiers","type":"extras"},{"doc":"Ash comes with a builtin pub_sub notifier: `Ash.Notifier.PubSub`. See the module documentation for more.","ref":"notifiers.html#built-in-notifiers","title":"Built-in Notifiers - Notifiers","type":"extras"},{"doc":"A notifier is a simple extension that must implement a single callback `notify/1`. Notifiers do not have to implement an Ash DSL extension, but they may in order to configure how that notifier should behave. See `Ash.Notifier.Notification` for the currently available fields on a notification.\n\nFor more information on creating a DSL extension to configure your notifier, see the docs for `Spark.Dsl.Extension`.\n\n>","ref":"notifiers.html#creating-your-own-notifier","title":"Creating your own notifier - Notifiers","type":"extras"},{"doc":">\n> Notifiers should not do intensive synchronous work. If any heavy work needs to be done, they should delegate to something else to handle the notification, like sending it to a GenServer or GenStage.","ref":"notifiers.html#notifier-performance-warning","title":"Notifier performance {: .warning} - Notifiers","type":"extras"},{"doc":"```elixir\ndefmodule ExampleNotifier do\n  use Ash.Notifier\n\n  def notify(%Ash.Notifier.Notification{resource: resource, action: %{type: :create}, actor: actor}) do\n    if actor do\n      Logger.info(\"#{actor.id} created a #{resource}\")\n    else\n      Logger.info(\"A non-logged in user created a #{resource}\")\n    end\n  end\nend\n```","ref":"notifiers.html#example-notifier","title":"Example notifier - Notifiers","type":"extras"},{"doc":"If the notifier is also an extension, include it in the `notifiers` key:\n\n```elixir\ndefmodule MyResource do\n  use Ash.Resource,\n    notifiers: [ExampleNotifier]\nend\n```\n\nConfiguring a notifier for a specific action or actions can be a great way to avoid complexity in the implementation of a notifier. It allows you to avoid doing things like pattern matching on the action, and treat it more like a change module, that does its work whenever it is called.\n\n```elixir\ncreate :create do\n  notifiers [ExampleNotifier]\nend\n```\n\nWhen your notifier is not an extension, and you want it to run on all actions, include it this way to avoid unnecessary compile time dependencies:\n\n```elixir\ndefmodule MyResource do\n  use Ash.Resource,\n    simple_notifiers: [ExampleNotifier]\nend\n```","ref":"notifiers.html#including-a-notifier-in-a-resource","title":"Including a notifier in a resource - Notifiers","type":"extras"},{"doc":"Domain calls involving resources who's datalayer supports transactions (like Postgres), notifications are saved up and sent after the transaction is closed. For example, the domain call below ultimately results in many many database calls.\n\n```elixir\nPost\n|> Ash.Changeset.for_update(:update, %{})\n|> Ash.Changeset.manage_relationship(:related_posts, [1, 2, 3], type: :append)\n|> Ash.Changeset.manage_relationship(:related_posts, [4, 5], type: :remove)\n|> Ash.Changeset.manage_relationship(:comments, [10], type: :append)\n|> Ash.update!()\n```\n\n`Ash.Changeset.manage_relationship` doesn't leverage bulk operations yet, so it performs the following operations:\n\n- a read of the currently related posts\n- a read of the currently related comments\n- a creation of a post_link to relate to 1\n- a creation of a post_link to relate to 2\n- a creation of a post_link to relate to 3\n- a destruction of the post_link related to 4\n- a destruction of the post_link related to 5\n- an update to comment 10, to set its `post_id` to this post\n\nIf all three of these resources have notifiers configured, we need to send a notification for each operation (notifications are not sent for reads). For data consistency reasons, if a data layer supports transactions, all writes are done in a transaction. However, if you try to read the record from the database that you have just received a notification about before the transaction has been closed, in a different process, the information will be wrong. For this reason, Ash accumulates notifications until they can be sent.\n\nIf you need to perform multiple operations against your resources in your own transaction, you will have to handle that case yourself. To support this, `Ash.create/2`, `Ash.update/2` and `Ash.destroy/2` support a `return_notifications?: true` option. This causes the domain call to return `{:ok, result, notifications}` in the successful case. Here is an example of how you might use it.\n\n```elixir\nresult =\n  Ash.DataLayer.transaction(resource, fn ->\n    {:ok, something, notifications1} = create_something()\n    {:ok, result, notifications2} = create_another_thing(something)\n    {:ok, notifications3} = destroy_something(something)\n\n    {result, Enum.concat([notifications1, notifications2, notifications3])}\n  end)\n\ncase result do\n  {:ok, value, notifications} ->\n     Ash.Notifier.notify(notifications)\n\n     value\n  {:error, error} ->\n    handle_error(error)\nend\n```","ref":"notifiers.html#transactions","title":"Transactions - Notifiers","type":"extras"},{"doc":"# Actions\n\nIn Ash, actions are the primary way to interact with your resources. There are five types of actions:\n\n- [Read](documentation/topics/actions/read-actions.md)\n- [Create](documentation/topics/actions/create-actions.md)\n- [Update](documentation/topics/actions/update-actions.md)\n- [Destroy](documentation/topics/actions/destroy-actions.md)\n- [Generic](documentation/topics/actions/generic-actions.md)\n\nAll actions can be run in a transaction. Create, update and destroy actions are run in a transaction by _default_, whereas read and generic actions require opting in with `transaction? true` in the action definition. Each action has its own set of options, ways of calling it, and ways of customizing it. See the relevant guide for specifics on each action type. This topic focuses on idiomatic ways to use actions, and concepts that cross all action types.","ref":"actions.html","title":"Actions","type":"extras"},{"doc":"Primary actions are a way to inform the framework which actions should be used in certain \"automated\" circumstances, or in cases where an action has not been specified. If a primary action is attempted to be used but does not exist, you will get an error about it at runtime.\n\nThe place you typically need primary actions is when [Managing Relationships](/documentation/topics/resources/relationships.md#managing-relationships). When using the `defaults` option to add default actions, they are marked as primary.\n\nA simple example where a primary action would be used:\n\n```elixir\n# No action is specified, so we look for a primary read.\nAsh.get!(Resource, \"8ba0ab56-c6e3-4ab0-9c9c-df70e9945281\")\n```\n\nTo mark an action as primary, add the option, i.e\n\n```elixir\nread :action_name do\n  primary? true\nend\n```","ref":"actions.html#primary-actions","title":"Primary Actions - Actions","type":"extras"},{"doc":"[Create](documentation/topics/actions/create-actions.md) and [Update](documentation/topics/actions/update-actions.md) actions can accept attributes as input. There are two primary ways that you annotate this.","ref":"actions.html#accepting-inputs","title":"Accepting Inputs - Actions","type":"extras"},{"doc":"Each action can define what it accepts, for example:\n\n```elixir\ncreate :create do\n  accept [:name, :description]\nend\n```\n\nYou could then pass in `%{name: \"a name\", description: \"a description\"}` to this action.","ref":"actions.html#using-accept-in-specific-actions","title":"Using `accept` in specific actions - Actions","type":"extras"},{"doc":"The resource can have a `default_accept`, declared in its `actions` block, which will be used as the accept list for `create` and `update` actions, if they don't define one.\n\n```elixir\nactions do\n  default_accept [:name, :description]\n\n  create :create\n  update :update\n\n  update :special_update do\n    accept [:something_else]\n  end\nend\n```\n\nIn the example above, you can provide `%{name: \"a name\", description: \"a description\"}` to both the `:create` and `:update` actions, but only `%{something_else: \"some_value\"}` to `:special_update`.","ref":"actions.html#using-default_accept-for-all-actions","title":"Using `default_accept` for all actions - Actions","type":"extras"},{"doc":"","ref":"actions.html#idiomatic-actions","title":"Idiomatic Actions - Actions","type":"extras"},{"doc":"The intent behind Ash is _not_ to have you building simple CRUD style applications. In a typical set up you may have a resource with four basic actions, there is even a shorthand to accomplish this:\n\n```elixir\nactions do\n  defaults [:read, :destroy, create: :*, update: :*]\nend\n```\n\nBut that is just a simple way to get started, or to create resources that really don't do anything beyond those four operations. You can have _as many actions as you want_. The best designed Ash applications will have numerous actions, named after the intent behind how they are used. They won't have all reads going through a single read action, and the same goes for the other action types. The richer the actions on the resource, the better interface you can have. With that said, many resources may only have those four basic actions, especially those that are \"managed\" through some parent resource. See the guide on [Managing Relationships](/documentation/topics/resources/relationships.md#managing-relationships) for more.","ref":"actions.html#name-your-actions","title":"Name Your Actions - Actions","type":"extras"},{"doc":"Ash provides utilities to modify queries and changesets _outside_ of the actions on the resources. This is a very important tool in our tool belt, _but_ it is very easy to abuse. The intent is that as much behavior as possible is put into the action. Here is the \"wrong way\" to do it. There is a lot going on here, so don't hesitate to check out other relevant guides if you see something you don't understand.\n\n```elixir\ndef top_tickets(user_id) do\n  Ticket\n  |> Ash.Query.for_read(:read)\n  |> Ash.Query.filter(priority in [:medium, :high])\n  |> Ash.Query.filter(representative_id == ^user_id)\n  |> Ash.Query.filter(status == :open)\n  |> Ash.Query.sort(opened_at: :desc)\n  |> Ash.Query.limit(10)\n  |> Helpdesk.Support.read!()\nend\n\n# in the resource\n\nactions do \n  defaults [:read, ...]\nend\n```\n\nAnd here is the \"right way\", where the rules about getting the top tickets have been moved into the resource as a nicely named action, and included in the `code_interface` of that resource. The reality of the situation is that `top_tickets/1` is meant to be obsoleted by your Ash resource! Here is how it _should_ be done.\n\n```elixir\n# in the resource\n\ncode_interface do\n  define :top, args: [:user_id]\nend\n\nactions do \n  read :top do\n    argument :user_id, :uuid do\n      allow_nil? false\n    end\n\n    prepare build(limit: 10, sort: [opened_at: :desc])\n\n    filter expr(priority in [:medium, :high] and representative_id == ^arg(:user_id) and status == :open)\n  end\nend\n```\n\nNow, whatever code I had that would have called `top_tickets/1` can now call `Helpdesk.Support.Ticket.top(user.id)`. By doing it this way, you get the primary benefit of getting a nice simple interface to call into, but you _also_ have a way to modify how the action is invoked in any way necessary, by going back to the old way of building the query manually. For example, if I also only want to see top tickets that were opened in the last 10 minutes:\n\n```elixir\nTicket\n|> Ash.Query.for_read(:top, %{user_id: user.id})\n|> Ash.Query.filter(opened_at > ago(10, :minute))\n|> Helpdesk.Support.read!()\n```\n\nThat is the best of both worlds! These same lessons transfer to changeset based actions as well.","ref":"actions.html#put-everything-inside-the-action","title":"Put everything inside the action - Actions","type":"extras"},{"doc":"# Read Actions\n\nRead actions operate on an `Ash.Query`. Read actions always return lists of data. The act of [pagination](#pagination), or returning a [single result](#ash-get), is handled as part of the interface, and is not a concern of the action itself. Here is an example of a read action:\n\n```elixir\n# Giving your actions informative names is always a good idea\nread :ticket_queue do\n  # Use arguments to take in values you need to run your read action.\n  argument :priorities, {:array, :atom} do\n    constraints items: [one_of: [:low, :medium, :high]]\n  end\n\n  # This action may be paginated,\n  # and returns a total count of records by default\n  pagination offset: true, countable: :by_default\n\n  # Arguments can be used in preparations and filters\n  filter expr(status == :open and priority in ^arg(:priorities))\nend\n```","ref":"read-actions.html","title":"Read Actions","type":"extras"},{"doc":"The `Ash.get!` function is a convenience function for running a read action, filtering by a unique identifier, and expecting only a single result. It is equivalent to the following code:\n\n```elixir\nAsh.get!(Resource, 1)\n\n# is roughly equivalent to\n\nResource\n|> Ash.Query.filter(id == 1)\n|> Ash.Query.limit(2)\n|> Ash.read!()\n|> case do\n  [] -> # raise not found error\n  [result] -> result\n  [_, _] -> # raise too many results error\nend\n```","ref":"read-actions.html#ash-get","title":"Ash.get! - Read Actions","type":"extras"},{"doc":"The `Ash.read_one!` function is a similar convenience function to `Ash.get!`, but it does not take a unique identifier. It is useful when you expect an action to return only a single result, and want to enforce that and return a single result.\n\n```elixir\nAsh.read_one!(query)\n\n# is roughly equivalent to\n\nquery\n|> Ash.Query.limit(2)\n|> Ash.read!()\n|> case do\n  [] -> nil\n  [result] -> result\n  [_, _] -> # raise too many results error\nend\n```","ref":"read-actions.html#ash-read_one","title":"Ash.read_one! - Read Actions","type":"extras"},{"doc":"Ash provides built-in support for pagination when reading resources and their relationships. You can find more information about this in the [pagination guide](/documentation/topics/advanced/pagination.livemd).","ref":"read-actions.html#pagination","title":"Pagination - Read Actions","type":"extras"},{"doc":"The following steps are performed when you call `Ash.Query.for_read/4`.\n\n- Cast input arguments - `d:Ash.Resource.Dsl.actions.read.argument`\n- Set default argument values - `d:Ash.Resource.Dsl.actions.read.argument|default`\n- Add errors for missing required arguments | `d:Ash.Resource.Dsl.actions.read.argument|allow_nil?`\n- Run query preparations | `d:Ash.Resource.Dsl.actions.read.prepare`\n- Add action filter | `d:Ash.Resource.Dsl.actions.read|filter`","ref":"read-actions.html#what-happens-when-you-call-ash-query-for_read-4","title":"What happens when you call Ash.Query.for_read/4 - Read Actions","type":"extras"},{"doc":"These steps are trimmed down, and are aimed at helping users understand the general flow. Some steps are omitted.\n\n- Run `Ash.Query.for_read/3` if it has not already been run\n- [Apply tenant filters for attribute](/documentation/topics/advanced/multitenancy.md)\n- Apply [pagination](/documentation/topics/advanced/pagination.livemd) options\n- Run before action hooks\n- Multi-datalayer filter is synthesized. We run queries in other data layers to fetch ids and translate related filters to `(destination_field in ^ids)`\n- Strict Check & Filter Authorization is run\n- Data layer query is built and validated\n- Field policies are added to the query\n- Data layer query is Run\n- Authorizer \"runtime\" checks are run (you likely do not have any of these)\n\nThe following steps happen while(asynchronously) or after the main data layer query has been run\n\n- If paginating and count was requested, the count is determined at the same time as the query is run.\n- Any calculations & aggregates that were able to be run outside of the main query are run\n- Relationships, calculations, and aggregates are loaded","ref":"read-actions.html#what-happens-when-you-run-the-action","title":"What happens when you run the action - Read Actions","type":"extras"},{"doc":"# Create Actions\n\nCreate actions are used to create new records in the data layer. For example:\n\n```elixir\n# on a ticket resource\ncreate :open do\n  accept [:title]\n  change set_attribute(:status, :open)\nend\n```\n\nHere we have a create action called `:open` that allows setting the `title`, and sets the `status` to `:open`. It could be called like so:\n\n```elixir\nTicket\n|> Ash.Changeset.for_create(:open, %{title: \"Need help!\"})\n|> Ash.create!()\n```\n\nSee the [Code Interface guide](documentation/topics/resources/code-interfaces.md) for creating an interface to call the action more elegantly, like so:\n\n```elixir\nSupport.open_ticket!(\"Need help!\")\n```","ref":"create-actions.html","title":"Create Actions","type":"extras"},{"doc":"Bulk creates take a list or stream of inputs for a given action, and batches calls to the underlying data layer.\n\nGiven our example above, you could call `Ash.bulk_create` like so:\n\n```elixir\nAsh.bulk_create([%{title: \"Foo\"}, %{title: \"Bar\"}], Ticket, :open)\n```\n\n>","ref":"create-actions.html#bulk-creates","title":"Bulk creates - Create Actions","type":"extras"},{"doc":">\n> Make sure to thoroughly read and understand the documentation in `Ash.bulk_create/4` before using. Read each option and note the default values. By default, bulk creates don't return records or errors, and don't emit notifications.","ref":"create-actions.html#check-the-docs-warning","title":"Check the docs! {: .warning} - Create Actions","type":"extras"},{"doc":"Generally speaking, all regular Ash create actions are compatible (or can be made to be compatible) with bulk create actions. However, there are some important considerations.\n\n- `Ash.Resource.Change` modules can be optimized for bulk actions by implementing `batch_change/3`, `before_batch/3` and `after_batch/3`. If you implement `batch_change/3`, the `change` function will no longer be called, and you should swap any behavior implemented with `before_action` and `after_action` hooks to logic in the `before_batch` and `after_batch` callbacks.\n\n- Actions that reference arguments in changes, i.e `change set_attribute(:attr, ^arg(:arg))` will prevent us from using the `batch_change/3` behavior. This is usually not a problem, for instance that change is lightweight and would not benefit from being optimized with `batch_change/3`\n\n- If your action uses `after_action` hooks, or has `after_batch/3` logic defined for any of its changes, then we _must_ ask the data layer to return the records it inserted. Again, this is not generally a problem because we throw away the results of each batch by default. If you are using `return_records?: true` then you are already requesting all of the results anyway.","ref":"create-actions.html#performance","title":"Performance - Create Actions","type":"extras"},{"doc":"Returning a stream allows you to work with a bulk action as an Elixir Stream. For example:\n\n```elixir\ninput_stream()\n|> Ash.bulk_create(Resource, :action, return_stream?: true, return_records?: true)\n|> Stream.map(fn {:ok, result} ->\n  # process results\n  {:error, error} ->\n  # process errors\nend)\n|> Enum.reduce(%{}, fn {:ok, result}, acc ->\n   # process results\n   {:error, error} ->\n   # process errors\nend)\n```\n\n>","ref":"create-actions.html#returning-a-stream","title":"Returning a Stream - Create Actions","type":"extras"},{"doc":">\n> Because streams are lazily evaluated, if you were to do something like this:\n>\n> ```elixir\n> [input1, input2, ...] # has 300 things in it\n> |> Ash.bulk_create(\n>   Resource,\n>   :action,\n>   return_stream?: true,\n>   return_records?: true,\n>   batch_size: 100 #  default is 100\n> )\n> |> Enum.take(150) # stream has 300, but we only take 150\n> ```\n>\n> What would happen is that we would insert 200 records. The stream would end after we process the first two batches of 100. Be sure you aren't using things like `Stream.take` or `Enum.take` to limit the amount of things pulled from the stream, unless you actually want to limit the number of records created.","ref":"create-actions.html#be-careful-with-streams-warning","title":"Be careful with streams {: .warning} - Create Actions","type":"extras"},{"doc":"Upserting is the process of \"creating or updating\" a record, modeled with a single simple create. Both bulk creates and regular creates support upserts. Upserts can be declared in the action, like so:\n\n```elixir\ncreate :create_user do\n  accept [:email]\n  upsert? true\n  upsert_identity :unique_email\nend\n```\n\nOr they can be done with options when calling the create action.\n\n```elixir\nAsh.create!(changeset, upsert?: true, upsert_identity: :unique_email)\n```\n\n>","ref":"create-actions.html#upserts","title":"Upserts - Create Actions","type":"extras"},{"doc":">\n> While an upsert is conceptually a \"create or update\" operation, it does not result in an update action being called. The data layer contains the upsert implementation. This means that if you have things like global changes that are only run on update, they will not be run on upserts that result in an update. Additionally, notifications for updates will not be emitted from upserts.","ref":"create-actions.html#upserts-do-not-use-an-update-action-warning","title":"Upserts do not use an update action {: .warning} - Create Actions","type":"extras"},{"doc":"Upserts support atomic updates. These atomic updates _do not apply to the data being created_. They are only applied in the case of an update. For example:\n\n```elixir\ncreate :create_game do\n  accept [:identifier]\n  upsert? true\n  upsert_identity :identifier\n  change set_attribute(:score, 0)\n  change atomic_update(:score, expr(score + 1))\nend\n```\n\nThis will result in creating a game with a score of 0, and if the game already exists, it will increment the score by 1.\n\nFor information on options configured in the action, see `d:Ash.Resource.Dsl.actions.create`.\nFor information on options when calling the action, see `Ash.create/2`.","ref":"create-actions.html#atomic-updates","title":"Atomic Updates - Create Actions","type":"extras"},{"doc":"All actions are run in a transaction if the data layer supports it. You can opt out of this behavior by supplying `transaction?: false` when creating the action. When an action is being run in a transaction, all steps inside of it are serialized because transactions cannot be split across processes.\n\n- Authorization is performed on the changes\n- A before action hook is added to set up belongs_to relationships that are managed. This means potentially creating/modifying the destination of the relationship, and then changing the `destination_attribute` of the relationship.\n- `before_transaction` and `around_transaction` hooks are called (`Ash.Changeset.before_transaction/2`). Keep in mind, any validations that are marked as `before_action? true` (or all global validations if your action has `delay_global_validations? true`) will not have happened at this point.\n- A transaction is opened if the action is configured for it (by default they are) and the data layer supports transactions\n- `before_action` hooks are performed in order\n- The main action is sent to the data layer\n- `after_action` hooks are performed in order\n- Non-belongs-to relationships are managed, creating/updating/destroying related records.\n- The transaction is closed, if one was opened\n- `after_transaction` hooks are invoked with the result of the transaction (even if it was an error)","ref":"create-actions.html#what-happens-when-you-run-a-create-action","title":"What happens when you run a create Action - Create Actions","type":"extras"},{"doc":"# Update Actions\n\nUpdate actions are used to update records in the data layer. For example:\n\n```elixir\n# on a ticket resource\nupdate :close do\n  accept [:close_reason]\n  change set_attribute(:status, :closed)\nend\n```\n\nHere we have an update action called `:close` that allows setting the `close_reason`, and sets the `status` to `:closed`. It could be called like so:\n\n```elixir\nticket # providing an initial ticket to close\n|> Ash.Changeset.for_update(:close, %{close_reason: \"I figured it out.\"})\n|> Ash.update!()\n```\n\nSee the [Code Interface guide](documentation/topics/resources/code-interfaces.md) for creating an interface to call the action more elegantly, like so:\n\n```elixir\nSupport.close_ticket!(ticket, \"I figured it out.\")\n# You can also provide an id\nSupport.close_ticket!(ticket.id, \"I figured it out.\")\n```","ref":"update-actions.html","title":"Update Actions","type":"extras"},{"doc":"Atomic updates can be added to a changeset, which will update the value of an attribute given by an expression. Atomics can be a very powerful way to model updating data in a simple way. An action does not have to be [fully atomic](#fully-atomic-updates) in order to leverage atomic updates. For example:\n\n```elixir\nupdate :add_to_name do\n  argument :to_add, :string, allow_nil? false\n  change atomic_update(:name, expr(\"#{name}_#{to_add}\"))\nend\n```\n\nChanging attributes in this way makes them safer to use in concurrent environments, and is typically more performant than doing it manually in memory.\n\n>","ref":"update-actions.html#atomics","title":"Atomics - Update Actions","type":"extras"},{"doc":">\n> While we recommend using atomics wherever possible, it is important to note that they are stored in their own map in the changeset,\n> i.e `changeset.atomics`, meaning if you need to do something later in the action with the new value for an attribute, you won't be\n> able to access the new value. This is because atomics are evaluated in the data layer. You can, however, access \"the old or new value\"\n> in a similar way to `Ash.Changeset.get_attribute`, using the template expression, `atomic_ref(:name)`. See the section below for more.\n\n### `atomic_ref/1`\n\nLets say that you have an action that may perform multiple atomic update on a single column, or for some other reason needs to refer to the new value.\nThe only way to access that new value is _also_ in an atomic update, change, or validation, using `atomic_ref/1`. There is no way to access the new value\nprior to the action being run with something like `Ash.Changeset.get_attribute/2`.\n\nFor example, lets say you have a postgres function that will slugify a string, and you want to make sure to always set it to the slugified version of `name`,\nwhenever `name` is changing.\n\n```elixir\nchanges do\n  change atomic_update(:slug, expr(fragment(\"slugify(?)\", ^atomic_ref(:name)))), where: changing(:name), on: [:update]\nend\n```\n\nBy using `atomic_ref/1` here, you are always referring to the new value of `name`, even if another atomic update has been made that modifies `name`.\n\nBecause the validation `changing/1` can be done atomically, and the change `atomic_update/2` (naturally) can be done atomically, this is a fully atomic update.\nLets say that you paired this with an action like this:\n\n```elixir\nupdate :add_to_name do\n  argument :to_add, :string, allow_nil? false\n  change atomic_update(:name, expr(\"#{name}_#{to_add}\"))\nend\n```\n\nand would produce a SQL update along the lines of:\n\n```sql\nUPDATE table\n  SET name = name || $1,\n  slug = CASE\n    WHEN name = name || $1 THEN\n      slug\n    ELSE\n      slugify(name || $1)\n  END\nWHERE id = $2\n```\n\nThis is a _fully atomic update_, because all changes are done atomically in the data layer. We now have the benefits of composable building blocks _and_\natomic updates.","ref":"update-actions.html#atomics-are-not-stored-with-other-changes-warning","title":"Atomics are not stored with other changes {: .warning} - Update Actions","type":"extras"},{"doc":"Atomic updates are a special case of update actions that can be done completely atomically. If your update action can't be done atomically, you will get an error unless you have set `require_atomic? false`. This is to encourage you to opt for atomic updates whereever reasonable. Not all actions can reasonably be made atomic, and not all non-atomic actions are problematic for concurrency. The goal is only to make sure that you are aware and have considered the implications.\n\n>","ref":"update-actions.html#fully-atomic-updates","title":"Fully Atomic updates - Update Actions","type":"extras"},{"doc":">\n> An atomic update is one that can be done in a single operation in the data layer. This ensures that there are no issues with concurrent access to the record being updated, and that it is as performant as possible.\n> For example, the following action cannot be done atomically, because it has\n> an anonymous function change on it.\n>\n> ```elixir\n> update :increment_score do\n>   change fn changeset, _ ->\n>     Ash.Changeset.set_attribute(changeset, :score, changeset.data.score + 1)\n>   end\n> end\n> ```\n>\n> The action shown above is not safe to run concurrently. If two separate processes fetch the record with score `1`, and then call `increment_score`, they will both set the score to `2`, when what you almost certainly intended to do was end up with a score of `3`\n>\n> By contrast, the following action _can_ be done atomically\n>\n> ```elixir\n> update :increment_score do\n>   change atomic_update(:score, expr(score + 1))\n> end\n> ```\n>\n> In a SQL data layer, this would produce SQL along the lines of\n>\n> ```elixir\n> \"UPDATE table SET score = score + 1 WHERE id = post_id\"\n> ```","ref":"update-actions.html#what-does-atomic-mean-info","title":"What does atomic mean? {: .info} - Update Actions","type":"extras"},{"doc":"","ref":"update-actions.html#what-makes-an-action-not-atomic","title":"What makes an action not atomic? - Update Actions","type":"extras"},{"doc":"Not all types support being casted atomically. For instance, `:union` types, and embedded resources that have primary keys(and therefore may need to use an update action) cannot currently be casted atomically.","ref":"update-actions.html#types-that-can-t-be-atomically-casted","title":"Types that can't be atomically casted - Update Actions","type":"extras"},{"doc":"Changes can be enhanced to support atomics by defining `c:Ash.Resource.Change.atomic/3`. This callback can return a map of atomic updates to be made to attributes. Here is a simplified example from the built in `Ash.Resource.Change.Builtins.increment/2` change:\n\n```elixir\n@impl true\ndef atomic(_changeset, opts, _context) do\n  # Set the requested attribute to its current value (atomic_ref) + the amount\n  {:atomic, %{opts[:attribute] => expr(^atomic_ref(opts[:attribute]) + ^opts[:amount])}}\nend\n```","ref":"update-actions.html#changes-without-an-atomic-callback","title":"Changes without an `atomic` callback - Update Actions","type":"extras"},{"doc":"Validations can be enhanced to support atomics by defining `c:Ash.Resource.Validation.atomic/3`. This callback can return an atomic validation (or a list of atomic validations), which is represented by a list of affected attributes (not currently used), an expression that should trigger an error, and the expression producing the error. Here is an example from the built in `Ash.Resource.Validations.Builtins.attribute_equals/2` validation:\n\n```elixir\n@impl true\ndef atomic(_changeset, opts, context) do\n  {:atomic, [opts[:attribute]], expr(^atomic_ref(opts[:attribute]) != ^opts[:value]),\n   expr(\n     error(^InvalidAttribute, %{\n       field: ^opts[:attribute],\n       value: ^atomic_ref(opts[:attribute]),\n       message: ^(context.message || \"must equal %{value}\"),\n       vars: %{field: ^opts[:attribute], value: ^opts[:value]}\n     })\n   )}\nend\n```","ref":"update-actions.html#validations-without-an-atomic-callback","title":"Validations without an `atomic` callback - Update Actions","type":"extras"},{"doc":"There are three strategies for bulk updating data. They are, in order of preference: `:atomic`, `:atomic_batches`, and `:stream`. When calling `Ash.bulk_update/4`, you can provide a strategy or strategies that can be used, and Ash will choose the best one available. The implementation of the update action and the capabilities of the data layer determine what strategies can be used.","ref":"update-actions.html#bulk-updates","title":"Bulk updates - Update Actions","type":"extras"},{"doc":"Atomic bulk updates are used when the subject of the bulk update is a query, and the update action [can be done atomically](#fully-atomic-updates) and the data layer supports updating a query. They map to a single statement to the data layer to update all matching records. The data layer must support updating a query.","ref":"update-actions.html#atomic","title":"Atomic - Update Actions","type":"extras"},{"doc":"```elixir\nTicket\n|> Ash.Query.filter(status == :open)\n|> Ash.bulk_update!(:close, %{reason: \"Closing all open tickets.\"})\n```\n\nIf using a SQL data layer, this would produce a query along the lines of\n\n```sql\nUPDATE tickets\nSET status = 'closed',\n    reason = 'Closing all open tickets.'\nWHERE status = 'open';\n```","ref":"update-actions.html#example","title":"Example - Update Actions","type":"extras"},{"doc":"Atomic batches is used when the subject of the bulk update is an enumerable (i.e list or stream) of records and the update action [can be done atomically](#fully-atomic-updates) and the data layer supports updating a query. The records are pulled out in batches, and then each batch follows the logic described [above](#atomic). The batch size is controllable by the `batch_size` option.","ref":"update-actions.html#atomic-batches","title":"Atomic Batches - Update Actions","type":"extras"},{"doc":"```elixir\n\nAsh.bulk_update!(one_hundred_tickets, :close, %{reason: \"Closing all open tickets.\"}, batch_size: 10)\n```\n\nIf using a SQL data layer, this would produce ten queries along the lines of\n\n```sql\nUPDATE tickets\nSET status = 'closed',\n    reason = 'Closing all open tickets.'\nWHERE id IN (...ids)\n```","ref":"update-actions.html#example","title":"Example - Update Actions","type":"extras"},{"doc":"Stream is used when the update action [cannot be done atomically](#fully-atomic-updates) or if the data layer does not support updating a query. If a query is given, it is run and the records are used as an enumerable of inputs. If an enumerable of inputs is given, each one is updated individually. There is nothing inherently wrong with doing this kind of update, but it will naturally be slower than the other two strategies.\nThe benefit of having a single interface (`Ash.bulk_update/4`) is that the caller doesn't need to change based on the performance implications of the action.","ref":"update-actions.html#stream","title":"Stream - Update Actions","type":"extras"},{"doc":"All actions are run in a transaction if the data layer supports it. You can opt out of this behavior by supplying `transaction?: false` when creating the action. When an action is being run in a transaction, all steps inside of it are serialized because transactions cannot be split across processes.\n\n- Authorization is performed on the changes\n- A before action hook is added to set up belongs_to relationships that are managed. This means potentially creating/modifying the destination of the relationship, and then changing the `destination_attribute` of the relationship.\n- `before_transaction` and `around_transaction` hooks are called (`Ash.Changeset.before_transaction/2`). Keep in mind, any validations that are marked as `before_action? true` (or all global validations if your action has `delay_global_validations? true`) will not have happened at this point.\n- A transaction is opened if the action is configured for it (by default they are) and the data layer supports transactions\n- `before_action` hooks are performed in order\n- The main action is sent to the data layer\n- `after_action` hooks are performed in order\n- Non-belongs-to relationships are managed, creating/updating/destroying related records.\n- The transaction is closed, if one was opened\n- `after_transaction` hooks are invoked with the result of the transaction (even if it was an error)","ref":"update-actions.html#running-a-standard-update-action","title":"Running a standard update action - Update Actions","type":"extras"},{"doc":"Update actions that are run as \"normal\" update actions will, at the time of execution, be \"upgraded\" to an atomic action if possible. This means taking the original inputs and building a corresponding atomic action. This behavior is primarily useful for using things like `AshPhoenix.Form`, where you want to validate and see the effects of an action before running it, but want the ultimate invocation to be atomic (i.e concurrency safe).\n\nYou can disable this by adding `atomic_upgrade? false` to the action configuration. Additionally, you may want to configure the read action used for atomic upgrades (defaults to the primary read), with `atomic_upgrade_with` option, i.e `atomic_upgrade_with :list_all`","ref":"update-actions.html#atomic-upgrade","title":"Atomic Upgrade - Update Actions","type":"extras"},{"doc":"# Destroy Actions\n\nDestroy actions are comparatively simple. They expect to remove a given record, and by default return `:ok` in the successful case.\n\nMost destroy actions are one-liners, for example:\n\n```elixir\ndestroy :destroy\n# Can be added with the defaults\ndefaults [:read, :destroy]\n```","ref":"destroy-actions.html","title":"Destroy Actions","type":"extras"},{"doc":"You can mark a destroy action as `soft? true`, in which case it is handled by the [`update` action](/documentation/topics/actions/update-actions.md) logic.\n\nFor example:\n\n```elixir\ndestroy :archive do\n  soft? true\n  change set_attribute(:archived_at, &DateTime.utc_now/0)\nend\n```","ref":"destroy-actions.html#soft-destroy","title":"Soft Destroy - Destroy Actions","type":"extras"},{"doc":"You can use the `return_destroyed?` option to return the destroyed record.\n\n```elixir\nticket = Ash.get!(Ticket, 1)\nAsh.destroy!(ticket)\n# => :ok\nticket = Ash.get!(Ticket, 2)\nAsh.destroy!(ticket, return_destroyed?: true)\n# => {:ok, %Ticket{}}\n```\n\n>","ref":"destroy-actions.html#returning-the-destroyed-record","title":"Returning the destroyed record - Destroy Actions","type":"extras"},{"doc":">\n> Keep in mind that using `Ash.load` on destroyed data will produced mixed results. Relationships may appear as empty, or may be loaded as expected (depending on the data layer/relationship implementation) and calculations/aggregates may show as `nil` if they must be run in the data layer.","ref":"destroy-actions.html#loading-on-destroyed-records-warning","title":"Loading on destroyed records {: .warning} - Destroy Actions","type":"extras"},{"doc":"There are three strategies for bulk destroying data. They are, in order of preference: `:atomic`, `:atomic_batches`, and `:stream`. When calling `Ash.bulk_destroy/4`, you can provide a strategy or strategies that can be used, and Ash will choose the best one available. The capabilities of the data layer determine what strategies can be used.","ref":"destroy-actions.html#bulk-destroys","title":"Bulk Destroys - Destroy Actions","type":"extras"},{"doc":"Atomic bulk destroys are used when the subject of the bulk destroy is a query and the data layer supports destroying a query. They map to a single statement to the data layer to destroy all matching records.","ref":"destroy-actions.html#atomic","title":"Atomic - Destroy Actions","type":"extras"},{"doc":"```elixir\nTicket\n|> Ash.Query.filter(status == :open)\n|> Ash.bulk_destroy!(:close)\n```\n\nIf using a SQL data layer, this would produce a query along the lines of\n\n```sql\nDELETE FROM tickets\nWHERE status = 'open';\n```","ref":"destroy-actions.html#example","title":"Example - Destroy Actions","type":"extras"},{"doc":"Atomic batches are used when the subject of the bulk destroy is an enumerable (i.e list or stream) of records and the data layer supports destroying a query. The records are pulled out in batches, and then each batch follows the logic described [above](#atomic). The batch size is controllable by the `batch_size` option.","ref":"destroy-actions.html#atomic-batches","title":"Atomic Batches - Destroy Actions","type":"extras"},{"doc":"```elixir\n\nAsh.bulk_destroy!(one_hundred_tickets, :close, %{}, batch_size: 10)\n```\n\nIf using a SQL data layer, this would produce ten queries along the lines of\n\n```sql\nDELETE FROM tickets\nWHERE id IN (...ids)\n```","ref":"destroy-actions.html#example","title":"Example - Destroy Actions","type":"extras"},{"doc":"Stream is used when the data layer does not support destroying a query. If a query is given, it is run and the records are used as an enumerable of inputs. If an enumerable of inputs is given, each one is destroyed individually. There is nothing inherently wrong with doing this kind of destroy, but it will naturally be slower than the other two strategies.\nThe benefit of having a single interface (`Ash.bulk_destroy/4`) is that the caller doesn't need to change based on the performance implications of the action.\n\n>","ref":"destroy-actions.html#stream","title":"Stream - Destroy Actions","type":"extras"},{"doc":">\n> Make sure to thoroughly read and understand the documentation in `Ash.bulk_destroy/4` before using. Read each option and note the default values. By default, bulk destroys don't return records or errors, and don't emit notifications.","ref":"destroy-actions.html#check-the-docs-warning","title":"Check the docs! {: .warning} - Destroy Actions","type":"extras"},{"doc":"If you provide an enumerable of records, they will be destroyed in batches. For example:\n\n```elixir\nAsh.bulk_destroy([%Ticket{}, %Ticket{}], :destroy)\n```","ref":"destroy-actions.html#destroying-records","title":"Destroying records - Destroy Actions","type":"extras"},{"doc":"","ref":"destroy-actions.html#destroying","title":"Destroying - Destroy Actions","type":"extras"},{"doc":"All actions are run in a transaction if the data layer supports it. You can opt out of this behavior by supplying `transaction?: false` when creating the action. When an action is being run in a transaction, all steps inside of it are serialized because transactions cannot be split across processes.\n\n- Authorization is performed on the changes\n- A before action hook is added to set up belongs_to relationships that are managed. This means potentially creating/modifying the destination of the relationship, and then changing the `destination_attribute` of the relationship.\n- `before_transaction` and `around_transaction` hooks are called (`Ash.Changeset.before_transaction/2`). Keep in mind, any validations that are marked as `before_action? true` (or all global validations if your action has `delay_global_validations? true`) will not have happened at this point.\n- A transaction is opened if the action is configured for it (by default they are) and the data layer supports transactions\n- `before_action` hooks are performed in order\n- The main action is sent to the data layer\n- `after_action` hooks are performed in order\n- Non-belongs-to relationships are managed, creating/updating/destroying related records.\n- The transaction is closed, if one was opened\n- `after_transaction` hooks are invoked with the result of the transaction (even if it was an error)","ref":"destroy-actions.html#running-the-destroy-action","title":"Running the Destroy Action - Destroy Actions","type":"extras"},{"doc":"# Generic Actions\n\nGeneric actions are so named because there are no special rules about how they work. A generic action takes arguments and returns a value. The struct used for building input for a generic action is `Ash.ActionInput`.\n\n```elixir\naction :say_hello, :string do\n  argument :name, :string, allow_nil?: false\n\n  run fn input, _ ->\n    {:ok, \"Hello: #{input.arguments.name}\"}\n  end\nend\n```\n\nA generic action declares its arguments, return type, and implementation, as illustrated above.\n\n>","ref":"generic-actions.html","title":"Generic Actions","type":"extras"},{"doc":">\n> Generic actions can omit a return type, in which case running them returns `:ok` if successful.\n>\n> ```elixir\n> action :schedule_job do\n>   argument :job_name, :string, allow_nil?: false\n>   run fn input ->\n>     # Schedule the job\n>     :ok\n>   end\n> end\n> ```","ref":"generic-actions.html#no-return-no-problem-tip","title":"No return? No problem! {: .tip} - Generic Actions","type":"extras"},{"doc":"The example above could be written as a normal function in elixir, i.e\n\n```elixir\ndef say_hello(name), do: \"Hello: #{name}\"\n```\n\nThe benefit of using generic actions instead of defining normal functions:\n\n- They can be used with api extensions like `ash_json_api` and `ash_graphql`\n- Their inputs are type checked and casted\n- They support Ash authorization patterns (i.e policies)\n- They can be included in the code interface of a resource\n- They can be made transactional with a single option (`transaction? true`)\n\nIf you don't need any of the above, then there is no problem with writing regular Elixir functions!","ref":"generic-actions.html#why-use-generic-actions","title":"Why use generic actions? - Generic Actions","type":"extras"},{"doc":"Generic actions do not cast their return types. It is expected that the action return a valid value for the type that they declare. However, declaring additional constraints can inform API usage, and make the action more clear. For example:\n\n```elixir\naction :priority, :integer do\n  constraints [min: 1, max: 3]\n  argument :status, :atom, constraints: [one_of: [:high, :medium, :low]]\n\n  run fn input, _ ->\n    case input.arguments.status do\n      :high -> {:ok, 3}\n      :medium -> {:ok, 2}\n      :low -> {:ok, 1}\n    end\n  end\nend\n```\n\n> #### Returning resource instances {: .info}\n>\n> It sometimes happens that you want to make a generic action which returns an\n> instance or instances of the resource. It's natural to assume that you can\n> set your action's return type to the name of your resource. This won't work\n> as resources do not define a type, unless they are embedded. In embedded resources, this won't work because the module is still being compiled, so referencing yourself as a type causes a compile error. Instead, use the `:struct` type and the `instance_of` constraint, like so:\n>\n> ```elixir\n> action :get, :struct do\n>   constraints instance_of: __MODULE__\n>\n>   run # ...\n> end\n> ```","ref":"generic-actions.html#return-types-and-constraints","title":"Return types and constraints - Generic Actions","type":"extras"},{"doc":"To execute a generic action in Ash, follow these steps:\n\n1. **Prepare the action input:** Use `Ash.ActionInput.for_action/4` to specify the resource, the action and its arguments.\n2. **Run the action:** Use `Ash.run_action/2` to execute the action with the prepared input.","ref":"generic-actions.html#calling-generic-actions","title":"Calling Generic Actions - Generic Actions","type":"extras"},{"doc":"Consider an `Ash.Resource` with the action `:say_hello`:\n\n```elixir\naction :say_hello, :string do\n  argument :name, :string, allow_nil?: false\n\n  run fn input, _ ->\n    {:ok, \"Hello: #{input.arguments.name}\"}\n  end\nend\n```\n\nCall this action:\n\n```elixir\n{:ok, greeting} = Resource\n|> Ash.ActionInput.for_action(:say_hello, %{name: \"Alice\"})\n|> Ash.run_action()\n\nIO.puts(greeting)  # Output: Hello: Alice\n```","ref":"generic-actions.html#example-usage","title":"Example Usage - Generic Actions","type":"extras"},{"doc":"You can also use [Code Interfaces](documentation/topics/resources/code-interfaces.md) to call actions:\n\nGiven a definition like:\n\n```elixir\ndefine :say_hello, args: [:name]\n```\n\n```elixir\n{:ok, greeting} = Resource.say_hello(\"Alice\")\ngreeting = Resource.say_hello!(\"Alice\")\n```","ref":"generic-actions.html#using-code-interface","title":"Using Code Interface - Generic Actions","type":"extras"},{"doc":"# Manual Actions\n\nManual actions allow you to control how an action is performed instead of dispatching to a data layer. To do this, specify the `manual` option with a module that adopts the appropriate behavior.\n\nManual actions are a way to implement an action in a fully custom way. This can be a very useful escape hatch when you have something that you are finding difficult to model with Ash's builtin tools.","ref":"manual-actions.html","title":"Manual Actions","type":"extras"},{"doc":"For manual create, update and destroy actions, a module is passed that uses one of the following (`Ash.Resource.ManualCreate`, `Ash.Resource.ManualUpdate` and `Ash.Resource.ManualDestroy`).\n\nFor example:\n\n```elixir\ncreate :special_create do\n  manual MyApp.DoCreate\nend\n\n# The implementation\ndefmodule MyApp.DoCreate do\n  use Ash.Resource.ManualCreate\n\n  def create(changeset, _, _) do\n    record = create_the_record(changeset)\n    {:ok, record}\n\n    # An `{:error, error}` tuple should be returned if something failed\n  end\nend\n```\n\nThe underlying record can be retrieved from `changeset.data` for update and destroy manual actions. The changeset given to the manual action will be after any `before_action` hooks, and before any `after_action` hooks.","ref":"manual-actions.html#manual-creates-updates-destroy","title":"Manual Creates/Updates/Destroy - Manual Actions","type":"extras"},{"doc":"Manual read actions work the same, except the will also get the \"data layer query\". For AshPostgres, this means you get the ecto query that would have been run. You can use `Ash.Query.apply_to/3` to apply a query to records in memory. This allows you to fetch the data in a way that is not possible with the data layer, but still honor the query that was provided to.\n\n```elixir\n# in the resource\nactions do\n  read :action_name do\n    manual MyApp.ManualRead\n    # or `{MyApp.ManualRead, ...opts}`\n  end\nend\n\n# the implementation\ndefmodule MyApp.ManualRead do\n  use Ash.Resource.ManualRead\n\n  def read(ash_query, ecto_query, _opts, _context) do\n    ...\n    {:ok, query_results} | {:error, error}\n  end\nend\n```","ref":"manual-actions.html#manual-read-actions","title":"Manual Read Actions - Manual Actions","type":"extras"},{"doc":"As an alternative to manual read actions, you can also provide the `modify_query` option, which takes an `MFA` and allows low level manipulation of the query just before it is dispatched to the data layer.\n\nFor example:\n\n```elixir\nread :read do\n  modify_query {MyApp.ModifyQuery, :modify, []}\nend\n\ndefmodule MyApp.ModifyQuery do\n  def modify(ash_query, data_layer_query) do\n    {:ok, modify_data_layer_query(data_layer_query)}\n  end\nend\n```\n\nThis can be used as a last-resort escape hatch when you want to still use resource actions but need to do something that you can't do easily with Ash tools. As with any low level escape hatch, here be dragons.","ref":"manual-actions.html#modifying-the-query","title":"Modifying the query - Manual Actions","type":"extras"},{"doc":"# Actors & Authorization\n\nAuthorization in Ash involves three things:\n\n* actor - the entity (i.e user, organization, device) performing a given action\n* authorize? - a flag that tells Ash to run authorization.\n* authorizers - the extensions on a resource that can modify or forbid the action.","ref":"actors-and-authorization.html","title":"Actors & Authorization","type":"extras"},{"doc":"All functions in Ash that may perform authorization and/or wish to use the actor accept an `actor` and an `authorize?` option. For example:\n\nBuilding a changeset/query/input is the best time to provide the actor option\n\n```elixir\nAsh.Changeset.for_create(Post, %{title: \"Post Title\"}, actor: current_user, authorize?: true)\n```\n\nIf calling a function without changeset/query/input, you can provide the `actor` option at that point.\n\n```elixir\nAsh.count!(Post, actor: current_user, authorize?: true)\n```\n\nFunctions created with the code interface also accept an `actor` option.\n\n```elixir\nMyDomain.create_post!(Post, authorize?: true)\n```\n\n>","ref":"actors-and-authorization.html#setting-actor-and-authorize","title":"Setting `actor` and `authorize?` - Actors & Authorization","type":"extras"},{"doc":"> The hooks on a query/changeset/input to an action may need to know the actor, so you\n> need to set the actor when building them, not when calling the action.\n> ```elixir\n> # DO THIS\n>\n> Post\n> |> Ash.Query.for_read(:read, %{}, actor: current_user)\n> |> Ash.read!()\n>\n> # DON'T DO THIS\n>\n> Post\n> |> Ash.Query.for_read!(:read)\n> |> Ash.read!(actor: current_user)\n> ```","ref":"actors-and-authorization.html#set-the-actor-on-the-query-changeset-input-warning","title":"Set the actor on the query/changeset/input {: .warning} - Actors & Authorization","type":"extras"},{"doc":"The default value of `authorize?` is determined by the `authorization` configuration of the relevant domain. By default, `authorize?` is set to `true` (and so can be ommitted in all of the examples above). If a resource has no authorizers, then all requests will be allowed.","ref":"actors-and-authorization.html#default-value-of-authorize","title":"Default value of `authorize?` - Actors & Authorization","type":"extras"},{"doc":"Authorizers are in control of what happens during authorization. Generally, you won't need to create your own authorizer, as the builtin policy authorizer `Ash.Policy.Authorizer` works well for any use case. See the [Policies guide](documentation/topics/security/policies.md) for more.","ref":"actors-and-authorization.html#authorizers","title":"Authorizers - Actors & Authorization","type":"extras"},{"doc":"### `d:Ash.Domain.Dsl.authorization|require_actor?`\n\nRequires that an actor is set for all requests.\n\nImportant: `nil` is still a valid actor, so this won't prevent providing `actor: nil`. It only requires that the option itself is provided.\n\n### `d:Ash.Domain.Dsl.authorization|authorize`\n\nWhen to run authorization for a given request.\n\n- `:by_default` sets `authorize?: true` if the `authorize?` option was not set (so it can be set to `false`). This is the default.\n- `:always` forces `authorize?: true` on all requests to the domain.\n- `:when_requested` sets `authorize?: true` whenever an actor is set or `authorize?: true` is explicitly passed. This is the default behavior.","ref":"actors-and-authorization.html#domain-authorization-configuration","title":"Domain Authorization Configuration - Actors & Authorization","type":"extras"},{"doc":"# Sensitive Data","ref":"sensitive-data.html","title":"Sensitive Data","type":"extras"},{"doc":"By default, attributes, calculations, aggregates and relationships are _private_ (they are marked `public?: false`).  \nIf you are working with Ash in code, reading a resource, for example using `Ash.read/2`, the public/private status of an attribute is not relevant.  \nHowever, when working with api extensions like `AshGraphql` and `AshJsonApi`, they will only include public fields in their interfaces. This helps avoid accidentally exposing data over \"public\" interfaces.","ref":"sensitive-data.html#public-private-attributes","title":"Public & Private Attributes - Sensitive Data","type":"extras"},{"doc":"Public/private arguments work the same way as public/private fields, except that they default to `public?: true`.  \nThis is because arguments to an action being used in a public interface would naturally be expected to be `public`. If an argument is marked as `public?: false`, it can only be set with `Ash.Query.set_argument/3` or `Ash.Changeset.set_argument/3`","ref":"sensitive-data.html#public-private-arguments","title":"Public & Private Arguments - Sensitive Data","type":"extras"},{"doc":"Using `sensitive? true` will cause an attribute, calculation or argument to show as `\"** Redacted **\"` when inspecting records.  \nIn filter statements, any value used in the same expression as a sensitive field will also be redacted. For example, you might see: `email == \"** Redacted **\"` in a filter statement if `email` is marked as sensitive.","ref":"sensitive-data.html#sensitive-attributes","title":"Sensitive Attributes - Sensitive Data","type":"extras"},{"doc":"**IMPORTANT WARNING:** The following configuration should only ever be used in development mode!\n\nTo display sensitive attributes in their original form during development, use the following config.\n\n```elixir\nconfig :ash, show_sensitive?: true\n```","ref":"sensitive-data.html#show-sensitive-attributes","title":"Show Sensitive Attributes - Sensitive Data","type":"extras"},{"doc":"Field policies are a way to control the visibility of individual fields (except for relationships) as a part of authorization flow, for those using `Ash.Policy.Authorizer`.  \nIf a field is not visible, it will be populated with `%Ash.ForbiddenField{}`, or will be not shown (or may show an error) in public interfaces. See the [Policies guide](documentation/topics/security/policies.md#field-policies) for more.","ref":"sensitive-data.html#field-policies","title":"Field Policies - Sensitive Data","type":"extras"},{"doc":"# Policies\n\nPolicies determine what actions on a resource are permitted for a given actor, and can also filter the results of read actions to restrict the results to only records that should be visible.\n\nTo restrict access to specific fields (attributes, aggregates, calculations), see the section on field policies.\n\nRead and understand the [Actors & Authorization guide](/documentation/topics/security/actors-and-authorization.md) before proceeding, which explains actors, how to set them, and other relevant configurations.","ref":"policies.html","title":"Policies","type":"extras"},{"doc":"You'll need to add the extension to your resource, like so:\n\n```elixir\nuse Ash.Resource, authorizers: [Ash.Policy.Authorizer]\n```\n\nThen you can start defining policies for your resource.","ref":"policies.html#setup","title":"Setup - Policies","type":"extras"},{"doc":"","ref":"policies.html#policies","title":"Policies - Policies","type":"extras"},{"doc":"Each policy defined in a resource has two parts -\n\n- a condition, such as `action_type(:read)` or `actor_attribute_equals(:admin, true)` or `always()`. If this condition is true for a given action request, then the policy will be applied to the request.\n- a set of policy checks, each of which will be evaluated individually if a policy applies to a request.\n\nIf more than one policy applies to any given request (eg. an admin actor calls a read action) then **all applicable policies must pass** for the action to be performed.\n\nA policy will produce one of three results: `:forbidden`, `:authorized`, or `:unknown`. `:unknown` is treated the same as `:forbidden`.","ref":"policies.html#anatomy-of-a-policy","title":"Anatomy of a Policy - Policies","type":"extras"},{"doc":"Let's start with the simplest (most permissive) policy:\n\n```elixir\npolicies do\n  policy always() do\n    authorize_if always()\n  end\nend\n```\n\nThe first argument to `policy` is the condition. In this case, the condition is `always()` - a built-in helper always returning true, meaning that the policy applies to every request.\n\nWithin this policy we have a single policy check, declared with `authorize_if`. Checks logically apply from top to bottom, based on their check type. In this case, we'd read the policy as \"this policy always applies, and authorizes always\".\n\nThere are four check types, all of which do what they sound like they do:\n\n- `authorize_if` - if the check is true, the whole policy is authorized.\n- `authorize_unless` - if the check is false, the whole policy is authorized.\n- `forbid_if` - if the check is true, the whole policy is forbidden.\n- `forbid_unless` - if the check is false, the whole policy is forbidden.\n\nIf a single check does not explicitly authorize or forbid the whole policy, then the flow moves to the next check. For example, if an `authorize_if` check does NOT return true, this _does not mean the whole policy is forbidden_ - it means that further checking is required.","ref":"policies.html#the-simplest-policy","title":"The Simplest Policy - Policies","type":"extras"},{"doc":"**Not every check in a policy must pass!** This is described above, but is very important so another example is provided here. Checks go from top to bottom, are evaluated independently of each other, and _the first one that reaches a decision_ determines the overall _policy result_. For example:\n\n```elixir\npolicy action_type(:create) do\n  authorize_if IsSuperUser\n  forbid_if Deactivated\n  authorize_if IsAdminUser\n  forbid_if RegularUserCanCreate\n  authorize_if RegularUserAuthorized\nend\n```\n\nWe check those from top to bottom, so the first one of those that returns `:authorized` or `:forbidden` determines the entire outcome. For example:\n\n```elixir\nauthorize_if IsSuperUser # If this is true, the actor is a superuser\n\n# None of the rest of the checks matter, even if the actor is deactivated.\nforbid_if Deactivated\nauthorize_if IsAdminUser\nforbid_if RegularUserCanCreate\nauthorize_if RegularUserAuthorized\n```\n\nConversely:\n\n```elixir\nauthorize_if IsSuperUser # This can be false\nforbid_if Deactivated # This can be false\nauthorize_if IsAdminUser # If this is true, then the policy is still authorized.\n\n# And none of these checks matter\nforbid_if RegularUserCanCreate\nauthorize_if RegularUserAuthorized\n```","ref":"policies.html#how-a-decision-is-reached","title":"How a Decision is Reached - Policies","type":"extras"},{"doc":"This will be covered in greater detail in [Checks](#checks), but will be briefly mentioned here.\n\nAsh provides two basic types of policy checks - _simple_ checks and _filter_ checks. Simple checks are what we commonly think of with authorization, and what the above example would suggest - is an actor allowed to perform a given operation, yes or no? But we can also use filter checks - given a list of resources, which ones is an actor allowed to perform the operation on?\n\nFilter checks are applied to all read actions, including those generated for bulk updates and destroys.","ref":"policies.html#not-all-policy-checks-have-yes-no-answers","title":"Not all policy checks have yes/no answers - Policies","type":"extras"},{"doc":"A bypass policy is just like a regular policy, except if a bypass passes, then other policies after it _do not need to pass_. This can be useful for writing complex access rules, or for a simple rule like \"an admin can do anything\" without needing to specify it as part of every other policy.","ref":"policies.html#bypass-policies","title":"Bypass policies - Policies","type":"extras"},{"doc":"In this example, we use some of the provided built-in checks.\n\n```elixir\npolicies do\n  # Anything you can use in a condition, you can use in a check, and vice-versa\n  # This policy applies if the actor is a super_user\n  # Additionally, this policy is declared as a `bypass`. That means that this check is allowed to fail without\n  # failing the whole request, and that if this check *passes*, the entire request passes.\n  bypass actor_attribute_equals(:super_user, true) do\n    authorize_if always()\n  end\n\n  # This will likely be a common occurrence. Specifically, policies that apply to all read actions\n  policy action_type(:read) do\n    # unless the actor is an active user, forbid\n    forbid_unless actor_attribute_equals(:active, true)\n    # if the record is marked as public, authorize\n    authorize_if expr(public == true)\n    # if the actor is related to the data via that data's `owner` relationship, authorize\n    authorize_if relates_to_actor_via(:owner)\n  end\nend\n```","ref":"policies.html#a-realistic-policy","title":"A realistic policy - Policies","type":"extras"},{"doc":"Policy groups are a small abstraction over policies, that allow you to group policies together\nthat have shared conditions. Each policy inside of a policy group have the same conditions as\ntheir group.\n\n```elixir\npolicies do\n  policy_group actor_attribute_equals(:role, :owner) do\n    policy action_type(:read) do\n      authorize_if expr(owner_id == ^actor(:id))\n    end\n\n    policy action_type([:create, :update, :destroy]) do\n      authorize_if expr(owner_id == ^actor(:id))\n    end\n  end\nend\n```","ref":"policies.html#policy-groups","title":"Policy Groups - Policies","type":"extras"},{"doc":"Policy groups can be nested. This can help when you have lots of policies and conditions.\n\n```elixir\npolicies do\n  policy_group condition do\n    policy_group condition2 do\n       policy condition3 do\n         # This policy applies if condition, condition2, and condition3 are all true\n       end\n    end\n  end\nend\n```","ref":"policies.html#nesting-policy-groups","title":"Nesting Policy groups - Policies","type":"extras"},{"doc":"Policy groups can _not_ contain bypass policies. The purpose of policy groups is to make it easier to reason\nabout the behavior of policies. When you see a policy group, you know that no policies inside that group will\ninteract with policies in other policy groups, unless they also apply.","ref":"policies.html#bypasses","title":"Bypasses - Policies","type":"extras"},{"doc":"Policies have an \"access type\" that determines when they are applied. By default, `access_type` is `:filter`.\nWhen applied to a read action, `:filter` will result in a filtered read. For other action types, the filter will be evaluated\nto determine if a forbidden error should be raised.\n\nThere are three access types, and they determine the _latest point in the process_ that any check contained by a policy can be applied.\n\n- `strict` - All checks must be applied statically. These result in a forbidden error if they are not met.\n- `filter` - All checks must be applied either statically or as a filter. These result in a filtered read if they are not met, and a\n  forbidden error for other action types.\n- `runtime` - This allows checks to be run _after_ the data has been read. It is exceedingly rare that you would need to use this access type.\n\nFor example, given this policy:\n\n```elixir\npolicy action(:read_hidden) do\n  authorize_if expr(actor.is_admin == true)\nend\n```\n\nA non-admin using the `:read_hidden` action would see an empty list of records, rather than a forbidden error.\n\nHowever, with this policy\n\n```elixir\npolicy action(:read_hidden) do\n  access_type :strict\n\n  authorize_if expr(actor.is_admin == true)\nend\n```\n\nA non-admin using the `:read_hidden` action would see a forbidden error.","ref":"policies.html#access-type","title":"Access Type - Policies","type":"extras"},{"doc":"Checks evaluate from top to bottom within a policy. A check can produce one of three results, the same that a policy can produce. While checks are not necessarily evaluated in order, they _logically apply_ in that order, so you may as well think of it in that way. It can be thought of as a step-through algorithm.\n\nFor each check, starting from the top:\n\n- Run the check.\n  - If it returns `:authorized`, the policy is `:authorized`\n  - If it returns `:forbidden`, the policy is `:forbidden`\n  - If it returns `:unknown`, the next check down is checked\n\nFor the example from earlier:\n\n- `authorize_if IsSuperUser`\n  - If this check succeeds, it returns `:authorized`, the whole policy is `:authorized`, and checks stop running\n  - If this check fails, it returns `:unknown` and the next check is checked\n- `forbid_if Deactivated`\n  - We only care about this result if the previous check failed, ie. the actor is not a super user.\n  - If this check succeeds, it returns `:forbidden`, the whole policy is `:forbidden`, and checks stop running\n  - If this check fails, it returns `:unknown` and the next check is checked\n- `authorize_if IsAdminUser`\n  - We only care about this result if the previous checks failed, ie. the actor is not a super user and is not deactivated.\n  - If this check succeeds, it returns `:authorized`, the whole policy is `:authorized` and checks stop running.\n  - If this check fails, it returns `:unknown` and the next check is checked\n- `authorize_if RegularUserAuthorized`\n  - We only care about this result if the previous checks failed, ie. the actor is not a super user, not deactivated and not an admin user.\n  - If this check succeeds, it returns `:authorized`, the whole policy is `:authorized` and checks stop running.\n  - If this check fails, it returns `:unknown`. As there are no more checks to run, the whole policy returns `:unknown`, which is treated as forbidden and the actor is not allowed to perform the action.","ref":"policies.html#checks","title":"Checks - Policies","type":"extras"},{"doc":"As mentioned earlier, there are two distinct types of checks - _simple_ checks and _filter_ checks. So far we've seen examples of both - let's look in a bit more detail.\n\n> #### Manual Checks {: .neutral}\n>\n> Both simple and filter checks are a subset of a third type of check - a _manual_ check - but you will almost always want to write simple or filter checks.\n\n#### Simple checks\n\nSimple checks are determined at the outset of a request, and can only cause a request to be authorized or forbidden. These are typically yes/no questions - is the actor an admin? Did the actor create the post they want to call the `update` action on? Is the actor old enough to drink alcohol?\n\nYou can write a simple check by creating a new module and using the `Ash.Policy.SimpleCheck` module:\n\n```elixir\ndefmodule MyApp.Checks.ActorIsOldEnough do\n  use Ash.Policy.SimpleCheck\n\n  # This is used when logging a breakdown of how a policy is applied - see Logging below.\n  def describe(_) do\n    \"actor is old enough\"\n  end\n\n  # The context here may have a changeset, query, resource, and domain module, depending\n  # on the action being run.\n  # `match?` should return true or false, and answer the statement being posed in the description,\n  # i.e \"is the actor old enough?\"\n  def match?(%MyApp.User{age: age} = _actor, %{resource: MyApp.Beer} = _context, _opts) do\n    age >= 21\n  end\n\n  def match?(_, _, _), do: false\nend\n```\n\nYou can then use this module as the check name, as part of a policy:\n\n```elixir\ndefmodule MyApp.Beer do\n  # ...\n\n  policies do\n    policy action(:drink) do\n      authorize_if MyApp.Checks.ActorIsOldEnough\n    end\n  end\n\n  # ...\nend\n```\n\nAsh will internally convert the true/false return value from `match?/3` to a `:authorized`/`:forbidden`/`:unknown` response, depending on how the check is being run (ie. whether it's part of an `authorize_if`/`forbid_if`/etc.)\n\n#### Filter checks\n\nMany checks won't return a status yes/no, but instead return a \"filter\" to apply to a collection of data. They are most commonly used for read actions, but can be used for all types of actions.\n\nFor update and destroy actions, they apply to the data _before_ the action is run.\n\nFor read actions, they will automatically restrict the returned data to be compliant with the filter. Using the drinking example from earlier, we could write a filter check to list only users that are old enough to drink alcohol.\n\nThere are two ways to write a filter check - by creating a module and using the `Ash.Policy.FilterCheck` module, or by using inline expression syntax.\n\n```elixir\ndefmodule MyApp.Checks.ActorOverAgeLimit do\n  use Ash.Policy.FilterCheck\n\n  # A description is not necessary, as it will be derived from the filter, but one could be added\n  # def describe(_opts), do: \"actor is over the age limit\"\n\n  # Filter checks don't have a `context` available to them\n  def filter(_options) do\n    expr(age_limit <= ^actor(:age))\n  end\nend\n```\n\nYou can then use this module as the check name, as part of a policy:\n\n```elixir\ndefmodule MyApp.User do\n  # ...\n\n  policies do\n    policy action(:of_drinking_age) do\n      authorize_if MyApp.Checks.ActorOverAgeLimit\n    end\n  end\n\n  # ...\nend\n```\n\n#### Inline checks\n\nInline checks are filter checks, but are different enough to warrant their own documentation. These are written directly in a policy, eg.\n\n```elixir\npolicy action_type(:read) do\n  # Allow records with the attribute `public` set to true to be read\n  authorize_if expr(public == true)\n\n  # Allow records with the attribute `level` less than the value of the `level`\n  # argument to the action to be read\n  authorize_if expr(level <= ^arg(:level))\nend\n```\n\nKeep in mind that, for create actions, many `expr/1` checks won't make sense, and may return `false` when you wouldn't expect. Expression (and other filter) policies apply to \"a synthesized result\" of applying the action, so related values won't be available. For this reason, you may end up wanting to use other checks that are built for working against changesets, or only simple attribute-based filter checks. Custom checks may also be warranted here.\n\nAsh also comes with a set of built-in helpers for writing inline checks - see `Ash.Policy.Check.Builtins` for more information.\n\n##### Referencing the actor\n\nIn expression checks, the `actor` template can be used (other templates that may work in filter expressions, for example, are not available). For example:\n\n```elixir\n# Authorize records that have an author relationship with the author ID the same as the actor ID\n# ie. records authored by the actor\nauthorize_if expr(author.id == ^actor(:id))\n```\n\n##### Using `exists`\n\nA common mistake when using related data in filters is to be too restrictive. Imagine a scenario where you have an action like this:\n\n```elixir\nread :friends_of_ted do\n  filter expr(friends.first_name == \"ted\")\nend\n```\n\nIf this was in a User resource, it would return users that have a friend with the first name \"ted\". So far so good. Then someone calls it like so:\n\n```elixir\nResource\n|> Ash.Query.for_read(:friends_of_ted)\n|> Ash.Query.filter(friends.last_name == \"dansen\")\n```\n\nThe resulting filter is `friends.first_name == \"ted\" and friends.last_name == \"dansen\"`- this means that you'll get users that have a friend with the full name \"ted dansen\". That _might_ be what you meant, but more likely you would want \"users that have a friend with the first name \"ted\", that also have a friend with the last name 'dansen'\".\n\nTo accomplish that, we can use the `exists` helper and rework the example like so:\n\n```elixir\n# There exists a friend with the first name \"ted\"\nread :friends_of_ted do\n  filter expr(exists(friends, first_name == \"ted\"))\nend\n\n# And there also exists a friend with the last name \"dansen\"\n# They may be the same friend if the user is friends with Ted Dansen!\nResource\n|> Ash.Query.for_read(:friends_of_ted)\n|> Ash.Query.filter(exists(friends, last_name == \"dansen\"))\n```\n\nIn policies (and often any time you mean \"a related thing exists where some condition is true\"), it is advised to use `exists/2` when referring to relationships because of the way that the policy authorizer may mix & match your policies when building filters. This is also true when adding filters to actions. If you use `exists`, then your policies can be used in filters without excluding unnecessary data.","ref":"policies.html#types-of-checks","title":"Types of checks - Policies","type":"extras"},{"doc":"Field policies allow you to authorize access to specific fields via policies scoped to fields.\n\nFor example:\n\n```elixir\nfield_policies do\n  field_policy :role do\n    authorize_if actor_attribute_equals(:role, :supervisor)\n  end\nend\n```\n\nIf _any_ field policies exist then _all_ fields must be authorized by a field policy.\nIf you want a \"deny-list\" style, then you can add policies for specific fields.\nand add a catch-all policy using the special field name `:*`. All policies that apply\nto a field must be authorized.\n\nThe only exception to the above behavior is primary keys, which can always be read by everyone.\n\nAdditionally, keep in mind that adding `Ash.Policy.Authorizer` will require that all actions\npass policies. If you want to just add field policies, you will need to add a policy that allows\nall access explicitly, i.e\n\n```elixir\npolicies do\n  policy always() do\n    authorize_if always()\n  end\nend\n```","ref":"policies.html#field-policies","title":"Field Policies - Policies","type":"extras"},{"doc":"Unlike in regular policies, expressions in field policies cannot refer to related entities currently (except when using exists). Instead, you will need to create aggregates or expression calculations that return the results you want to reference.\n\nIn results, forbidden fields will be replaced with a special value: `%Ash.ForbiddenField{}`.\n\nWhen these fields are referred to in filters, they will be replaced with an expression that evaluates to `nil`. To support this behavior, only simple and filter checks are allowed in field policies.","ref":"policies.html#using-expressions-in-field-policies","title":"Using Expressions In Field Policies - Policies","type":"extras"},{"doc":"When calling internal functions like `Ash.read!/1`, private fields will by default always be shown.\nEven if field policies applies to the resource. You can change the default behaviour by setting the\n`private_fields` option on field policies.\n\n```elixir\nfield_policies do\n  private_fields :include\nend\n```\n\nThe different options are:\n\n- `:show` will always show private fields\n- `:hide` will always hide private fields\n- `:include` will let you to write field policies for private fields and private fields\n  will be shown or hidden depending on the outcome of the policy\n\nIf you want to overwrite the default option that is `:show`, you can do that by setting a global flag:\n\n```elixir\nconfig :ash, :policies, private_fields: :include\n```","ref":"policies.html#handeling-private-fields-in-internal-functions","title":"Handeling private fields in internal functions - Policies","type":"extras"},{"doc":"","ref":"policies.html#debugging-and-logging","title":"Debugging and Logging - Policies","type":"extras"},{"doc":"Policy breakdowns can be fetched on demand for a given forbidden error (either an `Ash.Error.Forbidden` that contains one ore more `Ash.Error.Forbidden.Policy` errors, or an `Ash.Error.Forbidden.Policy` error itself), via `Ash.Error.Forbidden.Policy.report/2`.\n\nAdditionally, you can request that they be provided in the error message for all raised forbidden errors (without the help text), by setting\n\n```elixir\nconfig :ash, :policies, show_policy_breakdowns?: true\n```\n\nHere is an example policy breakdown from tests.\n\n```text\nPolicy Breakdown\nA check status of `?` implies that the solver did not need to determine that check.\nSome checks may look like they failed when in reality there was no need to check them.\nLook for policies with `✘` and `✓` in check statuses.\n\nA check with a `⬇` means that it didn't determine if the policy was authorized or forbidden, and so moved on to the next check.\n`🌟` and `⛔` mean that the check was responsible for producing an authorized or forbidden (respectively) status.\n\nIf no check results in a status (they all have `⬇`) then the policy is assumed to have failed. In some cases, however, the policy\nmay have just been ignored, as described above.\n\n  Admins and managers can create posts | ⛔:\n    authorize if: actor.admin == true | ✘ | ⬇\n    authorize if: actor.manager == true | ✘ | ⬇\n```\n\nTo remove the help text, you can pass the `help_text?: false` option, which would leave you with:\n\n```text\nPolicy Breakdown\n  Admins and managers can create posts | ⛔:\n    authorize if: actor.admin == true | ✘ | ⬇\n    authorize if: actor.manager == true | ✘ | ⬇\n```","ref":"policies.html#policy-breakdowns","title":"Policy Breakdowns - Policies","type":"extras"},{"doc":"**IMPORTANT WARNING:** The following configuration should only ever be used in development mode!\n\nFor security reasons, authorization errors don't include any extra information, aside from `forbidden`. To have authorization errors include a policy breakdown (without help text) use the following config.\n\n```elixir\nconfig :ash, :policies, show_policy_breakdowns?: true\n```","ref":"policies.html#including-in-error-messages","title":"Including in error messages - Policies","type":"extras"},{"doc":"It is generally safe to log authorization error details, even in production. This can be very helpful when investigating certain classes of issue.\n\nTo have Ash automatically log each authorization failure, use\n\n```elixir\nconfig :ash, :policies, log_policy_breakdowns: :error # Use whatever log level you'd like to use here\n```\n\nTo have Ash log all policy breakdowns, even successful ones (this will be lots of noise, and should only be used for dev testing)\n\n```elixir\nconfig :ash, :policies, log_successful_policy_breakdowns: :error # Use whatever log level you'd like to use here\n```","ref":"policies.html#logging","title":"Logging - Policies","type":"extras"},{"doc":"# Project Structure\n\nIn this guide we'll discuss some best practices for how to structure your project. These recommendations align well with [Elixir conventions](https://hexdocs.pm/elixir/1.16.2/naming-conventions.html#casing) around file and module naming. These conventions allow for a logical coupling of module and file names, and help keep your project organized and easy to navigate.\n\n>","ref":"project-structure.html","title":"Project Structure","type":"extras"},{"doc":">\n> None of the things we show you here are _requirements_, only recommendations.\n> Feel free to plot your own course here. Ash avoids any pattern that requires\n> you to name a  file or module in a specific way, or put them in a specific\n> place. This ensures that all connections between one module and another\n> module are _explicit_ rather than _implicit_.\n\n```\nlib/ # top level lib folder for your whole project\n├─ my_app/ # your app's main namespace\n│  ├─ accounts/ # The Accounts context\n│  │  ├─ user/ # resource w/ additional files\n│  │  ├─ user.ex # The resource file\n│  │  ├─ token.ex # A resource without additional files\n│  │  ├─ password_helper.ex # A non-resource file\n│  │  ├─ accounts.ex # The Accounts domain module\n│  ├─ helpdesk/ # A Helpdesk context\n│  │  ├─ notification.ex # A resource without additional files\n│  │  ├─ other_file.ex # A non-resource file\n│  │  ├─ ticket/ # A resource with additional files\n│  │  │  ├─ preparations/ # Components of the resource, grouped by type\n│  │  │  ├─ changes/\n│  │  │  ├─ checks/\n│  │  ├─ ticket.ex # The resource file\n```\n\nGenerally speaking, your Ash application lives in the standard place within your elixir application, i.e `lib/my_app`. Within that folder, you create one folder for each context that you have. Each context has an `Ash.Domain` module within it, and the resources that live within that context. All resource interaction ultimately goes through a domain module.\n\nAlongside the domain module, you have your resources, as well as any other files used in the context. If a resource has any additional files that are used to implement it, they should be placed in a folder with the same name as the resource, in subfolders grouping the files by type. Feel free to choose another logical grouping, but we've found by-type to be effective.\n\n# Where do I put X thing\n\nThe purpose of Ash is to be both the model of and the interface to your domain logic (A.K.A business logic). Applying this generally looks like building as much of your domain logic \"behind\" your resources. This does not mean, however, that everything has to go _inside of_ your resources. For example, if you have a `Purchase` resource, and you want to be able to display a list of purchases that were taxable, and also calculate the percentage of the purchase that was taxable. You might have an action called `:taxable` and a calculation called `:percentage_tax`.","ref":"project-structure.html#these-are-recommendations-info","title":"These are recommendations {: .info} - Project Structure","type":"extras"},{"doc":"```elixir\nactions do\n  ...\n\n  read :taxable do\n    filter expr(taxable == true)\n  end\nend\n\ncalculations do\n  calculate :percentage_tax, :decimal, expr(\n    sum(line_items, field: :amount, query: [filter: tax == true]) /\n    sum(line_items, field: :amount)\n  )\nend\n```\n\nIn practice, you may not need the `taxable` action, i.e perhaps you simply want a \"taxable\" checkbox on a list view in your application, in which case you may use the primary read, or some other read like `:transaction_report`. You would then, on the consumer, provide the filter for `taxable == true`, and load the `:percentage_tax` calculation.","ref":"project-structure.html#example-1-reads-calculations","title":"Example 1: Reads & Calculations - Project Structure","type":"extras"},{"doc":"Lets say you want the user to fill in a github issue id, and you will fetch information from that github issue to use as part of creating a \"ticket\" in your system.. You might be tempted to do something like this in a LiveView:\n\n```elixir\ndef handle_event(\"link_ticket\", %{\"issue_id\" => issue_id}, socket) do\n  issue_info = GithubApi.get_issue(issue_id)\n\n  MyApp.Support.update_ticket(socket.assigns.ticket_id, %{issue_info: %{\n    title: issue_info.title,\n    body: issue_info.body\n  }})\nend\n```\n\nBut this is putting business logic inside of your UI/representation layer. Instead, you should write an action and put this logic inside of it.\n\n```elixir\ndefmodule MyApp.Ticket.FetchIssueInfo do\n  use Ash.Resource.Change\n\n  def change(changeset, _, _) do\n    Ash.Changeset.before_transaction(changeset, fn changeset ->\n      issue_info = GithubApi.get_issue(changeset.arguments.issue_id)\n\n      Ash.Changeset.force_change_attributes(changeset, %{\n        issue_info: %{\n          title: issue_info.title,\n          body: issue_info.body\n        }\n      })\n    end)\n  end\nend\n```\n\nThen you'd have an action like this:\n\n```elixir\nupdate :link_ticket do\n  argument :issue_id, :string, allow_nil?: false\n\n  change MyApp.Ticket.FetchIssueInfo\nend\n```\n\nThis cleanly encapsulates the operation behind the resource, even while the code for fetching the github issue still lives in a `GitHubApi` module.","ref":"project-structure.html#example-2-using-external-data-in-create-actions","title":"Example 2: Using external data in create actions - Project Structure","type":"extras"},{"doc":"# Generators\n\nAsh comes with multiple generators, packages as mix tasks, to help you generate and make modifications to your applications.\n\nSee the documentation for each mix task for more information. What is presented here is merely an overview.","ref":"generators.html","title":"Generators","type":"extras"},{"doc":"Ash can be installed into a project using `igniter`. Some examples of how this can work:\n\n- Install Ash & AshPostgres into your current project\n\n  ```\n  mix igniter.install ash ash_postgres\n  ```\n\n- Create a new mix project with Ash & AshPostgres installed\n\n  ```\n  mix archive.install hex igniter_new\n  mix igniter.new my_project --install ash,ash_postgres\n  ```\n\n- Create a new phoenix project with Ash & AshPostgres installed\n\n  ```\n  mix igniter.new my_project --install ash,ash_postgres --with phx.new\n  ```\n\n  >","ref":"generators.html#installer","title":"Installer - Generators","type":"extras"},{"doc":">\n  > The archives have to be installed to use them. This only needs to be done once, until you change elixir versions.\n  >\n  > ```elixir\n  > mix archive.install hex igniter_new\n  > mix archive.install hex phx_new\n  > ```","ref":"generators.html#install-hex-archives-info","title":"install hex archives {: .info} - Generators","type":"extras"},{"doc":"- `mix ash.gen.resource` - Generates a new `Ash.Resource`\n- `mix ash.gen.domain` - Generates a new `Ash.Domain`\n- `mix ash.gen.enum` - Generates a new `Ash.Type.Enum`\n- `mix ash.gen.base_resource` - Generates a new base resource.","ref":"generators.html#generators","title":"Generators - Generators","type":"extras"},{"doc":"- `mix ash.patch.extend` - Adds an extension or extensions to a domain or resource.","ref":"generators.html#patchers","title":"Patchers - Generators","type":"extras"},{"doc":"# Error Handling\n\nAs of 3.0, Ash uses `Splode` to as our basis for errors. The documentation below still applies, but it is powered by `Splode` under the hood.\n\nThere is a difficult balance to cut between informative errors and enabling simple reactions to those errors. Since many extensions may need to work with and/or adapt their behavior based on errors coming from Ash, we need rich error messages. However, when you have a hundred different exceptions to represent the various kinds of errors a system can produce, it becomes difficult to say something like \"try this code, and if it is invalid, do x, if it is forbidden, do y. To this effect, exceptions in Ash have one of four classes mapping to the top level exceptions.","ref":"error-handling.html","title":"Error Handling","type":"extras"},{"doc":"- forbidden - `Ash.Error.Forbidden`\n- invalid - `Ash.Error.Invalid`\n- framework - `Ash.Error.Framework`\n- unknown - `Ash.Error.Unknown`\n\nSince many actions can be happening at once, we want to support the presence of multiple errors as a result of a request to Ash. We do this by grouping up the errors into one before returning or raising.\nWe choose an exception based on the order of the exceptions listed above. If there is a single forbidden, we choose `Ash.Error.Forbidden`, if there is a single invalid, we choose `Ash.Error.Invalid` and so on. The actual errors will be included in the `errors` key on the exception. The exception's message will contain a bulleted list of all the underlying exceptions that occurred. This makes it easy to react to specific kinds of errors, as well as to react to _any/all_ of the errors present.\n\nAn example of a single error being raised, representing multiple underlying errors:\n\n```elixir\nAshExample.Representative\n|> Ash.Changeset.for_create(:create, %{employee_id: \"the best\"})\n|> Ash.create!()\n ** (Ash.Error.Invalid) Invalid Error\n * employee_id: must be absent.\n * first_name, last_name: at least 1 must be present.\n```\n\nThis allows easy rescuing of the major error classes, as well as inspection of the underlying cases\n\n```elixir\ntry do\n  AshExample.Representative\n  |> Ash.Changeset.for_create(:create, %{employee_id: \"dabes\"})\n  |> Ash.create!()\nrescue\n  e in Ash.Error.Invalid ->\n    \"Encountered #{Enum.count(e.errors)} errors\"\nend\n\n\"Encountered 2 errors\"\n```\n\nThis pattern does add some additional overhead when you want to rescue specific kinds of errors. For example, you may need to do something like this:\n\n```elixir\ntry do\n  AshExample.Representative\n  |> Ash.Changeset.for_create(:create, %{employee_id: \"dabes\"})\n  |> Ash.create!()\nrescue\n  e in Ash.Error.Invalid ->\n    case Enum.find(e.errors, &(&1.__struct__ == A.Specific.Error)) do\n      nil ->\n        ...handle errors\n      error ->\n        ...handle specific error you found\n    end\nend\n```","ref":"error-handling.html#error-classes","title":"Error Classes - Error Handling","type":"extras"},{"doc":"When returning errors in your application, you can a few different things:","ref":"error-handling.html#generating-errors","title":"Generating Errors - Error Handling","type":"extras"},{"doc":"A shortcut for creating errors is to return a keyword list containing `field`\nand `message`. This works in changes and validations. For example:\n\n```elixir\n# in a change, you use `Ash.Changeset.add_error/2`\ndef change(changeset, _, _) do\n  if under_21?(changeset) do\n    Ash.Changeset.add_error(changeset, field: :age, message: \"must be 21 or older\")\n  else\n    changeset\n  end\nend\n\n# in a validation, you return the error in an `{:error, error}` tuple.\ndef change(changeset, _, _) do\n  if under_21?(changeset) do\n    {:error,  field: :age, message: \"must be 21 or older\"}\n  else\n    :ok\n  end\nend\n```","ref":"error-handling.html#return-a-keyword-list-in-changes-and-validations","title":"Return a keyword list in changes and validations - Error Handling","type":"extras"},{"doc":"These are all modules under `Ash.Error.*`. You can create a new one with `error.exception(options)`, and the options are documented in each exception. This documentation is missing in some cases. Go to the source code of the exception to see its special options. All of them support the `vars` option, which are values to be interpolated into the message, useful for things like translation.\n\nFor example:\n\n```elixir\ndef change(changeset, _, _) do\n  if some_condition(changeset) do\n    error = Ash.Error.Changes.Required.new(\n      field: :foo,\n      type: :attribute,\n      resource: changeset.resource\n    )\n\n    Ash.Changeset.add_error(changeset, error)\n  else\n    changeset\n  end\nend\n```","ref":"error-handling.html#using-a-builtin-exception","title":"Using a Builtin Exception - Error Handling","type":"extras"},{"doc":"You can create a custom exception like so. This is an example of a builtin exception that you could mirror to build your own\n\n```elixir\ndefmodule Ash.Error.Action.InvalidArgument do\n  @moduledoc \"Used when an invalid value is provided for an action argument\"\n  use Splode.Error, fields: [:field, :message, :value], class: :invalid\n\n  def message(error) do\n    \"\"\"\n    Invalid value provided#{for_field(error)}#{do_message(error)}\n\n    #{inspect(error.value)}\n    \"\"\"\n  end\nend\n```","ref":"error-handling.html#using-a-custom-exception","title":"Using a Custom Exception - Error Handling","type":"extras"},{"doc":"# Testing\n\nTake a look at [the how-to guide](/documentation/how-to/test-resources.livemd) for a practical look at writing tests\n\nThe configuration you likely want to add to your `config/test.exs` is:\n\n```elixir\n# config/test.exs\nconfig :ash, :disable_async?, true\nconfig :ash, :missed_notifications, :ignore\n```\n\nEach option is explained in more detail below.","ref":"testing.html","title":"Testing","type":"extras"},{"doc":"The first thing you will likely want to do, especially if you are using `AshPostgres`, is to add the following config to your `config/test.exs`.\n\n```elixir\n# config/test.exs\nconfig :ash, :disable_async?, true\n```\n\nThis ensures that Ash does not spawn tasks when executing your requests, which is necessary for doing transactional tests with `AshPostgres`.","ref":"testing.html#async-tests","title":"Async tests - Testing","type":"extras"},{"doc":"If you are using Ecto's transactional features to ensure that your tests all run in a transaction, Ash will detect that it had notifications to send (if you have any notifiers set up) but couldn't because it was still in a transaction. The default behavior when notifications are missed is to warn. However, this can get pretty noisy in tests. So we suggest adding the following config to your `config/test.exs`.\n\n```elixir\n# config/test.exs\nconfig :ash, :missed_notifications, :ignore\n```","ref":"testing.html#missed-notifications","title":"Missed notifications - Testing","type":"extras"},{"doc":"# Development Utilities","ref":"development-utilities.html","title":"Development Utilities","type":"extras"},{"doc":"All Ash packages that ship with extensions provide exports in their `.formatter.exs`. This prevents the formatter from turning, for example, `attribute :name, :string` into `attribute(:name, :string)`. To enable this, add `:ash` (and any other Ash libraries you are using) to your `.formatter.exs` file:\n\n```elixir\n[\n  # ...\n  import_deps: [..., :ash],\n  # ...\n]\n```","ref":"development-utilities.html#formatting-dsls","title":"Formatting DSLs - Development Utilities","type":"extras"},{"doc":"Ash uses [Spark](https://hexdocs.pm/spark) to build all of our DSLs (like `Ash.Resource` and `Ash.Domain`) and to validate options lists to functions. `Spark` ships with an extension that is automatically picked up by ElixirLS to provide autocomplete for all of our DSLs, and options list. You don't need to do anything to enable this, but it only works with ElixirLS (not other language server tools).","ref":"development-utilities.html#elixirsense-plugin","title":"ElixirSense Plugin - Development Utilities","type":"extras"},{"doc":"`Spark` also ships with a formatter plugin that can help you keep your resources formatted consistently. This plugin can sort the sections of your DSL to make your resources more consistent, and it can remove any accidentally added parentheses around DSL code.","ref":"development-utilities.html#formatter-plugin","title":"Formatter plugin - Development Utilities","type":"extras"},{"doc":"Add the following to your `.formatter.exs`\n\n```elixir\n[\n  plugins: [Spark.Formatter], # <- add the plugin here\n  inputs: ...\n]\n```","ref":"development-utilities.html#adding-the-plugin","title":"Adding the plugin - Development Utilities","type":"extras"},{"doc":"#### Minimal config for your Ash Resources\n\n```elixir\nconfig :spark, :formatter,\n  remove_parens?: true,\n  \"Ash.Domain\": [],\n  \"Ash.Resource\": [\n    section_order: [\n      # any section not in this list is left where it is\n      # but these sections will always appear in this order in a resource\n      :actions,\n      :attributes,\n      :relationships,\n      :identities\n    ]\n  ]\n```\n\n#### If you `use` a different module than Ash.Resource\n\n```elixir\nconfig :spark, :formatter,\n  [\n    \"Ash.Resource\": [\n      section_order: [\n        :resource,\n        :identities,\n        :attributes,\n        :relationships,\n        ...\n      ]\n    ],\n    # If you use a different module than Ash.Resource\n    \"MyApp.Resource\": [\n      type: Ash.Resource,\n      # What extensions might be added by your base module\n      extensions: [...],\n      section_order: [\n        :resource,\n        :identities,\n        :attributes,\n        :relationships,\n        ...\n      ]\n    ]\n  ]\n```","ref":"development-utilities.html#configuration","title":"Configuration - Development Utilities","type":"extras"},{"doc":"# Upgrade","ref":"upgrading-to-3-0.html","title":"Upgrade","type":"extras"},{"doc":"Other packages have had a major version bump in addition to Ash core. While _all packages_ have been changed to refer to `domain` instead of `api`, they did not receive a major version bump because there were no special breaking changes to account for when using that package. You will also need to factor in the following upgrade guides, if you use those packages.\n\n- [AshPostgres](https://hexdocs.pm/ash_postgres/upgrading-to-2-0.html)\n- [AshJsonApi](https://hexdocs.pm/ash_json_api/upgrade.html)\n- [AshGraphql](https://hexdocs.pm/ash_graphql/upgrade.html)","ref":"upgrading-to-3-0.html#other-packages","title":"Other Packages - Upgrade","type":"extras"},{"doc":"This section contains each breaking change, and the steps required to address it in your application","ref":"upgrading-to-3-0.html#upgrading-to-3-0","title":"Upgrading to 3.0 - Upgrade","type":"extras"},{"doc":"#### Ash.Flow\n\nIf you use `Ash.Flow`, include `{:ash_flow, \"~> 0.1.0\"}` in your application.\n\n#### Picosat Elixir\n\nIn 2.0, Ash had a dependency on `picosat_elixir`. In 3.0, this is an optional dependency, to help folks handle certain compatibility issues. To upgrade, add `{:picosat_elixir, \"~> 0.2\"}` to your `mix.exs`.","ref":"upgrading-to-3-0.html#dependency-changes","title":"Dependency Changes - Upgrade","type":"extras"},{"doc":"The previous name was often confusing as this is an overloaded term for many. To that end, `Ash.Api` has been renamed to `Ash.Domain`, which better fits our usage and concepts.\n\n#### What you'll need to change\n\nTo make this change you will need to do two things:\n\n1. replace `Ash.Api` with `Ash.Domain` in your application\n2. replace places where an `:api` option is passed to a function with the `:domain` option. For example, `AshPhoenix.Form.for_create(..., api: MyApp.SomeApi)` should now be `AshPhoenix.Form.for_create(..., domain: MyApp.SomeDomain)`\n3. Update your application config to define `ash_domains` instead of `ash_apis`, eg. `config :my_app, ash_domains: [MyApp.MyDomain]`","ref":"upgrading-to-3-0.html#ash-api-is-now-ash-domain","title":"Ash.Api is now Ash.Domain - Upgrade","type":"extras"},{"doc":"- `code_interface.define_for` is now `code_interface.domain`. Additionally, it is set automatically if the `domain` option is specified on `use Ash.Resource`.\n\n- `domain.execution.timeout` used to default to 30 seconds, but now it defaults to `:infinity`. This is because a timeout requires copying memory across process boundaries, and is an unnecessary expense a _vast_ majority of the time. We recommend putting timeouts on specific actions that may need them.\n\n- `actions.create.reject`, `actions.update.reject` and `actions.destroy.reject` have been removed. Blacklisting inputs makes it too easy to make mistakes. Instead, specify an explicit `accept` list.\n\n- `relationships.belongs_to.attribute_writable?` no longer makes the underlying attribute both public and writable. It defaults to the value of `writable?` on the relationship (which itself defaults to `true`), and only controls the generated attributes `writable? true` property. So now, by default, it will be `true`, which is safe when coupled with changes to the `default_accept`, discussed below. Generally, this means you should be safe to remove any occurrences of `attribute_writable? true`.\n\n- `relationships.belongs_to.attribute_public?` has been added, which controls the underlying attribute's `public?` value. This, similar to `attribute_writable?` defaults to the `public?` attribute of the relationship.\n\n- `resource.simple_notifiers` has been removed, in favor of specifying non-DSL notifiers in the `simple_notifiers` option to `use Ash.Resource`.\n\n- `resource.actions.read.filter` can now be specified multiple times. Multiple filters will be combined with `and`.\n\n### `Ash.Registry` has been removed\n\n`Ash.Registry` is no longer needed. Place each resource in the domain instead.\n\n```elixir\nresources do\n  resource Resource1\n  resource Resource2\nend\n```","ref":"upgrading-to-3-0.html#dsl-changes","title":"DSL Changes - Upgrade","type":"extras"},{"doc":"When calling a calculation with arguments, this is done via passing a keyword list to the calculation, for example: `full_name(separator: \"\")`. In 2.0, keyword lists were not evaluated as part of the expression in the same way as other values, meaning two things:\n\n1. You did not have to pin usage of template functions, i.e `full_name(separator: arg(:separator))`. Now, you will need to do so: `full_name(separator: ^arg(:separator))`\n\n2. You had to use `expr` to pass an expression to a calculation argument (this only works if `allow_expr? true` is configured on the calculation argument). For example: `full_name(separator: expr(sep_1 <> sep_2))` would now be `full_name(separator: sep_1 <> sep_2)`\n\nIf you do not have any expression calculations that accept arguments, you likely need to do nothing. To make these changes, you will need to look at each place you build an expression that you may be calling a calculation w/ arguments, i.e `Ash.Query.filter`, and the `expression` callback in `Ash.Calculation`, and see if they must be modified as described above.","ref":"upgrading-to-3-0.html#expression-changes","title":"Expression changes - Upgrade","type":"extras"},{"doc":"#### Ash.Policy.FilterCheck and Ash.Policy.FilterCheckWithContext are combined\n\n`Ash.Policy.FilterCheck` and `Ash.Policy.FilterCheckWithContext` have been combined into `Ash.Policy.FilterCheck`. If you have any usages of `FilterCheckWithContext`, you'll need to change that to `FilterCheck`. If you have usages of `FilterCheck`, you will need to add the `context` arguments to the callbacks. Compiler warnings will show you what callbacks mismatch.\n\n#### Ash.Filter\n\n`Ash.Filter.parse/5` is now `Ash.Filter.parse/3`. `Ash.Filter.parse_input/5` is now `Ash.Filter.parse_input/2` The third and fourth optional arguments are unnecessary and were previously ignored, and the fifth argument is not necessary for `parse_input`.\n\n`Ash.Filter.used_aggregates/3` no longer accepts `:all` as a relationship path, instead using `:*`. Its very unlikely that this is used in your application.\n\n#### Ash.Filter.TemplateHelpers\n\nTools for templating expressions were previously in `Ash.Filter.TemplateHelpers`. This often led to confusion because it was a hard to remember module name, and didn't really make sense to be separate from the rest of our utilities. Now, all the functions/macros you need for expressions are in `Ash.Expr`. This means that in any given file where you want to work with expressions, you only need to do `import Ash.Expr`. Additionally, this `import Ash.Expr` has been added to changes, preparations, validations and calculations automatically.\n\n#### Ash.CiString\n\n- `Ash.CiString.new(nil)` now returns `nil` instead of `%Ash.CiString{value: nil}`\n\n#### Ash.Resource.Validation\n\n`validate/2` is now `validate/3`, with the third argument being the context of the validation.\n\n#### Ash.Query.Calculation\n\nThe function signature of `Ash.Query.Calculation.new` has been changed. We use an options list over optional arguments, and now require constraints to be provided. You will need to adjust your calls to this function.\n\n#### Ash.Calculation\n\nThis module has been renamed to `Ash.Resource.Calculation`. You will need to rename your references to it.\n\n#### Ash.Query\n\nAsh.Query.to_query has been removed. Use `Ash.Query.new` instead.\n\nAsh.Query.expr has been removed. Use `Ash.Expr.expr` instead.\n\n#### Aggregates\n\n`first` and `list` aggregates have a new option called `include_nil?`, which _defaults to false_. You may need to add `include_nil?: true` to your resource aggregates if you wish to retain the old behavior.\n\n##### New format for sorting on calculations with arguments\n\nThe format for sorting on calculations that take input has been swapped. Previously, you would use `sort(calculation: {:desc, %{arg: :value}})`, but for the sake of consistency, you now use `sort(calculation: {%{arg: :value}, :desc})`.\n\n#### Ash.Changeset\n\n`Ash.Changeset.new/2` has been removed. `Ash.Changeset.new/1` is still available for creating a new changeset, but attributes and arguments should, with few exceptions, be passed to the relevant `Ash.Changeset.for_ ` functions, _not_ to `Ash.Changeset.new/2`. Removing the second argument helps clarify the purpose of `Ash.Changeset.new/1`.\n\n`Ash.Changeset.after_transaction/2` can no longer be called from within other lifecycle hooks. We need to know whether or not an after action hook, before we start processing any hooks.\n\n`Ash.Changeset.manage_relationship/4` no longer uses `:all` to signal that all changes will be sent to the join relationship. Instead, use `:*`.\n\n`Ash.Changeset.filter` now accepts expressions. The value of the filter is no longer a simple equality map, but rather a regular Ash expression. We add to it on successive calls to `Ash.Changeset.filter`. Additionally, this value is stored in `changeset.filter` instead of `changeset.filters`.\n\n#### Ash.Policy.FilterCheckWithContext\n\n`Ash.Policy.FilterCheck` and `Ash.Policy.FilterCheckWithContext` have been combined. The name is `Ash.Policy.FilterCheck`, but the callbacks take the extra arguments present in `Ash.Policy.FilterCheckWithContext`.\n\n#### Builtin Changes & Preparations\n\nThe functions provided to `after_action/1`, `after_transaction/1`, `before_transaction/1` and `before_action/1` must all now take an additional argument, which is the change context.\n\nFor example,\n\n```elixir\nchange after_action(fn changeset, result -> ... end)\n```\n\nis now\n\n```elixir\nchange after_action(fn changeset, result, context -> ... end)\n```\n\nThis is true for both preparations and changes.\n\n#### Expressions\n\nPreviously, in expressions, you could say `expr(ref(^some_atom))`. This is a tool for building dynamic references, but it was an exception to the standard pattern of prefixing \"external\" things in an expression, i.e `arg` with `^`. Now, you must do the same with `ref/1` and `ref/2`. You will need to search for `ref(` in your application, and ensure that if it is inside of an expression you have prefixed it with `^`. The original example becomes: `expr(^ref(some_atom))`.\n\n#### Exception changes\n\n##### Ash exceptions have been simplified and are now backed by `Splode`\n\nUsage of `def_ash_error/2` will show you what to change in its warnings.\n\nInstead of combining `def_ash_error` with `defimpl Ash.ErrorKind`, you create a custom error like so:\n\n```elixir\ndefmodule MyCustomError do\n  use Splode.Error, class: :invalid, fields: [:foo, :bar]\n\n  def message(error) do\n    \"Message: #{error.foo} - #{error.bar}\"\n  end\nend\n```\n\n##### Ash exception changes\n\nWhen sorting or filtering, if a field is not found, an `Ash.Query.Error.NoSuchField` is used, where it would have previously been an `Ash.Query.Error.NoSuchAttribute`. This was wrong as sometimes the field reference was not an attribute. Places that would previously return `Ash.Query.Error.NoSuchAttributeOrRelationship` now return `Ash.Query.Error.NoSuchField` as well.\n\nAdditionally, the following exceptions have had keys remapped:\n\n`NoSuchAttribute`: `name` -> `attribute`\n`NoSuchRelationship`: `name` -> `relationship`\n`NoSuchFunction`: `name` -> `function`\n`NoSuchOperator`: `name` -> `operator`\n\n---","ref":"upgrading-to-3-0.html#module-function-changes","title":"Module/function changes - Upgrade","type":"extras"},{"doc":"### `Ash.set_*` functions have been removed\n\nIn 2.0, a set of features allowed storing the actor, tenant and context in the process dictionary. There were fundamental issues with this pattern that manifested in subtle bugs. We suggest making this change _before_ you upgrade, as this change can be made and verified without upgrading to 3.0.\n\n#### What you'll need to change\n\nYou need to manually thread through your tenant, actor, and context values wherever you were using `Ash.set_*`. For example:\n\n```elixir\nAsh.set_actor(current_user)\nAsh.set_tenant(current_tenant)\n\nAsh.Changeset.for_create!(..)\nAsh.Query.for_read(..)\n```\n\nwould become\n\n```elixir\nAsh.Changeset.for_create!(.., tenant: current_tenant, actor: current_user)\nAsh.Query.for_read(.., tenant: current_tenant, actor: current_user)\n```","ref":"upgrading-to-3-0.html#significant-changes","title":"Significant Changes - Upgrade","type":"extras"},{"doc":"In order to honor rules on the `Domain` module about authorization and timeouts, we have to know the `Domain` when building the changeset.\n\n#### What you'll need to change\n\n##### Embedded Resources\n\nThe domain for the calls to embedded resources is gotten from the parent changeset. No need to change them at all. a `domain` constraint has been added in case you wish to make a given embedded resource use a specific domain always.\n\nFor example:\n\n```elixir\nattribute :bio, MyApp.Bio do\n  constraints domain: MyApp.SomeDomain\nend\n```\n\n##### Single Domain resources\n\nWhile it is possible for resources to be used with multiple domains, it almost never happens in practice. Any resources that are only used from a single domain only (_not_ including embedded resources) should be modified to have a `domain` option specified in their call to `use Ash.Resource`. For example:\n\n```elixir\nuse Ash.Resource,\n  domain: MyApp.MyDomain\n```\n\n###### Using `Ash.*` to interact with your resources\n\nCalling functions on the domain has been deprecated. You must now use the functions defined in the `Ash` module to interact with your resources. They are the same as what was previously available in your domain module. For example:\n\n```elixir\nMyDomain1.create!(changeset)\nMyDomain2.read!(query)\nMyDomain3.calculate!(...)\n```\n\ncan now be written as\n\n```elixir\nAsh.create!(changeset)\nAsh.read!(query)\nAsh.calculate!(query)\n```\n\nThis makes refactoring resources easier, as you no longer need to change the call site, it remains the same regardless of what Domain a resource is in.\n\n##### Multi Domain resources\n\nFor these, you will need to include the `domain` option when you construct a changeset.\n\nFor example:\n\n```elixir\nMyResource\n|> Ash.Changeset.for_create(:create, input, domain: MyApp.MyDomain)\n```\n\n---","ref":"upgrading-to-3-0.html#the-domain-of-a-resource-must-now-be-known-when-constructing-a-changeset-query-or-action-input","title":"The `Domain` of a resource must now be known when constructing a changeset, query or action input - Upgrade","type":"extras"},{"doc":"For more context, see the original discussion: https://github.com/ash-project/ash/issues/512\n\nIn 2.0, all public, writable attributes were accepted by each action by default. This made it very easy to accidentally expose writing to an attribute in an action where that was not the intent. Additionally, new attributes added were automatically writable across a wide array of actions, which was error prone for the same reason.\n\nIn 2.0, as well as 3.0, there is an option called `default_accept`, which modifies all actions that do not have an `accept` list. In 2.0, the default value for `default_accept` was \"all public, writable attributes\". In 3.0, the default value for `default_accept` is `[]`. This encourages a pattern of explicitly listing inputs to actions, and is safer and less error prone.\n\n#### What you'll need to change\n\nFor those who want to upgrade, you would use the new `:*` option to `default_accept` (also usable in an action's `accept` option) to accept all public attributes. Go to each resource and, inside the actions block, add:\n\n```elixir\nactions do\n  default_accept :*\n  ...\nend\n```\n\nThen mark the attributes and relationships you want to accept as `public?: true` (see [this section](#private-true-public-true) for more information on this change).\n\nFor those who want to be more explicit, or after your upgrade has complete if you wish to refactor existing resources and actions, the general best path forward is to copy the `default_accept` into each action (or put it in a module attribute and reference it) as the `accept` option. This way when a new action is added, it does not \"inherit\" some list of accepted attributes.\n\n> ### :\\* private attributes can now be accepted {: .info}\n>\n> In 2.0, accepting a private attribute as a change required adding an argument with the same name, and using `change set_attribute(...)`. Now that we require explicit accept lists, you can place private attribtues in that list, which will allow them to be written to (but not read back).\n\n> ### :\\* includes belongs_to attributes! {: .warning}\n>\n> The change to explicit accepts also included a change that defaults belongs_to attributes to `writable?: true` and `public?: false`. You may want to add `attribute_writable?: false` to your belongs_to relationships if you are adding `default_accept :*` and don't currently have `attribute_writable?: true` on them currently.\n\n---","ref":"upgrading-to-3-0.html#actions-no-longer-default-to-accepting-all-public-writable-attributes","title":"Actions no longer default to accepting all public writable attributes - Upgrade","type":"extras"},{"doc":"For example:\n\n```elixir\ndefaults [:read, :destroy, create: :*, update: :*]\n```","ref":"upgrading-to-3-0.html#default-actions-create-and-update-can-now-have-an-accept-list","title":"Default actions `:create` and `:update` can now have an accept list - Upgrade","type":"extras"},{"doc":"In 2.0, if you have `:read` in your default actions list, it would generate an action like this:\n\n```elixir\nread :read do\n  primary? true\nend\n```\n\nNow, it generates an action like this:\n\n```elixir\nread :read do\n  primary? true\n  pagination [keyset?: true, offset?: true, countable: true, required?: false]\nend\n```\n\n---","ref":"upgrading-to-3-0.html#default-read-actions-are-now-paginatable","title":"Default read actions are now paginatable - Upgrade","type":"extras"},{"doc":"For most cases, this won't affect you. However, if you are using `AshGraphql`, and have any queries connected to a default `:read` action, it will default to making those queries paginatable with keyset pagination. To keep the old behavior, you will need to add `paginate_with nil` to the query, for example:\n\n```elixir\ngraphql do\n  queries do\n    list :list_things, :read, paginate_with: nil\n  end\nend\n```\n\n---","ref":"upgrading-to-3-0.html#what-you-will-need-to-change","title":"What you will need to change - Upgrade","type":"extras"},{"doc":"In Ash 2.0, `before_action` and `before_transaction` hooks that were added to a changeset were prepended to the list of hooks by default. These hooks were then run in order. What this meant is that, given an action like the following:\n\n```elixir\ncreate :foo do\n  change before_action(fn changeset, _context ->\n    IO.puts(\"first\")\n    changeset\n  end)\n\n  change before_action(fn changeset, _context ->\n    IO.puts(\"second\")\n    changeset\n  end)\nend\n```\n\nYou would see `second` printed _before_ `first`.\n\n#### What you'll need to change\n\nIn many cases, this won't matter to you. However, if you have a situation where the order of your before action/transaction hooks matters, you can do one of two things:\n\n1. reorder the changes that add those before action/transaction hooks\n2. use the `:prepend` option to `Ash.Changeset.before_action/2` and `Ash.Changeset.before_transaction/2` to explicitly prepend the hook to the list of hooks\n\n---","ref":"upgrading-to-3-0.html#before-action-and-before-transaction-hooks-order-has-been-reversed","title":"Before action and before transaction hooks order has been reversed - Upgrade","type":"extras"},{"doc":"To help make it clear what keys are available in the context provided to callbacks on these modules, they have been adjusted to provide a _struct_ instead of a `map`. This helps avoid potential ambiguity, and\nacts as documentation.\n\n#### What you'll need to change\n\nIf you are using something like `Keyword.new(context)` to generate options to pass into an action, change that to `Ash.Context.to_opts(context)`.\n\n---","ref":"upgrading-to-3-0.html#context-in-changes-preparations-validations-calculations-are-now-structs","title":"Context in changes, preparations, validations, calculations are now structs - Upgrade","type":"extras"},{"doc":"Per the above change, we have specified the values available in the context of a calculation, with `Ash.Resource.Calculation.Context`. In Ash 2.0, context was merged with arguments, which was problematic in various ways. Now, arguments are in `context.arguments`.\n\n#### What you'll need to change\n\nYou will need to update your module-backed calculations to account for this.\n\n```elixir\ndef calculate(records, _opts, context) do\n  Enum.map(records, fn record ->\n    record.first_name <> context.delimiter <> record.last_name\n  end)\nend\n```\n\nwould need to be adjusted to access arguments in the context:\n\n```elixir\ndef calculate(records, _opts, %{arguments: arguments}) do\n  Enum.map(records, fn record ->\n    record.first_name <> arguments.delimiter <> record.last_name\n  end)\nend\n```\n\n---\n\n### `private?: true` -> `public?: true`\n\nThere is no longer a `private?` option for attributes, relationships, calculations and aggregates. Instead of attributes defaulting to `private?: false`, they now default to `public?: false`. It was too easy to add an attribute and not realize that you had exposed it over your api.\n\n#### What you'll need to change\n\nIf you are using api extensions (i.e `AshGraphql` and `AshJsonApi`), you will need to go to your resources and \"invert\" the definitions. i.e _remove_ `private?: true` and _add_ `public?: true` to _every other_ attribute, _relationship_ and _calculation_. Don't forget the relationships and calculations!\n\n>","ref":"upgrading-to-3-0.html#calculation-arguments-are-now-in-context-arguments","title":"Calculation arguments are now in `context.arguments` - Upgrade","type":"extras"},{"doc":">\n> The above includes embedded resources as well! Don't forget to make sure that all fields on your embedded resources are also marked as `public?: true` (if applicable). The goal here is to have a clear visual indicator of what in your application can be shown publically.\n\n---","ref":"upgrading-to-3-0.html#embedded-resources-too-warning","title":"Embedded resources too! {: .WARNING} - Upgrade","type":"extras"},{"doc":"Previously, anonymous function calculations were special cased to operate on a single record. For consistency, these anonymous functions now take the list of records.\n\n#### What you'll need to change\n\nUpdate any anonymous function calculations to take and return a list, for example:\n\n```elixir\ncalculate :full_name, :string, fn record, _context ->\n  record.first_name <> \" \" <> record.last_name\nend\n```\n\nwould become\n\n```elixir\ncalculate :full_name, :string, fn records, _context ->\n  # note, you can also return `{:ok, list}` or `{:error, error}`\n  Enum.map(records, fn record ->\n    record.first_name <> \" \" <> record.last_name\n  end)\nend\n```\n\n---","ref":"upgrading-to-3-0.html#anonymous-calculations-now-operate-on-a-list-just-like-module-calculations","title":"Anonymous calculations now operate on a list, just like module calculations - Upgrade","type":"extras"},{"doc":"In 2.0 relationship loads from the `load/3` callback in a calculation will select _all_ fields of that relationship and make them available to the calculation.\n\nFor example, the following calculation `load/3` callback expresses a dependency on _all_ fields of the relationship `:relationship`.\n\n```elixir\ndef load(_, _, _) do\n  [:relationship]\nend\n```\n\n#### What you'll need to change\n\n##### Refactor\n\nIn 3.0, relationship dependencies alone will only make the related primary keys available. You now need to select explicit fields that you want to use in your calculation, for example:\n\n```elixir\ndef load(_, _, _) do\n  [relationship: [:field1, :field2]]\nend\n```\n\n#### Keep the old behavior\n\nEach calculation can still opt into the old behavior by adding the callback `strict_loads/0` and returning `false`.\n\n```elixir\ndef load(_, _, _) do\n  [:relationship]\nend\n\ndef strict_loads, do: false\n```\n\n---","ref":"upgrading-to-3-0.html#calculation-loads-do-not-select-all-related-fields-by-default","title":"Calculation loads do not select all related fields by default - Upgrade","type":"extras"},{"doc":"In 2.0 calculations had a `select/3` callback, but `load/3` is now a superset of `select/3` and so the former is no longer needed.\n\n#### What you'll need to change\n\nIf you have a `select/3` callback in your calculations, you will need to remove the `select/3` callback. You must then add those fields to the `load/3` callback.\n\nFor example:\n\n```elixir\ndef select(_, _, _), do: [:some_attribute]\ndef load(_, _, _), do: [:some_calculation, some_relationship: [:some_field1, :some_field2]]\n```\n\ncan now be written more simply as:\n\n```elixir\ndef load(_, _, _), do: [:some_attribute, :some_calculation, some_relationship: [:some_field1, :some_field2]]\n```\n\n---","ref":"upgrading-to-3-0.html#calculations-do-not-have-a-select-3-callback-any-more","title":"Calculations do not have a `select/3` callback any more - Upgrade","type":"extras"},{"doc":"A private primary key called `autogenerated_id` was added to embedded resources if no primary key was added manually.\n\nThis should have no real effect on your application, except for the fact that your embedded attributes will have `autogenerated_id` in the database which won't be reflected by an attribute any more. If it is updated, then the `autogenerated_id` field will go away.\n\nThis is listed as a breaking change in case someone is depending on this feature, but that should be very uncommon/unlikely.\n\n---","ref":"upgrading-to-3-0.html#embedded-resources-no-longer-have-autogenerated_id","title":"Embedded resources no longer have `autogenerated_id` - Upgrade","type":"extras"},{"doc":"Previously, the Ash notifier would publish a message containing both the old _and_ new values for changing attributes. Typically, we use\nthings like IDs in notification topics, that do not change, so for most this will not have an impact.\n\nIf you wish to send a notification for the old value and the new value, then an action cannot be done atomically. Bulk actions must update each record in turn, and atomic updates can't be leveraged.\n\nIf you're comfortable with the performance implications, you can restore the previous behavior by addding `previous_values?: true` to your publications in your pub_sub notifier\n\n```elixir\npublish :update, [\"user:updated\", :email], previous_values?: true\n```\n\n---","ref":"upgrading-to-3-0.html#pubsub-notifier-no-longer-publishes-events-for-previous-values-by-default","title":"PubSub notifier no longer publishes events for previous values by default - Upgrade","type":"extras"},{"doc":"In your notifiers and policy checks, when you get a changeset you currently have access to the `data` field,\nwhich is the original record prior to being updated or destroyed. However, this is not compatible with atomic/bulk\nupdates/destroys, where we may be given a query and told to destroy it. In those cases, `changeset.data` will be\n`%Ash.Changeset.OriginalDataNotAvailable{}`. When you write a custom check or a custom notifier, if you need access to the original data, you must add the following function:\n\n```elixir\n# in custom checks\ndef requires_original_data?(_authorizer, _opts), do: true\n\n# in notifiers\ndef requires_original_data?(_resource, _action), do: true\n```\n\nKeep in mind, this will prevent the usage of these checks/notifiers with atomic actions.\n\n---\n\n### `Domain.authorization.authorize` now defaults to `:by_default`\n\nPreviously, the default was `:when_requested`. This meant that, unless you said `actor: some_actor` or `authorize?: true`, authorization was skipped. This has the obvious drawback of making it easy to accidentally bypass authorization unintentionally. In 3.0, this now defaults to `:by_default`.\n\n#### What you'll need to change\n\n##### Keep old behavior\n\nTo avoid making a significant refactor, and to keep your current behavior, you can go to your domain and set the configuration below. Otherwise skip to the refactor steps below. We advise that you take this route to start, but we _highly suggest_ that you change your domains to `authorize :by_default` in the future. `authorize :when_requested` will not be deprecated, so there is no time constraint.\n\n```elixir\nauthorization do\n  authorize :when_requested\nend\n```\n\n##### Refactor\n\nFor each domain that has the old configuration, after setting it to the new config, you'll need to revisit each call to that domain that doesn't set an actor or the `authorize?` option, and add `authorize?: false`.\n\nThis may be a good time to do the refactor from `YourDomain.func` to `Ash.func`, if you want to. See the section about domains being required when building changesets.\n\n---\n\n### `require_atomic?` defaults to `true`\n\nOn `:update` actions, and `:destroy` actions, they now default to `require_atomic? true`. This means that the following things will cause errors when attempting to run the action:\n\n1. changes or validations exist that do not have the `atomic` callback. _This includes anonymous function changes/validations_.\n2. attributes are being changed that do not support atomic updates. This most notably includes (for now) embedded resources.\n3. the action has a manual implementation\n4. the action has applicable notifiers that require the original data.\n\nUpdates and destroys that can be made fully atomic are always safe to do concurrently, and as such we now require that actions meet this criteria, or that it is explicitly stated that they do not have to. See the [update actions guide](/documentation/topics/actions/update-actions.md#fully-atomic-updates) for more.\n\n#### Upgrade config\n\nYou can set the following configuration, which _will be removed in Ash 3.1_. This configuration will retain the 2.0 default behavior of `require_atomic?` defaulting to `false`. You can then safely do the rest of the upgrade. Then, you can perform this one change after confirming that your system works as expected.\n\n```elixir\nconfig :ash, :require_atomic_by_default?, false\n```\n\n#### What you'll need to change\n\nThe vast majority of cases will be caught by warnings emitted at compile time.\n\n##### Anonymous function changes\n\nAnonymous function changes can never be made atomic, because we don't know what they contain. You will either need to transfer it to a module change and then follow the next section, or set `require_atomic? false`\n\n##### Module changes\n\nIf you have a module change, you can make it atomic by defining the `atomic/3` callback. This callback can replace the `change/3` callback, but it is very important to keep in mind that _later changes_ will no longer have access to the value. For example, if you have\n\n```elixir\ndef change(changeset, _, _) do\n  # this is not concurrency safe\n  Ash.Changeset.change_attribute(changeset, :value, changeset.data.value + 1)\nend\n```\n\nIf you have a subsequent change that does something like `Ash.Changeset.get_attribute(changeset, :value)` it will get the new value (i.e old value + 1). With atomics, `Ash.Changeset.get_attribute(changeset, :value)` would return the _old value_. This is because atomics are scheduling an update that happens when call the data layer. For example:\n\n```elixir\ndef atomic(changeset, _, _) do\n  {:atomic, %{value: expr(value + 1)}}\nend\n```\n\nThis should not typically matter unless you have complex actions w/ multiple changes where subsequent changes need to know the results of previous steps. In those cases, if you can't make them all atomic, then its best just not to worry about it and set `require_atomic? false`\n\n##### Non-atomic castable types\n\nIf you are using `change atomic_update/2` or `Ash.Changeset.atomic_update/2` or `Ash.Changeset.atomic_update/3`, and the type does not support atomic updates, you will get an error unless you do one of the following:\n\n1. for `change atomic_update/2` add the `cast_atomic?: false` option.\n2. for `Ash.Changeset.atomic_update`, pass the value as `{:atomic, expr}`, i.e `Ash.Changeset.atomic_update(changeset, :value, {:atomic, expr(value + 1)})`\n\nFor builtin types, the above applies to `:union`, `:map`, `:keyword`, embedded types. It also applies to `:string`, but only if the `match?` constraint is present.\n\n---\n\n### `Ash.Error.Invalid.NoSuchInput` errors on unknown action inputs\n\nIn 2.0, inputs to actions that don't match an accepted attribute or argument were silently ignored. This made it very easy to make certain kinds of mistakes, like assuming that an input is being used by an action when it actually is not. Now, unknown action inputs will cause an `Ash.Error.Invalid.NoSuchInput`.\n\n#### What you'll need to change\n\nIf you have action calls that are erroneously passing in extra values, you will need to do remove them.\n\nA logic error was fixed in this behavior for embedded resources. If you are using embedded resources in `{:array, _}` types, and are relying on including the primary key of that embedded resource to match records up for updating/destroy behavior, you will need to make sure that you do one of the following\n\n1. add the `writable?: true` flag to the uuid of the embedded resource (probably what you want)\n2. modify the actions to accept an `id` argument and set the argument to the provided value\n\n---\n\n### `%Ash.NotLoaded{}` for attributes\n\nIn 2.0, attributes that were not selected were replaced with `nil` values. This could lead to confusion when dealing with records that didn't have all attributes selected. If you passed these records to a function it might see that an attribute is `nil` when actually it just wasn't selected. To find out if it was selected, you could look into `record.__metadata__.selected`, but you'd have to know to do that. To alleviate these issues, attributes that are not selected are now filled in with `%Ash.NotLoaded{}`, just like calculations and aggregates.\n\n#### What you'll need to change\n\nIf you have logic that was looking at attribute values that may not be selected, you may have been accidentally working with non selected values. For example:\n\n```elixir\nif record.attribute do\n  handle_present_attribute(...)\nelse\n  # unselected attributes would have ended up in this branch\n  handle_not_present_attribute(...)\nend\n```\n\nNow, if it is possible for that attribute to have not been selected, you'll want to do something like this instead:\n\n```elixir\ncase record.attribute do\n  %Ash.NotLoaded{} ->\n    handle_not_selected(...)\n  nil ->\n    handle_not_present_attribute(...)\n  value ->\n    handle_present_attribute(...)\nend\n```\n\n---","ref":"upgrading-to-3-0.html#custom-checks-and-notifiers-will-not-have-access-to-the-original-data-by-default","title":"Custom checks and notifiers will not have access to the original data by default - Upgrade","type":"extras"},{"doc":"When loading data in 2.0 the option `reselect_all?` defaulted to `false`. What this would mean is that existing values for attributes would be reused, instead of visiting the data layer, by default. This can be an extremely valuable piece of behavior, but _defaulting_ to it often means accidentally using data as a cache that you did not intent to use as a cache. Take the following example:\n\n```elixir\nuser = %User{first_name: \"fred\", last_name: \"weasley\"}\n\nAsh.update!(user, first_name: \"george\")\n\nuser |> Ash.load!(:full_name)\n# in 2.0 -> fred weasley\n# in 3.0 -> george weasley\n```\n\nTo opt into the old behavior, which we recommend doing on a case-by-case basis, you can pass `reuse_values?: true`. For example:\n\n```elixir\nuser |> Ash.load!(:full_name, reuse_values?: true)\n```\n\n---","ref":"upgrading-to-3-0.html#calculations-do-not-reuse-values-by-default","title":"Calculations do not reuse values by default - Upgrade","type":"extras"},{"doc":"In 2.0 it was possible to pass an Ash resource in all places where some instance of `Ash.Type` was supported. In 3.0 resources (except for embedded resources) don't implement the `Ash.Type` behaviour anymore.\n\n#### What you'll need to change\n\nIf you were using a resource in one of the places that accept an `Ash.Type` (arguments, calculation return values or fields of a union) you have to refactor your code to use the `:struct` type together with an `instance_of` constraint\n\n```elixir\ncalculation :random_post, :struct do\n  constraints instance_of: Post\n  calculate Calculations.RandomPost\nend\n```","ref":"upgrading-to-3-0.html#resources-are-not-interchangeable-with-ash-type-anymore","title":"Resources are not interchangeable with `Ash.Type` anymore - Upgrade","type":"extras"},{"doc":"# Reactor\n\n`Ash.Reactor` is an extension for [`Reactor`](https://github.com/ash-project/reactor) which adds explicit support for interacting with resources via their defined actions.\n\nSee [Getting started with Reactor](https://hexdocs.pm/reactor/getting-started-with-reactor.html) for more information about Reactor.","ref":"reactor.html","title":"Reactor","type":"extras"},{"doc":"You can either add the `Ash.Reactor` extension to your existing reactors eg:\n\n```elixir\ndefmodule MyExistingReactor do\n  use Reactor, extensions: [Ash.Reactor]\nend\n```\n\nor for your convenience you can use `use Ash.Reactor` which expands to exactly the same as above.","ref":"reactor.html#usage","title":"Usage - Reactor","type":"extras"},{"doc":"An example is worth 1000 words of prose:\n\n```elixir\ndefmodule ExampleReactor do\n  use Ash.Reactor\n\n  ash do\n    default_domain ExampleDomain\n  end\n\n  input :customer_name\n  input :customer_email\n  input :plan_name\n  input :payment_nonce\n\n  create :create_customer, Customer do\n    inputs %{name: input(:customer_name), email: input(:customer_email)}\n  end\n\n  read_one :get_plan, Plan, :get_plan_by_name do\n    inputs %{name: input(:plan_name)}\n    fail_on_not_found? true\n  end\n\n  action :take_payment, PaymentProvider do\n    inputs %{\n      nonce: input(:payment_nonce),\n      amount: result(:get_plan, [:price])\n    }\n  end\n\n  create :subscription, Subscription do\n    inputs %{\n      plan_id: result(:get_plan, [:id]),\n      payment_provider_id: result(:take_payment, :id)\n    }\n  end\nend\n```","ref":"reactor.html#example","title":"Example - Reactor","type":"extras"},{"doc":"For each action type there is a corresponding step DSL, which needs a name (used\nto refer to the result of the step by other steps), a resource and optional\naction name (defaults to the primary action if one is not provided).\n\nActions have several common options and some specific to their particular type.\nSee the [DSL documentation](dsl-ash-reactor.html) for\ndetails.","ref":"reactor.html#actions","title":"Actions - Reactor","type":"extras"},{"doc":"Ash actions take a map of input parameters which are usually a combination of\nresource attributes and action arguments. You can provide these values as a\nsingle map using the [`inputs` DSL entity](dsl-ash-reactor.html#reactor-action-inputs) with a map or keyword list which refers to Reactor inputs, results and hard-coded values via Reactor's [predefined template functions](https://hexdocs.pm/reactor/Reactor.Dsl.Argument.html#functions).\n\nFor action types that act on a specific resource (ie `update` and `destroy`) you can provide the value using the [`initial` DSL option](dsl-ash-reactor.html#reactor-update-initial).\n\n#### Example\n\n```elixir\ninput :blog_title\ninput :blog_body\ninput :author_email\n\nread :get_author, MyBlog.Author, :get_author_by_email do\n  inputs %{email: input(:author_email)}\nend\n\ncreate :create_post, MyBlog.Post, :create do\n  inputs %{\n    title: input(:blog, [:title]),\n    body: input(:blog, [:body]),\n    author_id: result(:get_author, [:email])\n  }\nend\n\nupdate :author_post_count, MyBlog.Author, :update_post_count do\n  wait_for :create_post\n  initial result(:get_author)\nend\n\nreturn :create_post\n```","ref":"reactor.html#action-inputs","title":"Action inputs - Reactor","type":"extras"},{"doc":"Reactor is a saga executor, which means that when failure occurs it tries to\nclean up any intermediate state left behind. By default the `create`, `update`\nand `destroy` steps do not specify any behaviour for what to do when there is a\nfailure downstream in the reactor. This can be changed by providing both an\n`undo_action` and changing the step's `undo` option to either\n`:outside_transaction` or `:always` depending on your resource and datalayer\nsemantics.","ref":"reactor.html#handling-failure","title":"Handling failure. - Reactor","type":"extras"},{"doc":"- `:never` - this is the default, and means that the reactor will never try and\n  undo the action's work. This is the most performant option, as it means that\n  the reactor doesn't need to store as many intermediate values.\n- `:outside_transaction` - this option allows the step to decide at runtime\n  whether it should support undo based on whether the action is being run within\n  a transaction. If it is, then no undo is required because the transaction\n  will rollback.\n- `:always` - this forces the step to always undo it's work on failure.","ref":"reactor.html#the-undo-option","title":"The `undo` option. - Reactor","type":"extras"},{"doc":"The behaviour of the `undo_action` is action specific:\n\n- For `create` actions, the `undo_action` should be the name of a `destroy`\n  action with no specific requirements.\n- For `update` actions, the `undo_action` should also be an `update` action\n  which takes a `changeset` argument, which will contain the `Ash.Changeset`\n  which was used to execute the original update.\n- For `destroy` actions, the `undo_action` should be the name of a `create`\n  action which takes a `record` argument, which will contain the\n  resource record which was used destroyed.","ref":"reactor.html#the-undo_action-option","title":"The `undo_action` option. - Reactor","type":"extras"},{"doc":"You can use the `transaction` step type to wrap a group of steps inside a data layer transaction, however the following caveats apply:\n\n- All steps inside a transaction must happen in the same process, so the steps\n  inside the transaction will only ever be executed synchronously.\n- Notifications will be sent only when the transaction is committed.","ref":"reactor.html#transactions","title":"Transactions - Reactor","type":"extras"},{"doc":"Because a reactor has transaction-like semantics notifications are automatically batched and only sent upon successful completion of the reactor.","ref":"reactor.html#notifications","title":"Notifications - Reactor","type":"extras"},{"doc":"Ash's [generic actions](actions.md#generic-actions) now support providing a Reactor module directly as their `run` option.\n\nNotes:\n\n- Every Reactor input must have a corresponding action argument.\n- Ash's action context is passed in as the Reactor's context (including things like actor, tenant, etc).\n- [Reactor runtime options](`t:Reactor.options/0`) can be set by setting `run {MyReactor, opts}` instead of just `run MyReactor`.\n- If you set the `transaction?` action DSL option to true then the Reactor will be run synchronously - regardless of the value of the `async?` runtime option.","ref":"reactor.html#running-reactors-as-an-action","title":"Running Reactors as an action - Reactor","type":"extras"},{"doc":"```elixir\naction :run_reactor, :struct do\n  constraints instance_of: MyBlog.Post\n\n  argument :blog_title, :string, allow_nil?: false\n  argument :blog_body, :string, allow_nil?: false\n  argument :author_email, :ci_string, allow_nil?: false\n\n  run MyBlog.CreatePostReactor\nend\n```","ref":"reactor.html#example","title":"Example - Reactor","type":"extras"},{"doc":"# Monitoring\n\nMonitoring in Ash has two primary components, `Ash.Tracer` and `:telemetry`. Monitoring might also be referred to as observability and instrumentation.","ref":"monitoring.html","title":"Monitoring","type":"extras"},{"doc":"If you want to integrate with [Appsignal](https://www.appsignal.com), use the [AshAppsignal](https://hexdocs.pm/ash_appsignal) package, which is maintained by the core team. We believe that Appsignal is a great way to get started quickly, is relatively cost effective, and provides a great user experience.","ref":"monitoring.html#packages","title":"Packages - Monitoring","type":"extras"},{"doc":"Ash emits the following telemetry events, suffixed with `:start` and `:stop`. Start events have `system_time` measurements, and stop events have `system_time` and `duration` measurements. All times will be in the native time unit.","ref":"monitoring.html#telemetry","title":"Telemetry - Monitoring","type":"extras"},{"doc":"Note the mention of `:start` and `:stop` suffixes. The event below `[:ash, (domain_short_name), :create]`, is actually referring to two events, `[:ash, (domain_short_name), :create, :start]` and `[:ash, (domain_short_name), :create, :stop]`.\n\n\\_Replace `(domain_short_name)` with your domain short name, from `d:Ash.Domain.Info.short_name`.","ref":"monitoring.html#important","title":"Important - Monitoring","type":"extras"},{"doc":"- `[:ash, (domain_short_name), :create]` - The execution of a create action. Use `resource_short_name` and `action` metadata to break down measurements.\n- `[:ash, (domain_short_name), :update]` - The execution of a update action. Use `resource_short_name` and `action` metadata to break down measurements.\n- `[:ash, (domain_short_name), :read]` - The execution of a read action. Use `resource_short_name` and `action` metadata to break down measurements.\n- `[:ash, (domain_short_name), :destroy]` - The execution of a destroy action. Use `resource_short_name` and `action` metadata to break down measurements.\n- `[:ash, :changeset]` - A changeset being processed for a given action, i.e with `Ash.Changeset.for_create`. Use `resource_short_name` metadata to break down measurements.\n- `[:ash, :query]` - A query being processed for an action, with `Ash.Query.for_read`. Use `resource_short_name` metadata to break down measurements.\n- `[:ash, :validation]` - A validation being run on a changeset. Use `resource_short_name` and `validation` metadata to break down measurements.\n- `[:ash, :change]` - A change being run on a changeset. Use `resource_short_name` and `change` metadata to break down measurements.\n- `[:ash, :before_action]` - A before_action being run on a changeset. Use `resource_short_name` to break down measurements.\n- `[:ash, :after_action]` - An after_action being run on a changeset. Use `resource_short_name` to break down measurements.\n- `[:ash, :preparation]` - A preparation being run on a changeset. Use `resource_short_name` and `preparation` metadata to break down measurements.\n- `[:ash, :request_step]` - The resolution of an internal request. Ash breaks up its operations internally into multiple requests, this can give you a high resolution insight onto the execution of those internal requests resolution. Use `name` metadata to break down measurements.\n- `[:ash, :flow]` - The execution of an Ash flow. Use `flow_short_name` to break down measurements.\n- `[:ash, :flow, :custom_step]` - The execution of a custom flow step (only if using the built in runner, which is currently the only runner). Use `flow_short_name` and `name` metadata to break down measurements.","ref":"monitoring.html#events","title":"Events - Monitoring","type":"extras"},{"doc":"Tracing is very similar to telemetry, but gives you some additional hooks to `set_span_context()` and `get_span_context()`. This allows you to \"move\" some piece of context between two processes. Ash will call this whenever it starts a new process to do anything. What this means is that if you are using a tracing tool or library you can ensure that any processes spawned by Ash are properly included in the trace. Additionally, you should be able to integrate a tracing library to include Ash actions/spans relatively easily by implementing the other callbacks.\n\nA tracer can be configured globally in application config.\n\n```elixir\nconfig :ash, :tracer, MyApp.Tracer\n```\n\nAdditionally, one can be provide when creating changesets or calling an action, i.e\n\n```elixir\nResource\n# better to put it here, as changesets are traced as well. It will be carried over to the domain action\n|> Ash.Changeset.for_create(:create, %{}, tracer: MyApp.Tracer)\n# but you can also pass it here.\n|> Ash.create!(tracer: MyApp.Tracer)\n```\n\nFor customizing the names created for each span, see:\n\n- `d:Ash.Domain.Dsl.execution|trace_name`\n- `d:Ash.Resource.Dsl.resource|trace_name`","ref":"monitoring.html#tracing","title":"Tracing - Monitoring","type":"extras"},{"doc":"These are the list of trace types.\n\n- :custom\n- :action\n- :changeset\n- :validation\n- :change\n- :before_transaction\n- :before_action\n- :after_transaction\n- :after_action\n- :request_step\n- :custom_flow_step\n- :flow\n- :query\n- :preparation","ref":"monitoring.html#trace-types","title":"Trace types - Monitoring","type":"extras"},{"doc":"Due to the way before/after action hooks run, their execution time won't be included in the span created for the change. In practice, before/after action hooks are where the long running operations tend to be. We start a corresponding `span` and emit a telemetry event for before and after hooks, but they are only so useful. In a trace, they can highlight that \"some hook\" took a long time. In telemetry metrics they are of even less use. The cardinality of the metric would be extremely high, and we don't have a \"name\" or anything to distinguish them. To that end, you can use the macros & functions available in `Ash.Tracer` to create custom spans and/or emit custom telemetry events from your hooks. They automatically handle cases where the provided tracer is `nil`, for convenience. For example:\n\n```elixir\ndefmodule MyApp.CustomChange do\n  use Ash.Resource.Change\n\n  require Ash.Tracer\n\n  def change(changeset, _, _) do\n    changeset\n    |> Ash.Changeset.before_action(fn changeset ->\n      Ash.Tracer.span(:custom, \"custom name\", changeset.context[:private][:tracer]) do\n        # optionally set some metadata\n        metadata = %{...}\n        Ash.Tracer.set_metadata(changeset.context[:private][:tracer], :custom, metadata)\n        # will get `:start` and `:stop` suffixed events emitted\n        Ash.Tracer.telemetry_span([:telemetry, :event, :name], metadata) do","ref":"monitoring.html#after-before-action-hooks","title":"After/Before Action Hooks - Monitoring","type":"extras"},{"doc":"end\n      end\n    end)\n  end\nend\n```","ref":"monitoring.html#your-logic-here","title":"Your logic here - Monitoring","type":"extras"},{"doc":"<!-- livebook:{\"persist_outputs\":true} -->\n\n# Pagination\n\n```elixir\nMix.install([{:ash, \"~> 3.0\"}], consolidate_protocols: false)\nLogger.configure(level: :warning)\n```","ref":"pagination.html","title":"Pagination","type":"extras"},{"doc":"Ash has built-in support for two kinds of pagination: `offset` and `keyset`. You can perform pagination by passing the `:page` option to read actions, or using `Ash.Query.page/2` on the query. The page options vary depending on which kind of pagination you want to perform.\n\nPagination support is configured on a per-action basis. A single action can support both kinds of pagination if desired, but typically you would use one or the other. Read actions generated with `defaults [:read]` support both offset and keyset pagination, for other `read` actions you have to configure the [`pagination` section](https://hexdocs.pm/ash/dsl-ash-resource.html#actions-read-pagination).\n\n>","ref":"pagination.html#pagination-in-ash","title":"Pagination in Ash - Pagination","type":"extras"},{"doc":">\n> Pagination will modify the return type of calling the query action.\n>\n> Without pagination, Ash will return a list of records.\n>\n> But _with_ pagination, Ash will return an `Ash.Page.Offset` struct (for offset pagination) or `Ash.Page.Keyset` struct (for keyset pagination). Both structs contain the list of records in the `results` key of the struct.","ref":"pagination.html#check-the-updated-query-return-type","title":"Check the updated query return type! - Pagination","type":"extras"},{"doc":"Offset pagination is done via providing a `limit` and an `offset` when making queries.\n\n* The `limit` determines how many records should be returned in the query.\n* The `offset` describes how many records from the beginning should be skipped.","ref":"pagination.html#offset-pagination","title":"Offset Pagination - Pagination","type":"extras"},{"doc":"* Simple to think about\n* Possible to skip to a page by number. E.g the 5th page of 10 records is `offset: 40`\n* Easy to reason about what page you are currently on (if the total number of records is requested)\n* Can go to the last page (though data may have changed between calculating the last page details, and requesting it)","ref":"pagination.html#pros-of-offset-pagination","title":"Pros of offset pagination - Pagination","type":"extras"},{"doc":"* Does not perform well on large datasets (if you have to ask if your dataset is \"large\", it probably isn't)\n* When moving between pages, if data was created or deleted, individual records may be missing or appear on multiple pages","ref":"pagination.html#cons-of-offset-pagination","title":"Cons of offset pagination - Pagination","type":"extras"},{"doc":"Keyset pagination is done via providing an `after` or `before` option, as well as a `limit`.\n\n* The `limit` determines how many records should be returned in the query.\n* The `after` or `before` value should be a `keyset` value that has been returned from a previous request. Keyset values are returned whenever there is any read action on a resource that supports keyset pagination, and they are stored in the `__metadata__` key of each record.\n\n>","ref":"pagination.html#keyset-pagination","title":"Keyset Pagination - Pagination","type":"extras"},{"doc":">\n> You can't change the sort applied to a request being paginated, and use the same keyset. If you want to change the sort, but *keep* the record who's keyset you are using in the `before` or `after` option, you must first request the individual record, with the new sort applied. Then, you can use the new keyset.","ref":"pagination.html#keysets-are-directly-tied-to-the-sorting-applied-to-the-query","title":"Keysets are directly tied to the sorting applied to the query - Pagination","type":"extras"},{"doc":"* Performs very well on large datasets (assuming indices exist on the columns being sorted on)\n* Behaves well as data changes. The record specified will always be the first or last item in the page","ref":"pagination.html#pros-of-keyset-pagination","title":"Pros of keyset pagination - Pagination","type":"extras"},{"doc":"* A bit more complex to use\n* Can't go to a specific page number","ref":"pagination.html#cons-of-keyset-paginations","title":"Cons of keyset paginations - Pagination","type":"extras"},{"doc":"When calling an action that uses pagination, the full count of records can be requested by adding the option `count: true` to the page options.\nNote that this will perform a second query to fetch the count, which can be expensive on large data sets.","ref":"pagination.html#counting-records","title":"Counting records - Pagination","type":"extras"},{"doc":"In addition to paginating root data, Ash is also capable of paginating relationships when you load them. To do this, pass a custom query in the load and call `Ash.Query.page/2` on it.\n\nThis can be leveraged by extensions to provide arbitrarily nested pagination, or it can be used directly in code to split data processing when dealing with relationship with a high cardinality.","ref":"pagination.html#relationship-pagination","title":"Relationship pagination - Pagination","type":"extras"},{"doc":"Modify the setup block and configure the log level to `:debug` to see logs from the ETS data layer.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nLogger.configure(level: :debug)\n```","ref":"pagination.html#pagination-example","title":"Pagination example - Pagination","type":"extras"},{"doc":"```elixir\ndefmodule Post do\n  use Ash.Resource,\n    domain: Domain,\n    data_layer: Ash.DataLayer.Ets\n\n  attributes do\n    uuid_primary_key(:id)\n    attribute(:title, :string, allow_nil?: false)\n    attribute(:text, :string, allow_nil?: false)\n  end\n\n  actions do\n    defaults(create: [:title, :text])\n\n    read :read do\n      primary?(true)\n      prepare(build(sort: :title))\n\n      pagination do\n        required?(false)\n        offset?(true)\n        keyset?(true)\n        countable(true)\n      end\n    end\n\n    read :keyset do\n      prepare(build(sort: :title))\n      pagination(keyset?: true)\n    end\n\n    update :add_comment do\n      require_atomic?(false)\n      argument(:comment, :string, allow_nil?: false)\n      change(manage_relationship(:comment, :comments, value_is_key: :text, type: :create))\n    end\n  end\n\n  relationships do\n    has_many(:comments, Comment, sort: [:created_at])\n  end\nend\n\ndefmodule Comment do\n  use Ash.Resource,\n    domain: Domain,\n    data_layer: Ash.DataLayer.Ets\n\n  attributes do\n    uuid_primary_key(:id)\n    attribute(:text, :string, allow_nil?: false)\n    create_timestamp(:created_at)\n  end\n\n  actions do\n    defaults([:read, create: [:text, :post_id], update: [:text, :post_id]])\n  end\n\n  relationships do\n    belongs_to(:post, Post, sort: [:created_at])\n  end\nend\n\ndefmodule Domain do\n  use Ash.Domain,\n    validate_config_inclusion?: false\n\n  resources do\n    resource Post do\n      define(:list_posts, action: :read)\n      define(:list_posts_with_keyset, action: :keyset)\n      define(:create_post, action: :create, args: [:title, :text])\n      define(:add_comment_to_post, action: :add_comment, args: [:comment])\n    end\n\n    resource(Comment)\n  end\nend\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n{:module, Domain, <<70, 79, 82, 49, 0, 2, 31, ...>>,\n [\n   Ash.Domain.Dsl.Resources.Resource,\n   Ash.Domain.Dsl.Resources.Options,\n   Ash.Domain.Dsl,\n   %{opts: [], entities: [...]},\n   Ash.Domain.Dsl,\n   Ash.Domain.Dsl.Resources.Options,\n   ...\n ]}\n```","ref":"pagination.html#define-some-resources-for-our-purpose","title":"Define some resources for our purpose - Pagination","type":"extras"},{"doc":"```elixir\nfor post_idx <- 1..5 do\n  post = Domain.create_post!(\"post #{post_idx}\", \"text #{post_idx}\")\n\n  for comment_idx <- 1..5 do\n    Domain.add_comment_to_post!(post, \"comment #{comment_idx}\")\n  end\nend\n\nDomain.list_posts!(load: :comments)\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n[\n  #Post ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"6cdea87b-cb69-4dc5-9ff3-54fb46bd70b0\",\n        text: \"comment 1\",\n        created_at: ~U[2024-05-28 21:32:59.013913Z],\n        post_id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"c653e92c-fe2f-4011-84c8-ace28ebbb207\",\n        text: \"comment 2\",\n        created_at: ~U[2024-05-28 21:32:59.021204Z],\n        post_id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"aa207735-0a02-4b51-b5f6-69564a2a6365\",\n        text: \"comment 3\",\n        created_at: ~U[2024-05-28 21:32:59.022890Z],\n        post_id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"09f9cdfe-5a88-4f6a-a8d9-2f8aa312efb8\",\n        text: \"comment 4\",\n        created_at: ~U[2024-05-28 21:32:59.024526Z],\n        post_id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"9b92edf4-e79e-4870-9dd0-9130863a9715\",\n        text: \"comment 5\",\n        created_at: ~U[2024-05-28 21:32:59.026132Z],\n        post_id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >\n    ],\n    __meta__: #Ecto.Schema.Metadata<:loaded>,\n    id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n    title: \"post 1\",\n    text: \"text 1\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Post ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"9a87a3a0-6930-4920-9345-8227b861c2ed\",\n        text: \"comment 1\",\n        created_at: ~U[2024-05-28 21:32:59.028515Z],\n        post_id: \"78cd10f0-a509-4602-861f-24652c68d54b\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"a5107151-5519-4925-ab73-aef75274cd4a\",\n        text: \"comment 2\",\n        created_at: ~U[2024-05-28 21:32:59.030176Z],\n        post_id: \"78cd10f0-a509-4602-861f-24652c68d54b\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"0d7e9835-25a0-4df9-bb41-06aa964dc677\",\n        text: \"comment 3\",\n        created_at: ~U[2024-05-28 21:32:59.031780Z],\n        post_id: \"78cd10f0-a509-4602-861f-24652c68d54b\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"7c6663a8-6a36-4c9a-a947-a70436add8be\",\n        text: \"comment 4\",\n        created_at: ~U[2024-05-28 21:32:59.033389Z],\n        post_id: \"78cd10f0-a509-4602-861f-24652c68d54b\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"4a54ee7f-18fe-401b-9a86-7c768bc52a1d\",\n        text: \"comment 5\",\n        created_at: ~U[2024-05-28 21:32:59.034976Z],\n        post_id: \"78cd10f0-a509-4602-861f-24652c68d54b\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >\n    ],\n    __meta__: #Ecto.Schema.Metadata<:loaded>,\n    id: \"78cd10f0-a509-4602-861f-24652c68d54b\",\n    title: \"post 2\",\n    text: \"text 2\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Post ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"9d01f179-4220-4796-bb7d-63527385e36b\",\n        text: \"comment 1\",\n        created_at: ~U[2024-05-28 21:32:59.037470Z],\n        post_id: \"ab8e9909-2a6c-42d7-bae9-09fad4356ea4\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"49b7a671-bc6f-4772-b8f8-73b2a4c75b34\",\n        text: \"comment 2\",\n        created_at: ~U[2024-05-28 21:32:59.039117Z],\n        post_id: \"ab8e9909-2a6c-42d7-bae9-09fad4356ea4\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"7d2ee81c-696f-4190-8d1a-45702bfaaef2\",\n        text: \"comment 3\",\n        created_at: ~U[2024-05-28 21:32:59.040795Z],\n        post_id: \"ab8e9909-2a6c-42d7-bae9-09fad4356ea4\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"98d80b57-b911-44f5-9a63-5db90c1a0d57\",\n        text: \"comment 4\",\n        created_at: ~U[2024-05-28 21:32:59.042457Z],\n        post_id: \"ab8e9909-2a6c-42d7-bae9-09fad4356ea4\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"a0f08863-ec7f-4eba-b9f5-f9d7764dc934\",\n        text: \"comment 5\",\n        created_at: ~U[2024-05-28 21:32:59.044061Z],\n        post_id: \"ab8e9909-2a6c-42d7-bae9-09fad4356ea4\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >\n    ],\n    __meta__: #Ecto.Schema.Metadata<:loaded>,\n    id: \"ab8e9909-2a6c-42d7-bae9-09fad4356ea4\",\n    title: \"post 3\",\n    text: \"text 3\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Post ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"2a57aa5f-0431-4d7b-a054-3bf0fc6cb2e8\",\n        text: \"comment 1\",\n        created_at: ~U[2024-05-28 21:32:59.046395Z],\n        post_id: \"91d639c2-4a2c-4931-b446-543e118644f1\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"1604094f-864e-4df3-9365-a16a77ace0ba\",\n        text: \"comment 2\",\n        created_at: ~U[2024-05-28 21:32:59.048111Z],\n        post_id: \"91d639c2-4a2c-4931-b446-543e118644f1\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"6153ecb4-4668-4afb-94c8-b1e57ed1a187\",\n        text: \"comment 3\",\n        created_at: ~U[2024-05-28 21:32:59.049749Z],\n        post_id: \"91d639c2-4a2c-4931-b446-543e118644f1\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"0844db43-39f7-41c3-aa74-41238b0882c9\",\n        text: \"comment 4\",\n        created_at: ~U[2024-05-28 21:32:59.051385Z],\n        post_id: \"91d639c2-4a2c-4931-b446-543e118644f1\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"b22db803-cad0-4d90-ada1-944f0abdd304\",\n        text: \"comment 5\",\n        created_at: ~U[2024-05-28 21:32:59.053563Z],\n        post_id: \"91d639c2-4a2c-4931-b446-543e118644f1\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >\n    ],\n    __meta__: #Ecto.Schema.Metadata<:loaded>,\n    id: \"91d639c2-4a2c-4931-b446-543e118644f1\",\n    title: \"post 4\",\n    text: \"text 4\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Post ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"7b5fc51b-8e68-441e-bcd0-e52a0158e779\",\n        text: \"comment 1\",\n        created_at: ~U[2024-05-28 21:32:59.056055Z],\n        post_id: \"b0b20225-17f0-4bd1-8bd1-681e63ee26a8\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"e3f01413-c79c-44ef-abd9-6cb27a3b31fc\",\n        text: \"comment 2\",\n        created_at: ~U[2024-05-28 21:32:59.057708Z],\n        post_id: \"b0b20225-17f0-4bd1-8bd1-681e63ee26a8\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"a461c559-5036-4113-93be-3f531af4d2f3\",\n        text: \"comment 3\",\n        created_at: ~U[2024-05-28 21:32:59.059418Z],\n        post_id: \"b0b20225-17f0-4bd1-8bd1-681e63ee26a8\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"a704a781-3ff2-479c-b428-d8a414223f00\",\n        text: \"comment 4\",\n        created_at: ~U[2024-05-28 21:32:59.061034Z],\n        post_id: \"b0b20225-17f0-4bd1-8bd1-681e63ee26a8\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >,\n      #Comment ,\n        __meta__: #Ecto.Schema.Metadata<:loaded>,\n        id: \"2d9e9279-ef21-4dd4-bdc6-adc3597fefb2\",\n        text: \"comment 5\",\n        created_at: ~U[2024-05-28 21:32:59.062631Z],\n        post_id: \"b0b20225-17f0-4bd1-8bd1-681e63ee26a8\",\n        aggregates: %{},\n        calculations: %{},\n        ...\n      >\n    ],\n    __meta__: #Ecto.Schema.Metadata<:loaded>,\n    id: \"b0b20225-17f0-4bd1-8bd1-681e63ee26a8\",\n    title: \"post 5\",\n    text: \"text 5\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >\n]\n```","ref":"pagination.html#create-5-posts-with-5-comments-each","title":"Create 5 posts with 5 comments each - Pagination","type":"extras"},{"doc":"When using offset pagination, a `%Ash.Page.Offset{}` struct is returned from read actions.\n\n```elixir\npage = Domain.list_posts!(page: [limit: 2])\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n%Ash.Page.Offset{\n  results: [\n    #Post ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n      title: \"post 1\",\n      text: \"text 1\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >,\n    #Post ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"78cd10f0-a509-4602-861f-24652c68d54b\",\n      title: \"post 2\",\n      text: \"text 2\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >\n  ],\n  limit: 2,\n  offset: 0,\n  count: nil,\n  rerun: {#Ash.Query , [authorize?: true, reuse_values?: false, return_query?: false]},\n  more?: true\n}\n```\n\nYou can find the results in the `results` field of the page\n\n```elixir\npage.results\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n[\n  #Post ,\n    __meta__: #Ecto.Schema.Metadata<:loaded>,\n    id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n    title: \"post 1\",\n    text: \"text 1\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Post ,\n    __meta__: #Ecto.Schema.Metadata<:loaded>,\n    id: \"78cd10f0-a509-4602-861f-24652c68d54b\",\n    title: \"post 2\",\n    text: \"text 2\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >\n]\n```\n\nThe `more?` field contains a boolean indicating if there are more pages available\n\n```elixir\npage.more?\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\ntrue\n```","ref":"pagination.html#offset-pagination","title":"Offset pagination - Pagination","type":"extras"},{"doc":"You can calculate the next offset with the information available in the page and pass it in the page options to retrieve the following page\n\n```elixir\nnext_offset = page.offset + page.limit\nsecond_page = Domain.list_posts!(page: [limit: 2, offset: next_offset])\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n%Ash.Page.Offset{\n  results: [\n    #Post ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"ab8e9909-2a6c-42d7-bae9-09fad4356ea4\",\n      title: \"post 3\",\n      text: \"text 3\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >,\n    #Post ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"91d639c2-4a2c-4931-b446-543e118644f1\",\n      title: \"post 4\",\n      text: \"text 4\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >\n  ],\n  limit: 2,\n  offset: 2,\n  count: nil,\n  rerun: {#Ash.Query , [authorize?: true, reuse_values?: false, return_query?: false]},\n  more?: true\n}\n```\n\nIf you have the current page in memory, you can also use `Ash.page!/2` to navigate between pages.\n\n```elixir\nlast_page = Ash.page!(second_page, :next)\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n%Ash.Page.Offset{\n  results: [\n    #Post ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"b0b20225-17f0-4bd1-8bd1-681e63ee26a8\",\n      title: \"post 5\",\n      text: \"text 5\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >\n  ],\n  limit: 2,\n  offset: 4,\n  count: nil,\n  rerun: {#Ash.Query , [authorize?: true, reuse_values?: false, return_query?: false]},\n  more?: false\n}\n```\n\nAnd since we had 5 posts, this should be the last page:\n\n```elixir\nlast_page.more?\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\nfalse\n```","ref":"pagination.html#retrieving-the-next-page","title":"Retrieving the next page - Pagination","type":"extras"},{"doc":"When using keyset pagination, a `%Ash.Page.Keyset{}` struct is returned from read actions.\n\n```elixir\npage = Domain.list_posts_with_keyset!(page: [limit: 2])\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n%Ash.Page.Keyset{\n  results: [\n    #Post ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n      title: \"post 1\",\n      text: \"text 1\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >,\n    #Post ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"78cd10f0-a509-4602-861f-24652c68d54b\",\n      title: \"post 2\",\n      text: \"text 2\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >\n  ],\n  count: nil,\n  before: nil,\n  after: nil,\n  limit: 2,\n  rerun: {#Ash.Query , [authorize?: true, reuse_values?: false, return_query?: false]},\n  more?: true\n}\n```\n\n`results` and `more?` work in the same way as offset pagination\n\n```elixir\npage.results\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n[\n  #Post ,\n    __meta__: #Ecto.Schema.Metadata<:loaded>,\n    id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n    title: \"post 1\",\n    text: \"text 1\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Post ,\n    __meta__: #Ecto.Schema.Metadata<:loaded>,\n    id: \"78cd10f0-a509-4602-861f-24652c68d54b\",\n    title: \"post 2\",\n    text: \"text 2\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >\n]\n```","ref":"pagination.html#keyset-pagination","title":"Keyset pagination - Pagination","type":"extras"},{"doc":"To retrieve the next page, you have to pass the keyset of the last record in the current page. The keyset is stored in `record.__metadata__.keyset`.\n\n```elixir\nlast_keyset =\n  page.results\n  |> List.last()\n  |> Map.get(:__metadata__)\n  |> Map.get(:keyset)\n\nsecond_page = Domain.list_posts_with_keyset!(page: [limit: 2, after: last_keyset])\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n%Ash.Page.Keyset{\n  results: [\n    #Post ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"ab8e9909-2a6c-42d7-bae9-09fad4356ea4\",\n      title: \"post 3\",\n      text: \"text 3\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >,\n    #Post ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"91d639c2-4a2c-4931-b446-543e118644f1\",\n      title: \"post 4\",\n      text: \"text 4\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >\n  ],\n  count: nil,\n  before: nil,\n  after: \"g2wAAAACbQAAAAZwb3N0IDJtAAAAJDc4Y2QxMGYwLWE1MDktNDYwMi04NjFmLTI0NjUyYzY4ZDU0Ymo=\",\n  limit: 2,\n  rerun: {#Ash.Query \n\n```\nfalse\n```","ref":"pagination.html#retrieving-the-next-page","title":"Retrieving the next page - Pagination","type":"extras"},{"doc":"If an action supports both offset and keyset pagination (e.g. default read actions), offset pagination is used by default when page options only contain `limit`. However, the records will have the keyset in the metadata, so keyset pagination can be performed on next pages.\n\n```elixir\n%Ash.Page.Offset{results: [_, last]} = Domain.list_posts!(page: [limit: 2])\n\nDomain.list_posts!(page: [limit: 2, after: last.__metadata__.keyset])\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n%Ash.Page.Keyset{\n  results: [\n    #Post ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"ab8e9909-2a6c-42d7-bae9-09fad4356ea4\",\n      title: \"post 3\",\n      text: \"text 3\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >,\n    #Post ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"91d639c2-4a2c-4931-b446-543e118644f1\",\n      title: \"post 4\",\n      text: \"text 4\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >\n  ],\n  count: nil,\n  before: nil,\n  after: \"g2wAAAACbQAAAAZwb3N0IDJtAAAAJDc4Y2QxMGYwLWE1MDktNDYwMi04NjFmLTI0NjUyYzY4ZDU0Ymo=\",\n  limit: 2,\n  rerun: {#Ash.Query<\n     resource: Post,\n     sort: [title: :asc],\n     select: [:id, :title, :text],\n     page: [\n       limit: 2,\n       after: \"g2wAAAACbQAAAAZwb3N0IDJtAAAAJDc4Y2QxMGYwLWE1MDktNDYwMi04NjFmLTI0NjUyYzY4ZDU0Ymo=\"\n     ]\n   >, [authorize?: true, reuse_values?: false, return_query?: false]},\n  more?: true\n}\n```","ref":"pagination.html#actions-supporting-both-offset-and-keyset-pagination","title":"Actions supporting both offset and keyset pagination - Pagination","type":"extras"},{"doc":"Both `%Ash.Page.Offset{}` and `%Ash.Page.Keyset{}` have a `count` field that contains the total count of the items that are being paginated when `count: true` is passed in the page options.\n\n```elixir\npage = Domain.list_posts!(page: [limit: 2, count: true])\n\npage.count\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n5\n```","ref":"pagination.html#retrieving-count","title":"Retrieving count - Pagination","type":"extras"},{"doc":"To paginate a relationship, pass a query customized with the page options to the load statement. This works both on paginated and unpaginated root data, and relationships can load arbitrarily nested paginated relationships.\n\n```elixir\npaginated_comments =\n  Comment\n  |> Ash.Query.page(limit: 2)\n\nfirst_post =\n  Domain.list_posts!(load: [comments: paginated_comments])\n  |> List.first()\n\nfirst_post.comments\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n%Ash.Page.Offset{\n  results: [\n    #Comment ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"6cdea87b-cb69-4dc5-9ff3-54fb46bd70b0\",\n      text: \"comment 1\",\n      created_at: ~U[2024-05-28 21:32:59.013913Z],\n      post_id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >,\n    #Comment ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"c653e92c-fe2f-4011-84c8-ace28ebbb207\",\n      text: \"comment 2\",\n      created_at: ~U[2024-05-28 21:32:59.021204Z],\n      post_id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >\n  ],\n  limit: 2,\n  offset: 0,\n  count: nil,\n  rerun: {#Ash.Query ,\n   [authorize?: true, actor: nil, tracer: []]},\n  more?: true\n}\n```\n\nYou can use all the methods describe above to navigate relationship pages and retrieve their count\n\n```elixir\nsecond = Ash.page!(first_post.comments, :next)\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n%Ash.Page.Offset{\n  results: [\n    #Comment ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"aa207735-0a02-4b51-b5f6-69564a2a6365\",\n      text: \"comment 3\",\n      created_at: ~U[2024-05-28 21:32:59.022890Z],\n      post_id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >,\n    #Comment ,\n      __meta__: #Ecto.Schema.Metadata<:loaded>,\n      id: \"09f9cdfe-5a88-4f6a-a8d9-2f8aa312efb8\",\n      text: \"comment 4\",\n      created_at: ~U[2024-05-28 21:32:59.024526Z],\n      post_id: \"6eb22ea7-184c-4cae-9054-0d1a0474db61\",\n      aggregates: %{},\n      calculations: %{},\n      ...\n    >\n  ],\n  limit: 2,\n  offset: 2,\n  count: nil,\n  rerun: {#Ash.Query , [reuse_values?: false, return_query?: false, authorize?: true, actor: nil, tracer: []]},\n  more?: true\n}\n```","ref":"pagination.html#relationship-pagination","title":"Relationship pagination - Pagination","type":"extras"},{"doc":"# Timeouts","ref":"timeouts.html","title":"Timeouts","type":"extras"},{"doc":"You have a few options.\n\nYou can specify a timeout when you call an action. This takes the highest precedence.\n\n```elixir\nAsh.read!(query, timeout: :timer.seconds(30))\n```\n\nYou can specify one using `Ash.Changeset.timeout/2` or `Ash.Query.timeout/2`. This can be useful if you want to conditionally set a timeout based on the details of the request. For example, you might do something like this:\n\n```elixir\n# in your resource\ndefmodule MyApp.SetReportTimeout do\n  use Ash.Resource.Preparation\n\n  def prepare(query, _, _) do\n    if Ash.Query.get_argument(query, :full_report) do\n      Ash.Query.timeout(query, :timer.minutes(3))\n    else\n      Ash.Query.timeout(query, :timer.minutes(1))\n    end\n  end\nend\n\nactions do\n  read :report_items do\n    argument :full_report, :boolean, default: false\n\n    prepare MyApp.SetReportTimeout\n  end\nend\n```\n\nYou can also specify a default timeout on your domain modules.\n\n```elixir\nexecution do\n  timeout :timer.seconds(30) # the default is `:infinity`\nend\n```\n\nKeep in mind, you can't specify timeouts in a before_action or after_action hook, because at that point you are already \"within\" the code that should have a timeout applied.\n\n>","ref":"timeouts.html#ways-to-specify-timeouts","title":"Ways to Specify Timeouts - Timeouts","type":"extras"},{"doc":">\n> Timeouts are implemented using processes. This means that potentially large query results will be copied across processes. Because of this, specifying timeouts globally or for things that you don't suspect would ever exceed that timeout is not recommended.","ref":"timeouts.html#timeouts-use-processes-warning","title":"timeouts use processes {: .warning} - Timeouts","type":"extras"},{"doc":"Timeouts in Ash work a bit differently than other tools. The following considerations must be taken into account:\n\n1. If you run a resource action in a transaction, then the timeout applies to the entire transaction.\n2. If the resource action you are running, and any of its `touches_resources` is _already in a transaction_ then the timeout is ignored, as the outer transaction is handling the timeout.\n3. If the resource is not in a transaction, and supports async execution (ash_postgres does), then everything is run in a task and awaited with the provided timeout.\n4. If the data layer of the resource does not support timeouts, or async execution then timeouts are **ignored**.","ref":"timeouts.html#how-are-timeouts-handled","title":"How are timeouts handled? - Timeouts","type":"extras"},{"doc":"# Multitenancy\n\nMultitenancy is the splitting up your data into discrete areas, typically by customer. One of the most common examples of this, is the idea of splitting up a postgres database into \"schemas\" one for each customer that you have. Then, when making any queries, you ensure to always specify the \"schema\" you are querying, and you never need to worry about data crossing over between customers. The biggest benefits of this kind of strategy are the simplification of authorization logic, and better performance. Instead of all queries from all customers needing to use the same large table, they are each instead all using their own smaller tables. Another benefit is that it is much easier to delete a single customer's data on request.\n\nIn Ash, there are two primary strategies for implementing multitenancy. The first (and simplest) works for any data layer that supports filtering, and requires very little maintenance/mental overhead. It is done via expecting a given attribute to line up with the `tenant`, and is called `:attribute`. The second, is based on the data layer backing your resource, and is called `:context`. For information on context based multitenancy, see the documentation of your data layer. For example, `AshPostgres` uses postgres schemas. While the `:attribute` strategy is simple to implement, it also offers fewer advantages, primarily acting as another way to ensure your data is filtered to the correct tenant.","ref":"multitenancy.html","title":"Multitenancy","type":"extras"},{"doc":"```elixir\ndefmodule MyApp.Users do\n  use Ash.Resource, ...\n\n  multitenancy do\n    strategy :attribute\n    attribute :organization_id\n  end\n\n  ...\n\n  relationships do\n    belongs_to :organization, MyApp.Organization\n  end\nend\n```\n\nIn this case, if you were to try to run a query without specifying a tenant, you would get an error telling you that the tenant is required.\n\nSetting the tenant is done via `Ash.Query.set_tenant/2` and `Ash.Changeset.set_tenant/2`. If you are using a [code interface](/documentation/topics/resources/code-interfaces.md), you can pass `tenant: ` in the options list (the final parameter). If you are using an extension, such as `AshJsonMyDomain` or `AshGraphql` the method of setting tenant context is explained in that extension's documentation.\n\nExample usage of the above:\n\n```elixir\n# Error when not setting a tenant\nMyApp.Users\n|> Ash.Query.filter(name == \"fred\")\n|> Ash.read!()\n** (Ash.Error.Invalid)\n\n* \"Queries against the Helpdesk.Accounts.User resource require a tenant to be specified\"\n    (ash 1.22.0) lib/ash/domain/domain.ex:944: Ash.Domain.unwrap_or_raise!/2\n\n# Automatically filtering by `organization_id == 1`\nMyApp.Users\n|> Ash.Query.filter(name == \"fred\")\n|> Ash.Query.set_tenant(1)\n|> Ash.read!()\n\n[...]\n\n# Automatically setting `organization_id` to `1`\nMyApp.Users\n|> Ash.Changeset.for_create(:create, %{name: \"fred\"})\n|> Ash.Changeset.set_tenant(1)\n|> Ash.create!()\n\n%MyApp.User{organization_id: 1}\n\n# Setting tenant with a code interface that exposes `list_all` as a read action\nMyApp.Users.list_all(tenant: 1)\n```\n\nIf you want to enable running queries _without_ a tenant as well as queries with a tenant, the `global?` option supports this. You will likely need to incorporate this ability into any authorization rules though, to ensure that users from one tenant can't access other tenant's data.\n\n```elixir\nmultitenancy do\n  strategy :attribute\n  attribute :organization_id\n  global? true\nend\n```\n\nYou can also provide the `parse_attribute?` option if the tenant being set doesn't exactly match the attribute value, e.g the tenant is `org_10` and the attribute is `organization_id`, which requires just `10`.","ref":"multitenancy.html#attribute-multitenancy","title":"Attribute Multitenancy - Multitenancy","type":"extras"},{"doc":"Context multitenancy allows for the data layer to dictate how multitenancy works. For example, a csv data layer might implement multitenancy via saving the file with different suffixes, or an API wrapping data layer might use different subdomains for the tenant.\n\nFor `AshPostgres` context multitenancy, which uses postgres schemas and is referred to ash \"Schema Based Multitenancy\", see the [guide](https://hexdocs.pm/ash_postgres/schema-based-multitenancy.html)","ref":"multitenancy.html#context-multitenancy","title":"Context Multitenancy - Multitenancy","type":"extras"},{"doc":"By default, the tenant value is passed directly to the relevant implementation. For example, if you are using schema multitenancy with `ash_postgres`, you might provide a schema like `organization.subdomain`. In Ash, a tenant should be identifiable by a single value, like an integer or a string.\n\nYou can use the `Ash.ToTenant` protocol to automatically convert values into this simple value. The example below will allow you to use the same organization everywhere, and have it automatically converted into the correct schema for postgres, and the correct id for attribute-based multitenant resources. You can use this without looking up the relevant record as well, as long as the required fields used in your protocol are present.\n\n```elixir\nAsh.Changeset.for_create(..., tenant: %MyApp.Organization{id: id})\n```\n\n```elixir\n# in Organization resource\n\ndefimpl Ash.ToTenant do\n  def to_tenant(%{id: id}, resource) do\n    if Ash.Resource.Info.data_layer(resource) == AshPostgres.DataLayer\n      && Ash.Resource.Info.multitenancy_strategy(resource) == :context do\n      \"org_#{id}\"\n    else\n      id\n    end\n  end\nend\n```\n\nThis allows you to pass an `%Organization{}` or an organization_id around, and have that `organization_id` properly used with attribute and context-based multitenancy.","ref":"multitenancy.html#possible-values-for-tenant","title":"Possible Values for tenant - Multitenancy","type":"extras"},{"doc":"# Writing Extensions\n\nExtensions allow you to make powerful modifications to DSL entities. If you are using `AshPostgres`, `AshGraphql` or `AshJsonApi`, they are all integrated into Ash using extensions. In this guide we will build a simple extension for `Ash.Resource` that adds timestamps to your resource. We'll also show some simple patterns that can help ensure that all of your resources are using your extension.","ref":"writing-extensions.html","title":"Writing Extensions","type":"extras"},{"doc":"What we call an \"extension\" is typically one or more `Spark.Dsl.Extension`, and then any additional code that is used by that extension. For example, `AshGraphql` has a domain extension called `AshGraphql.Domain`, a resource extension called `AshGraphql.Resource`, and code to connect a GraphQL schema to your resources.","ref":"writing-extensions.html#creating-an-extension","title":"Creating an extension - Writing Extensions","type":"extras"},{"doc":"Here we create a DSL extension called `MyApp.Extensions.Base`, and configure a single transformer, called `MyApp.Extensions.Base.AddTimestamps`\n\n```elixir\ndefmodule MyApp.Extensions.Base do\n  use Spark.Dsl.Extension, transformers: [MyApp.Extensions.Base.AddTimestamps]\nend\n```","ref":"writing-extensions.html#dsl-extension","title":"DSL Extension - Writing Extensions","type":"extras"},{"doc":"Transformers are all run serially against a map of data called `dsl_state`, which is the data structure that we build as we use the DSL. For example:\n\n```elixir\nattributes do\n  attribute :name, :string\nend\n```\n\nWould, under the hood, look something like this:\n\n```elixir\n%{\n  [:attributes] => %{entities: [\n      %Ash.Resource.Attribute{name: :name, type: :string}\n    ]\n  },\n  ...\n}\n```\n\nA transformer exposes `transform/1`, which takes the `dsl_state` and returns either `{:ok, dsl_state}` or `{:error, error}`\n\n```elixir\ndefmodule MyApp.Extensions.Base.AddTimestamps do\n  use Spark.Dsl.Transformer\n  alias Spark.Dsl.Transformer\n\n  def transform(dsl_state) do\n    dsl_state\n    # Ash.Resource.Builder has utilities for extending resources\n    |> Ash.Resource.Builder.add_new_create_timestamp(:inserted_at)\n    |> Ash.Resource.Builder.add_new_update_timestamp(:updated_at)\n  end\nend\n```\n\nThis transformer builds adds a `create_timestamp` called `:inserted_at` and an `update_timestamp` called `:updated_at`, unless they already exist.","ref":"writing-extensions.html#transformers","title":"Transformers - Writing Extensions","type":"extras"},{"doc":"So far we've covered transformers, and using them to modify resources, but now lets say we want to make this behavior opt-out. Perhaps certain resources really shouldn't have timestamps, but we want it to be the default. Lets add a \"DSL Section\" to our extension.\n\n```elixir\ndefmodule MyApp.Extensions.Base do\n  @base %Spark.Dsl.Section{\n    name: :base,\n    describe: \"\"\"\n    Configure the behavior of our base extension.\n    \"\"\",\n    examples: [\n      \"\"\"\n      base do\n        timestamps? false\n      end\n      \"\"\"\n    ],\n    schema: [\n      timestamps?: [\n        type: :boolean,\n        doc: \"Set to false to skip adding timestamps\",\n        default: true\n      ]\n    ]\n  }\n\n\n\n  use Spark.Dsl.Extension,\n    transformers: [MyApp.Extensions.Base.AddTimestamps],\n    sections: [@base]\nend\n\ndefmodule MyApp.Extensions.Base.Info do\n  use Spark.InfoGenerator, extension: MyApp.Extensions.Base, sections: [:base]\n\n  # This will define `base_timestamps?/1`.\nend\n```\n\nNow we can use this configuration in our transformer, like so:\n\n```elixir\n  def transform(dsl_state) do\n    # Introspection functions can take a `dsl_state` *or* a module\n    if MyApp.Extensions.Base.Info.base_timestamps?(dsl_state) do\n      dsl_state\n      |> Ash.Resource.Builder.add_new_create_timestamp(:inserted_at)\n      |> Ash.Resource.Builder.add_new_update_timestamp(:updated_at)\n    else\n      {:ok, dsl_state}\n    end\n  end\n```\n\nAnd now we have a configurable base extension! For more information on writing DSLs, see `Spark`.  `Spark` is still lacking in documentation, unfortunately, as its something that mostly the adventurous/power users work with, and they often learn by way of examples, looking at `Ash` extensions. We would like to rectify this in the future. Please reach out if you're interested in assisting with that effort!","ref":"writing-extensions.html#make-the-extension-configurable","title":"Make the extension configurable - Writing Extensions","type":"extras"},{"doc":"In this case, this transformer can run in any order. However, as we start adding transformers and/or modify the behavior of this one, we may need to ensure that our transformer runs before or after specific transformers. As of the writing of this guide, the best way to look at the list of transformers is to look at the source of the extension, and see what transformers it has and what they do. The [Resource DSL](https://github.com/ash-project/ash/blob/main/lib/ash/resource/dsl.ex) for example.\n\nIf you need to affect the ordering, you can define `before?/1` and `after?/1` in your transformer, i.e\n\n```elixir\n# I go after every transformer\ndef after?(_), do: true\n\n# except I go before `SomeOtherTransformer`\ndef before?(SomeOtherTransformer), do: true\ndef before?(_), do: false\n```","ref":"writing-extensions.html#ordering-of-transformers","title":"Ordering of transformers - Writing Extensions","type":"extras"},{"doc":"Now it can be used in a resource:\n\n```elixir\ndefmodule MyApp.Tweet do\n  use Ash.Resource,\n    extensions: [MyApp.Extensions.Base]\n\n  base do\n    # And you can configure it like so\n    timestamps? false\n  end\nend\n```\n\nYour extension will automatically support autocompletion if using `ElixirLS`, showing inline documentation and type-aware auto complete as you type. For more, see [Development Utilities](/documentation/topics/development/development-utilities.md)","ref":"writing-extensions.html#using-your-extension","title":"Using your extension - Writing Extensions","type":"extras"},{"doc":"<!-- livebook:{\"persist_outputs\":true} -->\n\n# Test Resources\n\n```elixir\nMix.install([{:ash, \"~> 3.0\"}, {:simple_sat, \"~> 0.1\"}],\n  consolidate_protocols: false\n)\n\nLogger.configure(level: :warning)\nExUnit.start()\n```","ref":"test-resources.html","title":"Test Resources","type":"extras"},{"doc":"We recommend testing your resources *thoroughly*. Often, folks think that testing an `Ash.Resource` is \"testing the framework\", and in some very simple cases this may be true, like a simple create that just accepts a few attributes.\n\nHowever, testing has two primary roles:\n\n1. Confirming our understanding of the way that our application behaves *now*\n2. Ensuring that our application does not change in unintended ways *later*\n\nTo this end, we highly recommend writing tests even for your simple actions. A single test that confirms that, with simple inputs, the action returns what you expect, can be very powerful.\n\nAdditionally, Ash offers unique ways of testing individual components of our resources, similar to a unit test.\n\nWhile you don't necessarily need to follow all steps below, we show the various ways you may want to go about testing your resources.","ref":"test-resources.html#introduction","title":"Introduction - Test Resources","type":"extras"},{"doc":"* Add tests for action inputs using property testing\n* Add tests for calling action invocation using property testing\n* Add explicit tests for action inputs/invocation.\n* Add tests for our calculations\n* Test policies \"in isolation\" using `Ash.can?` (or `Domain.can_*`, provided by code interfaces)","ref":"test-resources.html#testing-resources","title":"Testing Resources - Test Resources","type":"extras"},{"doc":"<!-- livebook:{\"disable_formatting\":true} -->\n\n```elixir\ndefmodule User do\n  use Ash.Resource,\n    domain: Domain,\n    data_layer: Ash.DataLayer.Ets\n\n  actions do\n    defaults [:read, create: [:admin?]]\n  end\n\n  attributes do\n    uuid_primary_key :id\n    attribute :admin?, :boolean do\n      allow_nil? false\n      default false\n    end\n  end\nend\n\ndefmodule Tweet do\n  use Ash.Resource,\n    domain: Domain,\n    data_layer: Ash.DataLayer.Ets,\n    authorizers: [Ash.Policy.Authorizer]\n\n  attributes do\n    uuid_primary_key :id\n    attribute :text, :string do\n      allow_nil? false\n      constraints max_length: 144\n      public? true\n    end\n\n    attribute :hidden?, :boolean do\n      allow_nil? false\n      default false\n      public? true\n    end\n  end\n\n  calculations do\n    calculate :tweet_length, :integer, expr(string_length(text))\n  end\n\n  relationships do\n    belongs_to :user, User, allow_nil?: false\n  end\n\n  actions do\n    defaults [:read, update: [:text]]\n\n    create :create do\n      primary? true\n      accept [:text]\n      change relate_actor(:user)\n    end\n  end\n\n  policies do\n    policy action_type(:read) do\n      description \"If a tweet is hidden, only the author can read it. Otherwise, anyone can.\"\n      authorize_if relates_to_actor_via(:user)\n      forbid_if expr(hidden? == true)\n      authorize_if always()\n    end\n\n    policy action_type(:create) do\n      description \"Anyone can create a tweet\"\n      authorize_if always()\n    end\n\n    policy action_type(:update) do\n      description \"Only an admin or the user who tweeted can edit their tweet\"\n      authorize_if actor_attribute_equals(:admin?, true)\n      authorize_if relates_to_actor_via(:user)\n    end\n  end\nend\n\ndefmodule Domain do\n  use Ash.Domain,\n    validate_config_inclusion?: false\n\n  resources do\n    resource Tweet do\n      define :create_tweet, action: :create, args: [:text]\n      define :update_tweet, action: :update, args: [:text]\n      define :list_tweets, action: :read\n    end\n\n    resource User do\n      define :create_user, action: :create\n    end\n  end\nend\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n{:module, Domain, <<70, 79, 82, 49, 0, 2, 46, ...>>,\n [\n   Ash.Domain.Dsl.Resources.Resource,\n   Ash.Domain.Dsl.Resources.Options,\n   Ash.Domain.Dsl,\n   %{opts: [], entities: [...]},\n   Ash.Domain.Dsl,\n   Ash.Domain.Dsl.Resources.Options,\n   ...\n ]}\n```","ref":"test-resources.html#examples","title":"Examples - Test Resources","type":"extras"},{"doc":"```elixir\ndefmodule ActionInvocationTest do\n  use ExUnit.Case\n  import ExUnitProperties\n\n  describe \"valid inputs\" do\n    # now if our action inputs are invalid when we think they should be valid, we will find out here\n    property \"accepts all valid input\" do\n      user = Domain.create_user!()\n\n      check all(input <- Ash.Generator.action_input(Tweet, :create)) do\n        {text, other_inputs} = Map.pop!(input, :text)\n\n        assert Domain.changeset_to_create_tweet(\n                 text,\n                 other_inputs,\n                 authorize?: false,\n                 actor: user\n               ).valid?\n      end\n    end\n\n    # same as the above, but actually call the action. This tests the underlying action implementation\n    # not just initial validation\n    property \"succeeds on all valid input\" do\n      user = Domain.create_user!()\n\n      check all(input <- Ash.Generator.action_input(Tweet, :create)) do\n        {text, other_inputs} = Map.pop!(input, :text)\n        Domain.create_tweet!(text, other_inputs, authorize?: false, actor: user)\n      end\n    end\n\n    test \"can tweet some specific text, in addition to any other valid inputs\" do\n      user = Domain.create_user!()\n\n      check all(\n              input <- Ash.Generator.action_input(Tweet, :create, %{text: \"some specific text\"})\n            ) do\n        {text, other_inputs} = Map.pop!(input, :text)\n        Domain.create_tweet!(text, other_inputs, actor: user)\n      end\n    end\n  end\n\n  describe \"authorization\" do\n    test \"allows a user to update their own tweet\" do\n      user = Domain.create_user!()\n      tweet = Domain.create_tweet!(\"Hello world!\", actor: user)\n\n      assert Domain.can_update_tweet?(user, tweet, \"Goodbye world!\")\n    end\n\n    test \"does not allow a user to update someone elses tweet\" do\n      user = Domain.create_user!()\n      user2 = Domain.create_user!()\n      tweet = Domain.create_tweet!(\"Hello world!\", actor: user)\n\n      refute Domain.can_update_tweet?(user2, tweet, \"Goodbye world!\")\n    end\n\n    test \"allows an admin user to update someone elses tweet\" do\n      user = Domain.create_user!()\n      user2 = Domain.create_user!(%{admin?: true})\n      tweet = Domain.create_tweet!(\"Hello world!\", actor: user)\n\n      assert Domain.can_update_tweet?(user2, tweet, \"Goodbye world!\")\n    end\n  end\n\n  describe \"calculations\" do\n    test \"text length calculation computes the length of the text\" do\n      user = Domain.create_user!()\n      tweet = Domain.create_tweet!(\"Hello world!\", actor: user)\n      assert Ash.calculate!(tweet, :tweet_length) == 12\n    end\n  end\nend\n\nExUnit.run()\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n.......\nFinished in 0.07 seconds (0.00s async, 0.07s sync)\n2 properties, 5 tests, 0 failures\n\nRandomized with seed 42546\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n%{total: 7, failures: 0, skipped: 0, excluded: 0}\n```","ref":"test-resources.html#write-some-tests","title":"Write some tests - Test Resources","type":"extras"},{"doc":"<!-- livebook:{\"persist_outputs\":true} -->\n\n# Authorize Access to Resources\n\n```elixir\nMix.install(\n  [\n    {:ash, \"~> 3.0\"},\n    {:simple_sat, \"~> 0.1\"},\n    {:kino, \"~> 0.12\"}\n  ],\n  consolidate_protocols: false\n)\n\nLogger.configure(level: :warning)\nApplication.put_env(:ash, :policies, show_policy_breakdowns?: true)\n```","ref":"authorize-access-to-resources.html","title":"Authorize Access to Resources","type":"extras"},{"doc":"A key feature of Ash is the ability to build security directly into your resources. We do this with policies.\n\nBecause how you write policies is *extremely* situational, this how-to guide provides a list of \"considerations\" as opposed to \"instructions\".\n\nFor more context, read the [policies guide](https://hexdocs.pm/ash/policies.html#policies).","ref":"authorize-access-to-resources.html#introduction","title":"Introduction - Authorize Access to Resources","type":"extras"},{"doc":"1. Consider whether or not you want to adopt a specific style of authorization, like [ACL](https://en.wikipedia.org/wiki/Access-control_list), or [RBAC](https://en.wikipedia.org/wiki/Role-based_access_control). For standard RBAC, look into [AshRbac](https://hexdocs.pm/ash_rbac/getting_started.html), and you may not need to write any of your own policies at that point\n2. Determine if there are any `bypass` policies to add (admin users, super users, etc.). Consider placing this on the domain, instead of the resource\n3. Begin by making an inventory of each action on your resource, and under what conditions a given actor may be allowed to perform them. If all actions of a given type have the same criteria, we will typically use the `action_type(:type)` condition\n4. Armed with this inventory, begin to write policies. Start simple, write a policy per action type, and add a description of what your policy accomplishes.\n5. Find patterns, like cross-cutting checks that exist in all policies, that can be expressed as smaller, simpler policies\n6. Determine if any field policies are required to prohibit access to attributes/calculations/aggregates\n7. Finally, you can confirm your understanding of the authorization flow for a given resource by generating policy charts with `mix ash.generate_policy_charts` (field policies are not currently included in the generated charts)","ref":"authorize-access-to-resources.html#writing-policies","title":"Writing Policies - Authorize Access to Resources","type":"extras"},{"doc":"<!-- livebook:{\"disable_formatting\":true} -->\n\n```elixir\ndefmodule User do\n  use Ash.Resource,\n    domain: Domain,\n    data_layer: Ash.DataLayer.Ets\n\n  actions do\n    defaults [:read, create: [:admin?]]\n  end\n\n  attributes do\n    uuid_primary_key :id\n    attribute :admin?, :boolean do\n      allow_nil? false\n      default false\n    end\n  end\nend\n\ndefmodule Tweet do\n  use Ash.Resource,\n    domain: Domain,\n    data_layer: Ash.DataLayer.Ets,\n    authorizers: [Ash.Policy.Authorizer]\n\n  attributes do\n    uuid_primary_key :id\n    attribute :text, :string do\n      allow_nil? false\n      constraints max_length: 144\n      public? true\n    end\n\n    attribute :hidden?, :boolean do\n      allow_nil? false\n      default false\n      public? true\n    end\n\n    attribute :private_note, :string do\n      sensitive? true\n      public? true\n    end\n  end\n\n  calculations do\n    calculate :tweet_length, :integer, expr(string_length(text)) do\n      public? true\n    end\n  end\n\n  relationships do\n    belongs_to :user, User, allow_nil?: false\n  end\n\n  actions do\n    defaults [:read, update: [:text, :hidden?, :private_note]]\n\n    create :create do\n      primary? true\n      accept [:text, :hidden?, :private_note]\n      change relate_actor(:user)\n    end\n  end\n\n  policies do\n    # action_type-based policies\n    policy action_type(:read) do\n      # each policy has a description\n      description \"If a tweet is hidden, only the author can read it. Otherwise, anyone can.\"\n      # first check this. If true, then this policy passes\n      authorize_if relates_to_actor_via(:user)\n      # then check this. If false, then this policy fails\n      forbid_if expr(hidden? == true)\n      # otherwise, this policy passes\n      authorize_if always()\n    end\n\n    # blanket allow-listing of creates\n    policy action_type(:create) do\n      description \"Anyone can create a tweet\"\n      authorize_if always()\n    end\n\n    policy action_type(:update) do\n      description \"Only an admin or the user who tweeted can edit their tweet\"\n      # first check this. If true, then this policy passes\n      authorize_if actor_attribute_equals(:admin?, true)\n      # then check this. If true, then this policy passes\n      authorize_if relates_to_actor_via(:user)\n      # otherwise, there is nothing left to check and no decision, so *this policy fails*\n    end\n  end\n\n\n  field_policies do\n    # anyone can see these fields\n    field_policy [:text, :tweet_length] do\n      description \"Public tweet fields are visible\"\n      authorize_if always()\n    end\n\n    field_policy [:hidden?, :private_note] do\n      description \"hidden? and private_note are only visible to the author\"\n      authorize_if relates_to_actor_via(:user)\n    end\n  end\nend\n\ndefmodule Domain do\n  use Ash.Domain,\n    validate_config_inclusion?: false\n\n  resources do\n    resource Tweet do\n      define :create_tweet, action: :create, args: [:text]\n      define :update_tweet, action: :update, args: [:text]\n      define :list_tweets, action: :read\n      define :get_tweet, action: :read, get_by: [:id]\n    end\n\n    resource User do\n      define :create_user, action: :create\n    end\n  end\nend\n\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n{:module, Domain, <<70, 79, 82, 49, 0, 2, 117, ...>>,\n [\n   Ash.Domain.Dsl.Resources.Resource,\n   Ash.Domain.Dsl.Resources.Options,\n   Ash.Domain.Dsl,\n   %{opts: [], entities: [...]},\n   Ash.Domain.Dsl,\n   Ash.Domain.Dsl.Resources.Options,\n   ...\n ]}\n```","ref":"authorize-access-to-resources.html#example","title":"Example - Authorize Access to Resources","type":"extras"},{"doc":"```elixir\n# doing forbidden things produces an `Ash.Error.Forbidden`\nuser = Domain.create_user!()\nother_user = Domain.create_user!()\n\ntweet = Domain.create_tweet!(\"hello world!\", actor: user)\nDomain.update_tweet!(tweet, \"Goodbye world\", actor: other_user)\n```\n\n```elixir\n# Reading data applies policies as filters\n\nuser = Domain.create_user!()\nother_user = Domain.create_user!()\n\nmy_hidden_tweet = Domain.create_tweet!(\"hello world!\", %{hidden?: true}, actor: user)\n\nother_users_hidden_tweet =\n  Domain.create_tweet!(\"hello world!\", %{hidden?: true}, actor: other_user)\n\nmy_tweet = Domain.create_tweet!(\"hello world!\", actor: user)\nother_users_tweet = Domain.create_tweet!(\"hello world!\", actor: other_user)\n\ntweet_ids = Domain.list_tweets!(actor: user) |> Enum.map(& &1.id)\n\n# I see my own hidden tweets, and other users non-hidden tweets\ntrue = my_hidden_tweet.id in tweet_ids\ntrue = other_users_tweet.id in tweet_ids\n\n# but not other users hidden tweets\nfalse = other_users_hidden_tweet.id in tweet_ids\n\n:ok\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n:ok\n```\n\n```elixir\n# Field policies return hidden fields as `%Ash.ForbiddenField{}`\n\nuser = Domain.create_user!()\nother_user = Domain.create_user!()\n\nother_users_tweet =\n  Domain.create_tweet!(\"hello world!\", %{private_note: \"you can't see this!\"}, actor: other_user)\n\n%Ash.ForbiddenField{} = Domain.get_tweet!(other_users_tweet.id, actor: user).private_note\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n#Ash.ForbiddenField \n```\n\n```elixir\nTweet\n|> Ash.Policy.Chart.Mermaid.chart()\n|> Kino.Shorts.mermaid()\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```mermaid\nflowchart TB\nsubgraph at least one policy applies\ndirection TB\nat_least_one_policy[\"action.type == :read\nor action.type == :create\nor action.type == :update\"]\nend\nat_least_one_policy--False-->Forbidden\nat_least_one_policy--True-->0_conditions\nsubgraph Policy 1[If a tweet is hidden, only the author can read it. Otherwise, anyone can.]\ndirection TB\n0_conditions{\"action.type == :read\"}\n0_checks_0{\"record.user == actor\"}\n0_checks_1{\"hidden? == true\"}\nend\n0_conditions--True-->0_checks_0\n0_conditions--False-->1_conditions\n0_checks_0--True-->1_conditions\n0_checks_0--False-->0_checks_1\n0_checks_1--True-->Forbidden\n0_checks_1--False-->1_conditions\nsubgraph Policy 2[Anyone can create a tweet]\ndirection TB\n1_conditions{\"action.type == :create\"}\nend\nsubgraph Policy 3[Only an admin or the user who tweeted can edit their tweet]\ndirection TB\n2_conditions{\"action.type == :update\"}\n2_checks_0{\"actor.admin? == true\"}\n2_checks_1{\"record.user == actor\"}\nend\n2_conditions--True-->2_checks_0\n2_conditions--False-->Authorized\n2_checks_0--True-->Authorized\n2_checks_0--False-->2_checks_1\n2_checks_1--True-->Authorized\n2_checks_1--False-->Forbidden\nsubgraph results[Results]\nAuthorized([Authorized])\nForbidden([Forbidden])\nend\n1_conditions--Or-->2_conditions\n```","ref":"authorize-access-to-resources.html#interacting-with-resources-that-have-policies","title":"Interacting with resources that have policies - Authorize Access to Resources","type":"extras"},{"doc":"<!-- livebook:{\"persist_outputs\":true} -->\n\n# Encrypt Attributes\n\n```elixir\nMix.install([{:ash, \"~> 3.0\"}, {:ash_cloak, \"~> 0.1.0\"}, {:cloak, \"~> 1.1\"}],\n  consolidate_protocols: false\n)\n\nApplication.put_env(:my_app, MyApp.Vault,\n  ciphers: [\n    default: {\n      Cloak.Ciphers.AES.GCM,\n      tag: \"AES.GCM.V1\",\n      key: Base.decode64!(\"ETpvtowVAL7JmcxfqJ+XVQWzKrt1ynAkC0vT7AxfyNU=\"),\n      iv_length: 12\n    }\n  ]\n)\n\ndefmodule MyApp.Vault do\n  use Cloak.Vault, otp_app: :my_app\nend\n\nMyApp.Vault.start_link()\n```","ref":"encrypt-attributes.html","title":"Encrypt Attributes","type":"extras"},{"doc":"When dealing with PII or other sensitive data, we often want to encrypt this data, and control access to the decrypted values.\n\nTo do this in `Ash`, we do that with `AshCloak`. See the getting started guide in `AshCloak` for installation instructions.","ref":"encrypt-attributes.html#introduction","title":"Introduction - Encrypt Attributes","type":"extras"},{"doc":"1. If you have not yet, follow the getting started guide for `AshCloak` and `Cloak`\n2. Add the `AshCloak` extension to your resource\n3. Configure the attributes that should be encrypted\n4. Add any other additional desired configuration (provided by `AshCloak`)","ref":"encrypt-attributes.html#encrypting-attributes","title":"Encrypting attributes - Encrypt Attributes","type":"extras"},{"doc":"<!-- livebook:{\"disable_formatting\":true} -->\n\n```elixir\ndefmodule User do\n  use Ash.Resource,\n    domain: Domain,\n    data_layer: Ash.DataLayer.Ets,\n    extensions: [AshCloak]\n\n  cloak do\n    vault MyApp.Vault\n    attributes [:ssn]\n  end\n\n  attributes do\n    uuid_primary_key :id\n    attribute :ssn, :string, allow_nil?: false\n  end\n\n  actions do\n    defaults [:read, create: [:ssn], update: [:ssn]]\n  end\nend\n\ndefmodule Domain do\n  use Ash.Domain,\n    validate_config_inclusion?: false\n\n  resources do\n    resource User do\n      define(:create_user, action: :create, args: [:ssn])\n      define(:update_user, action: :update, args: [:ssn])\n      define(:list_users, action: :read)\n    end\n  end\nend\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n{:module, Domain, <<70, 79, 82, 49, 0, 1, 255, ...>>,\n [\n   Ash.Domain.Dsl.Resources.Resource,\n   Ash.Domain.Dsl.Resources.Options,\n   Ash.Domain.Dsl,\n   %{opts: [], entities: [...]},\n   Ash.Domain.Dsl,\n   Ash.Domain.Dsl.Resources.Options,\n   ...\n ]}\n```","ref":"encrypt-attributes.html#examples","title":"Examples - Encrypt Attributes","type":"extras"},{"doc":"```elixir\nuser = Domain.create_user!(\"111-11-1111\")\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n#User<\n  __meta__: #Ecto.Schema.Metadata<:loaded>,\n  id: \"bc5284fe-294a-485e-8585-06130a4bca4e\",\n  aggregates: %{},\n  calculations: %{},\n  ...\n>\n```\n\n```elixir\n# AshCloak turned ssn into a calculation\nuser.ssn\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n#Ash.NotLoaded<:calculation, field: :ssn>\n```\n\n```elixir\n# Load the value to decrypt it on-demand\nAsh.load!(user, :ssn).ssn\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n\"111-11-1111\"\n```","ref":"encrypt-attributes.html#data-is-encrypted-when-modified-and-is-not-displayed-when-inspecting","title":"Data is encrypted when modified and is *not displayed* when inspecting. - Encrypt Attributes","type":"extras"},{"doc":"<!-- livebook:{\"persist_outputs\":true} -->\n\n# Prevent concurrent writes\n\n```elixir\nMix.install([{:ash, \"~> 3.0\"}], consolidate_protocols: false)\n# Set to `:debug` if you want to see ETS logs\nLogger.configure(level: :warning)\n```","ref":"prevent-concurrent-writes.html","title":"Prevent concurrent writes","type":"extras"},{"doc":"Often, when working with resources, we want to ensure that a record has not been edited since we last read it. We may want this for UX reasons, or for ensuring data consistency, etc.\n\nTo ensure that a record hasn't been updated since the last time we read it, we use Optimistic Locking.\n\nFor more information, see the documentation for `Ash.Resource.Change.OptimisticLock`.","ref":"prevent-concurrent-writes.html#introduction","title":"Introduction - Prevent concurrent writes","type":"extras"},{"doc":"1. Add a `:version` attribute to your resource, of type `:integer`, with a default of `1` and `allow_nil?: false`\n2. Add `change optimistic_lock(:version)`. Where you add it depends on which actions you want to prevent concurrent writes for:\n   * If you want optimistic locking to occur for _specific actions_:\n     1. Add `change optimistic_lock(:version)` to those specific actions\n   * If you want optimistic locking to occur for _all action types_:\n     1. Add a global `changes` block to the resource, if you do not have one\n     2. Add `change optimistic_lock(:version), on: [:create, :update, :destroy]`\n   * If you want to apply optimistic locking to _many but not all actions_:\n     1. Add a global `changes` block to the resource, if you do not have one\n     2. Add `change optimistic_lock(:version), where: action_is([:action1, :action2, :action3])`","ref":"prevent-concurrent-writes.html#add-optimistic-locking","title":"Add Optimistic Locking - Prevent concurrent writes","type":"extras"},{"doc":"<!-- livebook:{\"disable_formatting\":true} -->\n\n```elixir\ndefmodule Address do\n  use Ash.Resource,\n    domain: Domain,\n    data_layer: Ash.DataLayer.Ets\n\n  attributes do\n    uuid_primary_key :id\n    attribute :version, :integer, allow_nil?: false, default: 1\n    attribute :state, :string, allow_nil?: false\n    attribute :county, :string, allow_nil?: false\n  end\n\n  actions do\n    defaults [:read, create: [:state, :county]]\n\n    update :update do\n      accept [:state, :county]\n      change optimistic_lock(:version)\n    end\n  end\n\n  # apply to all actions\n  # changes do\n  #   change optimistic_lock(:version), on: [:create, :update, :destroy]\n  # end\n\n  # apply to a list of actions\n  # changes do\n  #   change optimistic_lock(:version), where: action_is([:action1, :action2, :action3])\n  # end\nend\n\ndefmodule Domain do\n  use Ash.Domain,\n    validate_config_inclusion?: false\n\n  resources do\n    resource Address do\n      define(:get_address, action: :read, get_by: [:id])\n      define(:create_address, action: :create, args: [:state, :county])\n      define(:update_address, action: :update)\n    end\n  end\nend\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n{:module, Domain, <<70, 79, 82, 49, 0, 2, 1, ...>>,\n [\n   Ash.Domain.Dsl.Resources.Resource,\n   Ash.Domain.Dsl.Resources.Options,\n   Ash.Domain.Dsl,\n   %{opts: [], entities: [...]},\n   Ash.Domain.Dsl,\n   Ash.Domain.Dsl.Resources.Options,\n   ...\n ]}\n```","ref":"prevent-concurrent-writes.html#examples","title":"Examples - Prevent concurrent writes","type":"extras"},{"doc":"```elixir\naddress = Domain.create_address!(\"FL\", \"Pinellas\")\nDomain.update_address!(address, %{state: \"NC\", county: \"Guilford\"})\n\n# `address` still has a version of `1`, so our optimistic lock should catch it!\nDomain.update_address(address, %{county: \"Miami-Dade\"})\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n{:error,\n %Ash.Error.Invalid{\n   changeset: \"#Changeset<>\",\n   errors: [\n     %Ash.Error.Changes.StaleRecord{\n       resource: \"Address\",\n       filter: %{\"version\" => 1},\n       splode: Ash.Error,\n       bread_crumbs: [],\n       vars: [],\n       path: [],\n       stacktrace: #Splode.Stacktrace<>,\n       class: :invalid\n     }\n   ]\n }}\n```","ref":"prevent-concurrent-writes.html#triggering-a-stalerecord-error","title":"Triggering a StaleRecord error - Prevent concurrent writes","type":"extras"},{"doc":"```elixir\naddress = Domain.create_address!(\"FL\", \"Pinellas\")\nDomain.update_address!(address, %{state: \"NC\", county: \"Guilford\"})\n\ncase Domain.update_address(address, %{county: \"Miami-Dade\"}) do\n  {:error, %Ash.Error.Invalid{errors: [%Ash.Error.Changes.StaleRecord{}]}} ->\n    # In a liveview, you wouldn't just refetch and resubmit\n    # you would show the user an error and have them submit the form again\n    address = Domain.get_address!(address.id)\n    Domain.update_address!(address, %{county: \"Miami-Dade\"})\n\n  {:ok, domain} ->\n    domain\nend\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n#Address<\n  __meta__: #Ecto.Schema.Metadata<:loaded>,\n  id: \"91e552e1-3307-4d68-969f-1b7e6651e695\",\n  version: 3,\n  state: \"NC\",\n  county: \"Miami-Dade\",\n  aggregates: %{},\n  calculations: %{},\n  ...\n>\n```","ref":"prevent-concurrent-writes.html#refetching-a-record-to-get-the-latest-version","title":"Refetching a record to get the latest version - Prevent concurrent writes","type":"extras"},{"doc":"<!-- livebook:{\"persist_outputs\":true} -->\n\n# Wrap External APIs\n\n```elixir\nMix.install(\n  [\n    {:ash, \"~> 3.0\"},\n    {:req, \"~> 0.4.0\"}\n  ],\n  consolidate_protocols: false\n)\n```","ref":"wrap-external-apis.html","title":"Wrap External APIs","type":"extras"},{"doc":"Wrapping external APIs in Ash resources can allow you to leverage the rich and consistent interface provided by `Ash.Resource` for interactions with external services.\n\nThere are a few approaches to how you might do this, including the still in progress [AshJsonApiWrapper](https://github.com/ash-project/ash_json_api_wrapper). Here we will leverage \"manual actions\" as this is fully supported by Ash, and is the commonly used approach.\n\nThis approach is most appropriate when you are working with an API that exposes some data, like entities, list of entities, etc. For this example, we will be interacting with https://openlibrary.org, which allows for us to search and list books.\n\nThis guide covers reading data from the external API, not creating/updating it. This can be implemented using manual actions of a different type, or generic actions.","ref":"wrap-external-apis.html#introduction","title":"Introduction - Wrap External APIs","type":"extras"},{"doc":"1. Create a resource for interacting with the given API\n2. Create a manual read action\n3. In this manual action, we will:\n   1. call the target API\n   2. transform the results\n   3. apply query operations to simulate capabilities provided by Ash\n\nIn the example below, we are calling to a *paginated* API, and we want to continue fetching results until we have reached the amount of results requested by the `Ash.Query`. We show this to illustrate that you can do all kinds of creative things when working with external APIs in manual actions.","ref":"wrap-external-apis.html#wrapping-external-apis","title":"Wrapping External APIs - Wrap External APIs","type":"extras"},{"doc":"<!-- livebook:{\"disable_formatting\":true} -->\n\n```elixir\ndefmodule Doc do\n  use Ash.Resource,\n    domain: Domain\n\n  attributes do\n    uuid_primary_key :id\n    attribute :author_name, :string\n    attribute :title, :string\n    attribute :type, :string\n  end\n\n  actions do\n    read :search do\n      primary? true\n      argument :query, :string, allow_nil?: false\n      prepare fn query, _ ->\n        # We require that they limit the results to some reasonable set\n        # (because this API is huge)\n        cond do\n          query.limit && query.limit > 250 ->\n            Ash.Query.add_error(query, \"must supply a limit that is less than or equal to 250\")\n          query.limit ->\n            query\n          true ->\n            # limit 5 by default\n            Ash.Query.limit(query, 5)\n        end\n      end\n\n      manual Doc.Actions.Read\n    end\n  end\nend\n\ndefmodule Domain do\n  use Ash.Domain,\n    validate_config_inclusion?: false\n\n  resources do\n    resource Doc do\n      define :search, args: [:query]\n    end\n  end\nend\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n{:module, Domain, <<70, 79, 82, 49, 0, 0, 250, ...>>,\n [\n   Ash.Domain.Dsl.Resources.Resource,\n   Ash.Domain.Dsl.Resources.Options,\n   Ash.Domain.Dsl,\n   %{opts: [], entities: [...]},\n   Ash.Domain.Dsl,\n   Ash.Domain.Dsl.Resources.Options,\n   ...\n ]}\n```\n\n```elixir\ndefmodule Doc.Actions.Read do\n  use Ash.Resource.ManualRead\n\n  def read(query, _, _opts, _context) do\n    # we aren't handling these query options to keep the example simple\n    # but you could on your own\n    if query.sort != [] || query.offset != 0 do\n      {:error, \"Cannot sort or offset documents\"}\n    end\n\n    if query.sort && query.sort != [] do\n      raise \"Cannot apply a sort to docs read\"\n    end\n\n    if query.offset && query.offset != 0 do\n      raise \"Cannot apply a sort to docs read\"\n    end\n\n    limit = query.limit || :infinity\n\n    query = Ash.Query.unset(query, :limit)\n\n    query_results =\n      Stream.resource(\n        fn ->\n          {limit, 0}\n        end,\n        fn\n          {remaining, page_number} when remaining <= 0 ->\n            {:halt, {0, page_number}}\n\n          {remaining, page_number} ->\n            api_results =\n              query.arguments.query\n              |> get!(page_number)\n              |> Enum.map(&to_doc/1)\n\n            case Ash.Query.apply_to(query, api_results) do\n              {:ok, []} ->\n                {:halt, remaining}\n\n              {:ok, results} ->\n                count_of_results = Enum.count(results)\n\n                cond do\n                  # the api gives us batches of 100\n                  remaining == :infinity && count_of_results == 100 ->\n                    {results, {:infinity, page_number + 1}}\n\n                  remaining == :infinity ->\n                    {results, {0, page_number + 1}}\n\n                  true ->\n                    still_remaining = remaining - count_of_results\n\n                    results =\n                      if still_remaining <= 0 do\n                        Enum.take(results, remaining)\n                      else\n                        results\n                      end\n\n                    {results, {still_remaining, page_number + 1}}\n                end\n\n              {:error, error} ->\n                raise Ash.Error.to_ash_error(error)\n            end\n        end,\n        fn _ -> :ok end\n      )\n      |> Enum.to_list()\n\n    {:ok, query_results}\n  end\n\n  defp to_doc(api_doc) do\n    %Doc{author_name: api_doc[\"author_name\"], type: api_doc[\"type\"], title: api_doc[\"title\"]}\n  end\n\n  defp get!(query, page) do\n    params =\n      if page == 0 do\n        [q: query]\n      else\n        [q: query, page: page]\n      end\n\n    Req.get!(\"https://openlibrary.org/search.json\", params: params).body[\"docs\"]\n  end\nend\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n{:module, Doc.Actions.Read, <<70, 79, 82, 49, 0, 0, 25, ...>>, {:get!, 2}}\n```","ref":"wrap-external-apis.html#example","title":"Example - Wrap External APIs","type":"extras"},{"doc":"```elixir\nDomain.search!(\"Lord of the rings\")\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n[\n  #Doc<\n    __meta__: #Ecto.Schema.Metadata<:built, \"\">,\n    id: nil,\n    author_name: [\"J.R.R. Tolkien\"],\n    title: \"The Lord of the Rings\",\n    type: \"work\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Doc<\n    __meta__: #Ecto.Schema.Metadata<:built, \"\">,\n    id: nil,\n    author_name: [\"J.R.R. Tolkien\"],\n    title: \"The Fellowship of the Ring\",\n    type: \"work\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Doc<\n    __meta__: #Ecto.Schema.Metadata<:built, \"\">,\n    id: nil,\n    author_name: [\"J.R.R. Tolkien\"],\n    title: \"The Two Towers\",\n    type: \"work\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Doc<\n    __meta__: #Ecto.Schema.Metadata<:built, \"\">,\n    id: nil,\n    author_name: [\"J.R.R. Tolkien\"],\n    title: \"The Return of the King\",\n    type: \"work\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Doc<\n    __meta__: #Ecto.Schema.Metadata<:built, \"\">,\n    id: nil,\n    author_name: [\"J.R.R. Tolkien\"],\n    title: \"The Lord of the Rings\",\n    type: \"work\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >\n]\n```\n\n```elixir\nrequire Ash.Query\nquery = Doc |> Ash.Query.filter(contains(title, \"Two\"))\nDomain.search!(\"Lord of the rings\", query: query)\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n[\n  #Doc<\n    __meta__: #Ecto.Schema.Metadata<:built, \"\">,\n    id: nil,\n    author_name: [\"J.R.R. Tolkien\"],\n    title: \"The Two Towers\",\n    type: \"work\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Doc<\n    __meta__: #Ecto.Schema.Metadata<:built, \"\">,\n    id: nil,\n    author_name: [\"Alessio Cavatore\", \"Rick Priestley\"],\n    title: \"The Lord of the Rings - The Two Towers\",\n    type: \"work\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Doc<\n    __meta__: #Ecto.Schema.Metadata<:built, \"\">,\n    id: nil,\n    author_name: [\"J.R.R. Tolkien\"],\n    title: \"The Two Towers\",\n    type: \"work\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Doc<\n    __meta__: #Ecto.Schema.Metadata<:built, \"\">,\n    id: nil,\n    author_name: [\"Alessio Cavatore\", \"Rick Priestley\"],\n    title: \"The Lord of the Rings - The Two Towers\",\n    type: \"work\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >,\n  #Doc<\n    __meta__: #Ecto.Schema.Metadata<:built, \"\">,\n    id: nil,\n    author_name: [\"J.R.R. Tolkien\"],\n    title: \"Two Towers : The Lord of the Rings\",\n    type: \"work\",\n    aggregates: %{},\n    calculations: %{},\n    ...\n  >\n]\n```","ref":"wrap-external-apis.html#now-we-can-use-this-like-any-other-ash-resource","title":"Now we can use this like any other Ash resource - Wrap External APIs","type":"extras"},{"doc":"# Glossary","ref":"glossary.html","title":"Glossary","type":"extras"},{"doc":"An action describes an operation that can be performed for a given resource; it is the _verb_ to a resource's _noun_. Examples of actions:\n\n- User._create_\n- Comment._delete_\n- BlogPost._publish_\n- Article._search_\n\nAsh supports five different types of actions. `create`, `read`, `update` and `destroy` (collectively often abbreviated as CRUD), and `action`, referring to a generic action with a custom return type. A resource can define multiple actions per action type, eg. a _publish_ action would be considered an `update` because it is updating an existing instance of a resource. Actions are much more flexible than simple CRUD, but these five action types serve as templates for anything you might want to do.\n\nSee the [Actions guide](/documentation/topics/actions/actions.md) for more.","ref":"glossary.html#action","title":"Action - Glossary","type":"extras"},{"doc":"The entity that performs an action. Most actions are run on direct user request, eg. if a user presses a Create button on a page then the actor is the user; but an actor might also be an organization, a group, or even a device.\n\nActors can be used in a number of places, from modifying the behavior of an action to auditing who did what in your system. They are most prominent, however, when writing [policies](#policy).\n\nSee the [Actors & Authorization guide](/documentation/topics/security/actors-and-authorization.md) for more.","ref":"glossary.html#actor","title":"Actor - Glossary","type":"extras"},{"doc":"An aggregate is a special type of field for a resource, one that summarizes related information of the record. A more specialized type of a [calculation](#calculation).\n\nIf a Project resource has_many Ticket resources, an example of an aggregate on the Project might be to count the tickets associated to each project.\n\nSee the [Aggregates guide](/documentation/topics/resources/aggregates.md) for more.","ref":"glossary.html#aggregate","title":"Aggregate - Glossary","type":"extras"},{"doc":"A piece of data belonging to a resource. The most basic building block; an attribute has a type and a value. For resources backed by a data layer, they typically represent a column in a database table, or a key in an object store, for example.\n\nSee the [Attributes guide](/documentation/topics/resources/attributes.md) for more.","ref":"glossary.html#attribute","title":"Attribute - Glossary","type":"extras"},{"doc":"An authorizer is an extension that can be added to a resource that will be given the opportunity to modify and/or prevent requests to a resource. In practice, you will almost always be using `Ash.Policy.Authorizer`, but you can still write your own if you need to.\n\nSee the [Actors & Authorization](documentation/topics/security/actors-and-authorization.md) and [Policies](documentation/topics/security/policies.md) guides for more.","ref":"glossary.html#authorizer","title":"Authorizer - Glossary","type":"extras"},{"doc":"A calculation is a special type of field for a resource, one that is not directly stored in the data layer but generated on-demand. Typically it will derive from other information on the record, but it may come from some other data source entirely.\n\nSee the [Calculations guide](/documentation/topics/resources/calculations.md) for more.","ref":"glossary.html#calculation","title":"Calculation - Glossary","type":"extras"},{"doc":"Changesets encapsulate data changes made while creating or updating an instance of a resource. Similarly to [Ecto changesets](https://hexdocs.pm/ecto/Ecto.Changeset.html), they include data validations but they also have their own callback hook lifecycle.\n\nSee `Ash.Changeset` for more.","ref":"glossary.html#changeset","title":"Changeset - Glossary","type":"extras"},{"doc":"A method of broadly separating resources into different [domains]( ), A.K.A [bounded contexts](https://martinfowler.com/bliki/BoundedContext.html).\n\nSee the [Domains guide](/documentation/topics/domains.md) for more.","ref":"glossary.html#domain","title":"Domain - Glossary","type":"extras"},{"doc":"A packaged bundle of code that can be included in a resource to provide additional functionality. Built-in functionality such as the resource DSL itself is provided by an extension, and libraries like AshPostgres and AshAdmin also provide extensions that you can add to your resources with just one line of code.\n\nSee [Extending Resources](/documentation/topics/advanced/writing-extensions.md) for more.","ref":"glossary.html#extension","title":"Extension - Glossary","type":"extras"},{"doc":"Filters are applied to queries to limit the data returned. They can also be applied to changesets, to ensure only data matching a certain condition is updated. For example:\n\n- Fetching Articles that include a certain search term in the title\n- Fetching Posts created by a specific user\n- Fetching Tickets updated in the last week\n- Updating a record only if it's version matches your in memory version (optimistic locking)\n\nSee `Ash.Filter` for more.","ref":"glossary.html#filter","title":"Filter - Glossary","type":"extras"},{"doc":"A way to uniquely identify an instance of a resource. A primary key is an example of an identity that is automatically generated; you can manually add others such as a user's email address, or a URL slug for a post. If using AshPostgres, constraints will be created by the migration generator to enforce identities at the database level.\n\nSee the [Identities guide](/documentation/topics/resources/identities.md) for more.","ref":"glossary.html#identity","title":"Identity - Glossary","type":"extras"},{"doc":"Notifiers are modules that are called for each action that occurs on a resource (except generic actions). They are called at the end of transactions, meaning that if a notifier is called, it is guaranteed that the action they pertain to has completed successfully.\n\nSee the [Notifiers guide](/documentation/topics/resources/notifiers.md) for more.","ref":"glossary.html#notifier","title":"Notifier - Glossary","type":"extras"},{"doc":"A set of rules defining who is authorized to perform specific actions on a resource. Common policy checks include rules such as:\n\n- Forbidding anyone other than the user who wrote a blog post, from editing it\n- Allowing only admins to update site-wide settings\n\nSee the [Policies guide](/documentation/topics/security/policies.md) for more.","ref":"glossary.html#policy","title":"Policy - Glossary","type":"extras"},{"doc":"The tools and functions used for reading and filtering stored data, from the data layer.\n\nSee `Ash.Query` for more.","ref":"glossary.html#query","title":"Query - Glossary","type":"extras"},{"doc":"A record is an \"instance\" of a resource. Keep in mind that this is not an \"instance\" in a mutable/object-oriented sense, but rather a snapshot of the data at a given point in time. When you call a read action, you get back records. You can provide a record to an update action to determine what data is being updated.","ref":"glossary.html#record","title":"Record - Glossary","type":"extras"},{"doc":"Relationships are named links between resources, that define how they relate to each other. Relationships can be used to signify ownership of a record, membership of a group, or can be used in filtering and querying data.\n\nSee the [Relationships guide](/documentation/topics/resources/relationships.md) for more.","ref":"glossary.html#relationship","title":"Relationship - Glossary","type":"extras"},{"doc":"The central concept in Ash, a resource can be used to model all kinds of things. Most often, they will map to a data store, and represent things like rows of a database table. However, they can also be backed by external data sources, be used for validating data with no persistence at all, or even be simple containers for generic actions, completely stateless.\n\nSee the [Resource DSL docs](dsl-ash-resource.html) for DSL documentation.","ref":"glossary.html#resource","title":"Resource - Glossary","type":"extras"},{"doc":"Multitenancy is the siloing of your app's data into discrete non-overlapping groups, typically by customer or organization (the tenant). Ash supports multitenancy both at the code level and the data layer level (depending on the data layer; for example, AshPostgres uses schemas to fully separate data per tenant.)\n\nSee the [Multitenancy guide](/documentation/topics/advanced/multitenancy.md) for more.","ref":"glossary.html#tenant","title":"Tenant - Glossary","type":"extras"},{"doc":"# Expressions\n\nAsh expressions are used in various places like calculations, filters, and policies, and are meant to be portable representations of elixir expressions. You can create an expression using the `Ash.Expr.expr/1` macro, like so:\n\n```elixir\nAsh.Expr.expr(1 + 2)\nAsh.Expr.expr(x + y)\nAsh.Expr.expr(post.title <> \" | \" <> post.subtitle)\n```\n\n>","ref":"expressions.html","title":"Expressions","type":"extras"},{"doc":">\n> Ash expressions have some interesting properties in their evaluation, primarily because they are made to be\n> portable, i.e executable in some data layer (like SQL) or executable in Elixir. In general, these expressions\n> will behave the same way they do in Elixir. The primary difference is how `nil` values work. They behave the way\n> that `NULL` values behave in SQL. This is primarily because this pattern is easier to replicate to various popular\n> data layers, and is generally safer when using expressions for things like authentication. The practical\n> implications of this are that `nil` values will \"poison\" many expressions, and cause them to return `nil`.\n> For example, `x + nil` would always evaluate to `nil`. Additionally, `true and nil` will always result in\n> `nil`, _this is also true with or and not_, i.e `true or nil` will return `nil`, and `not nil` will return `nil`.\n>\n> Additionally, atoms and strings compare as if the atom was a string. This is because most external data layers\n> do not know about atoms, and so they are converted to strings before comparison.","ref":"expressions.html#ash-expressions-are-sql-ish-info","title":"Ash Expressions are SQL-ish {: .info} - Expressions","type":"extras"},{"doc":"The following operators are available and they behave the same as they do in Elixir, except for the `nil` addendum above.\n\n- `==`\n- `!=`\n- `>`\n- `>=`\n- `<`\n- `<=`\n- `in`\n- `*`\n- `-`\n- `/`\n- `<>`\n- `||`\n- `&&`\n- `is_nil` | Only works as an operator in maps/keyword list syntax. i.e `[x: [is_nil: true]]`","ref":"expressions.html#operators","title":"Operators - Expressions","type":"extras"},{"doc":"The following functions are built in. Data Layers can add their own functions to expressions. For example, `AshPostgres` adds `trigram_similarity` function.\n\nThe following functions are built in:\n\n- `if` | Works like elixir's `if`.\n- `is_nil/1` | Works like elixir's `is_nil`\n- `get_path/2` | i.e `get_path(value, [\"foo\", \"bar\"])`. This is what expressions like `value[:foo][\"bar\"]` are turned into under the hood.\n- `contains/2` | if one string contains another string, i.e `contains(\"fred\", \"red\")`\n- `length/1` | the length of a list, i.e. `length([:foo, :bar])`\n- `type/2` | Cast a given value to a specific type, i.e `type(^arg(:id), :uuid)` or `type(integer_field, :string)`\n- `string_downcase/1` | Downcases a string\n- `string_join/1` | Concatenates a list of strings, and ignores any nil values\n- `string_join/2` | As above, but with a joiner\n- `string_split/1` | Splits a string on spaces\n- `string_split/2` | As above, but with a specific delimiter\n- `string_split/3` | As above, but with options. See the function for the available options.\n- `string_length/1` | Returns the length of a given string, as reported by `String.length/1`\n- `string_trim/1` | Trims unicode whitespace from the beginning and the end of a string\n- `at/2` | Get an element from a list, i.e `at(list, 1)`\n- `round/1` | Round a float, decimal or int to 0 precision, i.e `round(num)`\n- `round/2` | Round a float, decimal or int to the provided precision or less, i.e `round(1.1234, 3) == 1.1234` and `round(1.12, 3) == 1.12`\n- String interpolation | `\"#{first_name} #{last_name}\"`, is remapped to the equivalent usage of `<>`\n- `fragment/*` | Creates a fragment of a data layer expression. See the section on fragments below.","ref":"expressions.html#functions","title":"Functions - Expressions","type":"extras"},{"doc":"Fragments come in two forms.","ref":"expressions.html#fragments","title":"Fragments - Expressions","type":"extras"},{"doc":"For SQL/query-backed data layers, they will be a string with question marks for interpolation. For example: `fragment(\"(? + ?)\", foo, bar)`.","ref":"expressions.html#string-fragments","title":"String Fragments - Expressions","type":"extras"},{"doc":"For elixir-backed data layers, they will be a function or an MFA that will be called with the provided arguments. For example: `fragment(&Module.add/2, foo, bar)` or `fragment({Module, :add, []}, foo, bar)`. When using anonymous functions, you can _only_ use the format `&Module.function/arity`. `&Module.add/2` is okay, but `fn a, b -> Module.add(a, b) end` is not.","ref":"expressions.html#function-fragments","title":"Function Fragments - Expressions","type":"extras"},{"doc":"- `exists/2` | `exists(foo.bar, name == \"fred\")` takes an expression scoped to the destination resource, and checks if any related entry matches. See the section on `exists` below.\n- `path.exists/2` | Same as `exists` but the source of the relationship is itself a nested relationship. See the section on `exists` below.\n- `parent/1` | Allows an expression scoped to a resource to refer to the \"outer\" context. Used in relationship filters and `exists`","ref":"expressions.html#sub-expressions","title":"Sub-expressions - Expressions","type":"extras"},{"doc":"- `now/0` | Evaluates to the current time when the expression is evaluated\n- `today/0` | Evaluates to the current date when the expression is evaluated\n- `ago/2` | i.e `deleted_at > ago(7, :day)`. The available time intervals are documented in `Ash.Type.DurationName`\n- `from_now/2` | Same as `ago` but adds instead of subtracting\n- `datetime_add/3` | add an interval to a datetime, i.e `datetime_add(^datetime, 10, :hour)`\n- `date/3` | add an interval to a date, i.e `datetime_add(^date, 3, :day)`","ref":"expressions.html#datetime-functions","title":"DateTime Functions - Expressions","type":"extras"},{"doc":"- `cond` - `cond` is transformed to a series of `if` expressions under the hood\n- `item[:key] or item[\"key\"]` - accesses keys in a map. In both cases, it prefers a matching atom key, falling back to a matching string key. This is to aid with data stores that store embeds as JSON with string keys (like AshPostgres), so that this expression behaves the same in the data layer as it does in Elixir.","ref":"expressions.html#primitives","title":"Primitives - Expressions","type":"extras"},{"doc":"- `lazy/1` - Takes an MFA and evaluates it just before running the query. This is important for calculations, because the `expression/2` callback should be _stable_ (returns the same value given the same input). For example `lazy({ULID, :generate, [timestamp_input]})`","ref":"expressions.html#escape-hatches","title":"Escape Hatches - Expressions","type":"extras"},{"doc":"Aggregates can be referenced in-line, with their relationship path specified and any options provided that match the options given to `Ash.Query.Aggregate.new/4`. For example:\n\n```elixir\ncalculate :grade, :decimal, expr(\n  count(answers, query: [filter: expr(correct == true)]) /\n  count(answers, query: [filter: expr(correct == false)])\n)\n```\n\nThe available aggregate kinds can also be seen in the `Ash.Query.Aggregate` module documentation.","ref":"expressions.html#inline-aggregates","title":"Inline Aggregates - Expressions","type":"extras"},{"doc":"Most of the time, when you are using an expression, you will actually be creating a `template`. In this template, you have a few references that can be used, which will be replaced when before the expression is evaluated. The following references are available.\n\n```elixir\n^actor(:key) # equivalent to `get_in(actor || %{}, [:key])`\n^actor([:key1, :key2]) # equivalent to `get_in(actor || %{}, [:key, :key2])`\n^arg(:arg_name) # equivalent to `Map.get(arguments, :arg_name)`\n^context(:key) # equivalent to `get_in(context, :key)`\n^context([:key1, :key2]) # equivalent to `get_in(context, [:key1, :key2])`\n^ref(:key) # equivalent to referring to `key`. Allows for dynamic references\n^ref([:path], :key) # equivalent to referring to `path.key`. Allows for dynamic references with dynamic (or static) paths.\n```","ref":"expressions.html#templates","title":"Templates - Expressions","type":"extras"},{"doc":"Custom expressions allow you to extend Ash's expression language with your own expressions. To see more, see `Ash.CustomExpression`. To add a custom expression, configure it and recompile ash. For example:\n\n```elixir\nconfig :ash, :custom_expressions, [\n  MyApp.CustomExpression\n]\n```\n\n```\nmix deps.compile ash --force\n```\n\nThese expressions will be available across all usages of Ash expressions within your application.","ref":"expressions.html#custom-expressions","title":"Custom Expressions - Expressions","type":"extras"},{"doc":"The semantics of Ash filters are probably slightly different than what you are used to, and they are important to understand. Every filter expression is always talking about a single row, potentially \"joined\" to single related rows. By referencing relationships, you are implicitly doing a join. For those familiar with SQL terminology, it is equivalent to a left join, although AshPostgres can detect when it is safe to do an inner join (for performance reasons). Lets use an example of `posts` and `comments`.\n\nGiven a filter like the following:\n\n```elixir\nAsh.Query.filter(Post, comments.points > 10 and comments.tag.name == \"elixir\")\n```\n\nThe filter refers to a _single post/comment/tag combination_. So in english, this is \"posts where they have a comment with more than 10 points and _that same comment_ has a tag with the name `elixir`\". What this also means is that filters like the above do not compose nicely when new filters are added. For example:\n\n```elixir\ndef has_comment_with_more_points_than(query, score) do\n  Ash.Query.filter(query, comments.points > ^score)\nend\n\ndef has_comment_tagged(query, tag) do\n  Ash.Query.filter(query, comments.tag.name == ^tag)\nend\n\nPost\n|> has_comment_with_more_points_than(10)\n|> has_comment_tagged(\"elixir\")\n```\n\nThat code _seems_ like it ought to produce a filter over `Post` that would give us any post with a comment having more than 10 points, _and_ with a comment tagged `elixir`. That is not the same thing as having a _single_ comment that meets both those criteria. So how do we make this better?","ref":"expressions.html#filter-semantics-joins","title":"Filter semantics & joins - Expressions","type":"extras"},{"doc":"Lets rewrite the above using exists:\n\n```elixir\ndef has_comment_with_more_points_than(query, score) do\n  Ash.Query.filter(query, exists(comments, points > ^score))\nend\n\ndef has_comment_tagged(query, tag) do\n  Ash.Query.filter(query, exists(comments.tag.name == ^tag)\nend\n\nPost\n|> has_comment_with_more_points_than(10)\n|> has_comment_tagged(\"elixir\")\n```\n\nNow, they will compose properly! Generally speaking, you should use exists when you are filtering across any relationships that are `to_many` relationships \\*even if you don't expect your filter to be composed. Currently, the filter syntax does not minimize(combine) these `exists/2` statements, but doing so is not complex and can be added. While unlikely, please lodge an issue if you see any performance issues with `exists`.","ref":"expressions.html#exists","title":"Exists - Expressions","type":"extras"},{"doc":"Sometimes, you want the ability to say that some given row must have an existing related entry matching a filter. For example:\n\n```elixir\nAsh.Query.filter(Post, author.exists(roles, name == :admin) and author.active)\n```\n\nWhile the above is not common, it can be useful in some specific circumstances, and is used under the hood by the policy authorizer when combining the filters of various resources to create a single filter.","ref":"expressions.html#exists-at-path","title":"Exists at path - Expressions","type":"extras"},{"doc":"Ash expressions being portable is more important than it sounds. For example, if you were using AshPostgres and had the following calculation, which is an expression capable of being run in elixir or translated to SQL:\n\n```elixir\ncalculate :full_name, :string, expr(first_name <> \" \" <> last_name)\n```\n\nAnd you did something like the following:\n\n```elixir\nUser\n|> Ash.Query.load(:full_name)\n|> Ash.Query.sort(:full_name)\n|> Accounts.read!()\n```\n\nYou would see that it ran a SQL query with the `full_name` calculation as SQL. This allows for sorting on that value. However, if you had something like this:\n\n```elixir\n# data can be loaded in the query like above, or on demand later\nAccounts.load!(user, :full_name, reuse_values?: true)\n```\n\nyou would see that no SQL queries are run. The calculation is run directly in Elixir without needing to visit the database.","ref":"expressions.html#portability","title":"Portability - Expressions","type":"extras"},{"doc":"`Parent` is a way to \"jump out\" of a scoped expression. Here are some examples:\n\n```elixir\nAsh.Query.filter(exists(open_tickets, severity >= parent(severity_threshold)))\n```\n\n```elixir\nhas_many :relevant_tickets, Ticket do\n  no_attributes? true\n  # this says that there is no matching source_attribute and destination_attribute on this relationship\n  filter expr(status == :open and severity >= parent(severity_threshold))\nend\n```\n\n```elixir\ncount :count_of_relevant_tickets, :open_tickets do\n  filter expr(status == :open and severity >= parent(severity_threshold))\nend\n```","ref":"expressions.html#parent","title":"Parent - Expressions","type":"extras"},{"doc":"Related values can be references using dot delimiters, i.e `Ash.Query.filter(user.first_name == \"fred\")`.\nWhen referencing related values in filters, if the reference is a `has_one` or `belongs_to`, the filter does exactly what it looks like (matches if the related value matches). If it is a `has_many` or a `many_to_many`, it matches if any of the related records match.","ref":"expressions.html#referencing-related-values","title":"Referencing related values - Expressions","type":"extras"},{"doc":"Aggregates are simple, as all aggregates can be referenced in filter expressions (if you are using a data layer that supports aggregates).\n\nFor calculations, only those that define an expression can be referenced in other expressions.\n\nHere are some examples:\n\n```elixir\n# given a `full_name` calculation\n\nAsh.Query.filter(User, full_name == \"Hob Goblin\")\n\n# given a `full_name` calculation that accepts an argument called `delimiter`\n\nAsh.Query.filter(User, full_name(delimiter: \"~\") == \"Hob~Goblin\")\n```","ref":"expressions.html#referencing-aggregates-and-calculations","title":"Referencing aggregates and calculations - Expressions","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: Ash.Resource.Dsl","ref":"dsl-ash-resource.html","title":"DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"A section for declaring attributes on the resource.","ref":"dsl-ash-resource.html#attributes","title":"attributes - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [attribute](#attributes-attribute)\n * [create_timestamp](#attributes-create_timestamp)\n * [update_timestamp](#attributes-update_timestamp)\n * [integer_primary_key](#attributes-integer_primary_key)\n * [uuid_primary_key](#attributes-uuid_primary_key)\n * [uuid_v7_primary_key](#attributes-uuid_v7_primary_key)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nattributes do\n  uuid_primary_key :id\n\n  attribute :first_name, :string do\n    allow_nil? false\n  end\n\n  attribute :last_name, :string do\n    allow_nil? false\n  end\n\n  attribute :email, :string do\n    allow_nil? false\n\n    constraints [\n      match: ~r/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$/\n    ]\n  end\n\n  attribute :type, :atom do\n    constraints [\n      one_of: [:admin, :teacher, :student]\n    ]\n  end\n\n  create_timestamp :inserted_at\n  update_timestamp :updated_at\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nattribute name, type\n```\n\n\nDeclares an attribute on the resource.","ref":"dsl-ash-resource.html#attributes-attribute","title":"attributes.attribute - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nattribute :name, :string do\n  allow_nil? false\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#attributes-attribute-name){: #attributes-attribute-name .spark-required} | `atom` |  | The name of the attribute. |\n| [`type`](#attributes-attribute-type){: #attributes-attribute-type .spark-required} | `module` |  | The type of the attribute. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`constraints`](#attributes-attribute-constraints){: #attributes-attribute-constraints } | `keyword` |  | Constraints to provide to the type when casting the value. For more, see `Ash.Type`. |\n| [`description`](#attributes-attribute-description){: #attributes-attribute-description } | `String.t` |  | An optional description for the attribute. |\n| [`sensitive?`](#attributes-attribute-sensitive?){: #attributes-attribute-sensitive? } | `boolean` | `false` | Whether or not the attribute value contains sensitive information, like PII. See the [Sensitive Data guide](/documentation/topics/security/sensitive-data.md) for more. |\n| [`source`](#attributes-attribute-source){: #attributes-attribute-source } | `atom` |  | If the field should be mapped to a different name in the data layer. Support varies by data layer. |\n| [`always_select?`](#attributes-attribute-always_select?){: #attributes-attribute-always_select? } | `boolean` | `false` | Whether or not to ensure this attribute is always selected when reading from the database, regardless of applied select statements. |\n| [`primary_key?`](#attributes-attribute-primary_key?){: #attributes-attribute-primary_key? } | `boolean` | `false` | Whether the attribute is the primary key. Composite primary key is also possible by using `primary_key? true` in more than one attribute. If primary_key? is true, allow_nil? must be false. |\n| [`allow_nil?`](#attributes-attribute-allow_nil?){: #attributes-attribute-allow_nil? } | `boolean` | `true` | Whether or not the attribute can be set to nil. If nil value is given error is raised. |\n| [`generated?`](#attributes-attribute-generated?){: #attributes-attribute-generated? } | `boolean` | `false` | Whether or not the value may be generated by the data layer. |\n| [`writable?`](#attributes-attribute-writable?){: #attributes-attribute-writable? } | `boolean` | `true` | Whether or not the value can be written to. Non-writable attributes can still be written with `Ash.Changeset.force_change_attribute/3`. |\n| [`public?`](#attributes-attribute-public?){: #attributes-attribute-public? } | `boolean` | `false` | Whether or not the attribute should be shown over public interfaces. See the [sensitive data guide](/documentation/topics/security/sensitive-data.md) for more. |\n| [`default`](#attributes-attribute-default){: #attributes-attribute-default } | `(-> any) \\| mfa \\| any` |  | A value to be set on all creates, unless a value is being provided already.  Note: The default value is casted according to the type's `Ash.Type.*` module, before it is saved.  For `:string`, for example, if `constraints: [allow_empty?: _]` is false, the value `\"\"` will be cast to `nil`.  See the `:constraints` option, the `:allow_nil?` option, and the relevant `Ash.Type.*` documentation. |\n| [`update_default`](#attributes-attribute-update_default){: #attributes-attribute-update_default } | `(-> any) \\| mfa \\| any` |  | A value to be set on all updates, unless a value is being provided already. |\n| [`filterable?`](#attributes-attribute-filterable?){: #attributes-attribute-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the attribute can be referenced in filters. |\n| [`sortable?`](#attributes-attribute-sortable?){: #attributes-attribute-sortable? } | `boolean` | `true` | Whether or not the attribute can be referenced in sorts. |\n| [`match_other_defaults?`](#attributes-attribute-match_other_defaults?){: #attributes-attribute-match_other_defaults? } | `boolean` | `false` | Ensures that other attributes that use the same \"lazy\" default (a function or an mfa), use the same default value. Has no effect unless `default` is a zero argument function. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Attribute`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\ncreate_timestamp name\n```\n\n\nDeclares a non-writable attribute with a create default of `&DateTime.utc_now/0`\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except it sets\nthe following different defaults:\n\n```elixir\nwritable? false\ndefault &DateTime.utc_now/0\nmatch_other_defaults? true\ntype Ash.Type.UTCDatetimeUsec\nallow_nil? false\n```","ref":"dsl-ash-resource.html#attributes-create_timestamp","title":"attributes.create_timestamp - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\ncreate_timestamp :inserted_at\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#attributes-create_timestamp-name){: #attributes-create_timestamp-name .spark-required} | `atom` |  | The name of the attribute. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nupdate_timestamp name\n```\n\n\nDeclares a non-writable attribute with a create and update default of `&DateTime.utc_now/0`\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except it sets\nthe following different defaults:\n\n```elixir\nwritable? false\ndefault &DateTime.utc_now/0\nmatch_other_defaults? true\nupdate_default &DateTime.utc_now/0\ntype Ash.Type.UTCDatetimeUsec\nallow_nil? false\n```","ref":"dsl-ash-resource.html#attributes-update_timestamp","title":"attributes.update_timestamp - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nupdate_timestamp :updated_at\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#attributes-update_timestamp-name){: #attributes-update_timestamp-name .spark-required} | `atom` |  | The name of the attribute. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\ninteger_primary_key name\n```\n\n\nDeclares a generated, non writable, non-nil, primary key column of type integer.\n\nGenerated integer primary keys must be supported by the data layer.\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except for `allow_nil?`, but it sets\nthe following different defaults:\n\n```elixir\npublic? true\nwritable? false\nprimary_key? true\ngenerated? true\ntype :integer\n```","ref":"dsl-ash-resource.html#attributes-integer_primary_key","title":"attributes.integer_primary_key - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\ninteger_primary_key :id\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#attributes-integer_primary_key-name){: #attributes-integer_primary_key-name .spark-required} | `atom` |  | The name of the attribute. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nuuid_primary_key name\n```\n\n\nDeclares a non writable, non-nil, primary key column of type `uuid`, which defaults to `Ash.UUID.generate/0`.\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except for `allow_nil?`, but it sets\nthe following different defaults:\n\n```elixir\nwritable? false\npublic? true\ndefault &Ash.UUID.generate/0\nprimary_key? true\ntype :uuid\n```","ref":"dsl-ash-resource.html#attributes-uuid_primary_key","title":"attributes.uuid_primary_key - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nuuid_primary_key :id\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#attributes-uuid_primary_key-name){: #attributes-uuid_primary_key-name .spark-required} | `atom` |  | The name of the attribute. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nuuid_v7_primary_key name\n```\n\n\nDeclares a non writable, non-nil, primary key column of type `uuid_v7`, which defaults to `Ash.UUIDv7.generate/0`.\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except for `allow_nil?`, but it sets\nthe following different defaults:\n\n```elixir\nwritable? false\npublic? true\ndefault &Ash.UUIDv7.generate/0\nprimary_key? true\ntype :uuid_v7\n```","ref":"dsl-ash-resource.html#attributes-uuid_v7_primary_key","title":"attributes.uuid_v7_primary_key - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nuuid_v7_primary_key :id\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#attributes-uuid_v7_primary_key-name){: #attributes-uuid_v7_primary_key-name .spark-required} | `atom` |  | The name of the attribute. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"A section for declaring relationships on the resource.\n\nRelationships are a core component of resource oriented design. Many components of Ash\nwill use these relationships. A simple use case is loading relationships (done via the `Ash.Query.load/2`).\n\nSee the [relationships guide](/documentation/topics/resources/relationships.md) for more.","ref":"dsl-ash-resource.html#relationships","title":"relationships - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [has_one](#relationships-has_one)\n   * filter\n * [has_many](#relationships-has_many)\n   * filter\n * [many_to_many](#relationships-many_to_many)\n   * filter\n * [belongs_to](#relationships-belongs_to)\n   * filter","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nrelationships do\n  belongs_to :post, MyApp.Post do\n    primary_key? true\n  end\n\n  belongs_to :category, MyApp.Category do\n    primary_key? true\n  end\nend\n\n```\n\n```\nrelationships do\n  belongs_to :author, MyApp.Author\n\n  many_to_many :categories, MyApp.Category do\n    through MyApp.PostCategory\n    destination_attribute_on_join_resource :category_id\n    source_attribute_on_join_resource :post_id\n  end\nend\n\n```\n\n```\nrelationships do\n  has_many :posts, MyApp.Post do\n    destination_attribute :author_id\n  end\n\n  has_many :composite_key_posts, MyApp.CompositeKeyPost do\n    destination_attribute :author_id\n  end\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nhas_one name, destination\n```\n\n\nDeclares a `has_one` relationship. In a relational database, the foreign key would be on the *other* table.\n\nGenerally speaking, a `has_one` also implies that the destination table is unique on that foreign key.\n\nSee the [relationships guide](/documentation/topics/resources/relationships.md) for more.","ref":"dsl-ash-resource.html#relationships-has_one","title":"relationships.has_one - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [filter](#relationships-has_one-filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\n# In a resource called `Word`\nhas_one :dictionary_entry, DictionaryEntry do\n  source_attribute :text\n  destination_attribute :word_text\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#relationships-has_one-name){: #relationships-has_one-name } | `atom` |  | The name of the relationship |\n| [`destination`](#relationships-has_one-destination){: #relationships-has_one-destination } | `module` |  | The destination resource |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`manual`](#relationships-has_one-manual){: #relationships-has_one-manual } | `(any, any -> any) \\| module` |  | A module that implements `Ash.Resource.ManualRelationship`. Also accepts a 2 argument function that takes the source records and the context. |\n| [`no_attributes?`](#relationships-has_one-no_attributes?){: #relationships-has_one-no_attributes? } | `boolean` |  | All existing entities are considered related, i.e this relationship is not based on any fields, and `source_attribute` and `destination_attribute` are ignored. See the See the [relationships guide](/documentation/topics/resources/relationships.md) for more. |\n| [`allow_nil?`](#relationships-has_one-allow_nil?){: #relationships-has_one-allow_nil? } | `boolean` | `true` | Marks the relationship as required. Has no effect on validations, but can inform extensions that there will always be a related entity. |\n| [`from_many?`](#relationships-has_one-from_many?){: #relationships-has_one-from_many? } | `boolean` | `false` | Signal that this relationship is actually a `has_many` where the first record is given via the `sort`. This will allow data layers to properly deduplicate when necessary. |\n| [`description`](#relationships-has_one-description){: #relationships-has_one-description } | `String.t` |  | An optional description for the relationship |\n| [`destination_attribute`](#relationships-has_one-destination_attribute){: #relationships-has_one-destination_attribute } | `atom` |  | The attribute on the related resource that should match the `source_attribute` configured on this resource. |\n| [`validate_destination_attribute?`](#relationships-has_one-validate_destination_attribute?){: #relationships-has_one-validate_destination_attribute? } | `boolean` | `true` | Whether or not to validate that the destination field exists on the destination resource |\n| [`source_attribute`](#relationships-has_one-source_attribute){: #relationships-has_one-source_attribute } | `atom` | `:id` | The field on this resource that should match the `destination_attribute` on the related resource. |\n| [`relationship_context`](#relationships-has_one-relationship_context){: #relationships-has_one-relationship_context } | `any` |  | Context to be set on any queries or changesets generated for managing or querying this relationship. |\n| [`public?`](#relationships-has_one-public?){: #relationships-has_one-public? } | `boolean` | `false` | Whether or not the relationship will appear in public interfaces |\n| [`not_found_message`](#relationships-has_one-not_found_message){: #relationships-has_one-not_found_message } | `String.t` |  | A message to show if there is a conflict with this relationship in the database on update or create, or when managing relationships. |\n| [`writable?`](#relationships-has_one-writable?){: #relationships-has_one-writable? } | `boolean` | `true` | Whether or not the relationship may be managed. |\n| [`read_action`](#relationships-has_one-read_action){: #relationships-has_one-read_action } | `atom` |  | The read action on the destination resource to use when loading data and filtering. |\n| [`domain`](#relationships-has_one-domain){: #relationships-has_one-domain } | `atom` |  | The domain module to use when working with the related entity. |\n| [`filterable?`](#relationships-has_one-filterable?){: #relationships-has_one-filterable? } | `boolean` | `true` | If set to `false`, the relationship will not be usable in filters. |\n| [`sortable?`](#relationships-has_one-sortable?){: #relationships-has_one-sortable? } | `boolean` | `true` | If set to `false`, the relationship will not be usable in filters. |\n| [`sort`](#relationships-has_one-sort){: #relationships-has_one-sort } | `any` |  | A sort statement to be applied when loading the relationship. |\n| [`could_be_related_at_creation?`](#relationships-has_one-could_be_related_at_creation?){: #relationships-has_one-could_be_related_at_creation? } | `boolean` | `false` | Whether or not related values may exist for this relationship at creation. |\n| [`violation_message`](#relationships-has_one-violation_message){: #relationships-has_one-violation_message } | `String.t` |  | A message to show if there is a conflict with this relationship in the database on destroy. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nfilter filter\n```\n\n\nApplies a filter. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-has_one-filter","title":"relationships.has_one.filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nfilter expr(first_name == \"fred\")\nfilter expr(last_name == \"weasley\" and magician == true)\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`filter`](#relationships-has_one-filter-filter){: #relationships-has_one-filter-filter .spark-required} | `any` |  | The filter to apply. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Dsl.Filter`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Relationships.HasOne`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nhas_many name, destination\n```\n\n\nDeclares a `has_many` relationship. There can be any number of related entities.\n\nSee the [relationships guide](/documentation/topics/resources/relationships.md) for more.","ref":"dsl-ash-resource.html#relationships-has_many","title":"relationships.has_many - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [filter](#relationships-has_many-filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\n# In a resource called `Word`\nhas_many :definitions, DictionaryDefinition do\n  source_attribute :text\n  destination_attribute :word_text\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#relationships-has_many-name){: #relationships-has_many-name } | `atom` |  | The name of the relationship |\n| [`destination`](#relationships-has_many-destination){: #relationships-has_many-destination } | `module` |  | The destination resource |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`manual`](#relationships-has_many-manual){: #relationships-has_many-manual } | `(any, any -> any) \\| module` |  | A module that implements `Ash.Resource.ManualRelationship`. Also accepts a 2 argument function that takes the source records and the context. |\n| [`no_attributes?`](#relationships-has_many-no_attributes?){: #relationships-has_many-no_attributes? } | `boolean` |  | All existing entities are considered related, i.e this relationship is not based on any fields, and `source_attribute` and `destination_attribute` are ignored. See the See the [relationships guide](/documentation/topics/resources/relationships.md) for more. |\n| [`description`](#relationships-has_many-description){: #relationships-has_many-description } | `String.t` |  | An optional description for the relationship |\n| [`destination_attribute`](#relationships-has_many-destination_attribute){: #relationships-has_many-destination_attribute } | `atom` |  | The attribute on the related resource that should match the `source_attribute` configured on this resource. |\n| [`validate_destination_attribute?`](#relationships-has_many-validate_destination_attribute?){: #relationships-has_many-validate_destination_attribute? } | `boolean` | `true` | Whether or not to validate that the destination field exists on the destination resource |\n| [`source_attribute`](#relationships-has_many-source_attribute){: #relationships-has_many-source_attribute } | `atom` | `:id` | The field on this resource that should match the `destination_attribute` on the related resource. |\n| [`relationship_context`](#relationships-has_many-relationship_context){: #relationships-has_many-relationship_context } | `any` |  | Context to be set on any queries or changesets generated for managing or querying this relationship. |\n| [`public?`](#relationships-has_many-public?){: #relationships-has_many-public? } | `boolean` | `false` | Whether or not the relationship will appear in public interfaces |\n| [`not_found_message`](#relationships-has_many-not_found_message){: #relationships-has_many-not_found_message } | `String.t` |  | A message to show if there is a conflict with this relationship in the database on update or create, or when managing relationships. |\n| [`writable?`](#relationships-has_many-writable?){: #relationships-has_many-writable? } | `boolean` | `true` | Whether or not the relationship may be managed. |\n| [`read_action`](#relationships-has_many-read_action){: #relationships-has_many-read_action } | `atom` |  | The read action on the destination resource to use when loading data and filtering. |\n| [`domain`](#relationships-has_many-domain){: #relationships-has_many-domain } | `atom` |  | The domain module to use when working with the related entity. |\n| [`filterable?`](#relationships-has_many-filterable?){: #relationships-has_many-filterable? } | `boolean` | `true` | If set to `false`, the relationship will not be usable in filters. |\n| [`sortable?`](#relationships-has_many-sortable?){: #relationships-has_many-sortable? } | `boolean` | `true` | If set to `false`, the relationship will not be usable in filters. |\n| [`sort`](#relationships-has_many-sort){: #relationships-has_many-sort } | `any` |  | A sort statement to be applied when loading the relationship. |\n| [`could_be_related_at_creation?`](#relationships-has_many-could_be_related_at_creation?){: #relationships-has_many-could_be_related_at_creation? } | `boolean` | `false` | Whether or not related values may exist for this relationship at creation. |\n| [`violation_message`](#relationships-has_many-violation_message){: #relationships-has_many-violation_message } | `String.t` |  | A message to show if there is a conflict with this relationship in the database on destroy. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nfilter filter\n```\n\n\nApplies a filter. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-has_many-filter","title":"relationships.has_many.filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`filter`](#relationships-has_many-filter-filter){: #relationships-has_many-filter-filter .spark-required} | `any` |  | The filter to apply. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Relationships.HasMany`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nmany_to_many name, destination\n```\n\n\nDeclares a `many_to_many` relationship. Many to many relationships require a join resource.\n\nA join resource is a resource that consists of a relationship to the source and destination of the many to many.\n\nSee the [relationships guide](/documentation/topics/resources/relationships.md) for more.","ref":"dsl-ash-resource.html#relationships-many_to_many","title":"relationships.many_to_many - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [filter](#relationships-many_to_many-filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\n# In a resource called `Word`\nmany_to_many :books, Book do\n  through BookWord\n  source_attribute :text\n  source_attribute_on_join_resource :word_text\n  destination_attribute :id\n  destination_attribute_on_join_resource :book_id\nend\n\n# And in `BookWord` (the join resource)\nbelongs_to :book, Book, primary_key?: true, allow_nil?: false\nbelongs_to :word, Word, primary_key?: true, allow_nil?: false\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#relationships-many_to_many-name){: #relationships-many_to_many-name } | `atom` |  | The name of the relationship |\n| [`destination`](#relationships-many_to_many-destination){: #relationships-many_to_many-destination } | `module` |  | The destination resource |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source_attribute_on_join_resource`](#relationships-many_to_many-source_attribute_on_join_resource){: #relationships-many_to_many-source_attribute_on_join_resource } | `atom` |  | The attribute on the join resource that should line up with `source_attribute` on this resource. Defaults to ` _id`. |\n| [`destination_attribute_on_join_resource`](#relationships-many_to_many-destination_attribute_on_join_resource){: #relationships-many_to_many-destination_attribute_on_join_resource } | `atom` |  | The attribute on the join resource that should line up with `destination_attribute` on the related resource. Defaults to ` _id`. |\n| [`through`](#relationships-many_to_many-through){: #relationships-many_to_many-through } | `module` |  | The resource to use as the join resource. |\n| [`join_relationship`](#relationships-many_to_many-join_relationship){: #relationships-many_to_many-join_relationship } | `atom` |  | The has_many relationship to the join resource. Defaults to ` _join_assoc`. |\n| [`description`](#relationships-many_to_many-description){: #relationships-many_to_many-description } | `String.t` |  | An optional description for the relationship |\n| [`destination_attribute`](#relationships-many_to_many-destination_attribute){: #relationships-many_to_many-destination_attribute } | `atom` | `:id` | The attribute on the related resource that should match the `source_attribute` configured on this resource. |\n| [`validate_destination_attribute?`](#relationships-many_to_many-validate_destination_attribute?){: #relationships-many_to_many-validate_destination_attribute? } | `boolean` | `true` | Whether or not to validate that the destination field exists on the destination resource |\n| [`source_attribute`](#relationships-many_to_many-source_attribute){: #relationships-many_to_many-source_attribute } | `atom` | `:id` | The field on this resource that should match the `destination_attribute` on the related resource. |\n| [`relationship_context`](#relationships-many_to_many-relationship_context){: #relationships-many_to_many-relationship_context } | `any` |  | Context to be set on any queries or changesets generated for managing or querying this relationship. |\n| [`public?`](#relationships-many_to_many-public?){: #relationships-many_to_many-public? } | `boolean` | `false` | Whether or not the relationship will appear in public interfaces |\n| [`not_found_message`](#relationships-many_to_many-not_found_message){: #relationships-many_to_many-not_found_message } | `String.t` |  | A message to show if there is a conflict with this relationship in the database on update or create, or when managing relationships. |\n| [`writable?`](#relationships-many_to_many-writable?){: #relationships-many_to_many-writable? } | `boolean` | `true` | Whether or not the relationship may be managed. |\n| [`read_action`](#relationships-many_to_many-read_action){: #relationships-many_to_many-read_action } | `atom` |  | The read action on the destination resource to use when loading data and filtering. |\n| [`domain`](#relationships-many_to_many-domain){: #relationships-many_to_many-domain } | `atom` |  | The domain module to use when working with the related entity. |\n| [`filterable?`](#relationships-many_to_many-filterable?){: #relationships-many_to_many-filterable? } | `boolean` | `true` | If set to `false`, the relationship will not be usable in filters. |\n| [`sortable?`](#relationships-many_to_many-sortable?){: #relationships-many_to_many-sortable? } | `boolean` | `true` | If set to `false`, the relationship will not be usable in filters. |\n| [`sort`](#relationships-many_to_many-sort){: #relationships-many_to_many-sort } | `any` |  | A sort statement to be applied when loading the relationship. |\n| [`could_be_related_at_creation?`](#relationships-many_to_many-could_be_related_at_creation?){: #relationships-many_to_many-could_be_related_at_creation? } | `boolean` | `false` | Whether or not related values may exist for this relationship at creation. |\n| [`violation_message`](#relationships-many_to_many-violation_message){: #relationships-many_to_many-violation_message } | `String.t` |  | A message to show if there is a conflict with this relationship in the database on destroy. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nfilter filter\n```\n\n\nApplies a filter. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-many_to_many-filter","title":"relationships.many_to_many.filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`filter`](#relationships-many_to_many-filter-filter){: #relationships-many_to_many-filter-filter .spark-required} | `any` |  | The filter to apply. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Relationships.ManyToMany`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nbelongs_to name, destination\n```\n\n\nDeclares a `belongs_to` relationship. In a relational database, the foreign key would be on the *source* table.\n\nThis creates a field on the resource with the corresponding name and type, unless `define_attribute?: false` is provided.\n\nSee the [relationships guide](/documentation/topics/resources/relationships.md) for more.","ref":"dsl-ash-resource.html#relationships-belongs_to","title":"relationships.belongs_to - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [filter](#relationships-belongs_to-filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\n# In a resource called `Word`\nbelongs_to :dictionary_entry, DictionaryEntry do\n  source_attribute :text,\n  destination_attribute :word_text\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#relationships-belongs_to-name){: #relationships-belongs_to-name } | `atom` |  | The name of the relationship |\n| [`destination`](#relationships-belongs_to-destination){: #relationships-belongs_to-destination } | `module` |  | The destination resource |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`primary_key?`](#relationships-belongs_to-primary_key?){: #relationships-belongs_to-primary_key? } | `boolean` | `false` | Whether the generated attribute is, or is part of, the primary key of a resource. |\n| [`allow_nil?`](#relationships-belongs_to-allow_nil?){: #relationships-belongs_to-allow_nil? } | `boolean` | `true` | Whether this relationship must always be present, e.g: must be included on creation, and never removed (it may be modified). The generated attribute will not allow nil values. |\n| [`attribute_writable?`](#relationships-belongs_to-attribute_writable?){: #relationships-belongs_to-attribute_writable? } | `boolean` |  | Whether the generated attribute will be marked as writable. If not set, it will default to the relationship's `writable?` setting. |\n| [`attribute_public?`](#relationships-belongs_to-attribute_public?){: #relationships-belongs_to-attribute_public? } | `boolean` |  | Whether or not the generated attribute will be public. If not set, it will default to the relationship's `public?` setting. |\n| [`define_attribute?`](#relationships-belongs_to-define_attribute?){: #relationships-belongs_to-define_attribute? } | `boolean` | `true` | If set to `false` an attribute is not created on the resource for this relationship, and one must be manually added in `attributes`, invalidating many other options. |\n| [`attribute_type`](#relationships-belongs_to-attribute_type){: #relationships-belongs_to-attribute_type } | `any` | `:uuid` | The type of the generated created attribute. See `Ash.Type` for more. |\n| [`description`](#relationships-belongs_to-description){: #relationships-belongs_to-description } | `String.t` |  | An optional description for the relationship |\n| [`destination_attribute`](#relationships-belongs_to-destination_attribute){: #relationships-belongs_to-destination_attribute } | `atom` | `:id` | The attribute on the related resource that should match the `source_attribute` configured on this resource. |\n| [`validate_destination_attribute?`](#relationships-belongs_to-validate_destination_attribute?){: #relationships-belongs_to-validate_destination_attribute? } | `boolean` | `true` | Whether or not to validate that the destination field exists on the destination resource |\n| [`source_attribute`](#relationships-belongs_to-source_attribute){: #relationships-belongs_to-source_attribute } | `atom` |  | The field on this resource that should match the `destination_attribute` on the related resource. - Defaults to  _id |\n| [`relationship_context`](#relationships-belongs_to-relationship_context){: #relationships-belongs_to-relationship_context } | `any` |  | Context to be set on any queries or changesets generated for managing or querying this relationship. |\n| [`public?`](#relationships-belongs_to-public?){: #relationships-belongs_to-public? } | `boolean` | `false` | Whether or not the relationship will appear in public interfaces |\n| [`not_found_message`](#relationships-belongs_to-not_found_message){: #relationships-belongs_to-not_found_message } | `String.t` |  | A message to show if there is a conflict with this relationship in the database on update or create, or when managing relationships. |\n| [`writable?`](#relationships-belongs_to-writable?){: #relationships-belongs_to-writable? } | `boolean` | `true` | Whether or not the relationship may be managed. |\n| [`read_action`](#relationships-belongs_to-read_action){: #relationships-belongs_to-read_action } | `atom` |  | The read action on the destination resource to use when loading data and filtering. |\n| [`domain`](#relationships-belongs_to-domain){: #relationships-belongs_to-domain } | `atom` |  | The domain module to use when working with the related entity. |\n| [`filterable?`](#relationships-belongs_to-filterable?){: #relationships-belongs_to-filterable? } | `boolean` | `true` | If set to `false`, the relationship will not be usable in filters. |\n| [`sortable?`](#relationships-belongs_to-sortable?){: #relationships-belongs_to-sortable? } | `boolean` | `true` | If set to `false`, the relationship will not be usable in filters. |\n| [`sort`](#relationships-belongs_to-sort){: #relationships-belongs_to-sort } | `any` |  | A sort statement to be applied when loading the relationship. |\n| [`violation_message`](#relationships-belongs_to-violation_message){: #relationships-belongs_to-violation_message } | `String.t` |  | A message to show if there is a conflict with this relationship in the database on destroy. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nfilter filter\n```\n\n\nApplies a filter. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#relationships-belongs_to-filter","title":"relationships.belongs_to.filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`filter`](#relationships-belongs_to-filter-filter){: #relationships-belongs_to-filter-filter .spark-required} | `any` |  | The filter to apply. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Relationships.BelongsTo`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"A section for declaring resource actions.\n\nAll manipulation of data through the underlying data layer happens through actions.\nThere are four types of action: `create`, `read`, `update`, and `destroy`. You may\nrecognize these from the acronym `CRUD`. You can have multiple actions of the same\ntype, as long as they have different names. This is the primary mechanism for customizing\nyour resources to conform to your business logic. It is normal and expected to have\nmultiple actions of each type in a large application.","ref":"dsl-ash-resource.html#actions","title":"actions - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [action](#actions-action)\n   * argument\n * [create](#actions-create)\n   * change\n   * validate\n   * argument\n   * metadata\n * [read](#actions-read)\n   * argument\n   * prepare\n   * pagination\n   * metadata\n   * filter\n * [update](#actions-update)\n   * change\n   * validate\n   * metadata\n   * argument\n * [destroy](#actions-destroy)\n   * change\n   * validate\n   * metadata\n   * argument","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nactions do\n  create :signup do\n    argument :password, :string\n    argument :password_confirmation, :string\n    validate confirm(:password, :password_confirmation)\n    change {MyApp.HashPassword, []} # A custom implemented Change\n  end\n\n  read :me do\n    # An action that auto filters to only return the user for the current user\n    filter [id: actor(:id)]\n  end\n\n  update :update do\n    accept [:first_name, :last_name]\n  end\n\n  destroy do\n    change set_attribute(:deleted_at, &DateTime.utc_now/0)\n    # This tells it that even though this is a delete action, it\n    # should be treated like an update because `deleted_at` is set.\n    # This should be coupled with a `base_filter` on the resource\n    # or with the read actions having a `filter` for `is_nil: :deleted_at`\n    soft? true\n  end\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`defaults`](#actions-defaults){: #actions-defaults } | `list(:create \\| :read \\| :update \\| :destroy \\| {atom, atom \\| list(atom)})` |  | Creates a simple action of each specified type, with the same name as the type. These will be `primary?` unless one already exists for that type. Embedded resources, however, have a default of all resource types. |\n| [`default_accept`](#actions-default_accept){: #actions-default_accept } | `list(atom) \\| :*` |  | A default value for the `accept` option for each action. Use `:*` to accept all public attributes. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\naction name, returns \\\\ nil\n```\n\n\nDeclares a generic action. A combination of arguments, a return type and a run function.\n\nFor calling this action, see the `Ash.Domain` documentation.","ref":"dsl-ash-resource.html#actions-action","title":"actions.action - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [argument](#actions-action-argument)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\naction :top_user_emails, {:array, :string} do\n  argument :limit, :integer, default: 10, allow_nil?: false\n  run fn input, context ->\n    with {:ok, top_users} <- top_users(input.arguments.limit) do\n      {:ok, Enum.map(top_users, &(&1.email))}\n    end\n  end\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-action-name){: #actions-action-name .spark-required} | `atom` |  | The name of the action |\n| [`returns`](#actions-action-returns){: #actions-action-returns } | `module` |  | The return type of the action. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`constraints`](#actions-action-constraints){: #actions-action-constraints } | `keyword` |  | Constraints for the return type. See `Ash.Type` for more. |\n| [`allow_nil?`](#actions-action-allow_nil?){: #actions-action-allow_nil? } | `boolean` | `false` | Whether or not the action can return nil. Unlike attributes & arguments, this defaults to `false`. |\n| [`run`](#actions-action-run){: #actions-action-run } | `(any, any -> any) \\| module \\| module` |  |  |\n| [`primary?`](#actions-action-primary?){: #actions-action-primary? } | `boolean` | `false` | Whether or not this action should be used when no action is specified by the caller. |\n| [`description`](#actions-action-description){: #actions-action-description } | `String.t` |  | An optional description for the action |\n| [`transaction?`](#actions-action-transaction?){: #actions-action-transaction? } | `boolean` |  | Whether or not the action should be run in transactions. Reads default to false, while create/update/destroy actions default to `true`. |\n| [`touches_resources`](#actions-action-touches_resources){: #actions-action-touches_resources } | `list(atom)` |  | A list of resources that the action may touch, used when building transactions. |\n| [`skip_unknown_inputs`](#actions-action-skip_unknown_inputs){: #actions-action-skip_unknown_inputs } | `atom \\| String.t \\| list(atom \\| String.t)` | `[]` | A list of unknown fields to skip, or `:*` to skip all unknown fields. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nargument name, type\n```\n\n\nDeclares an argument on the action","ref":"dsl-ash-resource.html#actions-action-argument","title":"actions.action.argument - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nargument :password_confirmation, :string\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-action-argument-name){: #actions-action-argument-name .spark-required} | `atom` |  | The name of the argument |\n| [`type`](#actions-action-argument-type){: #actions-action-argument-type .spark-required} | `module` |  | The type of the argument. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#actions-action-argument-description){: #actions-action-argument-description } | `String.t` |  | An optional description for the argument. |\n| [`constraints`](#actions-action-argument-constraints){: #actions-action-argument-constraints } | `keyword` | `[]` | Constraints to provide to the type when casting the value. For more information, see `Ash.Type`. |\n| [`allow_nil?`](#actions-action-argument-allow_nil?){: #actions-action-argument-allow_nil? } | `boolean` | `true` | Whether or not the argument value may be nil (or may be not provided). If nil value is given error is raised. |\n| [`public?`](#actions-action-argument-public?){: #actions-action-argument-public? } | `boolean` | `true` | Whether or not the argument should appear in public interfaces |\n| [`sensitive?`](#actions-action-argument-sensitive?){: #actions-action-argument-sensitive? } | `boolean` | `false` | Whether or not the argument value contains sensitive information, like PII. See the [security guide](/documentation/topics/security/sensitive-data.md) for more. |\n| [`default`](#actions-action-argument-default){: #actions-action-argument-default } | `any` |  | The default value for the argument to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Actions.Argument`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Actions.Action`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\ncreate name\n```\n\n\nDeclares a `create` action. For calling this action, see the `Ash.Domain` documentation.","ref":"dsl-ash-resource.html#actions-create","title":"actions.create - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [change](#actions-create-change)\n * [validate](#actions-create-validate)\n * [argument](#actions-create-argument)\n * [metadata](#actions-create-metadata)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\ncreate :register do\n  primary? true\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-create-name){: #actions-create-name .spark-required} | `atom` |  | The name of the action |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`manual`](#actions-create-manual){: #actions-create-manual } | `(any, any -> any) \\| module` |  | Override the creation behavior. Accepts a module or module and opts, or a function that takes the changeset and context. See the [manual actions guide](/documentation/topics/manual-actions.md) for more. |\n| [`upsert?`](#actions-create-upsert?){: #actions-create-upsert? } | `boolean` | `false` | Forces all uses of this action to be treated as an upsert. |\n| [`upsert_identity`](#actions-create-upsert_identity){: #actions-create-upsert_identity } | `atom` |  | The identity to use for the upsert. Cannot be overriden by the caller. Ignored  if `upsert?` is not set to `true`. |\n| [`upsert_fields`](#actions-create-upsert_fields){: #actions-create-upsert_fields } | `:replace_all \\| {:replace, atom \\| list(atom)} \\| {:replace_all_except, atom \\| list(atom)} \\| atom \\| list(atom)` |  | The fields to overwrite in the case of an upsert. If not provided, all fields except for fields set by defaults will be overwritten. |\n| [`upsert_condition`](#actions-create-upsert_condition){: #actions-create-upsert_condition } | `any` |  | An expression to check if the record should be updated when there's a conflict. |\n| [`primary?`](#actions-create-primary?){: #actions-create-primary? } | `boolean` | `false` | Whether or not this action should be used when no action is specified by the caller. |\n| [`description`](#actions-create-description){: #actions-create-description } | `String.t` |  | An optional description for the action |\n| [`transaction?`](#actions-create-transaction?){: #actions-create-transaction? } | `boolean` |  | Whether or not the action should be run in transactions. Reads default to false, while create/update/destroy actions default to `true`. |\n| [`touches_resources`](#actions-create-touches_resources){: #actions-create-touches_resources } | `list(atom)` |  | A list of resources that the action may touch, used when building transactions. |\n| [`skip_unknown_inputs`](#actions-create-skip_unknown_inputs){: #actions-create-skip_unknown_inputs } | `atom \\| String.t \\| list(atom \\| String.t)` | `[]` | A list of unknown fields to skip, or `:*` to skip all unknown fields. |\n| [`accept`](#actions-create-accept){: #actions-create-accept } | `atom \\| list(atom) \\| :*` |  | The list of attributes to accept. Use `:*` to accept all public attributes. |\n| [`require_attributes`](#actions-create-require_attributes){: #actions-create-require_attributes } | `list(atom)` |  | A list of attributes that would normally `allow_nil?`, to require for this action. No need to include attributes that already do not allow nil? |\n| [`allow_nil_input`](#actions-create-allow_nil_input){: #actions-create-allow_nil_input } | `list(atom)` |  | A list of attributes that would normally be required, but should not be for this action. They will still be validated just before the data layer step. |\n| [`delay_global_validations?`](#actions-create-delay_global_validations?){: #actions-create-delay_global_validations? } | `boolean` | `false` | If true, global validations will be done in a `before_action` hook, regardless of their configuration on the resource. |\n| [`skip_global_validations?`](#actions-create-skip_global_validations?){: #actions-create-skip_global_validations? } | `boolean` | `false` | If true, global validations will be skipped. Useful for manual actions. |\n| [`error_handler`](#actions-create-error_handler){: #actions-create-error_handler } | `mfa` |  | Sets the error handler on the changeset. See `Ash.Changeset.handle_errors/2` for more |\n| [`notifiers`](#actions-create-notifiers){: #actions-create-notifiers } | `list(module)` |  | Notifiers that will be called specifically for this action. |\n| [`manual?`](#actions-create-manual?){: #actions-create-manual? } | `boolean` |  | Instructs Ash to *skip* the actual update/create/destroy step at the data layer. See the [manual actions guide](/documentation/topics/manual-actions.md) for more. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nchange change\n```\n\n\nA change to be applied to the changeset.\n\nSee `Ash.Resource.Change` for more.","ref":"dsl-ash-resource.html#actions-create-change","title":"actions.create.change - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nchange relate_actor(:reporter)\n```\n\n```\nchange {MyCustomChange, :foo}\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`change`](#actions-create-change-change){: #actions-create-change-change .spark-required} | `(any, any -> any) \\| module` |  | The module and options for a change. Also accepts a function that takes the changeset and the context. See `Ash.Resource.Change.Builtins` for builtin changes. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`only_when_valid?`](#actions-create-change-only_when_valid?){: #actions-create-change-only_when_valid? } | `boolean` | `false` | If the change should only be run on valid changes. By default, all changes are run unless stated otherwise here. |\n| [`description`](#actions-create-change-description){: #actions-create-change-description } | `String.t` |  | An optional description for the change |\n| [`where`](#actions-create-change-where){: #actions-create-change-where } | `(any, any -> any) \\| module \\| list((any, any -> any) \\| module)` | `[]` | Validations that should pass in order for this change to apply. These validations failing will result in this change being ignored. |\n| [`always_atomic?`](#actions-create-change-always_atomic?){: #actions-create-change-always_atomic? } | `boolean` | `false` | By default, changes are only run atomically if all changes will be run atomically or if there is no `change/3` callback defined. Set this to `true` to run it atomically always. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Change`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nvalidate validation\n```\n\n\nDeclares a validation to be applied to the changeset.\n\nSee `Ash.Resource.Validation` for more.","ref":"dsl-ash-resource.html#actions-create-validate","title":"actions.create.validate - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nvalidate changing(:email)\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`validation`](#actions-create-validate-validation){: #actions-create-validate-validation .spark-required} | `(any, any -> any) \\| module` |  | The module (or module and opts) that implements the `Ash.Resource.Validation` behaviour. Also accepts a function that receives the changeset and its context. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`where`](#actions-create-validate-where){: #actions-create-validate-where } | `(any, any -> any) \\| module \\| list((any, any -> any) \\| module)` | `[]` | Validations that should pass in order for this validation to apply. Any of these validations failing will result in this validation being ignored. |\n| [`only_when_valid?`](#actions-create-validate-only_when_valid?){: #actions-create-validate-only_when_valid? } | `boolean` | `false` | If the validation should only run on valid changes. Useful for expensive validations or validations that depend on valid data. |\n| [`message`](#actions-create-validate-message){: #actions-create-validate-message } | `String.t` |  | If provided, overrides any message set by the validation error |\n| [`description`](#actions-create-validate-description){: #actions-create-validate-description } | `String.t` |  | An optional description for the validation |\n| [`before_action?`](#actions-create-validate-before_action?){: #actions-create-validate-before_action? } | `boolean` | `false` | If set to `true`, the validation will be run in a before_action hook |\n| [`always_atomic?`](#actions-create-validate-always_atomic?){: #actions-create-validate-always_atomic? } | `boolean` | `false` | By default, validations are only run atomically if all changes will be run atomically or if there is no `validate/3` callback defined. Set this to `true` to run it atomically always. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Validation`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nargument name, type\n```\n\n\nDeclares an argument on the action","ref":"dsl-ash-resource.html#actions-create-argument","title":"actions.create.argument - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-create-argument-name){: #actions-create-argument-name .spark-required} | `atom` |  | The name of the argument |\n| [`type`](#actions-create-argument-type){: #actions-create-argument-type .spark-required} | `module` |  | The type of the argument. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#actions-create-argument-description){: #actions-create-argument-description } | `String.t` |  | An optional description for the argument. |\n| [`constraints`](#actions-create-argument-constraints){: #actions-create-argument-constraints } | `keyword` | `[]` | Constraints to provide to the type when casting the value. For more information, see `Ash.Type`. |\n| [`allow_nil?`](#actions-create-argument-allow_nil?){: #actions-create-argument-allow_nil? } | `boolean` | `true` | Whether or not the argument value may be nil (or may be not provided). If nil value is given error is raised. |\n| [`public?`](#actions-create-argument-public?){: #actions-create-argument-public? } | `boolean` | `true` | Whether or not the argument should appear in public interfaces |\n| [`sensitive?`](#actions-create-argument-sensitive?){: #actions-create-argument-sensitive? } | `boolean` | `false` | Whether or not the argument value contains sensitive information, like PII. See the [security guide](/documentation/topics/security/sensitive-data.md) for more. |\n| [`default`](#actions-create-argument-default){: #actions-create-argument-default } | `any` |  | The default value for the argument to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nmetadata name, type\n```\n\n\nA special kind of attribute that is only added to specific actions. Nothing sets this value, it must be set in a custom\nchange after_action hook via `Ash.Resource.put_metadata/3`.","ref":"dsl-ash-resource.html#actions-create-metadata","title":"actions.create.metadata - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nmetadata :api_token, :string, allow_nil?: false\n\n```\n\n```\nmetadata :operation_id, :string, allow_nil?: false\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-create-metadata-name){: #actions-create-metadata-name .spark-required} | `atom` |  | The name of the metadata |\n| [`type`](#actions-create-metadata-type){: #actions-create-metadata-type .spark-required} | `any` |  | The type of the metadata. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`constraints`](#actions-create-metadata-constraints){: #actions-create-metadata-constraints } | `keyword` | `[]` | Type constraints on the metadata |\n| [`description`](#actions-create-metadata-description){: #actions-create-metadata-description } | `String.t` |  | An optional description for the metadata. |\n| [`allow_nil?`](#actions-create-metadata-allow_nil?){: #actions-create-metadata-allow_nil? } | `boolean` | `true` | Whether or not the metadata may return `nil` |\n| [`default`](#actions-create-metadata-default){: #actions-create-metadata-default } | `any` |  | The default value for the metadata to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Actions.Metadata`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Actions.Create`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nread name\n```\n\n\nDeclares a `read` action. For calling this action, see the `Ash.Domain` documentation.","ref":"dsl-ash-resource.html#actions-read","title":"actions.read - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [argument](#actions-read-argument)\n * [prepare](#actions-read-prepare)\n * [pagination](#actions-read-pagination)\n * [metadata](#actions-read-metadata)\n * [filter](#actions-read-filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nread :read_all do\n  primary? true\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-read-name){: #actions-read-name .spark-required} | `atom` |  | The name of the action |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`manual`](#actions-read-manual){: #actions-read-manual } | `(any, any, any -> any) \\| module` |  | Delegates running of the query to the provided module. Accepts a module or module and opts, or a function that takes the ash query, the data layer query, and context. See the [manual actions guide](/documentation/topics/manual-actions.md) for more. |\n| [`get?`](#actions-read-get?){: #actions-read-get? } | `boolean` | `false` | Expresses that this action innately only returns a single result. Used by extensions to validate and/or modify behavior. Causes code interfaces to return a single value instead of a list. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more. |\n| [`modify_query`](#actions-read-modify_query){: #actions-read-modify_query } | `mfa \\| (any, any -> any)` |  | Allows direct manipulation of the data layer query via an MFA. The ash query and the data layer query will be provided as additional arguments. The result must be `{:ok, new_data_layer_query} \\| {:error, error}`. |\n| [`get_by`](#actions-read-get_by){: #actions-read-get_by } | `atom \\| list(atom)` |  | A helper to automatically generate a \"get by X\" action. Sets `get?` to true, add args for each of the specified fields, and adds a filter for each of the arguments. |\n| [`timeout`](#actions-read-timeout){: #actions-read-timeout } | `pos_integer` |  | The maximum amount of time, in milliseconds, that the action is allowed to run for. Ignored if the data layer doesn't support transactions *and* async is disabled. |\n| [`multitenancy`](#actions-read-multitenancy){: #actions-read-multitenancy } | `:enforce \\| :allow_global \\| :bypass` | `:enforce` | This setting defines how this action handles multitenancy. `:enforce` requires a tenant to be set (the default behavior), `:allow_global` allows using this action both with and without a tenant, `:bypass` completely ignores the tenant even if it's set. This is useful to change the behaviour of selected read action without the need of marking the whole resource with `global? true`. |\n| [`primary?`](#actions-read-primary?){: #actions-read-primary? } | `boolean` | `false` | Whether or not this action should be used when no action is specified by the caller. |\n| [`description`](#actions-read-description){: #actions-read-description } | `String.t` |  | An optional description for the action |\n| [`transaction?`](#actions-read-transaction?){: #actions-read-transaction? } | `boolean` |  | Whether or not the action should be run in transactions. Reads default to false, while create/update/destroy actions default to `true`. |\n| [`touches_resources`](#actions-read-touches_resources){: #actions-read-touches_resources } | `list(atom)` |  | A list of resources that the action may touch, used when building transactions. |\n| [`skip_unknown_inputs`](#actions-read-skip_unknown_inputs){: #actions-read-skip_unknown_inputs } | `atom \\| String.t \\| list(atom \\| String.t)` | `[]` | A list of unknown fields to skip, or `:*` to skip all unknown fields. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nargument name, type\n```\n\n\nDeclares an argument on the action","ref":"dsl-ash-resource.html#actions-read-argument","title":"actions.read.argument - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-read-argument-name){: #actions-read-argument-name .spark-required} | `atom` |  | The name of the argument |\n| [`type`](#actions-read-argument-type){: #actions-read-argument-type .spark-required} | `module` |  | The type of the argument. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#actions-read-argument-description){: #actions-read-argument-description } | `String.t` |  | An optional description for the argument. |\n| [`constraints`](#actions-read-argument-constraints){: #actions-read-argument-constraints } | `keyword` | `[]` | Constraints to provide to the type when casting the value. For more information, see `Ash.Type`. |\n| [`allow_nil?`](#actions-read-argument-allow_nil?){: #actions-read-argument-allow_nil? } | `boolean` | `true` | Whether or not the argument value may be nil (or may be not provided). If nil value is given error is raised. |\n| [`public?`](#actions-read-argument-public?){: #actions-read-argument-public? } | `boolean` | `true` | Whether or not the argument should appear in public interfaces |\n| [`sensitive?`](#actions-read-argument-sensitive?){: #actions-read-argument-sensitive? } | `boolean` | `false` | Whether or not the argument value contains sensitive information, like PII. See the [security guide](/documentation/topics/security/sensitive-data.md) for more. |\n| [`default`](#actions-read-argument-default){: #actions-read-argument-default } | `any` |  | The default value for the argument to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nprepare preparation\n```\n\n\nDeclares a preparation, which can be used to prepare a query for a read action.","ref":"dsl-ash-resource.html#actions-read-prepare","title":"actions.read.prepare - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nprepare build(sort: [:foo, :bar])\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`preparation`](#actions-read-prepare-preparation){: #actions-read-prepare-preparation .spark-required} | `(any, any -> any) \\| module` |  | The module and options for a preparation. Also accepts functions take the query and the context. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Preparation`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Adds pagination options to a resource","ref":"dsl-ash-resource.html#actions-read-pagination","title":"actions.read.pagination - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`keyset?`](#actions-read-pagination-keyset?){: #actions-read-pagination-keyset? } | `boolean` | `false` | Whether or not keyset based pagination is supported |\n| [`offset?`](#actions-read-pagination-offset?){: #actions-read-pagination-offset? } | `boolean` | `false` | Whether or not offset based pagination is supported |\n| [`default_limit`](#actions-read-pagination-default_limit){: #actions-read-pagination-default_limit } | `pos_integer` |  | The default page size to apply, if one is not supplied |\n| [`countable`](#actions-read-pagination-countable){: #actions-read-pagination-countable } | `true \\| false \\| :by_default` | `true` | Whether not a returned page will have a full count of all records. Use `:by_default` to do it automatically. |\n| [`max_page_size`](#actions-read-pagination-max_page_size){: #actions-read-pagination-max_page_size } | `pos_integer` | `250` | The maximum amount of records that can be requested in a single page |\n| [`required?`](#actions-read-pagination-required?){: #actions-read-pagination-required? } | `boolean` | `true` | Whether or not pagination can be disabled (by passing `page: false` to `Ash.Api.read!/2`, or by having `required?: false, default_limit: nil` set). Only relevant if some pagination configuration is supplied. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Actions.Read.Pagination`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nmetadata name, type\n```\n\n\nA special kind of attribute that is only added to specific actions. Nothing sets this value, it must be set in a custom\nchange after_action hook via `Ash.Resource.put_metadata/3`.","ref":"dsl-ash-resource.html#actions-read-metadata","title":"actions.read.metadata - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-read-metadata-name){: #actions-read-metadata-name .spark-required} | `atom` |  | The name of the metadata |\n| [`type`](#actions-read-metadata-type){: #actions-read-metadata-type .spark-required} | `any` |  | The type of the metadata. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`constraints`](#actions-read-metadata-constraints){: #actions-read-metadata-constraints } | `keyword` | `[]` | Type constraints on the metadata |\n| [`description`](#actions-read-metadata-description){: #actions-read-metadata-description } | `String.t` |  | An optional description for the metadata. |\n| [`allow_nil?`](#actions-read-metadata-allow_nil?){: #actions-read-metadata-allow_nil? } | `boolean` | `true` | Whether or not the metadata may return `nil` |\n| [`default`](#actions-read-metadata-default){: #actions-read-metadata-default } | `any` |  | The default value for the metadata to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nfilter filter\n```\n\n\nApplies a filter. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*.","ref":"dsl-ash-resource.html#actions-read-filter","title":"actions.read.filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`filter`](#actions-read-filter-filter){: #actions-read-filter-filter .spark-required} | `any` |  | The filter to apply. Can use `^arg/1`, `^context/1` and `^actor/1` teplates. Multiple filters are combined with *and*. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Actions.Read`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nupdate name\n```\n\n\nDeclares a `update` action. For calling this action, see the `Ash.Domain` documentation.","ref":"dsl-ash-resource.html#actions-update","title":"actions.update - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [change](#actions-update-change)\n * [validate](#actions-update-validate)\n * [metadata](#actions-update-metadata)\n * [argument](#actions-update-argument)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nupdate :flag_for_review, primary?: true\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-update-name){: #actions-update-name .spark-required} | `atom` |  | The name of the action |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`manual`](#actions-update-manual){: #actions-update-manual } | `(any, any -> any) \\| module` |  | Override the update behavior. Accepts a module or module and opts, or a function that takes the changeset and context. See the [manual actions guide](/documentation/topics/manual-actions.md) for more. |\n| [`require_atomic?`](#actions-update-require_atomic?){: #actions-update-require_atomic? } | `boolean` | `true` | Require that the update be atomic. This means that all changes and validations implement the `atomic` callback. See the guide on atomic updates for more. |\n| [`atomic_upgrade?`](#actions-update-atomic_upgrade?){: #actions-update-atomic_upgrade? } | `boolean` | `false` | If set to `true`, atomic upgrades will be performed. Ignored if `required_atomic?` is `true`. See the update actions guide for more. |\n| [`atomic_upgrade_with`](#actions-update-atomic_upgrade_with){: #actions-update-atomic_upgrade_with } | `atom \\| nil` |  | Configure the read action used when performing atomic upgrades. Defaults to the primary read action. |\n| [`primary?`](#actions-update-primary?){: #actions-update-primary? } | `boolean` | `false` | Whether or not this action should be used when no action is specified by the caller. |\n| [`description`](#actions-update-description){: #actions-update-description } | `String.t` |  | An optional description for the action |\n| [`transaction?`](#actions-update-transaction?){: #actions-update-transaction? } | `boolean` |  | Whether or not the action should be run in transactions. Reads default to false, while create/update/destroy actions default to `true`. |\n| [`touches_resources`](#actions-update-touches_resources){: #actions-update-touches_resources } | `list(atom)` |  | A list of resources that the action may touch, used when building transactions. |\n| [`skip_unknown_inputs`](#actions-update-skip_unknown_inputs){: #actions-update-skip_unknown_inputs } | `atom \\| String.t \\| list(atom \\| String.t)` | `[]` | A list of unknown fields to skip, or `:*` to skip all unknown fields. |\n| [`accept`](#actions-update-accept){: #actions-update-accept } | `atom \\| list(atom) \\| :*` |  | The list of attributes to accept. Use `:*` to accept all public attributes. |\n| [`require_attributes`](#actions-update-require_attributes){: #actions-update-require_attributes } | `list(atom)` |  | A list of attributes that would normally `allow_nil?`, to require for this action. No need to include attributes that already do not allow nil? |\n| [`allow_nil_input`](#actions-update-allow_nil_input){: #actions-update-allow_nil_input } | `list(atom)` |  | A list of attributes that would normally be required, but should not be for this action. They will still be validated just before the data layer step. |\n| [`delay_global_validations?`](#actions-update-delay_global_validations?){: #actions-update-delay_global_validations? } | `boolean` | `false` | If true, global validations will be done in a `before_action` hook, regardless of their configuration on the resource. |\n| [`skip_global_validations?`](#actions-update-skip_global_validations?){: #actions-update-skip_global_validations? } | `boolean` | `false` | If true, global validations will be skipped. Useful for manual actions. |\n| [`error_handler`](#actions-update-error_handler){: #actions-update-error_handler } | `mfa` |  | Sets the error handler on the changeset. See `Ash.Changeset.handle_errors/2` for more |\n| [`notifiers`](#actions-update-notifiers){: #actions-update-notifiers } | `list(module)` |  | Notifiers that will be called specifically for this action. |\n| [`manual?`](#actions-update-manual?){: #actions-update-manual? } | `boolean` |  | Instructs Ash to *skip* the actual update/create/destroy step at the data layer. See the [manual actions guide](/documentation/topics/manual-actions.md) for more. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nchange change\n```\n\n\nA change to be applied to the changeset.\n\nSee `Ash.Resource.Change` for more.","ref":"dsl-ash-resource.html#actions-update-change","title":"actions.update.change - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`change`](#actions-update-change-change){: #actions-update-change-change .spark-required} | `(any, any -> any) \\| module` |  | The module and options for a change. Also accepts a function that takes the changeset and the context. See `Ash.Resource.Change.Builtins` for builtin changes. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`only_when_valid?`](#actions-update-change-only_when_valid?){: #actions-update-change-only_when_valid? } | `boolean` | `false` | If the change should only be run on valid changes. By default, all changes are run unless stated otherwise here. |\n| [`description`](#actions-update-change-description){: #actions-update-change-description } | `String.t` |  | An optional description for the change |\n| [`where`](#actions-update-change-where){: #actions-update-change-where } | `(any, any -> any) \\| module \\| list((any, any -> any) \\| module)` | `[]` | Validations that should pass in order for this change to apply. These validations failing will result in this change being ignored. |\n| [`always_atomic?`](#actions-update-change-always_atomic?){: #actions-update-change-always_atomic? } | `boolean` | `false` | By default, changes are only run atomically if all changes will be run atomically or if there is no `change/3` callback defined. Set this to `true` to run it atomically always. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nvalidate validation\n```\n\n\nDeclares a validation to be applied to the changeset.\n\nSee `Ash.Resource.Validation` for more.","ref":"dsl-ash-resource.html#actions-update-validate","title":"actions.update.validate - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`validation`](#actions-update-validate-validation){: #actions-update-validate-validation .spark-required} | `(any, any -> any) \\| module` |  | The module (or module and opts) that implements the `Ash.Resource.Validation` behaviour. Also accepts a function that receives the changeset and its context. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`where`](#actions-update-validate-where){: #actions-update-validate-where } | `(any, any -> any) \\| module \\| list((any, any -> any) \\| module)` | `[]` | Validations that should pass in order for this validation to apply. Any of these validations failing will result in this validation being ignored. |\n| [`only_when_valid?`](#actions-update-validate-only_when_valid?){: #actions-update-validate-only_when_valid? } | `boolean` | `false` | If the validation should only run on valid changes. Useful for expensive validations or validations that depend on valid data. |\n| [`message`](#actions-update-validate-message){: #actions-update-validate-message } | `String.t` |  | If provided, overrides any message set by the validation error |\n| [`description`](#actions-update-validate-description){: #actions-update-validate-description } | `String.t` |  | An optional description for the validation |\n| [`before_action?`](#actions-update-validate-before_action?){: #actions-update-validate-before_action? } | `boolean` | `false` | If set to `true`, the validation will be run in a before_action hook |\n| [`always_atomic?`](#actions-update-validate-always_atomic?){: #actions-update-validate-always_atomic? } | `boolean` | `false` | By default, validations are only run atomically if all changes will be run atomically or if there is no `validate/3` callback defined. Set this to `true` to run it atomically always. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nmetadata name, type\n```\n\n\nA special kind of attribute that is only added to specific actions. Nothing sets this value, it must be set in a custom\nchange after_action hook via `Ash.Resource.put_metadata/3`.","ref":"dsl-ash-resource.html#actions-update-metadata","title":"actions.update.metadata - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-update-metadata-name){: #actions-update-metadata-name .spark-required} | `atom` |  | The name of the metadata |\n| [`type`](#actions-update-metadata-type){: #actions-update-metadata-type .spark-required} | `any` |  | The type of the metadata. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`constraints`](#actions-update-metadata-constraints){: #actions-update-metadata-constraints } | `keyword` | `[]` | Type constraints on the metadata |\n| [`description`](#actions-update-metadata-description){: #actions-update-metadata-description } | `String.t` |  | An optional description for the metadata. |\n| [`allow_nil?`](#actions-update-metadata-allow_nil?){: #actions-update-metadata-allow_nil? } | `boolean` | `true` | Whether or not the metadata may return `nil` |\n| [`default`](#actions-update-metadata-default){: #actions-update-metadata-default } | `any` |  | The default value for the metadata to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nargument name, type\n```\n\n\nDeclares an argument on the action","ref":"dsl-ash-resource.html#actions-update-argument","title":"actions.update.argument - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-update-argument-name){: #actions-update-argument-name .spark-required} | `atom` |  | The name of the argument |\n| [`type`](#actions-update-argument-type){: #actions-update-argument-type .spark-required} | `module` |  | The type of the argument. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#actions-update-argument-description){: #actions-update-argument-description } | `String.t` |  | An optional description for the argument. |\n| [`constraints`](#actions-update-argument-constraints){: #actions-update-argument-constraints } | `keyword` | `[]` | Constraints to provide to the type when casting the value. For more information, see `Ash.Type`. |\n| [`allow_nil?`](#actions-update-argument-allow_nil?){: #actions-update-argument-allow_nil? } | `boolean` | `true` | Whether or not the argument value may be nil (or may be not provided). If nil value is given error is raised. |\n| [`public?`](#actions-update-argument-public?){: #actions-update-argument-public? } | `boolean` | `true` | Whether or not the argument should appear in public interfaces |\n| [`sensitive?`](#actions-update-argument-sensitive?){: #actions-update-argument-sensitive? } | `boolean` | `false` | Whether or not the argument value contains sensitive information, like PII. See the [security guide](/documentation/topics/security/sensitive-data.md) for more. |\n| [`default`](#actions-update-argument-default){: #actions-update-argument-default } | `any` |  | The default value for the argument to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Actions.Update`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\ndestroy name\n```\n\n\nDeclares a `destroy` action. For calling this action, see the `Ash.Domain` documentation.","ref":"dsl-ash-resource.html#actions-destroy","title":"actions.destroy - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [change](#actions-destroy-change)\n * [validate](#actions-destroy-validate)\n * [metadata](#actions-destroy-metadata)\n * [argument](#actions-destroy-argument)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\ndestroy :soft_delete do\n  primary? true\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-destroy-name){: #actions-destroy-name .spark-required} | `atom` |  | The name of the action |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`soft?`](#actions-destroy-soft?){: #actions-destroy-soft? } | `boolean` | `false` | If specified, the destroy action behaves as an update internally |\n| [`manual`](#actions-destroy-manual){: #actions-destroy-manual } | `(any, any -> any) \\| module` |  | Override the update behavior. Accepts a module or module and opts, or a function that takes the changeset and context. See the [manual actions guide](/documentation/topics/manual-actions.md) for more. |\n| [`require_atomic?`](#actions-destroy-require_atomic?){: #actions-destroy-require_atomic? } | `boolean` | `true` | Require that the update be atomic. Only relevant if `soft?` is set to `true`. This means that all changes and validations implement the `atomic` callback. See the guide on atomic updates for more. |\n| [`atomic_upgrade?`](#actions-destroy-atomic_upgrade?){: #actions-destroy-atomic_upgrade? } | `boolean` | `false` | If set to `true`, atomic upgrades will be performed. See the update actions guide for more. |\n| [`atomic_upgrade_with`](#actions-destroy-atomic_upgrade_with){: #actions-destroy-atomic_upgrade_with } | `atom \\| nil` |  | Configure the read action used when performing atomic upgrades. Defaults to the primary read action. |\n| [`primary?`](#actions-destroy-primary?){: #actions-destroy-primary? } | `boolean` | `false` | Whether or not this action should be used when no action is specified by the caller. |\n| [`description`](#actions-destroy-description){: #actions-destroy-description } | `String.t` |  | An optional description for the action |\n| [`transaction?`](#actions-destroy-transaction?){: #actions-destroy-transaction? } | `boolean` |  | Whether or not the action should be run in transactions. Reads default to false, while create/update/destroy actions default to `true`. |\n| [`touches_resources`](#actions-destroy-touches_resources){: #actions-destroy-touches_resources } | `list(atom)` |  | A list of resources that the action may touch, used when building transactions. |\n| [`skip_unknown_inputs`](#actions-destroy-skip_unknown_inputs){: #actions-destroy-skip_unknown_inputs } | `atom \\| String.t \\| list(atom \\| String.t)` | `[]` | A list of unknown fields to skip, or `:*` to skip all unknown fields. |\n| [`accept`](#actions-destroy-accept){: #actions-destroy-accept } | `atom \\| list(atom) \\| :*` |  | The list of attributes to accept. Use `:*` to accept all public attributes. |\n| [`require_attributes`](#actions-destroy-require_attributes){: #actions-destroy-require_attributes } | `list(atom)` |  | A list of attributes that would normally `allow_nil?`, to require for this action. No need to include attributes that already do not allow nil? |\n| [`allow_nil_input`](#actions-destroy-allow_nil_input){: #actions-destroy-allow_nil_input } | `list(atom)` |  | A list of attributes that would normally be required, but should not be for this action. They will still be validated just before the data layer step. |\n| [`delay_global_validations?`](#actions-destroy-delay_global_validations?){: #actions-destroy-delay_global_validations? } | `boolean` | `false` | If true, global validations will be done in a `before_action` hook, regardless of their configuration on the resource. |\n| [`skip_global_validations?`](#actions-destroy-skip_global_validations?){: #actions-destroy-skip_global_validations? } | `boolean` | `false` | If true, global validations will be skipped. Useful for manual actions. |\n| [`error_handler`](#actions-destroy-error_handler){: #actions-destroy-error_handler } | `mfa` |  | Sets the error handler on the changeset. See `Ash.Changeset.handle_errors/2` for more |\n| [`notifiers`](#actions-destroy-notifiers){: #actions-destroy-notifiers } | `list(module)` |  | Notifiers that will be called specifically for this action. |\n| [`manual?`](#actions-destroy-manual?){: #actions-destroy-manual? } | `boolean` |  | Instructs Ash to *skip* the actual update/create/destroy step at the data layer. See the [manual actions guide](/documentation/topics/manual-actions.md) for more. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nchange change\n```\n\n\nA change to be applied to the changeset.\n\nSee `Ash.Resource.Change` for more.","ref":"dsl-ash-resource.html#actions-destroy-change","title":"actions.destroy.change - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`change`](#actions-destroy-change-change){: #actions-destroy-change-change .spark-required} | `(any, any -> any) \\| module` |  | The module and options for a change. Also accepts a function that takes the changeset and the context. See `Ash.Resource.Change.Builtins` for builtin changes. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`only_when_valid?`](#actions-destroy-change-only_when_valid?){: #actions-destroy-change-only_when_valid? } | `boolean` | `false` | If the change should only be run on valid changes. By default, all changes are run unless stated otherwise here. |\n| [`description`](#actions-destroy-change-description){: #actions-destroy-change-description } | `String.t` |  | An optional description for the change |\n| [`where`](#actions-destroy-change-where){: #actions-destroy-change-where } | `(any, any -> any) \\| module \\| list((any, any -> any) \\| module)` | `[]` | Validations that should pass in order for this change to apply. These validations failing will result in this change being ignored. |\n| [`always_atomic?`](#actions-destroy-change-always_atomic?){: #actions-destroy-change-always_atomic? } | `boolean` | `false` | By default, changes are only run atomically if all changes will be run atomically or if there is no `change/3` callback defined. Set this to `true` to run it atomically always. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nvalidate validation\n```\n\n\nDeclares a validation to be applied to the changeset.\n\nSee `Ash.Resource.Validation` for more.","ref":"dsl-ash-resource.html#actions-destroy-validate","title":"actions.destroy.validate - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`validation`](#actions-destroy-validate-validation){: #actions-destroy-validate-validation .spark-required} | `(any, any -> any) \\| module` |  | The module (or module and opts) that implements the `Ash.Resource.Validation` behaviour. Also accepts a function that receives the changeset and its context. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`where`](#actions-destroy-validate-where){: #actions-destroy-validate-where } | `(any, any -> any) \\| module \\| list((any, any -> any) \\| module)` | `[]` | Validations that should pass in order for this validation to apply. Any of these validations failing will result in this validation being ignored. |\n| [`only_when_valid?`](#actions-destroy-validate-only_when_valid?){: #actions-destroy-validate-only_when_valid? } | `boolean` | `false` | If the validation should only run on valid changes. Useful for expensive validations or validations that depend on valid data. |\n| [`message`](#actions-destroy-validate-message){: #actions-destroy-validate-message } | `String.t` |  | If provided, overrides any message set by the validation error |\n| [`description`](#actions-destroy-validate-description){: #actions-destroy-validate-description } | `String.t` |  | An optional description for the validation |\n| [`before_action?`](#actions-destroy-validate-before_action?){: #actions-destroy-validate-before_action? } | `boolean` | `false` | If set to `true`, the validation will be run in a before_action hook |\n| [`always_atomic?`](#actions-destroy-validate-always_atomic?){: #actions-destroy-validate-always_atomic? } | `boolean` | `false` | By default, validations are only run atomically if all changes will be run atomically or if there is no `validate/3` callback defined. Set this to `true` to run it atomically always. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nmetadata name, type\n```\n\n\nA special kind of attribute that is only added to specific actions. Nothing sets this value, it must be set in a custom\nchange after_action hook via `Ash.Resource.put_metadata/3`.","ref":"dsl-ash-resource.html#actions-destroy-metadata","title":"actions.destroy.metadata - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-destroy-metadata-name){: #actions-destroy-metadata-name .spark-required} | `atom` |  | The name of the metadata |\n| [`type`](#actions-destroy-metadata-type){: #actions-destroy-metadata-type .spark-required} | `any` |  | The type of the metadata. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`constraints`](#actions-destroy-metadata-constraints){: #actions-destroy-metadata-constraints } | `keyword` | `[]` | Type constraints on the metadata |\n| [`description`](#actions-destroy-metadata-description){: #actions-destroy-metadata-description } | `String.t` |  | An optional description for the metadata. |\n| [`allow_nil?`](#actions-destroy-metadata-allow_nil?){: #actions-destroy-metadata-allow_nil? } | `boolean` | `true` | Whether or not the metadata may return `nil` |\n| [`default`](#actions-destroy-metadata-default){: #actions-destroy-metadata-default } | `any` |  | The default value for the metadata to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nargument name, type\n```\n\n\nDeclares an argument on the action","ref":"dsl-ash-resource.html#actions-destroy-argument","title":"actions.destroy.argument - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#actions-destroy-argument-name){: #actions-destroy-argument-name .spark-required} | `atom` |  | The name of the argument |\n| [`type`](#actions-destroy-argument-type){: #actions-destroy-argument-type .spark-required} | `module` |  | The type of the argument. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#actions-destroy-argument-description){: #actions-destroy-argument-description } | `String.t` |  | An optional description for the argument. |\n| [`constraints`](#actions-destroy-argument-constraints){: #actions-destroy-argument-constraints } | `keyword` | `[]` | Constraints to provide to the type when casting the value. For more information, see `Ash.Type`. |\n| [`allow_nil?`](#actions-destroy-argument-allow_nil?){: #actions-destroy-argument-allow_nil? } | `boolean` | `true` | Whether or not the argument value may be nil (or may be not provided). If nil value is given error is raised. |\n| [`public?`](#actions-destroy-argument-public?){: #actions-destroy-argument-public? } | `boolean` | `true` | Whether or not the argument should appear in public interfaces |\n| [`sensitive?`](#actions-destroy-argument-sensitive?){: #actions-destroy-argument-sensitive? } | `boolean` | `false` | Whether or not the argument value contains sensitive information, like PII. See the [security guide](/documentation/topics/security/sensitive-data.md) for more. |\n| [`default`](#actions-destroy-argument-default){: #actions-destroy-argument-default } | `any` |  | The default value for the argument to take. It can be a zero argument function e.g `&MyMod.my_fun/0` or a value |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Actions.Destroy`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Functions that will be defined on the resource. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.","ref":"dsl-ash-resource.html#code_interface","title":"code_interface - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [define](#code_interface-define)\n * [define_calculation](#code_interface-define_calculation)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\ncode_interface do\n  define :create_user, action: :create\n  define :get_user_by_id, action: :get_by_id, args: [:id], get?: true\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`domain`](#code_interface-domain){: #code_interface-domain } | `module` | `false` | Use the provided Domain instead of the resources configured domain when calling actions. |\n| [`define?`](#code_interface-define?){: #code_interface-define? } | `boolean` |  | Whether or not to define the code interface in the resource. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\ndefine name\n```\n\n\nDefines a function with the corresponding name and arguments. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.","ref":"dsl-ash-resource.html#code_interface-define","title":"code_interface.define - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\ndefine :get_user_by_id, action: :get_by_id, args: [:id], get?: true\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#code_interface-define-name){: #code_interface-define-name .spark-required} | `atom` |  | The name of the function that will be defined |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`action`](#code_interface-define-action){: #code_interface-define-action } | `atom` |  | The name of the action that will be called. Defaults to the same name as the function. |\n| [`args`](#code_interface-define-args){: #code_interface-define-args } | `list(atom \\| {:optional, atom})` |  | Map specific arguments to named inputs. Can provide any argument/attributes that the action allows. |\n| [`not_found_error?`](#code_interface-define-not_found_error?){: #code_interface-define-not_found_error? } | `boolean` | `true` | If the action or interface is configured with `get?: true`, this determines whether or not an error is raised or `nil` is returned. |\n| [`require_reference?`](#code_interface-define-require_reference?){: #code_interface-define-require_reference? } | `boolean` | `true` | For update and destroy actions, require a resource or identifier to be passed in as the first argument. Not relevant for other action types. |\n| [`get?`](#code_interface-define-get?){: #code_interface-define-get? } | `boolean` | `false` | Expects to only receive a single result from a read action or a bulk update/destroy, and returns a single result instead of a list. Sets `require_reference?` to false automatically. |\n| [`get_by`](#code_interface-define-get_by){: #code_interface-define-get_by } | `atom \\| list(atom)` |  | Takes a list of fields and adds those fields as arguments, which will then be used to filter. Sets `get?` to true and `require_reference?` to false automatically. Adds filters for read, update and destroy actions, replacing the `record` first argument. |\n| [`get_by_identity`](#code_interface-define-get_by_identity){: #code_interface-define-get_by_identity } | `atom` |  | Takes an identity, gets its field list, and performs the same logic as `get_by` with those fields. Adds filters for read, update and destroy actions, replacing the `record` first argument. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Interface`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\ndefine_calculation name\n```\n\n\nDefines a function with the corresponding name and arguments, that evaluates a calculation. Use `:_record` to take an instance of a record. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.","ref":"dsl-ash-resource.html#code_interface-define_calculation","title":"code_interface.define_calculation - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\ndefine_calculation :referral_link, args: [:id]\n```\n\n```\ndefine_calculation :referral_link, args: [{:arg, :id}, {:ref, :id}]\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#code_interface-define_calculation-name){: #code_interface-define_calculation-name .spark-required} | `atom` |  | The name of the function that will be defined |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`calculation`](#code_interface-define_calculation-calculation){: #code_interface-define_calculation-calculation } | `atom` |  | The name of the calculation that will be evaluated. Defaults to the same name as the function. |\n| [`args`](#code_interface-define_calculation-args){: #code_interface-define_calculation-args } | `any` | `[]` | Supply field or argument values referenced by the calculation, in the form of :name, `{:arg, :name}` and/or `{:ref, :name}`. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.CalculationInterface`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"General resource configuration","ref":"dsl-ash-resource.html#resource","title":"resource - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nresource do\n  description \"A description of this resource\"\n  base_filter [is_nil: :deleted_at]\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#resource-description){: #resource-description } | `String.t` |  | A human readable description of the resource, to be used in generated documentation |\n| [`base_filter`](#resource-base_filter){: #resource-base_filter } | `any` |  | A filter statement to be applied to any queries on the resource |\n| [`default_context`](#resource-default_context){: #resource-default_context } | `any` |  | Default context to apply to any queries/changesets generated for this resource. |\n| [`trace_name`](#resource-trace_name){: #resource-trace_name } | `String.t` |  | The name to use in traces. Defaults to the short_name stringified. See the [monitoring guide](/documentation/topics/monitoring.md) for more. |\n| [`short_name`](#resource-short_name){: #resource-short_name } | `atom` |  | A short identifier for the resource, which should be unique. See the [monitoring guide](/documentation/topics/monitoring.md) for more. |\n| [`plural_name`](#resource-plural_name){: #resource-plural_name } | `atom` |  | A pluralized version of the resource short_name. May be used by generators or automated tooling. |\n| [`require_primary_key?`](#resource-require_primary_key?){: #resource-require_primary_key? } | `boolean` | `true` | Allow the resource to be used without any primary key fields. Warning: this option is experimental, and should not be used unless you know what you're doing. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Unique identifiers for the resource","ref":"dsl-ash-resource.html#identities","title":"identities - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [identity](#identities-identity)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nidentities do\n  identity :full_name, [:first_name, :last_name]\n  identity :email, [:email]\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nidentity name, keys\n```\n\n\nRepresents a unique constraint on the resource.\n\nSee the [identities guide](/documentation/topics/resources/identities.md) for more.","ref":"dsl-ash-resource.html#identities-identity","title":"identities.identity - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nidentity :name, [:name]\n```\n\n```\nidentity :full_name, [:first_name, :last_name]\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#identities-identity-name){: #identities-identity-name .spark-required} | `atom` |  | The name of the identity. |\n| [`keys`](#identities-identity-keys){: #identities-identity-keys .spark-required} | `atom \\| list(atom)` |  | The names of the attributes that uniquely identify this resource. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`where`](#identities-identity-where){: #identities-identity-where } | `any` |  | A filter that expresses only matching records are unique on the provided keys. Ignored on embedded resources. |\n| [`nils_distinct?`](#identities-identity-nils_distinct?){: #identities-identity-nils_distinct? } | `boolean` | `true` | Whether or not `nil` values are considered always distinct from eachother. `nil` values won't conflict with eachother unless you set this option to `false`. |\n| [`eager_check?`](#identities-identity-eager_check?){: #identities-identity-eager_check? } | `boolean` | `false` | Whether or not this identity is validated to be unique at validation time. |\n| [`eager_check_with`](#identities-identity-eager_check_with){: #identities-identity-eager_check_with } | `module` |  | Validates that the unique identity provided is unique at validation time, outside of any transactions, using the domain module provided. Will default to resource's domain. |\n| [`pre_check?`](#identities-identity-pre_check?){: #identities-identity-pre_check? } | `boolean` | `false` | Whether or not this identity is validated to be unique in a before_action hook. |\n| [`pre_check_with`](#identities-identity-pre_check_with){: #identities-identity-pre_check_with } | `module` |  | Validates that the unique identity provided is unique in a before_action hook. |\n| [`description`](#identities-identity-description){: #identities-identity-description } | `String.t` |  | An optional description for the identity |\n| [`message`](#identities-identity-message){: #identities-identity-message } | `String.t` |  | An error message to use when the unique identity would be violated |\n| [`all_tenants?`](#identities-identity-all_tenants?){: #identities-identity-all_tenants? } | `boolean` | `false` | Whether or not this identity is unique across all tenants. If the resource is not multitenant, has no effect. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Identity`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Declare changes that occur on create/update/destroy actions against the resource\n\nSee `Ash.Resource.Change` for more.","ref":"dsl-ash-resource.html#changes","title":"changes - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [change](#changes-change)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nchanges do\n  change {Mod, [foo: :bar]}\n  change set_context(%{some: :context})\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nchange change\n```\n\n\nA change to be applied to the changeset.\n\nSee `Ash.Resource.Change` for more.","ref":"dsl-ash-resource.html#changes-change","title":"changes.change - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`change`](#changes-change-change){: #changes-change-change .spark-required} | `(any, any -> any) \\| module` |  | The module and options for a change. Also accepts a function that takes the changeset and the context. See `Ash.Resource.Change.Builtins` for builtin changes. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`on`](#changes-change-on){: #changes-change-on } | `:create \\| :update \\| :destroy \\| list(:create \\| :update \\| :destroy)` | `[:create, :update]` | The action types the change should run on. Destroy actions are omitted by default as most changes don't make sense for a destroy. |\n| [`only_when_valid?`](#changes-change-only_when_valid?){: #changes-change-only_when_valid? } | `boolean` | `false` | If the change should only be run on valid changes. By default, all changes are run unless stated otherwise here. |\n| [`description`](#changes-change-description){: #changes-change-description } | `String.t` |  | An optional description for the change |\n| [`where`](#changes-change-where){: #changes-change-where } | `(any, any -> any) \\| module \\| list((any, any -> any) \\| module)` | `[]` | Validations that should pass in order for this change to apply. These validations failing will result in this change being ignored. |\n| [`always_atomic?`](#changes-change-always_atomic?){: #changes-change-always_atomic? } | `boolean` | `false` | By default, changes are only run atomically if all changes will be run atomically or if there is no `change/3` callback defined. Set this to `true` to run it atomically always. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Declare preparations that occur on all read actions for a given resource","ref":"dsl-ash-resource.html#preparations","title":"preparations - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [prepare](#preparations-prepare)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\npreparations do\n  prepare {Mod, [foo: :bar]}\n  prepare set_context(%{some: :context})\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nprepare preparation\n```\n\n\nDeclares a preparation, which can be used to prepare a query for a read action.","ref":"dsl-ash-resource.html#preparations-prepare","title":"preparations.prepare - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`preparation`](#preparations-prepare-preparation){: #preparations-prepare-preparation .spark-required} | `(any, any -> any) \\| module` |  | The module and options for a preparation. Also accepts functions take the query and the context. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Declare validations prior to performing actions against the resource","ref":"dsl-ash-resource.html#validations","title":"validations - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [validate](#validations-validate)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nvalidations do\n  validate {Mod, [foo: :bar]}\n  validate at_least_one_of_present([:first_name, :last_name])\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nvalidate validation\n```\n\n\nDeclares a validation for creates and updates.\n\nSee `Ash.Resource.Change` for more.","ref":"dsl-ash-resource.html#validations-validate","title":"validations.validate - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nvalidate {Mod, [foo: :bar]}\n```\n\n```\nvalidate at_least_one_of_present([:first_name, :last_name])\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`validation`](#validations-validate-validation){: #validations-validate-validation .spark-required} | `(any, any -> any) \\| module` |  | The module (or module and opts) that implements the `Ash.Resource.Validation` behaviour. Also accepts a function that receives the changeset and its context. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`where`](#validations-validate-where){: #validations-validate-where } | `(any, any -> any) \\| module \\| list((any, any -> any) \\| module)` | `[]` | Validations that should pass in order for this validation to apply. Any of these validations failing will result in this validation being ignored. |\n| [`on`](#validations-validate-on){: #validations-validate-on } | `:create \\| :update \\| :destroy \\| list(:create \\| :update \\| :destroy)` | `[:create, :update]` | The action types the validation should run on. Many validations don't make sense in the context of deletion, so by default it is not included. |\n| [`only_when_valid?`](#validations-validate-only_when_valid?){: #validations-validate-only_when_valid? } | `boolean` | `false` | If the validation should only run on valid changes. Useful for expensive validations or validations that depend on valid data. |\n| [`message`](#validations-validate-message){: #validations-validate-message } | `String.t` |  | If provided, overrides any message set by the validation error |\n| [`description`](#validations-validate-description){: #validations-validate-description } | `String.t` |  | An optional description for the validation |\n| [`before_action?`](#validations-validate-before_action?){: #validations-validate-before_action? } | `boolean` | `false` | If set to `true`, the validation will be run in a before_action hook |\n| [`always_atomic?`](#validations-validate-always_atomic?){: #validations-validate-always_atomic? } | `boolean` | `false` | By default, validations are only run atomically if all changes will be run atomically or if there is no `validate/3` callback defined. Set this to `true` to run it atomically always. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Declare named aggregates on the resource.\n\nThese are aggregates that can be loaded only by name using `Ash.Query.load/2`.\nThey are also available as top level fields on the resource.\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.","ref":"dsl-ash-resource.html#aggregates","title":"aggregates - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [count](#aggregates-count)\n   * join_filter\n * [exists](#aggregates-exists)\n   * join_filter\n * [first](#aggregates-first)\n   * join_filter\n * [sum](#aggregates-sum)\n   * join_filter\n * [list](#aggregates-list)\n   * join_filter\n * [max](#aggregates-max)\n   * join_filter\n * [min](#aggregates-min)\n   * join_filter\n * [avg](#aggregates-avg)\n   * join_filter\n * [custom](#aggregates-custom)\n   * join_filter","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\naggregates do\n  count :assigned_ticket_count, :reported_tickets do\n    filter [active: true]\n  end\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\ncount name, relationship_path\n```\n\n\nDeclares a named count aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect the count)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.","ref":"dsl-ash-resource.html#aggregates-count","title":"aggregates.count - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [join_filter](#aggregates-count-join_filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\ncount :assigned_ticket_count, :assigned_tickets do\n  filter [active: true]\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#aggregates-count-name){: #aggregates-count-name .spark-required} | `atom` |  | The field to place the aggregate in |\n| [`relationship_path`](#aggregates-count-relationship_path){: #aggregates-count-relationship_path .spark-required} | `atom \\| list(atom)` |  | The relationship or relationship path to use for the aggregate |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`uniq?`](#aggregates-count-uniq?){: #aggregates-count-uniq? } | `boolean` | `false` | Whether or not to count unique values only |\n| [`read_action`](#aggregates-count-read_action){: #aggregates-count-read_action } | `atom` |  | The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments. |\n| [`field`](#aggregates-count-field){: #aggregates-count-field } | `atom` |  | The field to aggregate. Defaults to the first field in the primary key of the resource |\n| [`filter`](#aggregates-count-filter){: #aggregates-count-filter } | `any` | `[]` | A filter to apply to the aggregate |\n| [`description`](#aggregates-count-description){: #aggregates-count-description } | `String.t` |  | An optional description for the aggregate |\n| [`default`](#aggregates-count-default){: #aggregates-count-default } | `any` |  | A default value to use in cases where nil would be used. Count defaults to `0`. |\n| [`public?`](#aggregates-count-public?){: #aggregates-count-public? } | `boolean` | `false` | Whether or not the aggregate will appear in public interfaces |\n| [`filterable?`](#aggregates-count-filterable?){: #aggregates-count-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the aggregate should be usable in filters. |\n| [`sortable?`](#aggregates-count-sortable?){: #aggregates-count-sortable? } | `boolean` | `true` | Whether or not the aggregate should be usable in sorts. |\n| [`sensitive?`](#aggregates-count-sensitive?){: #aggregates-count-sensitive? } | `boolean` | `false` | Whether or not the aggregate should be considered sensitive. |\n| [`authorize?`](#aggregates-count-authorize?){: #aggregates-count-authorize? } | `boolean` | `true` | Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\njoin_filter relationship_path, filter\n```\n\n\nDeclares a join filter on an aggregate. See the aggregates guide for more.","ref":"dsl-ash-resource.html#aggregates-count-join_filter","title":"aggregates.count.join_filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\njoin_filter [:comments, :author], expr(active == true)\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relationship_path`](#aggregates-count-join_filter-relationship_path){: #aggregates-count-join_filter-relationship_path } | `atom \\| list(atom)` |  | The relationship path on which to apply the join filter |\n| [`filter`](#aggregates-count-join_filter-filter){: #aggregates-count-join_filter-filter } | `any` |  | The filter to apply. Can be an expression or a filter template. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Aggregate.JoinFilter`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Aggregate`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nexists name, relationship_path\n```\n\n\nDeclares a named `exists` aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect if something exists)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.","ref":"dsl-ash-resource.html#aggregates-exists","title":"aggregates.exists - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [join_filter](#aggregates-exists-join_filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nexists :has_ticket, :assigned_tickets\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#aggregates-exists-name){: #aggregates-exists-name .spark-required} | `atom` |  | The field to place the aggregate in |\n| [`relationship_path`](#aggregates-exists-relationship_path){: #aggregates-exists-relationship_path .spark-required} | `atom \\| list(atom)` |  | The relationship or relationship path to use for the aggregate |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`read_action`](#aggregates-exists-read_action){: #aggregates-exists-read_action } | `atom` |  | The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments. |\n| [`filter`](#aggregates-exists-filter){: #aggregates-exists-filter } | `any` | `[]` | A filter to apply to the aggregate |\n| [`description`](#aggregates-exists-description){: #aggregates-exists-description } | `String.t` |  | An optional description for the aggregate |\n| [`default`](#aggregates-exists-default){: #aggregates-exists-default } | `any` |  | A default value to use in cases where nil would be used. Count defaults to `0`. |\n| [`public?`](#aggregates-exists-public?){: #aggregates-exists-public? } | `boolean` | `false` | Whether or not the aggregate will appear in public interfaces |\n| [`filterable?`](#aggregates-exists-filterable?){: #aggregates-exists-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the aggregate should be usable in filters. |\n| [`sortable?`](#aggregates-exists-sortable?){: #aggregates-exists-sortable? } | `boolean` | `true` | Whether or not the aggregate should be usable in sorts. |\n| [`sensitive?`](#aggregates-exists-sensitive?){: #aggregates-exists-sensitive? } | `boolean` | `false` | Whether or not the aggregate should be considered sensitive. |\n| [`authorize?`](#aggregates-exists-authorize?){: #aggregates-exists-authorize? } | `boolean` | `true` | Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\njoin_filter relationship_path, filter\n```\n\n\nDeclares a join filter on an aggregate. See the aggregates guide for more.","ref":"dsl-ash-resource.html#aggregates-exists-join_filter","title":"aggregates.exists.join_filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relationship_path`](#aggregates-exists-join_filter-relationship_path){: #aggregates-exists-join_filter-relationship_path } | `atom \\| list(atom)` |  | The relationship path on which to apply the join filter |\n| [`filter`](#aggregates-exists-join_filter-filter){: #aggregates-exists-join_filter-filter } | `any` |  | The filter to apply. Can be an expression or a filter template. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nfirst name, relationship_path, field\n```\n\n\nDeclares a named `first` aggregate on the resource\n\nFirst aggregates return the first value of the related record\nthat matches. Supports both `filter` and `sort`.\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.","ref":"dsl-ash-resource.html#aggregates-first","title":"aggregates.first - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [join_filter](#aggregates-first-join_filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nfirst :first_assigned_ticket_subject, :assigned_tickets, :subject do\n  filter [active: true]\n  sort [:subject]\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#aggregates-first-name){: #aggregates-first-name .spark-required} | `atom` |  | The field to place the aggregate in |\n| [`relationship_path`](#aggregates-first-relationship_path){: #aggregates-first-relationship_path .spark-required} | `atom \\| list(atom)` |  | The relationship or relationship path to use for the aggregate |\n| [`field`](#aggregates-first-field){: #aggregates-first-field } | `atom` |  | The field to aggregate. Defaults to the first field in the primary key of the resource |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`include_nil?`](#aggregates-first-include_nil?){: #aggregates-first-include_nil? } | `boolean` | `false` | Whether or not to include `nil` values in the aggregate. Only relevant for `list` and `first` aggregates. |\n| [`read_action`](#aggregates-first-read_action){: #aggregates-first-read_action } | `atom` |  | The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments. |\n| [`filter`](#aggregates-first-filter){: #aggregates-first-filter } | `any` | `[]` | A filter to apply to the aggregate |\n| [`sort`](#aggregates-first-sort){: #aggregates-first-sort } | `any` |  | A sort to be applied to the aggregate |\n| [`description`](#aggregates-first-description){: #aggregates-first-description } | `String.t` |  | An optional description for the aggregate |\n| [`default`](#aggregates-first-default){: #aggregates-first-default } | `any` |  | A default value to use in cases where nil would be used. Count defaults to `0`. |\n| [`public?`](#aggregates-first-public?){: #aggregates-first-public? } | `boolean` | `false` | Whether or not the aggregate will appear in public interfaces |\n| [`filterable?`](#aggregates-first-filterable?){: #aggregates-first-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the aggregate should be usable in filters. |\n| [`sortable?`](#aggregates-first-sortable?){: #aggregates-first-sortable? } | `boolean` | `true` | Whether or not the aggregate should be usable in sorts. |\n| [`sensitive?`](#aggregates-first-sensitive?){: #aggregates-first-sensitive? } | `boolean` | `false` | Whether or not the aggregate should be considered sensitive. |\n| [`authorize?`](#aggregates-first-authorize?){: #aggregates-first-authorize? } | `boolean` | `true` | Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\njoin_filter relationship_path, filter\n```\n\n\nDeclares a join filter on an aggregate. See the aggregates guide for more.","ref":"dsl-ash-resource.html#aggregates-first-join_filter","title":"aggregates.first.join_filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relationship_path`](#aggregates-first-join_filter-relationship_path){: #aggregates-first-join_filter-relationship_path } | `atom \\| list(atom)` |  | The relationship path on which to apply the join filter |\n| [`filter`](#aggregates-first-join_filter-filter){: #aggregates-first-join_filter-filter } | `any` |  | The filter to apply. Can be an expression or a filter template. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nsum name, relationship_path, field\n```\n\n\nDeclares a named `sum` aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect the sum)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.","ref":"dsl-ash-resource.html#aggregates-sum","title":"aggregates.sum - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [join_filter](#aggregates-sum-join_filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nsum :assigned_ticket_price_sum, :assigned_tickets, :price do\n  filter [active: true]\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#aggregates-sum-name){: #aggregates-sum-name .spark-required} | `atom` |  | The field to place the aggregate in |\n| [`relationship_path`](#aggregates-sum-relationship_path){: #aggregates-sum-relationship_path .spark-required} | `atom \\| list(atom)` |  | The relationship or relationship path to use for the aggregate |\n| [`field`](#aggregates-sum-field){: #aggregates-sum-field } | `atom` |  | The field to aggregate. Defaults to the first field in the primary key of the resource |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`read_action`](#aggregates-sum-read_action){: #aggregates-sum-read_action } | `atom` |  | The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments. |\n| [`filter`](#aggregates-sum-filter){: #aggregates-sum-filter } | `any` | `[]` | A filter to apply to the aggregate |\n| [`description`](#aggregates-sum-description){: #aggregates-sum-description } | `String.t` |  | An optional description for the aggregate |\n| [`default`](#aggregates-sum-default){: #aggregates-sum-default } | `any` |  | A default value to use in cases where nil would be used. Count defaults to `0`. |\n| [`public?`](#aggregates-sum-public?){: #aggregates-sum-public? } | `boolean` | `false` | Whether or not the aggregate will appear in public interfaces |\n| [`filterable?`](#aggregates-sum-filterable?){: #aggregates-sum-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the aggregate should be usable in filters. |\n| [`sortable?`](#aggregates-sum-sortable?){: #aggregates-sum-sortable? } | `boolean` | `true` | Whether or not the aggregate should be usable in sorts. |\n| [`sensitive?`](#aggregates-sum-sensitive?){: #aggregates-sum-sensitive? } | `boolean` | `false` | Whether or not the aggregate should be considered sensitive. |\n| [`authorize?`](#aggregates-sum-authorize?){: #aggregates-sum-authorize? } | `boolean` | `true` | Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\njoin_filter relationship_path, filter\n```\n\n\nDeclares a join filter on an aggregate. See the aggregates guide for more.","ref":"dsl-ash-resource.html#aggregates-sum-join_filter","title":"aggregates.sum.join_filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relationship_path`](#aggregates-sum-join_filter-relationship_path){: #aggregates-sum-join_filter-relationship_path } | `atom \\| list(atom)` |  | The relationship path on which to apply the join filter |\n| [`filter`](#aggregates-sum-join_filter-filter){: #aggregates-sum-join_filter-filter } | `any` |  | The filter to apply. Can be an expression or a filter template. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nlist name, relationship_path, field\n```\n\n\nDeclares a named `list` aggregate on the resource.\n\nA list aggregate selects the list of all values for the given field\nand relationship combination.\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.","ref":"dsl-ash-resource.html#aggregates-list","title":"aggregates.list - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [join_filter](#aggregates-list-join_filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nlist :assigned_ticket_prices, :assigned_tickets, :price do\n  filter [active: true]\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#aggregates-list-name){: #aggregates-list-name .spark-required} | `atom` |  | The field to place the aggregate in |\n| [`relationship_path`](#aggregates-list-relationship_path){: #aggregates-list-relationship_path .spark-required} | `atom \\| list(atom)` |  | The relationship or relationship path to use for the aggregate |\n| [`field`](#aggregates-list-field){: #aggregates-list-field } | `atom` |  | The field to aggregate. Defaults to the first field in the primary key of the resource |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`include_nil?`](#aggregates-list-include_nil?){: #aggregates-list-include_nil? } | `boolean` | `false` | Whether or not to include `nil` values in the aggregate. Only relevant for `list` and `first` aggregates. |\n| [`uniq?`](#aggregates-list-uniq?){: #aggregates-list-uniq? } | `boolean` | `false` | Whether or not to count unique values only |\n| [`read_action`](#aggregates-list-read_action){: #aggregates-list-read_action } | `atom` |  | The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments. |\n| [`filter`](#aggregates-list-filter){: #aggregates-list-filter } | `any` | `[]` | A filter to apply to the aggregate |\n| [`sort`](#aggregates-list-sort){: #aggregates-list-sort } | `any` |  | A sort to be applied to the aggregate |\n| [`description`](#aggregates-list-description){: #aggregates-list-description } | `String.t` |  | An optional description for the aggregate |\n| [`default`](#aggregates-list-default){: #aggregates-list-default } | `any` |  | A default value to use in cases where nil would be used. Count defaults to `0`. |\n| [`public?`](#aggregates-list-public?){: #aggregates-list-public? } | `boolean` | `false` | Whether or not the aggregate will appear in public interfaces |\n| [`filterable?`](#aggregates-list-filterable?){: #aggregates-list-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the aggregate should be usable in filters. |\n| [`sortable?`](#aggregates-list-sortable?){: #aggregates-list-sortable? } | `boolean` | `true` | Whether or not the aggregate should be usable in sorts. |\n| [`sensitive?`](#aggregates-list-sensitive?){: #aggregates-list-sensitive? } | `boolean` | `false` | Whether or not the aggregate should be considered sensitive. |\n| [`authorize?`](#aggregates-list-authorize?){: #aggregates-list-authorize? } | `boolean` | `true` | Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\njoin_filter relationship_path, filter\n```\n\n\nDeclares a join filter on an aggregate. See the aggregates guide for more.","ref":"dsl-ash-resource.html#aggregates-list-join_filter","title":"aggregates.list.join_filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relationship_path`](#aggregates-list-join_filter-relationship_path){: #aggregates-list-join_filter-relationship_path } | `atom \\| list(atom)` |  | The relationship path on which to apply the join filter |\n| [`filter`](#aggregates-list-join_filter-filter){: #aggregates-list-join_filter-filter } | `any` |  | The filter to apply. Can be an expression or a filter template. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nmax name, relationship_path, field\n```\n\n\nDeclares a named `max` aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect the max)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.","ref":"dsl-ash-resource.html#aggregates-max","title":"aggregates.max - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [join_filter](#aggregates-max-join_filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nmax :first_assigned_ticket_subject, :assigned_tickets, :severity do\n  filter [active: true]\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#aggregates-max-name){: #aggregates-max-name .spark-required} | `atom` |  | The field to place the aggregate in |\n| [`relationship_path`](#aggregates-max-relationship_path){: #aggregates-max-relationship_path .spark-required} | `atom \\| list(atom)` |  | The relationship or relationship path to use for the aggregate |\n| [`field`](#aggregates-max-field){: #aggregates-max-field } | `atom` |  | The field to aggregate. Defaults to the first field in the primary key of the resource |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`read_action`](#aggregates-max-read_action){: #aggregates-max-read_action } | `atom` |  | The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments. |\n| [`filter`](#aggregates-max-filter){: #aggregates-max-filter } | `any` | `[]` | A filter to apply to the aggregate |\n| [`description`](#aggregates-max-description){: #aggregates-max-description } | `String.t` |  | An optional description for the aggregate |\n| [`default`](#aggregates-max-default){: #aggregates-max-default } | `any` |  | A default value to use in cases where nil would be used. Count defaults to `0`. |\n| [`public?`](#aggregates-max-public?){: #aggregates-max-public? } | `boolean` | `false` | Whether or not the aggregate will appear in public interfaces |\n| [`filterable?`](#aggregates-max-filterable?){: #aggregates-max-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the aggregate should be usable in filters. |\n| [`sortable?`](#aggregates-max-sortable?){: #aggregates-max-sortable? } | `boolean` | `true` | Whether or not the aggregate should be usable in sorts. |\n| [`sensitive?`](#aggregates-max-sensitive?){: #aggregates-max-sensitive? } | `boolean` | `false` | Whether or not the aggregate should be considered sensitive. |\n| [`authorize?`](#aggregates-max-authorize?){: #aggregates-max-authorize? } | `boolean` | `true` | Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\njoin_filter relationship_path, filter\n```\n\n\nDeclares a join filter on an aggregate. See the aggregates guide for more.","ref":"dsl-ash-resource.html#aggregates-max-join_filter","title":"aggregates.max.join_filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relationship_path`](#aggregates-max-join_filter-relationship_path){: #aggregates-max-join_filter-relationship_path } | `atom \\| list(atom)` |  | The relationship path on which to apply the join filter |\n| [`filter`](#aggregates-max-join_filter-filter){: #aggregates-max-join_filter-filter } | `any` |  | The filter to apply. Can be an expression or a filter template. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nmin name, relationship_path, field\n```\n\n\nDeclares a named `min` aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect the min)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.","ref":"dsl-ash-resource.html#aggregates-min","title":"aggregates.min - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [join_filter](#aggregates-min-join_filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nmin :first_assigned_ticket_subject, :assigned_tickets, :severity do\n  filter [active: true]\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#aggregates-min-name){: #aggregates-min-name .spark-required} | `atom` |  | The field to place the aggregate in |\n| [`relationship_path`](#aggregates-min-relationship_path){: #aggregates-min-relationship_path .spark-required} | `atom \\| list(atom)` |  | The relationship or relationship path to use for the aggregate |\n| [`field`](#aggregates-min-field){: #aggregates-min-field } | `atom` |  | The field to aggregate. Defaults to the first field in the primary key of the resource |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`read_action`](#aggregates-min-read_action){: #aggregates-min-read_action } | `atom` |  | The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments. |\n| [`filter`](#aggregates-min-filter){: #aggregates-min-filter } | `any` | `[]` | A filter to apply to the aggregate |\n| [`description`](#aggregates-min-description){: #aggregates-min-description } | `String.t` |  | An optional description for the aggregate |\n| [`default`](#aggregates-min-default){: #aggregates-min-default } | `any` |  | A default value to use in cases where nil would be used. Count defaults to `0`. |\n| [`public?`](#aggregates-min-public?){: #aggregates-min-public? } | `boolean` | `false` | Whether or not the aggregate will appear in public interfaces |\n| [`filterable?`](#aggregates-min-filterable?){: #aggregates-min-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the aggregate should be usable in filters. |\n| [`sortable?`](#aggregates-min-sortable?){: #aggregates-min-sortable? } | `boolean` | `true` | Whether or not the aggregate should be usable in sorts. |\n| [`sensitive?`](#aggregates-min-sensitive?){: #aggregates-min-sensitive? } | `boolean` | `false` | Whether or not the aggregate should be considered sensitive. |\n| [`authorize?`](#aggregates-min-authorize?){: #aggregates-min-authorize? } | `boolean` | `true` | Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\njoin_filter relationship_path, filter\n```\n\n\nDeclares a join filter on an aggregate. See the aggregates guide for more.","ref":"dsl-ash-resource.html#aggregates-min-join_filter","title":"aggregates.min.join_filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relationship_path`](#aggregates-min-join_filter-relationship_path){: #aggregates-min-join_filter-relationship_path } | `atom \\| list(atom)` |  | The relationship path on which to apply the join filter |\n| [`filter`](#aggregates-min-join_filter-filter){: #aggregates-min-join_filter-filter } | `any` |  | The filter to apply. Can be an expression or a filter template. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\navg name, relationship_path, field\n```\n\n\nDeclares a named `avg` aggregate on the resource\n\nSupports `filter`, but not `sort` (because that wouldn't affect the avg)\n\nSee the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.","ref":"dsl-ash-resource.html#aggregates-avg","title":"aggregates.avg - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [join_filter](#aggregates-avg-join_filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\navg :assigned_ticket_price_sum, :assigned_tickets, :price do\n  filter [active: true]\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#aggregates-avg-name){: #aggregates-avg-name .spark-required} | `atom` |  | The field to place the aggregate in |\n| [`relationship_path`](#aggregates-avg-relationship_path){: #aggregates-avg-relationship_path .spark-required} | `atom \\| list(atom)` |  | The relationship or relationship path to use for the aggregate |\n| [`field`](#aggregates-avg-field){: #aggregates-avg-field } | `atom` |  | The field to aggregate. Defaults to the first field in the primary key of the resource |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`read_action`](#aggregates-avg-read_action){: #aggregates-avg-read_action } | `atom` |  | The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments. |\n| [`filter`](#aggregates-avg-filter){: #aggregates-avg-filter } | `any` | `[]` | A filter to apply to the aggregate |\n| [`description`](#aggregates-avg-description){: #aggregates-avg-description } | `String.t` |  | An optional description for the aggregate |\n| [`default`](#aggregates-avg-default){: #aggregates-avg-default } | `any` |  | A default value to use in cases where nil would be used. Count defaults to `0`. |\n| [`public?`](#aggregates-avg-public?){: #aggregates-avg-public? } | `boolean` | `false` | Whether or not the aggregate will appear in public interfaces |\n| [`filterable?`](#aggregates-avg-filterable?){: #aggregates-avg-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the aggregate should be usable in filters. |\n| [`sortable?`](#aggregates-avg-sortable?){: #aggregates-avg-sortable? } | `boolean` | `true` | Whether or not the aggregate should be usable in sorts. |\n| [`sensitive?`](#aggregates-avg-sensitive?){: #aggregates-avg-sensitive? } | `boolean` | `false` | Whether or not the aggregate should be considered sensitive. |\n| [`authorize?`](#aggregates-avg-authorize?){: #aggregates-avg-authorize? } | `boolean` | `true` | Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\njoin_filter relationship_path, filter\n```\n\n\nDeclares a join filter on an aggregate. See the aggregates guide for more.","ref":"dsl-ash-resource.html#aggregates-avg-join_filter","title":"aggregates.avg.join_filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relationship_path`](#aggregates-avg-join_filter-relationship_path){: #aggregates-avg-join_filter-relationship_path } | `atom \\| list(atom)` |  | The relationship path on which to apply the join filter |\n| [`filter`](#aggregates-avg-join_filter-filter){: #aggregates-avg-join_filter-filter } | `any` |  | The filter to apply. Can be an expression or a filter template. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\ncustom name, relationship_path, type\n```\n\n\nDeclares a named `custom` aggregate on the resource\n\nSupports `filter` and `sort`.\n\nCustom aggregates provide an `implementation` which must implement data layer specific callbacks.\n\nSee the relevant data layer documentation and the [aggregates guide](/documentation/topics/resources/aggregates.md) for more.","ref":"dsl-ash-resource.html#aggregates-custom","title":"aggregates.custom - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [join_filter](#aggregates-custom-join_filter)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\ncustom :author_names, :authors, :string do\n  implementation {StringAgg, delimiter: \",\"}\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#aggregates-custom-name){: #aggregates-custom-name .spark-required} | `atom` |  | The field to place the aggregate in |\n| [`relationship_path`](#aggregates-custom-relationship_path){: #aggregates-custom-relationship_path .spark-required} | `atom \\| list(atom)` |  | The relationship or relationship path to use for the aggregate |\n| [`type`](#aggregates-custom-type){: #aggregates-custom-type .spark-required} | `module` |  | The type of the value returned by the aggregate |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`implementation`](#aggregates-custom-implementation){: #aggregates-custom-implementation .spark-required} | `module` |  | The module that implements the relevant data layer callbacks |\n| [`read_action`](#aggregates-custom-read_action){: #aggregates-custom-read_action } | `atom` |  | The read action to use when building the aggregate. Defaults to the primary read action. Keep in mind this action must not have any required arguments. |\n| [`field`](#aggregates-custom-field){: #aggregates-custom-field } | `atom` |  | The field to aggregate. Defaults to the first field in the primary key of the resource |\n| [`filter`](#aggregates-custom-filter){: #aggregates-custom-filter } | `any` | `[]` | A filter to apply to the aggregate |\n| [`sort`](#aggregates-custom-sort){: #aggregates-custom-sort } | `any` |  | A sort to be applied to the aggregate |\n| [`description`](#aggregates-custom-description){: #aggregates-custom-description } | `String.t` |  | An optional description for the aggregate |\n| [`default`](#aggregates-custom-default){: #aggregates-custom-default } | `any` |  | A default value to use in cases where nil would be used. Count defaults to `0`. |\n| [`public?`](#aggregates-custom-public?){: #aggregates-custom-public? } | `boolean` | `false` | Whether or not the aggregate will appear in public interfaces |\n| [`filterable?`](#aggregates-custom-filterable?){: #aggregates-custom-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the aggregate should be usable in filters. |\n| [`sortable?`](#aggregates-custom-sortable?){: #aggregates-custom-sortable? } | `boolean` | `true` | Whether or not the aggregate should be usable in sorts. |\n| [`sensitive?`](#aggregates-custom-sensitive?){: #aggregates-custom-sensitive? } | `boolean` | `false` | Whether or not the aggregate should be considered sensitive. |\n| [`authorize?`](#aggregates-custom-authorize?){: #aggregates-custom-authorize? } | `boolean` | `true` | Whether or not the aggregate query should authorize based on the target action, if the parent query is authorized. Requires filter checks on the target action. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\njoin_filter relationship_path, filter\n```\n\n\nDeclares a join filter on an aggregate. See the aggregates guide for more.","ref":"dsl-ash-resource.html#aggregates-custom-join_filter","title":"aggregates.custom.join_filter - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relationship_path`](#aggregates-custom-join_filter-relationship_path){: #aggregates-custom-join_filter-relationship_path } | `atom \\| list(atom)` |  | The relationship path on which to apply the join filter |\n| [`filter`](#aggregates-custom-join_filter-filter){: #aggregates-custom-join_filter-filter } | `any` |  | The filter to apply. Can be an expression or a filter template. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Declare named calculations on the resource.\n\nThese are calculations that can be loaded only by name using `Ash.Query.load/2`.\nThey are also available as top level fields on the resource.\n\nSee the [calculations guide](/documentation/topics/resources/calculations.md) for more.","ref":"dsl-ash-resource.html#calculations","title":"calculations - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [calculate](#calculations-calculate)\n   * argument","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\ncalculations do\n  calculate :full_name, :string, MyApp.MyResource.FullName\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\ncalculate name, type, calculation \\\\ nil\n```\n\n\nDeclares a named calculation on the resource.\n\nTakes a module that must adopt the `Ash.Resource.Calculation` behaviour. See that module\nfor more information.\n\nTo ensure that the necessary fields are selected:\n\n1.) Specifying the `select` option on a calculation in the resource.\n2.) Define a `select/2` callback in the calculation module\n3.) Set `always_select?` on the attribute in question\n\nSee the [calculations guide](/documentation/topics/resources/calculations.md) for more.","ref":"dsl-ash-resource.html#calculations-calculate","title":"calculations.calculate - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"* [argument](#calculations-calculate-argument)","ref":"dsl-ash-resource.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"`Ash.Resource.Calculation` implementation example:\n```\ncalculate :full_name, :string, {MyApp.FullName, keys: [:first_name, :last_name]}, select: [:first_name, :last_name]\n```\n\n`expr/1` example:\n```\ncalculate :full_name, :string, expr(first_name <> \" \" <> last_name)\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#calculations-calculate-name){: #calculations-calculate-name .spark-required} | `atom` |  | The field name to use for the calculation value |\n| [`type`](#calculations-calculate-type){: #calculations-calculate-type .spark-required} | `any` |  | The type of the calculation. See `Ash.Type` for more. |\n| [`calculation`](#calculations-calculate-calculation){: #calculations-calculate-calculation .spark-required} | `(any, any -> any) \\| module \\| any` |  | The `module`, `{module, opts}` or `expr(...)` to use for the calculation. Also accepts a function that takes *a list of records* and produces a result for each record. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`async?`](#calculations-calculate-async?){: #calculations-calculate-async? } | `boolean` | `false` |  |\n| [`constraints`](#calculations-calculate-constraints){: #calculations-calculate-constraints } | `keyword` | `[]` | Constraints to provide to the type. See `Ash.Type` for more. |\n| [`description`](#calculations-calculate-description){: #calculations-calculate-description } | `String.t` |  | An optional description for the calculation |\n| [`public?`](#calculations-calculate-public?){: #calculations-calculate-public? } | `boolean` | `false` | Whether or not the calculation will appear in public interfaces. |\n| [`sensitive?`](#calculations-calculate-sensitive?){: #calculations-calculate-sensitive? } | `boolean` | `false` | Whether or not references to the calculation will be considered sensitive. |\n| [`load`](#calculations-calculate-load){: #calculations-calculate-load } | `any` | `[]` | A load statement to be applied if the calculation is used. |\n| [`allow_nil?`](#calculations-calculate-allow_nil?){: #calculations-calculate-allow_nil? } | `boolean` | `true` | Whether or not the calculation can return nil. |\n| [`filterable?`](#calculations-calculate-filterable?){: #calculations-calculate-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the calculation should be usable in filters. |\n| [`sortable?`](#calculations-calculate-sortable?){: #calculations-calculate-sortable? } | `boolean` | `true` | Whether or not the calculation can be referenced in sorts. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```elixir\nargument name, type\n```\n\n\nAn argument to be passed into the calculation's arguments map\n\nSee the [calculations guide](/documentation/topics/resources/calculations.md) for more.","ref":"dsl-ash-resource.html#calculations-calculate-argument","title":"calculations.calculate.argument - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nargument :params, :map do\n  default %{}\nend\n\n```\n\n```\nargument :retries, :integer do\n  allow_nil? false\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#calculations-calculate-argument-name){: #calculations-calculate-argument-name .spark-required} | `atom` |  | The name of the argument |\n| [`type`](#calculations-calculate-argument-type){: #calculations-calculate-argument-type .spark-required} | `module` |  | The type of the argument. See `Ash.Type` for more. |","ref":"dsl-ash-resource.html#arguments","title":"Arguments - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`default`](#calculations-calculate-argument-default){: #calculations-calculate-argument-default } | `(-> any) \\| mfa \\| any` |  | A default value to use for the argument if not provided |\n| [`allow_nil?`](#calculations-calculate-argument-allow_nil?){: #calculations-calculate-argument-allow_nil? } | `boolean` | `true` | Whether or not the argument value may be nil (or may be not provided) |\n| [`allow_expr?`](#calculations-calculate-argument-allow_expr?){: #calculations-calculate-argument-allow_expr? } | `boolean` | `false` | Allow passing expressions as argument values. Expressions cannot be type validated. |\n| [`constraints`](#calculations-calculate-argument-constraints){: #calculations-calculate-argument-constraints } | `keyword` | `[]` | Constraints to provide to the type when casting the value. See the type's documentation and `Ash.Type` for more. |","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Calculation.Argument`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Calculation`","ref":"dsl-ash-resource.html#introspection","title":"Introspection - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"Options for configuring the multitenancy behavior of a resource.\n\nTo specify a tenant, use `Ash.Query.set_tenant/2` or\n`Ash.Changeset.set_tenant/2` before passing it to an operation.\n\nSee the [multitenancy guide](/documentation/topics/advanced/multitenancy.md)","ref":"dsl-ash-resource.html#multitenancy","title":"multitenancy - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"```\nmultitenancy do\n  strategy :attribute\n  attribute :organization_id\n  global? true\nend\n\n```","ref":"dsl-ash-resource.html#examples","title":"Examples - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`strategy`](#multitenancy-strategy){: #multitenancy-strategy } | `:context \\| :attribute` | `:context` | Determine if multitenancy is performed with attribute filters or using data layer features. |\n| [`attribute`](#multitenancy-attribute){: #multitenancy-attribute } | `atom` |  | If using the `attribute` strategy, the attribute to use, e.g `org_id` |\n| [`global?`](#multitenancy-global?){: #multitenancy-global? } | `boolean` | `false` | Whether or not the data may be accessed without setting a tenant. For example, with attribute multitenancy, this allows accessing without filtering by the tenant attribute. |\n| [`parse_attribute`](#multitenancy-parse_attribute){: #multitenancy-parse_attribute } | `mfa` | `{Ash.Resource.Dsl, :identity, []}` | An mfa ({module, function, args}) pointing to a function that takes a tenant and returns the attribute value |\n\n\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ash-resource.html#options","title":"Options - DSL: Ash.Resource.Dsl","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: Ash.Domain.Dsl","ref":"dsl-ash-domain.html","title":"DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"General domain configuration","ref":"dsl-ash-domain.html#domain","title":"domain - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"```\ndomain do\n  description \"\"\"\n  Resources related to the flux capacitor.\n  \"\"\"\nend\n\n```","ref":"dsl-ash-domain.html#examples","title":"Examples - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#domain-description){: #domain-description } | `String.t` |  | A description for the domain. |","ref":"dsl-ash-domain.html#options","title":"Options - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"List the resources of this domain","ref":"dsl-ash-domain.html#resources","title":"resources - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"* [resource](#resources-resource)\n   * define\n   * define_calculation","ref":"dsl-ash-domain.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"```\nresources do\n  resource MyApp.Tweet\n  resource MyApp.Comment\nend\n\n```","ref":"dsl-ash-domain.html#examples","title":"Examples - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`allow`](#resources-allow){: #resources-allow } | `mfa` |  | Support a dynamic resource list by providing a callback that checks whether or not the resource should be allowed. |\n| [`allow_unregistered?`](#resources-allow_unregistered?){: #resources-allow_unregistered? } | `boolean` | `false` | Whether the domain will support only registered entries or not. |","ref":"dsl-ash-domain.html#options","title":"Options - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"```elixir\nresource resource\n```\n\n\nA resource present in the domain","ref":"dsl-ash-domain.html#resources-resource","title":"resources.resource - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"* [define](#resources-resource-define)\n * [define_calculation](#resources-resource-define_calculation)","ref":"dsl-ash-domain.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"```\nresource Foo\n```","ref":"dsl-ash-domain.html#examples","title":"Examples - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`resource`](#resources-resource-resource){: #resources-resource-resource .spark-required} | `module` |  |  |","ref":"dsl-ash-domain.html#arguments","title":"Arguments - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"```elixir\ndefine name\n```\n\n\nDefines a function with the corresponding name and arguments. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.","ref":"dsl-ash-domain.html#resources-resource-define","title":"resources.resource.define - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"```\ndefine :get_user_by_id, action: :get_by_id, args: [:id], get?: true\n```","ref":"dsl-ash-domain.html#examples","title":"Examples - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#resources-resource-define-name){: #resources-resource-define-name .spark-required} | `atom` |  | The name of the function that will be defined |","ref":"dsl-ash-domain.html#arguments","title":"Arguments - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`action`](#resources-resource-define-action){: #resources-resource-define-action } | `atom` |  | The name of the action that will be called. Defaults to the same name as the function. |\n| [`args`](#resources-resource-define-args){: #resources-resource-define-args } | `list(atom \\| {:optional, atom})` |  | Map specific arguments to named inputs. Can provide any argument/attributes that the action allows. |\n| [`not_found_error?`](#resources-resource-define-not_found_error?){: #resources-resource-define-not_found_error? } | `boolean` | `true` | If the action or interface is configured with `get?: true`, this determines whether or not an error is raised or `nil` is returned. |\n| [`require_reference?`](#resources-resource-define-require_reference?){: #resources-resource-define-require_reference? } | `boolean` | `true` | For update and destroy actions, require a resource or identifier to be passed in as the first argument. Not relevant for other action types. |\n| [`get?`](#resources-resource-define-get?){: #resources-resource-define-get? } | `boolean` | `false` | Expects to only receive a single result from a read action or a bulk update/destroy, and returns a single result instead of a list. Sets `require_reference?` to false automatically. |\n| [`get_by`](#resources-resource-define-get_by){: #resources-resource-define-get_by } | `atom \\| list(atom)` |  | Takes a list of fields and adds those fields as arguments, which will then be used to filter. Sets `get?` to true and `require_reference?` to false automatically. Adds filters for read, update and destroy actions, replacing the `record` first argument. |\n| [`get_by_identity`](#resources-resource-define-get_by_identity){: #resources-resource-define-get_by_identity } | `atom` |  | Takes an identity, gets its field list, and performs the same logic as `get_by` with those fields. Adds filters for read, update and destroy actions, replacing the `record` first argument. |","ref":"dsl-ash-domain.html#options","title":"Options - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.Interface`","ref":"dsl-ash-domain.html#introspection","title":"Introspection - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"```elixir\ndefine_calculation name\n```\n\n\nDefines a function with the corresponding name and arguments, that evaluates a calculation. Use `:_record` to take an instance of a record. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more.","ref":"dsl-ash-domain.html#resources-resource-define_calculation","title":"resources.resource.define_calculation - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"```\ndefine_calculation :referral_link, User, args: [:id]\n```\n\n```\ndefine_calculation :referral_link, User, args: [{:arg, :id}, {:ref, :id}]\n```","ref":"dsl-ash-domain.html#examples","title":"Examples - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#resources-resource-define_calculation-name){: #resources-resource-define_calculation-name .spark-required} | `atom` |  | The name of the function that will be defined |","ref":"dsl-ash-domain.html#arguments","title":"Arguments - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`calculation`](#resources-resource-define_calculation-calculation){: #resources-resource-define_calculation-calculation } | `atom` |  | The name of the calculation that will be evaluated. Defaults to the same name as the function. |\n| [`args`](#resources-resource-define_calculation-args){: #resources-resource-define_calculation-args } | `any` | `[]` | Supply field or argument values referenced by the calculation, in the form of :name, `{:arg, :name}` and/or `{:ref, :name}`. See the [code interface guide](/documentation/topics/resources/code-interfaces.md) for more. |","ref":"dsl-ash-domain.html#options","title":"Options - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"Target: `Ash.Resource.CalculationInterface`","ref":"dsl-ash-domain.html#introspection","title":"Introspection - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"Target: `Ash.Domain.Dsl.ResourceReference`","ref":"dsl-ash-domain.html#introspection","title":"Introspection - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"Options for how requests are executed using this domain","ref":"dsl-ash-domain.html#execution","title":"execution - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"```\nexecution do\n  timeout :timer.seconds(30)\nend\n\n```","ref":"dsl-ash-domain.html#examples","title":"Examples - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`timeout`](#execution-timeout){: #execution-timeout } | `timeout` | `:infinity` | The default timeout in milliseconds to use for requests using this domain. See the [timeouts guide](/documentation/topics/timeouts.md) for more. |\n| [`trace_name`](#execution-trace_name){: #execution-trace_name } | `String.t` |  | The name to use in traces. Defaults to the last part of the module. See the [monitoring guide](/documentation/topics/monitoring.md) for more |","ref":"dsl-ash-domain.html#options","title":"Options - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"Options for how requests are authorized using this domain. See the [Sensitive Data guide](/documentation/topics/security/sensitive-data.md) for more.","ref":"dsl-ash-domain.html#authorization","title":"authorization - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"```\nauthorization do\n  authorize :always\nend\n\n```","ref":"dsl-ash-domain.html#examples","title":"Examples - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`require_actor?`](#authorization-require_actor?){: #authorization-require_actor? } | `boolean` | `false` | Requires that an actor has been supplied. |\n| [`authorize`](#authorization-authorize){: #authorization-authorize } | `:always \\| :by_default \\| :when_requested` | `:by_default` | When to run authorization for a given request. |\n\n\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ash-domain.html#options","title":"Options - DSL: Ash.Domain.Dsl","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: Ash.Notifier.PubSub\n\nA builtin notifier to help you publish events over any kind of pub-sub tooling.\n\nThis is plug and play with `Phoenix.PubSub`, but could be used with any pubsub system.\n\nYou configure a module that defines a `broadcast/3` function, and then add some \"publications\"\nwhich configure under what conditions an event should be sent and what the topic should be.","ref":"dsl-ash-notifier-pubsub.html","title":"DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"It can be quite frustrating when setting up pub_sub when everything appears to be set up properly, but\nyou aren't receiving events. This usually means some kind of mismatch between the event names produced\nby the resource/config of your publications, and you can use the following flag to display debug\ninformation about all pub sub events.\n\n```elixir\nconfig :ash, :pub_sub, debug?: true\n```","ref":"dsl-ash-notifier-pubsub.html#debugging-pubsub","title":"Debugging PubSub - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"Often you want to include some piece of data in the thing being changed, like the `:id` attribute. This\nis done by providing a list as the topic, and using atoms which will be replaced by their corresponding\nvalues. They will ultimately be joined with `:`.\n\nFor example:\n\n```elixir\nprefix \"user\"\n\npublish :create, [\"created\", :user_id]\n```\n\nThis might publish a message to \"user:created:1\" for example.\n\nFor updates, if the field in the template is being changed, a message is sent\nto *both* values. So if you change `user 1` to `user 2`, the same message would\nbe published to `user:updated:1` and `user:updated:2`. If there are multiple\nattributes in the template, and they are all being changed, a message is sent for\nevery combination of substitutions.","ref":"dsl-ash-notifier-pubsub.html#topic-templates","title":"Topic Templates - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"If the previous value was `nil` or the field was not selected on the data passed into the action, then a\nnotification is not sent for the previous value.\n\nIf the new value is `nil` then a notification is not sent for the new value.","ref":"dsl-ash-notifier-pubsub.html#important","title":"Important - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"Templates may contain lists, in which case all combinations of values in the list will be used. Add\n`nil` to the list if you want to produce a pattern where that entry is omitted.\n\nThe atom `:_tenant` may be used. If the changeset has a tenant set on it, that\nvalue will be used, otherwise that combination of values is ignored.\n\nThe atom `:_pkey` may be used. It will be a stringified, concatenation of the primary key fields,\nor just the primary key if there is only one primary key field.\n\nThe atom `nil` may be used. It only makes sense to use it in the context of a list of alternatives,\nand adds a pattern where that part is skipped.\n\n```elixir\npublish :updated, [[:team_id, :_tenant], \"updated\", [:id, nil]]\n```\n\nWould produce the following messages, given a `team_id` of 1, a `tenant` of `org_1`, and an `id` of `50`:\n\n```elixir\n\"1:updated:50\"\n\"1:updated\"\n\"org_1:updated:50\"\n\"org_1:updated\"\n```","ref":"dsl-ash-notifier-pubsub.html#template-parts","title":"Template parts - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"It's possible to change the default delimiter used when generating topics. This is useful when working with message brokers\nlike RabbitMQ, which rely on a different set of delimiters for routing.\n\n\n```elixir\npub_sub do\n  delimiter \".\"\nend\n```","ref":"dsl-ash-notifier-pubsub.html#custom-delimiters","title":"Custom Delimiters - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"If you are using a phoenix `Endpoint` module for pubsub then this is unnecessary. If you want to use a custom pub sub started\nwith something like `{Phoenix.PubSub, name: MyName}`, then you can provide `MyName` to here.","ref":"dsl-ash-notifier-pubsub.html#named-pubsub-modules","title":"Named Pubsub modules - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"Configured with `broadcast_type`.\n\n- `:notification` just sends the notification\n- `:phoenix_broadcast` sends a `%Phoenix.Socket.Broadcast{}` (see above)\n- `:broadcast` sends `%{topic: (topic), event: (event), notification: (notification)}`","ref":"dsl-ash-notifier-pubsub.html#broadcast-types","title":"Broadcast Types - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"A section for configuring how resource actions are published over pubsub","ref":"dsl-ash-notifier-pubsub.html#pub_sub","title":"pub_sub - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"* [publish](#pub_sub-publish)\n * [publish_all](#pub_sub-publish_all)","ref":"dsl-ash-notifier-pubsub.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"```\npub_sub do\n  module MyEndpoint\n  prefix \"post\"\n\n  publish :destroy, [\"foo\", :id]\n  publish :update, [\"bar\", :name] event: \"name_change\"\n  publish_all :create, \"created\"\nend\n\n```","ref":"dsl-ash-notifier-pubsub.html#examples","title":"Examples - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`module`](#pub_sub-module){: #pub_sub-module .spark-required} | `atom` |  | The module to call `broadcast/3` on e.g module.broadcast(topic, event, message). |\n| [`prefix`](#pub_sub-prefix){: #pub_sub-prefix } | `String.t` |  | A prefix for all pubsub messages, e.g `users`. A message with `created` would be published as `users:created` |\n| [`delimiter`](#pub_sub-delimiter){: #pub_sub-delimiter } | `String.t` |  | A delimiter for building topics. Default is a colon (:) |\n| [`broadcast_type`](#pub_sub-broadcast_type){: #pub_sub-broadcast_type } | `:notification \\| :phoenix_broadcast \\| :broadcast` | `:notification` | What shape the event payloads will be in. See |\n| [`name`](#pub_sub-name){: #pub_sub-name } | `atom` |  | A named pub sub to pass as the first argument to broadcast. |","ref":"dsl-ash-notifier-pubsub.html#options","title":"Options - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"```elixir\npublish action, topic\n```\n\n\nConfigure a given action to publish its results over a given topic.","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish","title":"pub_sub.publish - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"```\npublish :create, \"created\"\n```\n\n```\npublish :assign, \"assigned\"\n\n```","ref":"dsl-ash-notifier-pubsub.html#examples","title":"Examples - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`action`](#pub_sub-publish-action){: #pub_sub-publish-action .spark-required} | `atom` |  | The name of the action that should be published |\n| [`topic`](#pub_sub-publish-topic){: #pub_sub-publish-topic .spark-required} | `any` |  | The topic to publish |","ref":"dsl-ash-notifier-pubsub.html#arguments","title":"Arguments - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`previous_values?`](#pub_sub-publish-previous_values?){: #pub_sub-publish-previous_values? } | `boolean` | `false` | Whether or not to publish messages with both the new values and the old values for referencing changed attributes |\n| [`event`](#pub_sub-publish-event){: #pub_sub-publish-event } | `String.t` |  | The name of the event to publish. Defaults to the action name |\n| [`dispatcher`](#pub_sub-publish-dispatcher){: #pub_sub-publish-dispatcher } | `atom` |  | The module to use as a dispatcher. If none is set, the pubsub module provided is used. |","ref":"dsl-ash-notifier-pubsub.html#options","title":"Options - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"Target: `Ash.Notifier.PubSub.Publication`","ref":"dsl-ash-notifier-pubsub.html#introspection","title":"Introspection - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"```elixir\npublish_all type, topic\n```\n\n\nWorks the same as `publish`, except that it takes a type and publishes all actions of that type.","ref":"dsl-ash-notifier-pubsub.html#pub_sub-publish_all","title":"pub_sub.publish_all - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"```\npublish_all :create, \"created\"\n```","ref":"dsl-ash-notifier-pubsub.html#examples","title":"Examples - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`type`](#pub_sub-publish_all-type){: #pub_sub-publish_all-type } | `:create \\| :update \\| :destroy` |  | Publish on all actions of a given type |\n| [`topic`](#pub_sub-publish_all-topic){: #pub_sub-publish_all-topic .spark-required} | `any` |  | The topic to publish |","ref":"dsl-ash-notifier-pubsub.html#arguments","title":"Arguments - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`action`](#pub_sub-publish_all-action){: #pub_sub-publish_all-action } | `atom` |  | The name of the action that should be published |\n| [`previous_values?`](#pub_sub-publish_all-previous_values?){: #pub_sub-publish_all-previous_values? } | `boolean` | `false` | Whether or not to publish messages with both the new values and the old values for referencing changed attributes |\n| [`event`](#pub_sub-publish_all-event){: #pub_sub-publish_all-event } | `String.t` |  | The name of the event to publish. Defaults to the action name |\n| [`dispatcher`](#pub_sub-publish_all-dispatcher){: #pub_sub-publish_all-dispatcher } | `atom` |  | The module to use as a dispatcher. If none is set, the pubsub module provided is used. |","ref":"dsl-ash-notifier-pubsub.html#options","title":"Options - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"Target: `Ash.Notifier.PubSub.Publication`\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ash-notifier-pubsub.html#introspection","title":"Introspection - DSL: Ash.Notifier.PubSub","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: Ash.Policy.Authorizer\n\nAn authorization extension for ash resources.\n\nTo add this extension to a resource, add it to the list of `authorizers` like so:\n\n```elixir\nuse Ash.Resource,\n  ...,\n  authorizers: [\n    Ash.Policy.Authorizer\n  ]\n```\n\nA resource can be given a set of policies, which are enforced on each call to a resource action.\n\nFor reads, policies can be configured to filter out data that the actor shouldn't see, as opposed to\nresulting in a forbidden error.\n\nSee the [policies guide](/documentation/topics/security/policies.md) for practical examples.\n\nPolicies are solved/managed via a boolean satisfiability solver. To read more about boolean satisfiability,\nsee this page: https://en.wikipedia.org/wiki/Boolean_satisfiability_problem. At the end of\nthe day, however, it is not necessary to understand exactly how Ash takes your\nauthorization requirements and determines if a request is allowed. The\nimportant thing to understand is that Ash may or may not run any/all of your\nauthorization rules as they may be deemed unnecessary. As such, authorization\nchecks should have no side effects. Ideally, the checks built-in to ash should\ncover the bulk of your needs.","ref":"dsl-ash-policy-authorizer.html","title":"DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"A section for declaring authorization policies.\n\nEach policy that applies must pass independently in order for the\nrequest to be authorized.\n\nSee the [policies guide](/documentation/topics/security/policies.md) for more.","ref":"dsl-ash-policy-authorizer.html#policies","title":"policies - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"* [policy](#policies-policy)\n   * authorize_if\n   * forbid_if\n   * authorize_unless\n   * forbid_unless\n * [policy_group](#policies-policy_group)\n   * policy\n     * authorize_if\n     * forbid_if\n     * authorize_unless\n     * forbid_unless\n * [bypass](#policies-bypass)\n   * authorize_if\n   * forbid_if\n   * authorize_unless\n   * forbid_unless","ref":"dsl-ash-policy-authorizer.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```\npolicies do\n  # Anything you can use in a condition, you can use in a check, and vice-versa\n  # This policy applies if the actor is a super_user\n  # Additionally, this policy is declared as a `bypass`. That means that this check is allowed to fail without\n  # failing the whole request, and that if this check *passes*, the entire request passes.\n  bypass actor_attribute_equals(:super_user, true) do\n    authorize_if always()\n  end\n\n  # This will likely be a common occurrence. Specifically, policies that apply to all read actions\n  policy action_type(:read) do\n    # unless the actor is an active user, forbid their request\n    forbid_unless actor_attribute_equals(:active, true)\n    # if the record is marked as public, authorize the request\n    authorize_if attribute(:public, true)\n    # if the actor is related to the data via that data's `owner` relationship, authorize the request\n    authorize_if relates_to_actor_via(:owner)\n  end\nend\n\n```","ref":"dsl-ash-policy-authorizer.html#examples","title":"Examples - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`default_access_type`](#policies-default_access_type){: #policies-default_access_type } | `:strict \\| :filter \\| :runtime` | `:filter` | The default access type of policies for this resource. |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\npolicy condition \\\\ nil\n```\n\n\nA policy has a name, a condition, and a list of checks.\n\nChecks apply logically in the order they are specified, from top to bottom.\nIf no check explicitly authorizes the request, then the request is forbidden.\nThis means that, if you want to \"blacklist\" instead of \"whitelist\", you likely\nwant to add an `authorize_if always()` at the bottom of your policy, like so:\n\n```elixir\npolicy action_type(:read) do\nforbid_if not_logged_in()\nforbid_if user_is_denylisted()\nforbid_if user_is_in_denylisted_group()\n\nauthorize_if always()\nend\n```\n\nIf the policy should always run, use the `always()` check, like so:\n\n```elixir\npolicy always() do\n...\nend\n```\n\nSee the [policies guide](/documentation/topics/security/policies.md) for more.","ref":"dsl-ash-policy-authorizer.html#policies-policy","title":"policies.policy - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"* [authorize_if](#policies-policy-authorize_if)\n * [forbid_if](#policies-policy-forbid_if)\n * [authorize_unless](#policies-policy-authorize_unless)\n * [forbid_unless](#policies-policy-forbid_unless)","ref":"dsl-ash-policy-authorizer.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`condition`](#policies-policy-condition){: #policies-policy-condition } | `any` |  | A check or list of checks that must be true in order for this policy to apply. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#policies-policy-description){: #policies-policy-description } | `String.t` |  | A description for the policy, used when explaining authorization results |\n| [`access_type`](#policies-policy-access_type){: #policies-policy-access_type } | `:strict \\| :filter \\| :runtime` |  | Determines how the policy is applied. See the guide for more. |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nauthorize_if check\n```\n\n\nIf the check is true, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy-authorize_if","title":"policies.policy.authorize_if - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```\nauthorize_if logged_in()\n```\n\n```\nauthorize_if actor_attribute_matches_record(:group, :group)\n```","ref":"dsl-ash-policy-authorizer.html#examples","title":"Examples - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-policy-authorize_if-check){: #policies-policy-authorize_if-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-policy-authorize_if-name){: #policies-policy-authorize_if-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"Target: `Ash.Policy.Check`","ref":"dsl-ash-policy-authorizer.html#introspection","title":"Introspection - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nforbid_if check\n```\n\n\nIf the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy-forbid_if","title":"policies.policy.forbid_if - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```\nforbid_if not_logged_in()\n```\n\n```\nforbid_if actor_attribute_matches_record(:group, :blacklisted_groups)\n```","ref":"dsl-ash-policy-authorizer.html#examples","title":"Examples - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-policy-forbid_if-check){: #policies-policy-forbid_if-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-policy-forbid_if-name){: #policies-policy-forbid_if-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nauthorize_unless check\n```\n\n\nIf the check is false, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy-authorize_unless","title":"policies.policy.authorize_unless - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```\nauthorize_unless not_logged_in()\n```\n\n```\nauthorize_unless actor_attribute_matches_record(:group, :blacklisted_groups)\n```","ref":"dsl-ash-policy-authorizer.html#examples","title":"Examples - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-policy-authorize_unless-check){: #policies-policy-authorize_unless-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-policy-authorize_unless-name){: #policies-policy-authorize_unless-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nforbid_unless check\n```\n\n\nIf the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy-forbid_unless","title":"policies.policy.forbid_unless - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```\nforbid_unless logged_in()\n```\n\n```\nforbid_unless actor_attribute_matches_record(:group, :group)\n```","ref":"dsl-ash-policy-authorizer.html#examples","title":"Examples - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-policy-forbid_unless-check){: #policies-policy-forbid_unless-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-policy-forbid_unless-name){: #policies-policy-forbid_unless-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"Target: `Ash.Policy.Policy`","ref":"dsl-ash-policy-authorizer.html#introspection","title":"Introspection - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\npolicy_group condition\n```\n\n\nGroups a set of policies together by some condition.\n\nIf the condition on the policy group does not apply, then none of the policies within it apply.\n\nThis is primarily syntactic sugar. At compile time, the conditions from the policy group are\nadded to each policy it contains, and the list is flattened out. This exists primarily to make it\neasier to reason about and write policies.\n\nThe following are equivalent:\n\n```elixir\npolicy_group condition1 do\npolicy condition2 do\n...\nend\n\npolicy condition3 do\n...\nend\nend\n```\n\nand\n\n```elixir\npolicy [condition1, condition2] do\n...\nend\n\npolicy [condition1, condition3] do\n...\nend\n```","ref":"dsl-ash-policy-authorizer.html#policies-policy_group","title":"policies.policy_group - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"* [policy](#policies-policy_group-policy)\n   * authorize_if\n   * forbid_if\n   * authorize_unless\n   * forbid_unless","ref":"dsl-ash-policy-authorizer.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`condition`](#policies-policy_group-condition){: #policies-policy_group-condition } | `any` |  | A check or list of checks that must be true in order for this policy to apply. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\npolicy condition \\\\ nil\n```\n\n\nA policy has a name, a condition, and a list of checks.\n\nChecks apply logically in the order they are specified, from top to bottom.\nIf no check explicitly authorizes the request, then the request is forbidden.\nThis means that, if you want to \"blacklist\" instead of \"whitelist\", you likely\nwant to add an `authorize_if always()` at the bottom of your policy, like so:\n\n```elixir\npolicy action_type(:read) do\nforbid_if not_logged_in()\nforbid_if user_is_denylisted()\nforbid_if user_is_in_denylisted_group()\n\nauthorize_if always()\nend\n```\n\nIf the policy should always run, use the `always()` check, like so:\n\n```elixir\npolicy always() do\n...\nend\n```\n\nSee the [policies guide](/documentation/topics/security/policies.md) for more.","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy","title":"policies.policy_group.policy - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"* [authorize_if](#policies-policy_group-policy-authorize_if)\n * [forbid_if](#policies-policy_group-policy-forbid_if)\n * [authorize_unless](#policies-policy_group-policy-authorize_unless)\n * [forbid_unless](#policies-policy_group-policy-forbid_unless)","ref":"dsl-ash-policy-authorizer.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`condition`](#policies-policy_group-policy-condition){: #policies-policy_group-policy-condition } | `any` |  | A check or list of checks that must be true in order for this policy to apply. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#policies-policy_group-policy-description){: #policies-policy_group-policy-description } | `String.t` |  | A description for the policy, used when explaining authorization results |\n| [`access_type`](#policies-policy_group-policy-access_type){: #policies-policy_group-policy-access_type } | `:strict \\| :filter \\| :runtime` |  | Determines how the policy is applied. See the guide for more. |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nauthorize_if check\n```\n\n\nIf the check is true, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-authorize_if","title":"policies.policy_group.policy.authorize_if - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-policy_group-policy-authorize_if-check){: #policies-policy_group-policy-authorize_if-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-policy_group-policy-authorize_if-name){: #policies-policy_group-policy-authorize_if-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nforbid_if check\n```\n\n\nIf the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-forbid_if","title":"policies.policy_group.policy.forbid_if - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-policy_group-policy-forbid_if-check){: #policies-policy_group-policy-forbid_if-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-policy_group-policy-forbid_if-name){: #policies-policy_group-policy-forbid_if-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nauthorize_unless check\n```\n\n\nIf the check is false, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-authorize_unless","title":"policies.policy_group.policy.authorize_unless - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-policy_group-policy-authorize_unless-check){: #policies-policy_group-policy-authorize_unless-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-policy_group-policy-authorize_unless-name){: #policies-policy_group-policy-authorize_unless-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nforbid_unless check\n```\n\n\nIf the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-policy_group-policy-forbid_unless","title":"policies.policy_group.policy.forbid_unless - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-policy_group-policy-forbid_unless-check){: #policies-policy_group-policy-forbid_unless-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-policy_group-policy-forbid_unless-name){: #policies-policy_group-policy-forbid_unless-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"Target: `Ash.Policy.PolicyGroup`","ref":"dsl-ash-policy-authorizer.html#introspection","title":"Introspection - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nbypass condition \\\\ nil\n```\n\n\nA policy that, if passed, will skip all following policies. If failed, authorization moves on to the next policy","ref":"dsl-ash-policy-authorizer.html#policies-bypass","title":"policies.bypass - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"* [authorize_if](#policies-bypass-authorize_if)\n * [forbid_if](#policies-bypass-forbid_if)\n * [authorize_unless](#policies-bypass-authorize_unless)\n * [forbid_unless](#policies-bypass-forbid_unless)","ref":"dsl-ash-policy-authorizer.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`condition`](#policies-bypass-condition){: #policies-bypass-condition } | `any` |  | A check or list of checks that must be true in order for this policy to apply. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#policies-bypass-description){: #policies-bypass-description } | `String.t` |  | A description for the policy, used when explaining authorization results |\n| [`access_type`](#policies-bypass-access_type){: #policies-bypass-access_type } | `:strict \\| :filter \\| :runtime` |  | Determines how the policy is applied. See the guide for more. |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nauthorize_if check\n```\n\n\nIf the check is true, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-bypass-authorize_if","title":"policies.bypass.authorize_if - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-bypass-authorize_if-check){: #policies-bypass-authorize_if-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-bypass-authorize_if-name){: #policies-bypass-authorize_if-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nforbid_if check\n```\n\n\nIf the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-bypass-forbid_if","title":"policies.bypass.forbid_if - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-bypass-forbid_if-check){: #policies-bypass-forbid_if-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-bypass-forbid_if-name){: #policies-bypass-forbid_if-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nauthorize_unless check\n```\n\n\nIf the check is false, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-bypass-authorize_unless","title":"policies.bypass.authorize_unless - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-bypass-authorize_unless-check){: #policies-bypass-authorize_unless-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-bypass-authorize_unless-name){: #policies-bypass-authorize_unless-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nforbid_unless check\n```\n\n\nIf the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#policies-bypass-forbid_unless","title":"policies.bypass.forbid_unless - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#policies-bypass-forbid_unless-check){: #policies-bypass-forbid_unless-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#policies-bypass-forbid_unless-name){: #policies-bypass-forbid_unless-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"Authorize access to specific fields via policies scoped to fields.\n\nIf *any* field policies exist then *all* fields must be authorized by a field policy.\nIf you want a \"deny-list\" style, then you can add policies for specific fields\nand add a catch-all policy using the special field name `:*`. All policies that apply\nto a field must be authorized.\n\nThe only exception to the above behavior is primary keys, which can always be read by everyone.\n\nAdditionally, keep in mind that adding `Ash.Policy.Authorizer` will require that all actions\npass policies. If you want to just add field policies, you will need to add a policy that allows\nall access explicitly, i.e\n\n```elixir\npolicies do\npolicy always() do\nauthorize_if always()\nend\nend\n```\n\nUsing expressions: unlike in regular policies, expressions in field policies cannot refer\nto related entities currently. Instead, you will need to create aggregates or expression calculations\nthat return the results you want to reference.\n\nIn results, forbidden fields will be replaced with a special value: `%Ash.ForbiddenField{}`.\n\nWhen these fields are referred to in filters, they will be replaced with an expression that evaluates\nto `nil`. To support this behavior, only expression/filter checks are allowed in field policies.","ref":"dsl-ash-policy-authorizer.html#field_policies","title":"field_policies - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"* [field_policy_bypass](#field_policies-field_policy_bypass)\n   * authorize_if\n   * forbid_if\n   * authorize_unless\n   * forbid_unless\n * [field_policy](#field_policies-field_policy)\n   * authorize_if\n   * forbid_if\n   * authorize_unless\n   * forbid_unless","ref":"dsl-ash-policy-authorizer.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```\nfield_policies do\n  field_policy :admin_only_field do\n    authorize_if actor_attribute_equals(:admin, true)\n  end\nend\n\n```\n\n```\n# Example of denylist style\nfield_policies do\n  field_policy [:sensitive, :fields] do\n    authorize_if actor_attribute_equals(:admin, true)\n  end\n\n  field_policy :* do\n    authorize_if always()\n  end\nend\n\n```","ref":"dsl-ash-policy-authorizer.html#examples","title":"Examples - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`private_fields`](#field_policies-private_fields){: #field_policies-private_fields } | `:show \\| :hide \\| :include` | `:show` | How private fields should be handeled by field policies in internal functions. See the [Policies guide](documentation/topics/security/policies.md#field-policies) for more. |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nfield_policy_bypass fields, condition \\\\ nil\n```\n\n\nA field policy that, if passed, will skip all following field policies for that field or fields. If failed, field authorization moves on to the next policy","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass","title":"field_policies.field_policy_bypass - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"* [authorize_if](#field_policies-field_policy_bypass-authorize_if)\n * [forbid_if](#field_policies-field_policy_bypass-forbid_if)\n * [authorize_unless](#field_policies-field_policy_bypass-authorize_unless)\n * [forbid_unless](#field_policies-field_policy_bypass-forbid_unless)","ref":"dsl-ash-policy-authorizer.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`fields`](#field_policies-field_policy_bypass-fields){: #field_policies-field_policy_bypass-fields } | `atom \\| list(atom)` |  | The field or fields that the policy applies to. |\n| [`condition`](#field_policies-field_policy_bypass-condition){: #field_policies-field_policy_bypass-condition } | `any` |  | A check or list of checks that must be true in order for this field policy to apply. If not specified, it always applies. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#field_policies-field_policy_bypass-description){: #field_policies-field_policy_bypass-description } | `String.t` |  | A description for the policy, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nauthorize_if check\n```\n\n\nIf the check is true, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-authorize_if","title":"field_policies.field_policy_bypass.authorize_if - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#field_policies-field_policy_bypass-authorize_if-check){: #field_policies-field_policy_bypass-authorize_if-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#field_policies-field_policy_bypass-authorize_if-name){: #field_policies-field_policy_bypass-authorize_if-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nforbid_if check\n```\n\n\nIf the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-forbid_if","title":"field_policies.field_policy_bypass.forbid_if - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#field_policies-field_policy_bypass-forbid_if-check){: #field_policies-field_policy_bypass-forbid_if-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#field_policies-field_policy_bypass-forbid_if-name){: #field_policies-field_policy_bypass-forbid_if-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nauthorize_unless check\n```\n\n\nIf the check is false, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-authorize_unless","title":"field_policies.field_policy_bypass.authorize_unless - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#field_policies-field_policy_bypass-authorize_unless-check){: #field_policies-field_policy_bypass-authorize_unless-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#field_policies-field_policy_bypass-authorize_unless-name){: #field_policies-field_policy_bypass-authorize_unless-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nforbid_unless check\n```\n\n\nIf the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy_bypass-forbid_unless","title":"field_policies.field_policy_bypass.forbid_unless - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#field_policies-field_policy_bypass-forbid_unless-check){: #field_policies-field_policy_bypass-forbid_unless-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#field_policies-field_policy_bypass-forbid_unless-name){: #field_policies-field_policy_bypass-forbid_unless-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"Target: `Ash.Policy.FieldPolicy`","ref":"dsl-ash-policy-authorizer.html#introspection","title":"Introspection - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nfield_policy fields, condition \\\\ nil\n```\n\n\nField policies behave similarly to policies. See `d:Ash.Policy.Authorizer.field_policies`\nfor more.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy","title":"field_policies.field_policy - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"* [authorize_if](#field_policies-field_policy-authorize_if)\n * [forbid_if](#field_policies-field_policy-forbid_if)\n * [authorize_unless](#field_policies-field_policy-authorize_unless)\n * [forbid_unless](#field_policies-field_policy-forbid_unless)","ref":"dsl-ash-policy-authorizer.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`fields`](#field_policies-field_policy-fields){: #field_policies-field_policy-fields } | `atom \\| list(atom)` |  | The field or fields that the policy applies to. |\n| [`condition`](#field_policies-field_policy-condition){: #field_policies-field_policy-condition } | `any` |  | A check or list of checks that must be true in order for this field policy to apply. If not specified, it always applies. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`description`](#field_policies-field_policy-description){: #field_policies-field_policy-description } | `String.t` |  | A description for the policy, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nauthorize_if check\n```\n\n\nIf the check is true, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-authorize_if","title":"field_policies.field_policy.authorize_if - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#field_policies-field_policy-authorize_if-check){: #field_policies-field_policy-authorize_if-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#field_policies-field_policy-authorize_if-name){: #field_policies-field_policy-authorize_if-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nforbid_if check\n```\n\n\nIf the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-forbid_if","title":"field_policies.field_policy.forbid_if - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#field_policies-field_policy-forbid_if-check){: #field_policies-field_policy-forbid_if-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#field_policies-field_policy-forbid_if-name){: #field_policies-field_policy-forbid_if-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nauthorize_unless check\n```\n\n\nIf the check is false, the request is authorized, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-authorize_unless","title":"field_policies.field_policy.authorize_unless - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#field_policies-field_policy-authorize_unless-check){: #field_policies-field_policy-authorize_unless-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#field_policies-field_policy-authorize_unless-name){: #field_policies-field_policy-authorize_unless-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"```elixir\nforbid_unless check\n```\n\n\nIf the check is true, the request is forbidden, otherwise run remaining checks.","ref":"dsl-ash-policy-authorizer.html#field_policies-field_policy-forbid_unless","title":"field_policies.field_policy.forbid_unless - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`check`](#field_policies-field_policy-forbid_unless-check){: #field_policies-field_policy-forbid_unless-check .spark-required} | `module \\| any` |  | The check to run. See `Ash.Policy.Check` for more. |","ref":"dsl-ash-policy-authorizer.html#arguments","title":"Arguments - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#field_policies-field_policy-forbid_unless-name){: #field_policies-field_policy-forbid_unless-name } | `String.t` |  | A short name or description for the check, used when explaining authorization results |","ref":"dsl-ash-policy-authorizer.html#options","title":"Options - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"Target: `Ash.Policy.FieldPolicy`\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ash-policy-authorizer.html#introspection","title":"Introspection - DSL: Ash.Policy.Authorizer","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: Ash.DataLayer.Ets\n\nAn ETS (Erlang Term Storage) backed Ash Datalayer, for testing and lightweight usage.\n\nRemember, this does not have support for transactions! This is not recommended for production\nuse, especially in multi-user applications. It can, however, be great for prototyping.","ref":"dsl-ash-datalayer-ets.html","title":"DSL: Ash.DataLayer.Ets","type":"extras"},{"doc":"A section for configuring the ets data layer","ref":"dsl-ash-datalayer-ets.html#ets","title":"ets - DSL: Ash.DataLayer.Ets","type":"extras"},{"doc":"```\nets do\n  # Used in testing\n  private? true\nend\n\n```","ref":"dsl-ash-datalayer-ets.html#examples","title":"Examples - DSL: Ash.DataLayer.Ets","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`private?`](#ets-private?){: #ets-private? } | `boolean` | `false` | Sets the ets table protection to private, and scopes it to only this process. The table name will not be used directly if this is true, to allow multiple processes to use this resource separately. |\n| [`table`](#ets-table){: #ets-table } | `atom` |  | The name of the table. Defaults to the resource name. |\n\n\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ash-datalayer-ets.html#options","title":"Options - DSL: Ash.DataLayer.Ets","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: Ash.DataLayer.Mnesia\n\nAn Mnesia backed Ash Datalayer.\n\nIn your application initialization, you will need to call `Mnesia.create_schema([node()])`.\n\nAdditionally, you will want to create your mnesia tables there.\n\nThis data layer is *unoptimized*, fetching all records from a table and filtering them\nin memory. For that reason, it is not recommended to use it with large amounts of data. It can be\ngreat for prototyping or light usage, though.","ref":"dsl-ash-datalayer-mnesia.html","title":"DSL: Ash.DataLayer.Mnesia","type":"extras"},{"doc":"A section for configuring the mnesia data layer","ref":"dsl-ash-datalayer-mnesia.html#mnesia","title":"mnesia - DSL: Ash.DataLayer.Mnesia","type":"extras"},{"doc":"```\nmnesia do\n  table :custom_table\nend\n\n```","ref":"dsl-ash-datalayer-mnesia.html#examples","title":"Examples - DSL: Ash.DataLayer.Mnesia","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`table`](#mnesia-table){: #mnesia-table } | `atom` |  | The table name to use, defaults to the name of the resource |\n\n\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ash-datalayer-mnesia.html#options","title":"Options - DSL: Ash.DataLayer.Mnesia","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: Ash.Reactor\n\n`Ash.Reactor` is a [`Reactor`](https://hex.pm/packages/reactor) extension\nwhich provides steps for working with Ash resources and actions.\n\nSee the [Ash Reactor Guide](https://hexdocs.pm/ash/reactor.html) for more\ninformation.","ref":"dsl-ash-reactor.html","title":"DSL: Ash.Reactor","type":"extras"},{"doc":"Ash-related configuration for the `Ash.Reactor` extension","ref":"dsl-ash-reactor.html#ash","title":"ash - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`default_domain`](#ash-default_domain){: #ash-default_domain } | `module` |  | A domain to use by default when calling actions |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\naction name, resource, action \\\\ nil\n```\n\n\nDeclares a step that will call a generic action on a resource.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.","ref":"dsl-ash-reactor.html#reactor-action","title":"reactor.action - DSL: Ash.Reactor","type":"extras"},{"doc":"* [actor](#reactor-action-actor)\n * [inputs](#reactor-action-inputs)\n * [tenant](#reactor-action-tenant)\n * [wait_for](#reactor-action-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-action-name){: #reactor-action-name .spark-required} | `atom` |  | A unique name for the step. |\n| [`resource`](#reactor-action-resource){: #reactor-action-resource .spark-required} | `module` |  | The resource to call the action on. |\n| [`action`](#reactor-action-action){: #reactor-action-action } | `atom` |  | The name of the action to call on the resource. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`domain`](#reactor-action-domain){: #reactor-action-domain } | `module` |  | The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section. |\n| [`async?`](#reactor-action-async?){: #reactor-action-async? } | `boolean` | `true` | When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`. |\n| [`authorize?`](#reactor-action-authorize?){: #reactor-action-authorize? } | `boolean \\| nil` |  | Explicitly enable or disable authorization for the action. |\n| [`description`](#reactor-action-description){: #reactor-action-description } | `String.t` |  | A description for the step |\n| [`undo_action`](#reactor-action-undo_action){: #reactor-action-undo_action } | `atom` |  | The name of the action to call on the resource when the step is to be undone. |\n| [`undo`](#reactor-action-undo){: #reactor-action-undo } | `:always \\| :never \\| :outside_transaction` | `:never` | How to handle undoing this action |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nactor source\n```\n\n\nSpecifies the action actor","ref":"dsl-ash-reactor.html#reactor-action-actor","title":"reactor.action.actor - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-action-actor-source){: #reactor-action-actor-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the actor. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-action-actor-transform){: #reactor-action-actor-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the actor before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.Actor`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ninputs template\n```\n\n\nSpecify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-action-inputs","title":"reactor.action.inputs - DSL: Ash.Reactor","type":"extras"},{"doc":"```\ninputs %{\n  author: result(:get_user),\n  title: input(:title),\n  body: input(:body)\n}\n\n```\n\n```\ninputs(author: result(:get_user))\n\n```","ref":"dsl-ash-reactor.html#examples","title":"Examples - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`template`](#reactor-action-inputs-template){: #reactor-action-inputs-template .spark-required} | `%{optional(atom) => Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value} \\| keyword(Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value)` |  |  |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-action-inputs-transform){: #reactor-action-inputs-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which will transform the inputs before executing the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.Inputs`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ntenant source\n```\n\n\nSpecifies the action tenant","ref":"dsl-ash-reactor.html#reactor-action-tenant","title":"reactor.action.tenant - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-action-tenant-source){: #reactor-action-tenant-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the tenant. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-action-tenant-transform){: #reactor-action-tenant-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the tenant before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.Tenant`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-action-wait_for","title":"reactor.action.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"```\nwait_for :create_user\n```","ref":"dsl-ash-reactor.html#examples","title":"Examples - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-action-wait_for-names){: #reactor-action-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Reactor.Dsl.WaitFor`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.Action`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nash_step name, impl \\\\ nil\n```\n\n\nSpecifies a Ash.Reactor step.\n\nThis is basically a wrapper around `Reactor.step`, in order to handle\nany returned notifications from the run step/function.\n\nSee the `Reactor.Step` behaviour for more information.","ref":"dsl-ash-reactor.html#reactor-ash_step","title":"reactor.ash_step - DSL: Ash.Reactor","type":"extras"},{"doc":"* [argument](#reactor-ash_step-argument)\n * [wait_for](#reactor-ash_step-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"```\nash_step :create_post, MyApp.CreatePostStep do\n  argument :title, input(:title)\nend\n\n```\n\n```\nash_step :create_post do\n  argument :title, input(:title)\n\n  run fn %{title: title}, _ ->\n    MyApp.Post.create(title, return_notifications?: true)\n  end\nend\n\n```","ref":"dsl-ash-reactor.html#examples","title":"Examples - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-ash_step-name){: #reactor-ash_step-name .spark-required} | `atom` |  | A unique name for the step. Used when choosing the return value of the Reactor and for arguments into other steps. |\n| [`impl`](#reactor-ash_step-impl){: #reactor-ash_step-impl } | `module \\| nil` |  | A module that implements the `Reactor.Step` behaviour that provides the implementation. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`run`](#reactor-ash_step-run){: #reactor-ash_step-run } | `(any -> any) \\| mfa \\| (any, any -> any) \\| mfa` |  | Provide an anonymous function which implements the `run/3` callback. Cannot be provided at the same time as the `impl` argument. |\n| [`undo`](#reactor-ash_step-undo){: #reactor-ash_step-undo } | `(any -> any) \\| mfa \\| (any, any -> any) \\| mfa \\| (any, any, any -> any) \\| mfa` |  | Provide an anonymous function which implements the `undo/4` callback. Cannot be provided at the same time as the `impl` argument. |\n| [`compensate`](#reactor-ash_step-compensate){: #reactor-ash_step-compensate } | `(any -> any) \\| mfa \\| (any, any -> any) \\| mfa \\| (any, any, any -> any) \\| mfa` |  | Provide an anonymous function which implements the `undo/4` callback. Cannot be provided at the same time as the `impl` argument. |\n| [`max_retries`](#reactor-ash_step-max_retries){: #reactor-ash_step-max_retries } | `:infinity \\| non_neg_integer` | `:infinity` | The maximum number of times that the step can be retried before failing. Only used when the result of the `compensate/4` callback is `:retry`. |\n| [`async?`](#reactor-ash_step-async?){: #reactor-ash_step-async? } | `boolean` | `true` | When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`. |\n| [`transform`](#reactor-ash_step-transform){: #reactor-ash_step-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the entire argument map before it is passed to the step. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nargument name, source \\\\ nil\n```\n\n\nSpecifies an argument to a Reactor step.\n\nEach argument is a value which is either the result of another step, or an input value.\n\nIndividual arguments can be transformed with an arbitrary function before\nbeing passed to any steps.","ref":"dsl-ash-reactor.html#reactor-ash_step-argument","title":"reactor.ash_step.argument - DSL: Ash.Reactor","type":"extras"},{"doc":"```\nargument :name, input(:name)\n\n```\n\n```\nargument :year, input(:date, [:year])\n\n```\n\n```\nargument :user, result(:create_user)\n\n```\n\n```\nargument :user_id, result(:create_user) do\n  transform & &1.id\nend\n\n```\n\n```\nargument :user_id, result(:create_user, [:id])\n\n```\n\n```\nargument :three, value(3)\n\n```","ref":"dsl-ash-reactor.html#examples","title":"Examples - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-ash_step-argument-name){: #reactor-ash_step-argument-name .spark-required} | `atom` |  | The name of the argument which will be used as the key in the `arguments` map passed to the implementation. |\n| [`source`](#reactor-ash_step-argument-source){: #reactor-ash_step-argument-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the argument. See `Reactor.Dsl.Argument` for more information. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-ash_step-argument-transform){: #reactor-ash_step-argument-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the argument before it is passed to the step. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Reactor.Dsl.Argument`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-ash_step-wait_for","title":"reactor.ash_step.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-ash_step-wait_for-names){: #reactor-ash_step-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.AshStep`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nbulk_create name, resource, action \\\\ nil\n```\n\n\nDeclares a step which will call a create action on a resource with a collection of inputs.\n\n>","ref":"dsl-ash-reactor.html#reactor-bulk_create","title":"reactor.bulk_create - DSL: Ash.Reactor","type":"extras"},{"doc":">\n> Make sure to thoroughly read and understand the documentation in `Ash.bulk_create/4` before using. Read each option and note the default values. By default, bulk creates don't return records or errors, and don't emit notifications.\n\nCaveats/differences from `Ash.bulk_create/4`:\n\n1. `max_concurrency` specifies the number of tasks that Ash will start to process batches, and has no effect on Reactor concurrency targets.  It's could be possible to create a very large number of processes if a number of steps are running bulk actions with a high degree of concurrency.\n2. Setting `notify?` to `true` will cause both `notify?` and `return_notifications?` to be set to true in the underlying call to `Ash.bulk_create/4`. Notifications will then be managed by the `Ash.Reactor.Notifications` Reactor middleware.\n3. If you specify an undo action it must be a generic action which takes the bulk result as it's only argument.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.","ref":"dsl-ash-reactor.html#check-the-docs-warning","title":"Check the docs! {: .warning} - DSL: Ash.Reactor","type":"extras"},{"doc":"* [actor](#reactor-bulk_create-actor)\n * [load](#reactor-bulk_create-load)\n * [tenant](#reactor-bulk_create-tenant)\n * [wait_for](#reactor-bulk_create-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"```\nbulk_create :create_posts, MyApp.Post, :create do\n  initial input(:titles)\n  actor result(:get_user)\n  tenant result(:get_organisation, [:id])\nend\n\n```","ref":"dsl-ash-reactor.html#examples","title":"Examples - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-bulk_create-name){: #reactor-bulk_create-name .spark-required} | `atom` |  | A unique name for the step. |\n| [`resource`](#reactor-bulk_create-resource){: #reactor-bulk_create-resource .spark-required} | `module` |  | The resource to call the action on. |\n| [`action`](#reactor-bulk_create-action){: #reactor-bulk_create-action } | `atom` |  | The name of the action to call on the resource. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`initial`](#reactor-bulk_create-initial){: #reactor-bulk_create-initial .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | A collection of inputs to pass to the create action. Must implement the `Enumerable` protocol. |\n| [`assume_casted?`](#reactor-bulk_create-assume_casted?){: #reactor-bulk_create-assume_casted? } | `boolean` | `false` | Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting |\n| [`authorize_changeset_with`](#reactor-bulk_create-authorize_changeset_with){: #reactor-bulk_create-authorize_changeset_with } | `:filter \\| :error` | `:filter` | If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error |\n| [`authorize_query_with`](#reactor-bulk_create-authorize_query_with){: #reactor-bulk_create-authorize_query_with } | `:filter \\| :error` | `:filter` | If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error |\n| [`batch_size`](#reactor-bulk_create-batch_size){: #reactor-bulk_create-batch_size } | `nil \\| pos_integer` |  | The number of records to include in each batch. Defaults to the `default_limit` or `max_page_size` of the action, or 100. |\n| [`max_concurrency`](#reactor-bulk_create-max_concurrency){: #reactor-bulk_create-max_concurrency } | `non_neg_integer` | `0` | If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously. |\n| [`notification_metadata`](#reactor-bulk_create-notification_metadata){: #reactor-bulk_create-notification_metadata } | `map \\| Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` | `%{}` | Metadata to be merged into the metadata field for all notifications sent from this operation. |\n| [`notify?`](#reactor-bulk_create-notify?){: #reactor-bulk_create-notify? } | `boolean` | `false` | Whether or not to generate any notifications. This may be intensive for large bulk actions. |\n| [`read_action`](#reactor-bulk_create-read_action){: #reactor-bulk_create-read_action } | `atom` |  | The action to use when building the read query. |\n| [`return_errors?`](#reactor-bulk_create-return_errors?){: #reactor-bulk_create-return_errors? } | `boolean` | `false` | Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. |\n| [`return_records?`](#reactor-bulk_create-return_records?){: #reactor-bulk_create-return_records? } | `boolean` | `false` | Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. |\n| [`return_stream?`](#reactor-bulk_create-return_stream?){: #reactor-bulk_create-return_stream? } | `boolean` | `false` | If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned. |\n| [`rollback_on_error?`](#reactor-bulk_create-rollback_on_error?){: #reactor-bulk_create-rollback_on_error? } | `boolean` | `true` | Whether or not to rollback the transaction on error, if the resource is in a transaction. |\n| [`select`](#reactor-bulk_create-select){: #reactor-bulk_create-select } | `atom \\| list(atom)` |  | A select statement to apply to records. Ignored if `return_records?` is not `true`. |\n| [`skip_unknown_inputs`](#reactor-bulk_create-skip_unknown_inputs){: #reactor-bulk_create-skip_unknown_inputs } | `atom \\| String.t \\| list(atom \\| String.t)` |  | A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys. |\n| [`sorted?`](#reactor-bulk_create-sorted?){: #reactor-bulk_create-sorted? } | `boolean` | `false` | Whether or not to sort results by their input position, in cases where `return_records?` is set to `true`. |\n| [`stop_on_error?`](#reactor-bulk_create-stop_on_error?){: #reactor-bulk_create-stop_on_error? } | `boolean` | `false` | If `true`, the first encountered error will stop the action and be returned. Otherwise, errors will be skipped. |\n| [`success_state`](#reactor-bulk_create-success_state){: #reactor-bulk_create-success_state } | `:success \\| :partial_success` | `:success` | Bulk results can be entirely or partially successful. Chooses the `Ash.BulkResult` state to consider the step a success. |\n| [`timeout`](#reactor-bulk_create-timeout){: #reactor-bulk_create-timeout } | `timeout` |  | If none is provided, the timeout configured on the domain is used (which defaults to `30_000`). |\n| [`transaction`](#reactor-bulk_create-transaction){: #reactor-bulk_create-transaction } | `:all \\| :batch \\| false` | `:batch` | Whether or not to wrap the entire execution in a transaction, each batch, or not at all. |\n| [`upsert_fields`](#reactor-bulk_create-upsert_fields){: #reactor-bulk_create-upsert_fields } | `atom \\| list(atom)` |  | The fields to upsert. If not set, the action's `upsert_fields` is used. |\n| [`upsert_identity`](#reactor-bulk_create-upsert_identity){: #reactor-bulk_create-upsert_identity } | `atom` |  | The identity to use for the upsert |\n| [`upsert?`](#reactor-bulk_create-upsert?){: #reactor-bulk_create-upsert? } | `boolean` | `false` | Whether or not this action should be executed as an upsert. |\n| [`domain`](#reactor-bulk_create-domain){: #reactor-bulk_create-domain } | `module` |  | The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section. |\n| [`async?`](#reactor-bulk_create-async?){: #reactor-bulk_create-async? } | `boolean` | `true` | When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`. |\n| [`authorize?`](#reactor-bulk_create-authorize?){: #reactor-bulk_create-authorize? } | `boolean \\| nil` |  | Explicitly enable or disable authorization for the action. |\n| [`description`](#reactor-bulk_create-description){: #reactor-bulk_create-description } | `String.t` |  | A description for the step |\n| [`undo_action`](#reactor-bulk_create-undo_action){: #reactor-bulk_create-undo_action } | `atom` |  | The name of the action to call on the resource when the step is to be undone. |\n| [`undo`](#reactor-bulk_create-undo){: #reactor-bulk_create-undo } | `:always \\| :never \\| :outside_transaction` | `:never` | How to handle undoing this action |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nactor source\n```\n\n\nSpecifies the action actor","ref":"dsl-ash-reactor.html#reactor-bulk_create-actor","title":"reactor.bulk_create.actor - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-bulk_create-actor-source){: #reactor-bulk_create-actor-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the actor. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-bulk_create-actor-transform){: #reactor-bulk_create-actor-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the actor before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nload source\n```\n\n\nAllows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-bulk_create-load","title":"reactor.bulk_create.load - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-bulk_create-load-source){: #reactor-bulk_create-load-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the load |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-bulk_create-load-transform){: #reactor-bulk_create-load-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the load before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.ActionLoad`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ntenant source\n```\n\n\nSpecifies the action tenant","ref":"dsl-ash-reactor.html#reactor-bulk_create-tenant","title":"reactor.bulk_create.tenant - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-bulk_create-tenant-source){: #reactor-bulk_create-tenant-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the tenant. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-bulk_create-tenant-transform){: #reactor-bulk_create-tenant-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the tenant before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-bulk_create-wait_for","title":"reactor.bulk_create.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-bulk_create-wait_for-names){: #reactor-bulk_create-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.BulkCreate`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nbulk_update name, resource, action \\\\ nil\n```\n\n\nDeclares a step which will call an update action on a resource with a collection of inputs.\n\n>","ref":"dsl-ash-reactor.html#reactor-bulk_update","title":"reactor.bulk_update - DSL: Ash.Reactor","type":"extras"},{"doc":">\n> Make sure to thoroughly read and understand the documentation in `Ash.bulk_update/4` before using.  Read each option and note the default values.  By default, bulk updates don't return records or errors, and don't emit notifications.\n\nCaveats/differences from `Ash.bulk_update/4`:\n\n1. `max_concurrency` specifies the number of tasks that Ash will start to process batches, and has no effect on Reactor concurrency targets.  It's could be possible to create a very large number of processes if a number of steps are running bulk actions with a high degree of concurrency.\n2. Setting `notify?` to `true` will cause both `notify?` and `return_notifications?` to be set to true in the underlying call to `Ash.bulk_create/4`. Notifications will then be managed by the `Ash.Reactor.Notifications` Reactor middleware.\n3. If you specify an undo action it must be a generic action which takes the bulk result as it's only argument.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.","ref":"dsl-ash-reactor.html#check-the-docs-warning","title":"Check the docs! {: .warning} - DSL: Ash.Reactor","type":"extras"},{"doc":"* [actor](#reactor-bulk_update-actor)\n * [inputs](#reactor-bulk_update-inputs)\n * [tenant](#reactor-bulk_update-tenant)\n * [wait_for](#reactor-bulk_update-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"```\nbulk_update :publish_posts, MyApp.Post, :publish do\n  initial input(:posts),\n  actor result(:get_user)\nend\n\n```","ref":"dsl-ash-reactor.html#examples","title":"Examples - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-bulk_update-name){: #reactor-bulk_update-name .spark-required} | `atom` |  | A unique name for the step. |\n| [`resource`](#reactor-bulk_update-resource){: #reactor-bulk_update-resource .spark-required} | `module` |  | The resource to call the action on. |\n| [`action`](#reactor-bulk_update-action){: #reactor-bulk_update-action } | `atom` |  | The name of the action to call on the resource. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`initial`](#reactor-bulk_update-initial){: #reactor-bulk_update-initial .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | A collection of inputs to pass to the create action. Must implement the `Enumerable` protocol. |\n| [`allow_stream_with`](#reactor-bulk_update-allow_stream_with){: #reactor-bulk_update-allow_stream_with } | `:keyset \\| :offset \\| :full_read` | `:keyset` | The 'worst' strategy allowed to be used to fetch records if the :stream strategy is chosen. See the `Ash.stream!/2` docs for more. |\n| [`assume_casted?`](#reactor-bulk_update-assume_casted?){: #reactor-bulk_update-assume_casted? } | `boolean` | `false` | Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting |\n| [`atomic_update`](#reactor-bulk_update-atomic_update){: #reactor-bulk_update-atomic_update } | `map` |  | A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more. |\n| [`authorize_changeset_with`](#reactor-bulk_update-authorize_changeset_with){: #reactor-bulk_update-authorize_changeset_with } | `:filter \\| :error` | `:filter` | If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error |\n| [`authorize_query_with`](#reactor-bulk_update-authorize_query_with){: #reactor-bulk_update-authorize_query_with } | `:filter \\| :error` | `:filter` | If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error |\n| [`authorize_query?`](#reactor-bulk_update-authorize_query?){: #reactor-bulk_update-authorize_query? } | `boolean` | `true` | If a query is given, determines whether or not authorization is run on that query. |\n| [`batch_size`](#reactor-bulk_update-batch_size){: #reactor-bulk_update-batch_size } | `nil \\| pos_integer` |  | The number of records to include in each batch. Defaults to the `default_limit` or `max_page_size` of the action, or 100. |\n| [`filter`](#reactor-bulk_update-filter){: #reactor-bulk_update-filter } | `map \\| keyword` |  | A filter to apply to records. This is also applied to a stream of inputs. |\n| [`lock`](#reactor-bulk_update-lock){: #reactor-bulk_update-lock } | `any` |  | A lock statement to add onto the query. |\n| [`max_concurrency`](#reactor-bulk_update-max_concurrency){: #reactor-bulk_update-max_concurrency } | `non_neg_integer` | `0` | If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously. |\n| [`notification_metadata`](#reactor-bulk_update-notification_metadata){: #reactor-bulk_update-notification_metadata } | `map \\| Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` | `%{}` | Metadata to be merged into the metadata field for all notifications sent from this operation. |\n| [`notify?`](#reactor-bulk_update-notify?){: #reactor-bulk_update-notify? } | `boolean` | `false` | Whether or not to generate any notifications. This may be intensive for large bulk actions. |\n| [`page`](#reactor-bulk_update-page){: #reactor-bulk_update-page } | `keyword` | `[]` | Pagination options, see [the pagination docs for more](read-actions.md#pagination). |\n| [`read_action`](#reactor-bulk_update-read_action){: #reactor-bulk_update-read_action } | `atom` |  | The action to use when building the read query. |\n| [`return_errors?`](#reactor-bulk_update-return_errors?){: #reactor-bulk_update-return_errors? } | `boolean` | `false` | Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. |\n| [`return_records?`](#reactor-bulk_update-return_records?){: #reactor-bulk_update-return_records? } | `boolean` | `false` | Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. |\n| [`return_stream?`](#reactor-bulk_update-return_stream?){: #reactor-bulk_update-return_stream? } | `boolean` | `false` | If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned. |\n| [`reuse_values?`](#reactor-bulk_update-reuse_values?){: #reactor-bulk_update-reuse_values? } | `boolean` | `false` | Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. |\n| [`rollback_on_error?`](#reactor-bulk_update-rollback_on_error?){: #reactor-bulk_update-rollback_on_error? } | `boolean` | `true` | Whether or not to rollback the transaction on error, if the resource is in a transaction. |\n| [`select`](#reactor-bulk_update-select){: #reactor-bulk_update-select } | `atom \\| list(atom)` |  | A select statement to apply to records. Ignored if `return_records?` is not `true`. |\n| [`skip_unknown_inputs`](#reactor-bulk_update-skip_unknown_inputs){: #reactor-bulk_update-skip_unknown_inputs } | `atom \\| String.t \\| list(atom \\| String.t)` |  | A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys. |\n| [`sorted?`](#reactor-bulk_update-sorted?){: #reactor-bulk_update-sorted? } | `boolean` | `false` | Whether or not to sort results by their input position, in cases where `return_records?` is set to `true`. |\n| [`stop_on_error?`](#reactor-bulk_update-stop_on_error?){: #reactor-bulk_update-stop_on_error? } | `boolean` | `false` | If `true`, the first encountered error will stop the action and be returned. Otherwise, errors will be skipped. |\n| [`strategy`](#reactor-bulk_update-strategy){: #reactor-bulk_update-strategy } | `list(:atomic \\| :atomic_batches \\| :stream)` | `[:atomic]` | The strategy or strategies to enable. `:stream` is used in all cases if the data layer does not support atomics. |\n| [`stream_batch_size`](#reactor-bulk_update-stream_batch_size){: #reactor-bulk_update-stream_batch_size } | `pos_integer` |  | Batch size to use if provided a query and the query must be streamed. |\n| [`stream_with`](#reactor-bulk_update-stream_with){: #reactor-bulk_update-stream_with } | `:keyset \\| :offset \\| :full_read` |  | The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more. |\n| [`success_state`](#reactor-bulk_update-success_state){: #reactor-bulk_update-success_state } | `:success \\| :partial_success` | `:success` | Bulk results can be entirely or partially successful. Chooses the `Ash.BulkResult` state to consider the step a success. |\n| [`timeout`](#reactor-bulk_update-timeout){: #reactor-bulk_update-timeout } | `timeout` |  | If none is provided, the timeout configured on the domain is used (which defaults to `30_000`). |\n| [`transaction`](#reactor-bulk_update-transaction){: #reactor-bulk_update-transaction } | `:all \\| :batch \\| false` | `:batch` | Whether or not to wrap the entire execution in a transaction, each batch, or not at all. |\n| [`domain`](#reactor-bulk_update-domain){: #reactor-bulk_update-domain } | `module` |  | The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section. |\n| [`async?`](#reactor-bulk_update-async?){: #reactor-bulk_update-async? } | `boolean` | `true` | When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`. |\n| [`authorize?`](#reactor-bulk_update-authorize?){: #reactor-bulk_update-authorize? } | `boolean \\| nil` |  | Explicitly enable or disable authorization for the action. |\n| [`description`](#reactor-bulk_update-description){: #reactor-bulk_update-description } | `String.t` |  | A description for the step |\n| [`undo_action`](#reactor-bulk_update-undo_action){: #reactor-bulk_update-undo_action } | `atom` |  | The name of the action to call on the resource when the step is to be undone. |\n| [`undo`](#reactor-bulk_update-undo){: #reactor-bulk_update-undo } | `:always \\| :never \\| :outside_transaction` | `:never` | How to handle undoing this action |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nactor source\n```\n\n\nSpecifies the action actor","ref":"dsl-ash-reactor.html#reactor-bulk_update-actor","title":"reactor.bulk_update.actor - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-bulk_update-actor-source){: #reactor-bulk_update-actor-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the actor. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-bulk_update-actor-transform){: #reactor-bulk_update-actor-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the actor before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ninputs template\n```\n\n\nSpecify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-bulk_update-inputs","title":"reactor.bulk_update.inputs - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`template`](#reactor-bulk_update-inputs-template){: #reactor-bulk_update-inputs-template .spark-required} | `%{optional(atom) => Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value} \\| keyword(Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value)` |  |  |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-bulk_update-inputs-transform){: #reactor-bulk_update-inputs-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which will transform the inputs before executing the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ntenant source\n```\n\n\nSpecifies the action tenant","ref":"dsl-ash-reactor.html#reactor-bulk_update-tenant","title":"reactor.bulk_update.tenant - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-bulk_update-tenant-source){: #reactor-bulk_update-tenant-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the tenant. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-bulk_update-tenant-transform){: #reactor-bulk_update-tenant-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the tenant before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-bulk_update-wait_for","title":"reactor.bulk_update.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-bulk_update-wait_for-names){: #reactor-bulk_update-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.BulkUpdate`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nchange name, change\n```\n\n\nDeclares a step that will modify a changeset.","ref":"dsl-ash-reactor.html#reactor-change","title":"reactor.change - DSL: Ash.Reactor","type":"extras"},{"doc":"* [argument](#reactor-change-argument)\n * [wait_for](#reactor-change-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-change-name){: #reactor-change-name .spark-required} | `atom` |  | A unique name for this step. |\n| [`change`](#reactor-change-change){: #reactor-change-change .spark-required} | `(any, any -> any) \\| module` |  | The module and options for a change. Also accepts a function that takes the changeset and the context. See `Ash.Resource.Change.Builtins` for builtin changes. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`initial`](#reactor-change-initial){: #reactor-change-initial .spark-required} | `module \\| Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | The initial value to work from, either a resource or a changeset |\n| [`description`](#reactor-change-description){: #reactor-change-description } | `String.t \\| nil` |  | An optional description for the change |\n| [`only_when_valid?`](#reactor-change-only_when_valid?){: #reactor-change-only_when_valid? } | `boolean` | `false` | If the change should only be run on valid changes. By default, all changes are run unless stated otherwise here. |\n| [`where`](#reactor-change-where){: #reactor-change-where } | `(any, any -> any) \\| module \\| list((any, any -> any) \\| module)` | `[]` | Validations that should pass in order for this change to apply. These validations failing will result in this change being ignored. |\n| [`fail_if_invalid?`](#reactor-change-fail_if_invalid?){: #reactor-change-fail_if_invalid? } | `boolean` | `false` | Fail if the result of the change is an invalid changeset |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nargument name, source \\\\ nil\n```\n\n\nSpecifies an argument to a Reactor step.\n\nEach argument is a value which is either the result of another step, or an input value.\n\nIndividual arguments can be transformed with an arbitrary function before\nbeing passed to any steps.","ref":"dsl-ash-reactor.html#reactor-change-argument","title":"reactor.change.argument - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-change-argument-name){: #reactor-change-argument-name .spark-required} | `atom` |  | The name of the argument which will be used as the key in the `arguments` map passed to the implementation. |\n| [`source`](#reactor-change-argument-source){: #reactor-change-argument-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the argument. See `Reactor.Dsl.Argument` for more information. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-change-argument-transform){: #reactor-change-argument-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the argument before it is passed to the step. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-change-wait_for","title":"reactor.change.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-change-wait_for-names){: #reactor-change-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.Change`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ncreate name, resource, action \\\\ nil\n```\n\n\nDeclares a step that will call a create action on a resource.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.","ref":"dsl-ash-reactor.html#reactor-create","title":"reactor.create - DSL: Ash.Reactor","type":"extras"},{"doc":"* [actor](#reactor-create-actor)\n * [inputs](#reactor-create-inputs)\n * [load](#reactor-create-load)\n * [tenant](#reactor-create-tenant)\n * [wait_for](#reactor-create-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"```\ncreate :create_post, MyApp.Post, :create do\n  inputs %{\n    title: input(:post_title),\n    author_id: result(:get_user, [:id])\n  }\n  actor result(:get_user)\n  tenant result(:get_organisation, [:id])\nend\n\n```","ref":"dsl-ash-reactor.html#examples","title":"Examples - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-create-name){: #reactor-create-name .spark-required} | `atom` |  | A unique name for the step. |\n| [`resource`](#reactor-create-resource){: #reactor-create-resource .spark-required} | `module` |  | The resource to call the action on. |\n| [`action`](#reactor-create-action){: #reactor-create-action } | `atom` |  | The name of the action to call on the resource. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`initial`](#reactor-create-initial){: #reactor-create-initial } | `nil \\| module \\| Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | The initial value passed into the action. |\n| [`upsert_identity`](#reactor-create-upsert_identity){: #reactor-create-upsert_identity } | `atom` |  | The identity to use for the upsert |\n| [`upsert?`](#reactor-create-upsert?){: #reactor-create-upsert? } | `boolean` | `false` | Whether or not this action should be executed as an upsert. |\n| [`domain`](#reactor-create-domain){: #reactor-create-domain } | `module` |  | The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section. |\n| [`async?`](#reactor-create-async?){: #reactor-create-async? } | `boolean` | `true` | When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`. |\n| [`authorize?`](#reactor-create-authorize?){: #reactor-create-authorize? } | `boolean \\| nil` |  | Explicitly enable or disable authorization for the action. |\n| [`description`](#reactor-create-description){: #reactor-create-description } | `String.t` |  | A description for the step |\n| [`undo_action`](#reactor-create-undo_action){: #reactor-create-undo_action } | `atom` |  | The name of the action to call on the resource when the step is to be undone. |\n| [`undo`](#reactor-create-undo){: #reactor-create-undo } | `:always \\| :never \\| :outside_transaction` | `:never` | How to handle undoing this action |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nactor source\n```\n\n\nSpecifies the action actor","ref":"dsl-ash-reactor.html#reactor-create-actor","title":"reactor.create.actor - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-create-actor-source){: #reactor-create-actor-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the actor. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-create-actor-transform){: #reactor-create-actor-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the actor before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ninputs template\n```\n\n\nSpecify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-create-inputs","title":"reactor.create.inputs - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`template`](#reactor-create-inputs-template){: #reactor-create-inputs-template .spark-required} | `%{optional(atom) => Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value} \\| keyword(Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value)` |  |  |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-create-inputs-transform){: #reactor-create-inputs-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which will transform the inputs before executing the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nload source\n```\n\n\nAllows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-create-load","title":"reactor.create.load - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-create-load-source){: #reactor-create-load-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the load |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-create-load-transform){: #reactor-create-load-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the load before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ntenant source\n```\n\n\nSpecifies the action tenant","ref":"dsl-ash-reactor.html#reactor-create-tenant","title":"reactor.create.tenant - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-create-tenant-source){: #reactor-create-tenant-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the tenant. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-create-tenant-transform){: #reactor-create-tenant-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the tenant before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-create-wait_for","title":"reactor.create.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-create-wait_for-names){: #reactor-create-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.Create`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ndestroy name, resource, action \\\\ nil\n```\n\n\nDeclares a step that will call a destroy action on a resource.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.","ref":"dsl-ash-reactor.html#reactor-destroy","title":"reactor.destroy - DSL: Ash.Reactor","type":"extras"},{"doc":"* [actor](#reactor-destroy-actor)\n * [inputs](#reactor-destroy-inputs)\n * [load](#reactor-destroy-load)\n * [tenant](#reactor-destroy-tenant)\n * [wait_for](#reactor-destroy-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"```\ndestroy :delete_post, MyApp.Post, :destroy do\n  initial input(:post)\n  actor result(:get_user)\n  tenant result(:get_organisation, [:id])\nend\n\n```","ref":"dsl-ash-reactor.html#examples","title":"Examples - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-destroy-name){: #reactor-destroy-name .spark-required} | `atom` |  | A unique name for the step. |\n| [`resource`](#reactor-destroy-resource){: #reactor-destroy-resource .spark-required} | `module` |  | The resource to call the action on. |\n| [`action`](#reactor-destroy-action){: #reactor-destroy-action } | `atom` |  | The name of the action to call on the resource. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`initial`](#reactor-destroy-initial){: #reactor-destroy-initial .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | The record to update. |\n| [`return_destroyed?`](#reactor-destroy-return_destroyed?){: #reactor-destroy-return_destroyed? } | `boolean` | `false` | Whether or not the step should return the destroyed record upon completion. |\n| [`domain`](#reactor-destroy-domain){: #reactor-destroy-domain } | `module` |  | The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section. |\n| [`async?`](#reactor-destroy-async?){: #reactor-destroy-async? } | `boolean` | `true` | When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`. |\n| [`authorize?`](#reactor-destroy-authorize?){: #reactor-destroy-authorize? } | `boolean \\| nil` |  | Explicitly enable or disable authorization for the action. |\n| [`description`](#reactor-destroy-description){: #reactor-destroy-description } | `String.t` |  | A description for the step |\n| [`undo_action`](#reactor-destroy-undo_action){: #reactor-destroy-undo_action } | `atom` |  | The name of the action to call on the resource when the step is to be undone. |\n| [`undo`](#reactor-destroy-undo){: #reactor-destroy-undo } | `:always \\| :never \\| :outside_transaction` | `:never` | How to handle undoing this action |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nactor source\n```\n\n\nSpecifies the action actor","ref":"dsl-ash-reactor.html#reactor-destroy-actor","title":"reactor.destroy.actor - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-destroy-actor-source){: #reactor-destroy-actor-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the actor. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-destroy-actor-transform){: #reactor-destroy-actor-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the actor before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ninputs template\n```\n\n\nSpecify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-destroy-inputs","title":"reactor.destroy.inputs - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`template`](#reactor-destroy-inputs-template){: #reactor-destroy-inputs-template .spark-required} | `%{optional(atom) => Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value} \\| keyword(Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value)` |  |  |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-destroy-inputs-transform){: #reactor-destroy-inputs-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which will transform the inputs before executing the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nload source\n```\n\n\nAllows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-destroy-load","title":"reactor.destroy.load - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-destroy-load-source){: #reactor-destroy-load-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the load |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-destroy-load-transform){: #reactor-destroy-load-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the load before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ntenant source\n```\n\n\nSpecifies the action tenant","ref":"dsl-ash-reactor.html#reactor-destroy-tenant","title":"reactor.destroy.tenant - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-destroy-tenant-source){: #reactor-destroy-tenant-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the tenant. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-destroy-tenant-transform){: #reactor-destroy-tenant-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the tenant before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-destroy-wait_for","title":"reactor.destroy.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-destroy-wait_for-names){: #reactor-destroy-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.Destroy`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nload name, records, load\n```\n\n\nDeclares a step that will load additional data on a resource.","ref":"dsl-ash-reactor.html#reactor-load","title":"reactor.load - DSL: Ash.Reactor","type":"extras"},{"doc":"* [actor](#reactor-load-actor)\n * [tenant](#reactor-load-tenant)\n * [wait_for](#reactor-load-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-load-name){: #reactor-load-name .spark-required} | `atom` |  | A unique name for the step. |\n| [`records`](#reactor-load-records){: #reactor-load-records .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | The records upon which to add extra loaded data |\n| [`load`](#reactor-load-load){: #reactor-load-load .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | An Ash load statement |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`domain`](#reactor-load-domain){: #reactor-load-domain } | `module` |  | The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section. |\n| [`async?`](#reactor-load-async?){: #reactor-load-async? } | `boolean` | `true` | When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`. |\n| [`authorize?`](#reactor-load-authorize?){: #reactor-load-authorize? } | `boolean \\| nil` |  | Explicitly enable or disable authorization for the action. |\n| [`description`](#reactor-load-description){: #reactor-load-description } | `String.t` |  | A description for the step |\n| [`transform`](#reactor-load-transform){: #reactor-load-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the load statement before it is passed to the load. |\n| [`lazy?`](#reactor-load-lazy?){: #reactor-load-lazy? } | `boolean` |  | If set to true, values will only be loaded if the related value isn't currently loaded. |\n| [`reuse_values?`](#reactor-load-reuse_values?){: #reactor-load-reuse_values? } | `boolean` |  | Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. |\n| [`strict?`](#reactor-load-strict?){: #reactor-load-strict? } | `boolean` |  | If set to true, only specified attributes will be loaded when passing a list of fields to fetch on a relationship, which allows for more optimized data-fetching. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nactor source\n```\n\n\nSpecifies the action actor","ref":"dsl-ash-reactor.html#reactor-load-actor","title":"reactor.load.actor - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-load-actor-source){: #reactor-load-actor-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the actor. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-load-actor-transform){: #reactor-load-actor-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the actor before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ntenant source\n```\n\n\nSpecifies the action tenant","ref":"dsl-ash-reactor.html#reactor-load-tenant","title":"reactor.load.tenant - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-load-tenant-source){: #reactor-load-tenant-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the tenant. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-load-tenant-transform){: #reactor-load-tenant-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the tenant before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-load-wait_for","title":"reactor.load.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-load-wait_for-names){: #reactor-load-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.Load`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nread_one name, resource, action \\\\ nil\n```\n\n\nDeclares a step that will call a read action on a resource returning a single record.","ref":"dsl-ash-reactor.html#reactor-read_one","title":"reactor.read_one - DSL: Ash.Reactor","type":"extras"},{"doc":"* [actor](#reactor-read_one-actor)\n * [inputs](#reactor-read_one-inputs)\n * [load](#reactor-read_one-load)\n * [tenant](#reactor-read_one-tenant)\n * [wait_for](#reactor-read_one-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"```\nread_one :post_by_id, MyApp.Post, :read do\n  inputs %{id: input(:post_id)}\nend\n\n```","ref":"dsl-ash-reactor.html#examples","title":"Examples - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-read_one-name){: #reactor-read_one-name .spark-required} | `atom` |  | A unique name for the step. |\n| [`resource`](#reactor-read_one-resource){: #reactor-read_one-resource .spark-required} | `module` |  | The resource to call the action on. |\n| [`action`](#reactor-read_one-action){: #reactor-read_one-action } | `atom` |  | The name of the action to call on the resource. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`fail_on_not_found?`](#reactor-read_one-fail_on_not_found?){: #reactor-read_one-fail_on_not_found? } | `boolean` | `false` | When set to true the step will fail if the resource is not found. |\n| [`domain`](#reactor-read_one-domain){: #reactor-read_one-domain } | `module` |  | The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section. |\n| [`async?`](#reactor-read_one-async?){: #reactor-read_one-async? } | `boolean` | `true` | When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`. |\n| [`authorize?`](#reactor-read_one-authorize?){: #reactor-read_one-authorize? } | `boolean \\| nil` |  | Explicitly enable or disable authorization for the action. |\n| [`description`](#reactor-read_one-description){: #reactor-read_one-description } | `String.t` |  | A description for the step |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nactor source\n```\n\n\nSpecifies the action actor","ref":"dsl-ash-reactor.html#reactor-read_one-actor","title":"reactor.read_one.actor - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-read_one-actor-source){: #reactor-read_one-actor-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the actor. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-read_one-actor-transform){: #reactor-read_one-actor-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the actor before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ninputs template\n```\n\n\nSpecify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-read_one-inputs","title":"reactor.read_one.inputs - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`template`](#reactor-read_one-inputs-template){: #reactor-read_one-inputs-template .spark-required} | `%{optional(atom) => Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value} \\| keyword(Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value)` |  |  |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-read_one-inputs-transform){: #reactor-read_one-inputs-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which will transform the inputs before executing the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nload source\n```\n\n\nAllows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-read_one-load","title":"reactor.read_one.load - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-read_one-load-source){: #reactor-read_one-load-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the load |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-read_one-load-transform){: #reactor-read_one-load-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the load before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ntenant source\n```\n\n\nSpecifies the action tenant","ref":"dsl-ash-reactor.html#reactor-read_one-tenant","title":"reactor.read_one.tenant - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-read_one-tenant-source){: #reactor-read_one-tenant-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the tenant. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-read_one-tenant-transform){: #reactor-read_one-tenant-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the tenant before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-read_one-wait_for","title":"reactor.read_one.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-read_one-wait_for-names){: #reactor-read_one-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.ReadOne`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nread name, resource, action \\\\ nil\n```\n\n\nDeclares a step that will call a read action on a resource.","ref":"dsl-ash-reactor.html#reactor-read","title":"reactor.read - DSL: Ash.Reactor","type":"extras"},{"doc":"* [actor](#reactor-read-actor)\n * [inputs](#reactor-read-inputs)\n * [load](#reactor-read-load)\n * [tenant](#reactor-read-tenant)\n * [wait_for](#reactor-read-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"```\nread :read_posts, MyApp.Post, :read\n\n```\n\n```\nread :read_posts_in_range, MyApp.Post, :read_in_range do\n  inputs %{min_date: input(:min_date), max_date: input(:max_date)}\nend\n\n```","ref":"dsl-ash-reactor.html#examples","title":"Examples - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-read-name){: #reactor-read-name .spark-required} | `atom` |  | A unique name for the step. |\n| [`resource`](#reactor-read-resource){: #reactor-read-resource .spark-required} | `module` |  | The resource to call the action on. |\n| [`action`](#reactor-read-action){: #reactor-read-action } | `atom` |  | The name of the action to call on the resource. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`domain`](#reactor-read-domain){: #reactor-read-domain } | `module` |  | The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section. |\n| [`async?`](#reactor-read-async?){: #reactor-read-async? } | `boolean` | `true` | When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`. |\n| [`authorize?`](#reactor-read-authorize?){: #reactor-read-authorize? } | `boolean \\| nil` |  | Explicitly enable or disable authorization for the action. |\n| [`description`](#reactor-read-description){: #reactor-read-description } | `String.t` |  | A description for the step |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nactor source\n```\n\n\nSpecifies the action actor","ref":"dsl-ash-reactor.html#reactor-read-actor","title":"reactor.read.actor - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-read-actor-source){: #reactor-read-actor-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the actor. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-read-actor-transform){: #reactor-read-actor-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the actor before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ninputs template\n```\n\n\nSpecify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-read-inputs","title":"reactor.read.inputs - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`template`](#reactor-read-inputs-template){: #reactor-read-inputs-template .spark-required} | `%{optional(atom) => Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value} \\| keyword(Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value)` |  |  |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-read-inputs-transform){: #reactor-read-inputs-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which will transform the inputs before executing the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nload source\n```\n\n\nAllows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-read-load","title":"reactor.read.load - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-read-load-source){: #reactor-read-load-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the load |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-read-load-transform){: #reactor-read-load-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the load before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ntenant source\n```\n\n\nSpecifies the action tenant","ref":"dsl-ash-reactor.html#reactor-read-tenant","title":"reactor.read.tenant - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-read-tenant-source){: #reactor-read-tenant-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the tenant. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-read-tenant-transform){: #reactor-read-tenant-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the tenant before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-read-wait_for","title":"reactor.read.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-read-wait_for-names){: #reactor-read-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.Read`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ntransaction name, resources\n```\n\n\nCreates a group of steps which will be executed inside a data layer transaction.","ref":"dsl-ash-reactor.html#reactor-transaction","title":"reactor.transaction - DSL: Ash.Reactor","type":"extras"},{"doc":"* [wait_for](#reactor-transaction-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-transaction-name){: #reactor-transaction-name .spark-required} | `atom` |  | A unique name for the step. |\n| [`resources`](#reactor-transaction-resources){: #reactor-transaction-resources .spark-required} | `module \\| list(module)` |  | A resource or list of resources to consider in the transaction. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`return`](#reactor-transaction-return){: #reactor-transaction-return } | `atom` |  | The name of the step whose result will be returned as the return value of the transaction. |\n| [`timeout`](#reactor-transaction-timeout){: #reactor-transaction-timeout } | `pos_integer \\| :infinity` | `15000` | How long to allow the transaction to run before timing out. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-transaction-wait_for","title":"reactor.transaction.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-transaction-wait_for-names){: #reactor-transaction-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.Transaction`","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nupdate name, resource, action \\\\ nil\n```\n\n\nDeclares a step that will call an update action on a resource.\n\n> #### Undo behaviour {: .tip}\n>\n> This step has three different modes of undo.\n>\n> * `never` - The result of the action is never undone.  This is the default.\n> * `always` - The `undo_action` will always be called.\n> * `outside_transaction` - The `undo_action` will not be called when running inside a `transaction` block, but will be otherwise.","ref":"dsl-ash-reactor.html#reactor-update","title":"reactor.update - DSL: Ash.Reactor","type":"extras"},{"doc":"* [actor](#reactor-update-actor)\n * [inputs](#reactor-update-inputs)\n * [load](#reactor-update-load)\n * [tenant](#reactor-update-tenant)\n * [wait_for](#reactor-update-wait_for)","ref":"dsl-ash-reactor.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Reactor","type":"extras"},{"doc":"```\nupdate :publish_post, MyApp.Post, :update do\n  initial input(:post)\n  inputs %{\n    published: value(true)\n  }\n  actor result(:get_user)\n  tenant result(:get_organisation, [:id])\nend\n\n```","ref":"dsl-ash-reactor.html#examples","title":"Examples - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#reactor-update-name){: #reactor-update-name .spark-required} | `atom` |  | A unique name for the step. |\n| [`resource`](#reactor-update-resource){: #reactor-update-resource .spark-required} | `module` |  | The resource to call the action on. |\n| [`action`](#reactor-update-action){: #reactor-update-action } | `atom` |  | The name of the action to call on the resource. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`initial`](#reactor-update-initial){: #reactor-update-initial .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | The record to update. |\n| [`domain`](#reactor-update-domain){: #reactor-update-domain } | `module` |  | The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the `ash` section. |\n| [`async?`](#reactor-update-async?){: #reactor-update-async? } | `boolean` | `true` | When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`. |\n| [`authorize?`](#reactor-update-authorize?){: #reactor-update-authorize? } | `boolean \\| nil` |  | Explicitly enable or disable authorization for the action. |\n| [`description`](#reactor-update-description){: #reactor-update-description } | `String.t` |  | A description for the step |\n| [`undo_action`](#reactor-update-undo_action){: #reactor-update-undo_action } | `atom` |  | The name of the action to call on the resource when the step is to be undone. |\n| [`undo`](#reactor-update-undo){: #reactor-update-undo } | `:always \\| :never \\| :outside_transaction` | `:never` | How to handle undoing this action |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nactor source\n```\n\n\nSpecifies the action actor","ref":"dsl-ash-reactor.html#reactor-update-actor","title":"reactor.update.actor - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-update-actor-source){: #reactor-update-actor-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the actor. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-update-actor-transform){: #reactor-update-actor-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the actor before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ninputs template\n```\n\n\nSpecify the inputs for an action","ref":"dsl-ash-reactor.html#reactor-update-inputs","title":"reactor.update.inputs - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`template`](#reactor-update-inputs-template){: #reactor-update-inputs-template .spark-required} | `%{optional(atom) => Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value} \\| keyword(Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value)` |  |  |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-update-inputs-transform){: #reactor-update-inputs-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which will transform the inputs before executing the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nload source\n```\n\n\nAllows the addition of an Ash load statement to the action","ref":"dsl-ash-reactor.html#reactor-update-load","title":"reactor.update.load - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-update-load-source){: #reactor-update-load-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the load |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-update-load-transform){: #reactor-update-load-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the load before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\ntenant source\n```\n\n\nSpecifies the action tenant","ref":"dsl-ash-reactor.html#reactor-update-tenant","title":"reactor.update.tenant - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`source`](#reactor-update-tenant-source){: #reactor-update-tenant-source .spark-required} | `Reactor.Template.Element \\| Reactor.Template.Input \\| Reactor.Template.Result \\| Reactor.Template.Value` |  | What to use as the source of the tenant. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`transform`](#reactor-update-tenant-transform){: #reactor-update-tenant-transform } | `(any -> any) \\| module \\| nil` |  | An optional transformation function which can be used to modify the tenant before it is passed to the action. |","ref":"dsl-ash-reactor.html#options","title":"Options - DSL: Ash.Reactor","type":"extras"},{"doc":"```elixir\nwait_for names\n```\n\n\nWait for the named step to complete before allowing this one to start.\n\nDesugars to `argument :_, result(step_to_wait_for)`","ref":"dsl-ash-reactor.html#reactor-update-wait_for","title":"reactor.update.wait_for - DSL: Ash.Reactor","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`names`](#reactor-update-wait_for-names){: #reactor-update-wait_for-names .spark-required} | `atom \\| list(atom)` |  | The name of the step to wait for. |","ref":"dsl-ash-reactor.html#arguments","title":"Arguments - DSL: Ash.Reactor","type":"extras"},{"doc":"Target: `Ash.Reactor.Dsl.Update`\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ash-reactor.html#introspection","title":"Introspection - DSL: Ash.Reactor","type":"extras"}],"producer":{"name":"ex_doc","version":[48,46,51,52,46,50]}}