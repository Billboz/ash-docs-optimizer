searchData={"items":[{"type":"module","title":"AshPyroComponents","doc":"The easiest way to use the components from PyroComponents and AshPyroComponets is to import them into `my_app_web.ex` helpers to make the available in all views and components:\n\n ```elixir\n defp html_helpers do\n   quote do\n     # Import all components from PyroComponents/AshPyroComponents\n     use AshPyroComponents\n     # ...\n ```\n\nComprehensive installation instructions can be found in [Get Started](get-started.md).","ref":"AshPyroComponents.html"},{"type":"module","title":"AshPyroComponents.Overrides.BEM","doc":"This overrides file complements `PyroComponents.Overrides.BEM` by adding [BEM](https://getbem.com/) classes to all AshPyro components. It does not define any style.\n\n  This is great if you want to fully customize your own styles; all you have to do is define the classes in your CSS file.","ref":"AshPyroComponents.Overrides.BEM.html"},{"type":"module","title":"Configuration - AshPyroComponents.Overrides.BEM","doc":"As with any Pyro overrides, you need to include the correct override files in your `config.exs` file:\n\n  ```elixir\n  config :pyro, :overrides, [AshPyroComponents.Overrides.BEM, PyroComponents.Overrides.BEM]\n  ```\n\n- Captured functions with arity 1 and the arg named `passed_assigns` are passed component assigns at runtime, allowing complex conditional logic\n- [`assign_overridables/1`](`Pyro.Component.assign_overridables/1`) preserves the definition order of attrs and assigns them in that order, preserving dependency chains\n- Attrs with type `:css_classes` utilize the configured CSS merge utility","ref":"AshPyroComponents.Overrides.BEM.html#module-configuration"},{"type":"module","title":"Overrides - AshPyroComponents.Overrides.BEM","doc":"- `Elixir.AshPyroComponents.Components.DataTable.ash_data_table/1`\n  - `:class` `AshPyroComponents.Overrides.BEM.ash_data_table_class/1`\n\n- `Elixir.AshPyroComponents.Components.FilterForm.render/1`\n  - `:button_class` `\"pyro_ash_filter_form__button\"`\n  - `:class` `\"pyro_ash_filter_form\"`\n  - `:fieldset_class` `\"pyro_ash_filter_form__fieldset\"`\n  - `:form_class` `\"pyro_ash_filter_form__form\"`\n  - `:input_class` `\"pyro_ash_filter_form__input\"`\n  - `:legend_class` `\"pyro_ash_filter_form__legend\"`\n  - `:legend_label_class` `\"pyro_ash_filter_form__legend_label\"`\n\n- Elixir.AshPyroComponents.Components.FilterForm.render_component/1 (private)\n  - `:button_class` `\"pyro_ash_filter_form__button\"`\n  - `:fieldset_class` `\"pyro_ash_filter_form__fieldset\"`\n  - `:input_class` `\"pyro_ash_filter_form__input\"`\n  - `:legend_class` `\"pyro_ash_filter_form__legend\"`\n  - `:legend_label_class` `\"pyro_ash_filter_form__legend_label\"`\n\n- Elixir.AshPyroComponents.Components.FilterForm.render_predicate/1 (private)\n  - `:button_class` `\"pyro_ash_filter_form__button\"`\n  - `:class` `\"pyro_ash_filter_form__predicate\"`\n  - `:input_class` `\"pyro_ash_filter_form__input\"`\n  - `:left_fields_class` `\"pyro_ash_filter_form__predicate_left_fields\"`\n\n- `Elixir.AshPyroComponents.Components.Form.ash_form/1`\n  - `:actions_class` `\"pyro_ash_form__actions\"`\n  - `:autocomplete` `\"off\"`\n  - `:class` `AshPyroComponents.Overrides.BEM.ash_form_class/1`\n\n- Elixir.AshPyroComponents.Components.Form.render_field/1 (private)\n  - `:field_group_class` `AshPyroComponents.Overrides.BEM.ash_form_field_group_class/1`\n  - `:field_group_label_class` `\"pyro_ash_form_render_field__group_label\"`","ref":"AshPyroComponents.Overrides.BEM.html#module-overrides"},{"type":"function","title":"AshPyroComponents.Overrides.BEM.ash_data_table_class/1","doc":"This override is passed component assigns and executed while being assigned at runtime.","ref":"AshPyroComponents.Overrides.BEM.html#ash_data_table_class/1"},{"type":"function","title":"AshPyroComponents.Overrides.BEM.ash_form_class/1","doc":"This override is passed component assigns and executed while being assigned at runtime.","ref":"AshPyroComponents.Overrides.BEM.html#ash_form_class/1"},{"type":"function","title":"AshPyroComponents.Overrides.BEM.ash_form_field_group_class/1","doc":"This override is passed component assigns and executed while being assigned at runtime.","ref":"AshPyroComponents.Overrides.BEM.html#ash_form_field_group_class/1"},{"type":"module","title":"AshPyroComponents.Components.DataTable","doc":"A component that auto-renders forms for Ash resources.","ref":"AshPyroComponents.Components.DataTable.html"},{"type":"module","title":"Overridable Component Attributes - AshPyroComponents.Components.DataTable","doc":"You can customize the components in this module by [configuring overrides](`Pyro.Overrides`).\n\nThe components in this module support the following overridable attributes:\n\n- `ash_data_table/1`\n  - `:class` `:css_classes`","ref":"AshPyroComponents.Components.DataTable.html#module-overridable-component-attributes"},{"type":"function","title":"AshPyroComponents.Components.DataTable.ash_data_table/1","doc":"Renders a data table.","ref":"AshPyroComponents.Components.DataTable.html#ash_data_table/1"},{"type":"function","title":"Attributes - AshPyroComponents.Components.DataTable.ash_data_table/1","doc":"* `overrides` (`:list`) - Manually set the overrides for this component (instead of config/default). Defaults to `nil`.\n* `id` (`:string`) (required)\n* `config` (`AshPyro.Extensions.Resource.DataTable.Action`) (required)\n* `rows` (`:list`) (required)\n* `sort` (`:list`) (required)\n* `display` (`:list`) (required)\n* `filter` (`:list`) (required)\n* `page` (`:list`) (required)\n* `resource` (`:atom`) (required) - the resource of the data table.\n* `actor` (`:map`) - the actor to be passed to actions. Defaults to `nil`.\n* `tz` (`:string`) - timezone. Defaults to `\"Etc/UTC\"`.\n* `class` (`:any`) - (overridable, `:css_classes`).","ref":"AshPyroComponents.Components.DataTable.html#ash_data_table/1-attributes"},{"type":"module","title":"AshPyroComponents.Components.FilterForm","doc":"Automatically render filter forms for Ash resources.","ref":"AshPyroComponents.Components.FilterForm.html"},{"type":"module","title":"Overridable Component Attributes - AshPyroComponents.Components.FilterForm","doc":"You can customize the components in this module by [configuring overrides](`Pyro.Overrides`).\n\nThe components in this module support the following overridable attributes:\n\n- `render/1`\n  - `:class` `:css_classes`\n  - `:form_class` `:css_classes`\n  - `:fieldset_class` `:css_classes`\n  - `:legend_class` `:css_classes`\n  - `:legend_label_class` `:css_classes`\n  - `:button_class` `:css_classes`\n  - `:input_class` `:css_classes`\n\n- `render_component/1`\n  - `:class` `:css_classes`\n  - `:fieldset_class` `:css_classes`\n  - `:legend_class` `:css_classes`\n  - `:legend_label_class` `:css_classes`\n  - `:button_class` `:css_classes`\n  - `:input_class` `:css_classes`\n\n- `render_predicate/1`\n  - `:fieldset_class` `:css_classes`\n  - `:class` `:css_classes`\n  - `:left_fields_class` `:css_classes`\n  - `:button_class` `:css_classes`\n  - `:input_class` `:css_classes`","ref":"AshPyroComponents.Components.FilterForm.html#module-overridable-component-attributes"},{"type":"function","title":"AshPyroComponents.Components.FilterForm.default_foreign_label/1","doc":"","ref":"AshPyroComponents.Components.FilterForm.html#default_foreign_label/1"},{"type":"function","title":"AshPyroComponents.Components.FilterForm.group_operator_options/0","doc":"Get the available group operators for filter form groups as select options.","ref":"AshPyroComponents.Components.FilterForm.html#group_operator_options/0"},{"type":"function","title":"AshPyroComponents.Components.FilterForm.path_from_string/1","doc":"","ref":"AshPyroComponents.Components.FilterForm.html#path_from_string/1"},{"type":"function","title":"AshPyroComponents.Components.FilterForm.predicate_operator_options/2","doc":"Get the available predicate operators for the given resource field as select options.","ref":"AshPyroComponents.Components.FilterForm.html#predicate_operator_options/2"},{"type":"function","title":"AshPyroComponents.Components.FilterForm.predicate_operators/2","doc":"Get the available predicate operators and functions for the given resource field.","ref":"AshPyroComponents.Components.FilterForm.html#predicate_operators/2"},{"type":"function","title":"AshPyroComponents.Components.FilterForm.render/1","doc":"Renders a filter form for the given resource action.","ref":"AshPyroComponents.Components.FilterForm.html#render/1"},{"type":"function","title":"Attributes - AshPyroComponents.Components.FilterForm.render/1","doc":"* `overrides` (`:list`) - Manually set the overrides for this component (instead of config/default). Defaults to `nil`.\n* `id` (`:string`) (required)\n* `resource` (`:atom`) (required) - the resource of the data table.\n* `action` (`:atom`) (required) - the action to filter.\n* `to_uri` (`:any`) (required) - a function that takes params and returns a uri.\n* `uri_params` (`:map`) (required) - the current params; filter params are expected to be namespaced under target_id.\n* `target_id` (`:string`) (required) - the target component id.\n* `actor` (`:map`) - the actor to be passed to actions. Defaults to `nil`.\n* `tz` (`:string`) - timezone. Defaults to `\"Etc/UTC\"`.\n* `class` (`:any`) - (overridable, `:css_classes`).\n* `form_class` (`:any`) - (overridable, `:css_classes`).\n* `fieldset_class` (`:any`) - (overridable, `:css_classes`).\n* `legend_class` (`:any`) - (overridable, `:css_classes`).\n* `legend_label_class` (`:any`) - (overridable, `:css_classes`).\n* `button_class` (`:any`) - (overridable, `:css_classes`).\n* `input_class` (`:any`) - (overridable, `:css_classes`).","ref":"AshPyroComponents.Components.FilterForm.html#render/1-attributes"},{"type":"function","title":"AshPyroComponents.Components.FilterForm.render_right/1","doc":"","ref":"AshPyroComponents.Components.FilterForm.html#render_right/1"},{"type":"function","title":"Attributes - AshPyroComponents.Components.FilterForm.render_right/1","doc":"* `form` (`:any`) (required)\n* `destination_field` (`:map`) (required)\n* `is_enum?` (`:boolean`) (required)\n* `tz` (`:string`) (required)\n* `input_class` (`:any`) (required)","ref":"AshPyroComponents.Components.FilterForm.html#render_right/1-attributes"},{"type":"module","title":"AshPyroComponents.Components.Form","doc":"A component that auto-renders forms for Ash resources.","ref":"AshPyroComponents.Components.Form.html"},{"type":"module","title":"Overridable Component Attributes - AshPyroComponents.Components.Form","doc":"You can customize the components in this module by [configuring overrides](`Pyro.Overrides`).\n\nThe components in this module support the following overridable attributes:\n\n- `ash_form/1`\n  - `:autocomplete` `:string` (required)\n  - `:class` `:css_classes`\n  - `:actions_class` `:css_classes`\n\n- `render_field/1`\n  - `:field_group_class` `:css_classes`\n  - `:field_group_label_class` `:css_classes`","ref":"AshPyroComponents.Components.Form.html#module-overridable-component-attributes"},{"type":"function","title":"AshPyroComponents.Components.Form.ash_form/1","doc":"Renders an Ash form.","ref":"AshPyroComponents.Components.Form.html#ash_form/1"},{"type":"function","title":"Attributes - AshPyroComponents.Components.Form.ash_form/1","doc":"* `overrides` (`:list`) - Manually set the overrides for this component (instead of config/default). Defaults to `nil`.\n* `action_info` (`:any`) - Defaults to `:unassigned`.\n* `pyro_form` (`:any`) - Defaults to `:unassigned`.\n* `as` (`:any`) - the server side parameter to collect all input under. Defaults to `nil`.\n* `for` (`:map`) (required) - the datastructure for the form.\n* `resource` (`:atom`) (required) - the resource of the form.\n* `actor` (`:map`) - the actor to be passed to actions. Defaults to `nil`.\n* `tz` (`:string`) - timezone. Defaults to `\"Etc/UTC\"`.\n* `autocomplete` (`:string`) - (overridable, required).\n* `class` (`:any`) - (overridable, `:css_classes`).\n* `actions_class` (`:any`) - (overridable, `:css_classes`).\n* Global attributes are accepted. the arbitrary HTML attributes to apply to the form tag. Supports all globals plus: `[\"name\", \"rel\", \"action\", \"enctype\", \"method\", \"novalidate\", \"target\"]`.","ref":"AshPyroComponents.Components.Form.html#ash_form/1-attributes"},{"type":"function","title":"Slots - AshPyroComponents.Components.Form.ash_form/1","doc":"* `actions` - extra form actions.","ref":"AshPyroComponents.Components.Form.html#ash_form/1-slots"},{"type":"module","title":"AshPyroComponents.Components.Page","doc":"Auto-render a full-featured page for a given resource.","ref":"AshPyroComponents.Components.Page.html"},{"type":"macro","title":"AshPyroComponents.Components.Page.__using__/1","doc":"Build a page automatically from AshPyro's `live_view` DSL. It will provide a complete page with all the usual features:\n\n  - url-based state\n  - pagination\n  - sorting\n  - filtering\n  - realtime updates via pub-sub\n  - forms\n  - authorization\n  - formatting date/time to user's timezone\n  - routes to include in your `router.ex`. 🚀\n\n```elixir\ndefmodule ExampleWeb.Vendor.CompanyLive do\n  use ExampleWeb, :live_view\n  use AshPyroComponents.Components.Page,\n    resource: Example.Vendor.Company,\n    page: :companies\nend\n```","ref":"AshPyroComponents.Components.Page.html#__using__/1"},{"type":"function","title":"AshPyroComponents.Components.Page.get_live_tz/2","doc":"Get the timezone from session or connect_params, defaulting to the local timezone.","ref":"AshPyroComponents.Components.Page.html#get_live_tz/2"},{"type":"function","title":"AshPyroComponents.Components.Page.handle_tick/1","doc":"Update the `:now` assign taking the timezone into account.","ref":"AshPyroComponents.Components.Page.html#handle_tick/1"},{"type":"module","title":"AshPyroComponents.Component","doc":"Shared helpers used to build AshPyroComponents components.","ref":"AshPyroComponents.Component.html"},{"type":"macro","title":"AshPyroComponents.Component.__using__/1","doc":"Wraps `use Pyro.Component`, also importing this module's helpers.","ref":"AshPyroComponents.Component.html#__using__/1"},{"type":"module","title":"AshPyroComponents.LiveComponent","doc":"This is basically a wrapper around `Pyro.LiveComponent`, but it uses `AshPyroComponents.Component` instead of `Pyro.Component` to enable AshPyroComponents's extended features.","ref":"AshPyroComponents.LiveComponent.html"},{"type":"module","title":"AshPyroComponents.LiveView","doc":"This is basically a wrapper around `Pyro.LiveView`, but it uses `AshPyroComponents.Component` instead of `Pyro.Component` to enable AshPyroComponents's extended features.","ref":"AshPyroComponents.LiveView.html"},{"type":"extras","title":"About","doc":"# About\n\nPyro is a suite of libraries for building UI in Phoenix.\n\n- [Pyro](https://hexdocs.pm/pyro)\n\n  Component tooling for Phoenix.\n\n  - Customizable \"overrides\" system for granularly customizable themes\n  - Extended component attributes, e.g. CSS merging\n\n- [PyroComponents](https://hexdocs.pm/pyro_components)\n\n  Ready-made Phoenix components, built with pyro.\n\n  - Heex component library\n  - Overrides presets to get started quickly while allowing deep customization\n\n- [AshPyro](https://hexdocs.pm/ash_pyro)\n\n  Declarative UI for Ash Framework.\n\n  - Ash extensions providing a declarative UI DSL\n\n- [AshPyroComponents](https://hexdocs.pm/ash_pyro_components)\n\n  Components that automatically render PyroComponents declaratively via AshPyro.\n\nTo install AshPyroComponents and and hit the ground running, follow the [Get Started](get-started.html) guide. For the other features, please see the \"Get Started\" guide for the appropriate library instead.","ref":"about.html"},{"type":"extras","title":"What \"problem\" is it solving? - About","doc":"The default model of Phoenix is to generate, then customize. While this does provide great isolation, I have found it pretty tedious to repeatedly make very similar copy & paste boilerplate changes to the generated code every time I create a new Phoenix app. Additionally, some things (like timezone localization) are quite complicated and it would be nice for them to be handled by a library that is updated with future improvements. Copy & pasting boilerplate will lead to maintenance burdens down the road.\n\nThe tricky part is handling all the bespoke features in each app while sharing as much as possible. The goal is to provide a wide array of tooling, helpers and components with sane defaults, while allowing very granular overrides and optional libraries. By separating each level of features, you can choose which parts of Pyro to leverage, and which to implement yourself.","ref":"about.html#what-problem-is-it-solving"},{"type":"extras","title":"Get Started","doc":"# Get Started\n\nThis guide steps through the installation process for AshPyroComponents.","ref":"get-started.html"},{"type":"extras","title":"Installation - Get Started","doc":"The installation process is pretty straightforward, and many of the steps can be customized depending on how you want to use AshPyroComponents.\n\n#","ref":"get-started.html#installation"},{"type":"extras","title":"Steps - Get Started","doc":"These steps assume you are adding AshPyroComponents to an existing Phoenix LiveView app, as generated from the most recent version of `phx.new`.\n\n1. Add the appropriate dependencies:\n\n   ```elixir\n   def deps do\n     [\n    {:ash_postgres, \"~> 1.0\"},\n    {:ash_pyro_components, \"~> 0.1.0\"},\n    {:ash_pyro, \"~> 0.1.0\"},\n    {:ash, \"~> 2.4\"},\n    {:pyro, \"~> 0.2.0\"},\n\n    # Heroicon support in components\n    {:heroicons,\n      github: \"tailwindlabs/heroicons\",\n      tag: \"v2.1.1\",\n      app: false,\n      compile: false,\n      sparse: \"optimized\"},\n\n    #","ref":"get-started.html#steps"},{"type":"extras","title":"OPTIONAL DEPS BELOW ### - Get Started","doc":"# Date/Time/Zone components & tooling\n    {:tz, \"~> 0.26\"},\n    {:tz_extra, \"~> 0.26\"},\n    #   or\n    {:tzdata, \"~> 1.1\"},\n\n    # Code highlighting components:\n    {:makeup, \"~> 1.1\"},\n    {:makeup_eex, \"~> 0.1\"},\n    {:makeup_elixir, \"~> 0.16\"},\n    {:makeup_html, \"~> 0.1\"},\n    {:makeup_js, \"~> 0.1\"},\n    {:makeup_json, \"~> 0.1\"},\n     ]\n   end\n   ```\n\n2. Compare your `.formatter.exs` to this example and add anything you are missing:\n\n   ```elixir\n   [\n     import_deps: [:phoenix, :pyro, :ash_pyro, :ash, :ash_postgres],\n     subdirectories: [\"priv/*/migrations\"],\n     plugins: [Spark.Formatter, Phoenix.LiveView.HTMLFormatter],\n     inputs: [\"*.{heex,ex,exs}\", \"{config,lib,test}/**/*.{heex,ex,exs}\"]\n   ]\n   ```\n\n3. Add the following to your `config.exs`:\n\n   ```elixir\n   config :pyro, :overrides, [AshPyroComponents.Overrides.BEM, PyroComponents.Overrides.BEM]\n   config :pyro, gettext: MyApp.Gettext # optional\n   ```\n\n4. Configure your `tailwind.config.js` according to this example:\n\n   ```js\n   const path = require('path')\n\n   module.exports = {\n     // Dark mode support\n     darkMode: 'class',\n     content: [\n       // The usual defaults\n       './js/**/*.js',\n       '../lib/my_app_web.ex',\n       '../lib/my_app_web/**/*.*ex',\n\n       // Add the directory you will be keeping resources since\n       // we need to include any classes referenced in the UI DSL\n       '../lib/my_app/**/*.ex',\n\n       // Add your chosen Pyro overrides file(s)\n       '../deps/pyro_components/lib/pyro_components/overrides/bem.ex',\n       '../deps/ash_pyro_components/lib/ash_pyro_components/overrides/bem.ex',\n     ],\n     plugins: [\n       // Pyro expects the forms plugin\n       require('@tailwindcss/forms'),\n       // Add Pyro's Tailwind plugin\n       require(path.join(\n         __dirname,\n         '../deps/pyro/assets/js/tailwind-plugin.js',\n       ))({\n         heroIconsPath: path.join(__dirname, '../deps/heroicons/optimized'),\n         addBase: true,\n       }),\n\n       // Pyro replaces Phoenix's generated plugin stuff, you can delete it!\n     ],\n   }\n   ```\n\n   > ##","ref":"get-started.html#optional-deps-below"},{"type":"extras","title":"Note: {: .warning} - Get Started","doc":">\n   > Using `path.join(.__dirname, '...')` is important; Tailwind CLI will get confused without it!\n\n5. Add the following lines to `assets/js/app.js`:\n\n   ```js\n   import { hooks as pyro_components_hooks, getTimezone } from 'pyro_components'\n   import { hooks as ash_pyro_components_hooks } from 'ash_pyro_components'\n\n   let liveSocket = new LiveSocket('/live', Socket, {\n     params: { _csrf_token: csrfToken, timezone: getTimezone() },\n     hooks: { ...pyro_components_hooks, ...ash_pyro_components_hooks },\n   })\n   ```\n\n6. Edit your `assets/css.app.css` file to import the default styles:\n\n```css\n@import 'tailwindcss/base';\n@import 'tailwindcss/components';\n@import '../../deps/pyro_components/assets/css/bem.css';\n@import '../../deps/ash_pyro_components/assets/css/bem.css';\n@import 'tailwindcss/utilities';\n```\n\n6. Edit your `my_app_web.ex` file, replacing:\n\n   - `Phoenix.Component` with `AshPyroComponents.Component`\n   - `Phoenix.LiveComponent` with `AshPyroComponents.LiveComponent`\n   - `Phoenix.LiveView` with `AshPyroComponents.LiveView`\n\n   **Note:** _Only_ replace those top-level modules, _do not_ replace submodules, e.g. `Phoenix.LiveView.Router`.\n\n7. (Optional) Import the Pyro components into your `my_app_web.ex` helpers to make the available in your views/components:\n\n   ```elixir\n   defp html_helpers do\n     quote do\n       # Import all Pyro/AshPyro components\n       use AshPyroComponents\n       # Don't import CoreComponents since AshPyro replaces it and will conflict\n       # import MyAppWeb.CoreComponents\n       # ...\n   ```\n\n8. (Optional) Add the color scheme JS to your `root.html.heex` template (prevents [FOUC](https://en.wikipedia.org/wiki/Flash_of_unstyled_content)):\n\n   ```heex\n    \n     <.color_scheme_switcher_js />\n      \n    \n   ```\n\n   At this point, you probably want to delete the old `core_components.ex` file, since AshPyro will replace that functionality (mostly API-compatible).\n\n9. (Optional) configure some runtime options in `runtime.exs`:\n\n   ```elixir\n   config :pyro, default_timezone: \"America/Chicago\"\n   ```","ref":"get-started.html#note-warning"}],"content_type":"text/markdown"}