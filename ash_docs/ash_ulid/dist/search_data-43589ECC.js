searchData={"content_type":"text/markdown","items":[{"doc":"Ensures that other attributes that use the same \"lazy\" default (a function or an mfa), use the same default value. Has no effect unless `default` is a zero argument function.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-match_other_defaults?","title":"AshUlid.Resource.attributes.ulid_primary_key.match_other_defaults?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in sorts.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-sortable?","title":"AshUlid.Resource.attributes.ulid_primary_key.sortable?","type":"DSL"},{"doc":"Whether or not the attribute can be referenced in filters.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-filterable?","title":"AshUlid.Resource.attributes.ulid_primary_key.filterable?","type":"DSL"},{"doc":"A value to be set on all updates, unless a value is being provided already.","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-update_default","title":"AshUlid.Resource.attributes.ulid_primary_key.update_default","type":"DSL"},{"doc":"A value to be set on all creates, unless a value is being provided already.  Note: The default value is casted according to the type's Ash.Type.* module, before it is saved.  For `:string`, for example, if `constraints: [allow_empty?: _]` is false, the value `\"\"` will be cast to `nil`.  See the `:constraints` option, the `:allow_nil?` option, and the relevant `Ash.Type.*` documentation.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-default","title":"AshUlid.Resource.attributes.ulid_primary_key.default","type":"DSL"},{"doc":"Whether or not the attribute should be shown over public interfaces. See the [sensitive data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-public?","title":"AshUlid.Resource.attributes.ulid_primary_key.public?","type":"DSL"},{"doc":"Whether or not the value can be written to. Non-writable attributes can still be written with `Ash.Changeset.force_change_attribute/3`.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-writable?","title":"AshUlid.Resource.attributes.ulid_primary_key.writable?","type":"DSL"},{"doc":"Whether or not the value may be generated by the data layer.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-generated?","title":"AshUlid.Resource.attributes.ulid_primary_key.generated?","type":"DSL"},{"doc":"Whether the attribute is the primary key. Composite primary key is also possible by using `primary_key? true` in more than one attribute. If primary_key? is true, allow_nil? must be false.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-primary_key?","title":"AshUlid.Resource.attributes.ulid_primary_key.primary_key?","type":"DSL"},{"doc":"Whether or not to ensure this attribute is always selected when reading from the database, regardless of applied select statements.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-always_select?","title":"AshUlid.Resource.attributes.ulid_primary_key.always_select?","type":"DSL"},{"doc":"If the field should be mapped to a different name in the data layer. Support varies by data layer.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-source","title":"AshUlid.Resource.attributes.ulid_primary_key.source","type":"DSL"},{"doc":"Whether or not the attribute value contains sensitive information, like PII. See the [Sensitive Data guide](/documentation/topics/security/sensitive-data.md) for more.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-sensitive?","title":"AshUlid.Resource.attributes.ulid_primary_key.sensitive?","type":"DSL"},{"doc":"An optional description for the attribute.","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-description","title":"AshUlid.Resource.attributes.ulid_primary_key.description","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. For more, see `Ash.Type`.\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-constraints","title":"AshUlid.Resource.attributes.ulid_primary_key.constraints","type":"DSL"},{"doc":"The type of the attribute. See `Ash.Type` for more.","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-type","title":"AshUlid.Resource.attributes.ulid_primary_key.type","type":"DSL"},{"doc":"The name of the attribute.","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key-name","title":"AshUlid.Resource.attributes.ulid_primary_key.name","type":"DSL"},{"doc":"Declares a non writable, non-nil, primary key column of type ulid, which defaults to `AshUlid.generate/0`.\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except for `allow_nil?`, but it sets\nthe following different defaults:\n\n```elixir\n  writable? false\n  public? true\n  default &AshUlid.generate/0\n  primary_key? true\n  type AshUlid.Type\n```\n","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key","title":"AshUlid.Resource.attributes.ulid_primary_key","type":"DSL"},{"doc":"Helpers for working with ULIDs.","ref":"AshUlid.html","title":"AshUlid","type":"module"},{"doc":"Generate a Crockford Base32 encoded ULID string with current time.","ref":"AshUlid.html#generate/0","title":"AshUlid.generate/0","type":"function"},{"doc":"Generate a Crockford Base32 encoded ULID string with a provided Unix timestamp.","ref":"AshUlid.html#generate/1","title":"AshUlid.generate/1","type":"function"},{"doc":"Generate a binary ULID with current time.","ref":"AshUlid.html#generate_binary/0","title":"AshUlid.generate_binary/0","type":"function"},{"doc":"Generate a binary ULID with a provided Unix timestamp.","ref":"AshUlid.html#generate_binary/1","title":"AshUlid.generate_binary/1","type":"function"},{"doc":"A raw binary representation of a ULID.","ref":"AshUlid.html#t:raw/0","title":"AshUlid.raw/0","type":"type"},{"doc":"A Crockford Base32 encoded ULID string.","ref":"AshUlid.html#t:t/0","title":"AshUlid.t/0","type":"type"},{"doc":"Ash resource extension which adds `ulid_primary_key` to `attributes` section.","ref":"AshUlid.Resource.html","title":"AshUlid.Resource","type":"module"},{"doc":"`Ash.Type` implementation for ULID.","ref":"AshUlid.Type.html","title":"AshUlid.Type","type":"module"},{"doc":"# AshUlid\n\n[![Module Version](https://img.shields.io/hexpm/v/ash_ulid)](https://hex.pm/packages/ash_ulid)\n[![Hex Docs](https://img.shields.io/badge/hex-docs-lightgreen)](https://hexdocs.pm/ash_ulid/)\n[![License](https://img.shields.io/hexpm/l/ash_ulid)](https://github.com/vonagam/ash_ulid/blob/master/LICENSE.md)\n\n`Ash.Type` implementation for [ULID](https://github.com/ulid/spec).\n\nConsists of three modules:\n\n- `AshUlid` - utility functions to generate ULIDs.\n- `AshUlid.Type` - `Ash.Type` implementation.\n- `AshUlid.Resource` - resource extension with `ulid_primary_key` shortcut.","ref":"readme.html","title":"Guide","type":"extras"},{"doc":"Add to the deps, get deps (`mix deps.get`), compile them (`mix deps.compile`).\n\n```elixir\ndef deps do\n  [\n    {:ash_ulid, \"~> 1.0.0\"},\n  ]\nend\n```","ref":"readme.html#installation","title":"Installation - Guide","type":"extras"},{"doc":"","ref":"readme.html#usage","title":"Usage - Guide","type":"extras"},{"doc":"To use as a primary key in `Ash.Resource` it is recommended to add `AshUlid.Resource` extension that provides `ulid_primary_key`:\n\n```elixir\ndefmodule Example.Resource do\n  use Ash.Resource,\n    extensions: [AshUlid.Resource]\n\n  attributes do\n    ulid_primary_key :id\n  end\nend\n```\n\nWhich is a shortcut for this:\n\n```elixir\nuuid_primary_key :id, type: AshUlid.Type, default: &AshUlid.generate/0\n```\n\nTo prevent formatter from adding parens to `ulid_primary_key` add `:ash_ulid` to `import_deps` in `.formatter.exs`.\n\nIf you plan to use ULID as a main type for primary keys it makes sense to set it as `default_belongs_to_type` in a config:\n\n```elixir\nconfig :ash, default_belongs_to_type: AshUlid.Type\n```","ref":"readme.html#primary-key","title":"Primary key - Guide","type":"extras"},{"doc":"`AshUlid.Type` can be registered under `ulid` name in a config:\n```elixir\nconfig :ash, custom_types: [ulid: AshUlid.Type]\n```\n\nAnd then used like this:\n```elixir\ndefmodule Example.Another do\n  use Ash.Resource\n\n  attributes do\n    attribute :key, :ulid\n  end\n\n  relationships do\n    belongs_to :resource, Example.Resource, attribute_type: :ulid\n  end\nend\n```\n\nWithout an alias it is the same, just replace `:ulid` with `AshUlid.Type`.\n\nIf `default_belongs_to_type` is set then `attribute_type: :ulid` in this example is not needed.","ref":"readme.html#attribute-type","title":"Attribute type - Guide","type":"extras"},{"doc":"To generate ULID call `AshUlid.generate/0` or `AshUlid.generate/1` with a specific timestamp.","ref":"readme.html#generate","title":"Generate - Guide","type":"extras"},{"doc":"ULID spec can be found [here](https://github.com/ulid/spec).\n\nThe work is mostly based on [`Ecto.ULID`](https://github.com/TheRealReal/ecto-ulid).","ref":"readme.html#references","title":"References - Guide","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: AshUlid.Resource\n\nAsh resource extension which adds `ulid_primary_key` to `attributes` section.","ref":"dsl-ashulid-resource.html","title":"DSL: AshUlid.Resource","type":"extras"},{"doc":"```elixir\nulid_primary_key name\n```\n\n\nDeclares a non writable, non-nil, primary key column of type ulid, which defaults to `AshUlid.generate/0`.\n\nAccepts all the same options as `d:Ash.Resource.Dsl.attributes.attribute`, except for `allow_nil?`, but it sets\nthe following different defaults:\n\n```elixir\nwritable? false\npublic? true\ndefault &AshUlid.generate/0\nprimary_key? true\ntype AshUlid.Type\n```","ref":"dsl-ashulid-resource.html#attributes-ulid_primary_key","title":"attributes.ulid_primary_key - DSL: AshUlid.Resource","type":"extras"},{"doc":"```\nulid_primary_key :id\n```","ref":"dsl-ashulid-resource.html#examples","title":"Examples - DSL: AshUlid.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#attributes-ulid_primary_key-name){: #attributes-ulid_primary_key-name .spark-required} | `atom` |  | The name of the attribute. |","ref":"dsl-ashulid-resource.html#arguments","title":"Arguments - DSL: AshUlid.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`type`](#attributes-ulid_primary_key-type){: #attributes-ulid_primary_key-type } | `module` | `AshUlid.Type` | The type of the attribute. See `Ash.Type` for more. |\n| [`constraints`](#attributes-ulid_primary_key-constraints){: #attributes-ulid_primary_key-constraints } | `keyword` |  | Constraints to provide to the type when casting the value. For more, see `Ash.Type`. |\n| [`description`](#attributes-ulid_primary_key-description){: #attributes-ulid_primary_key-description } | `String.t` |  | An optional description for the attribute. |\n| [`sensitive?`](#attributes-ulid_primary_key-sensitive?){: #attributes-ulid_primary_key-sensitive? } | `boolean` | `false` | Whether or not the attribute value contains sensitive information, like PII. See the [Sensitive Data guide](/documentation/topics/security/sensitive-data.md) for more. |\n| [`source`](#attributes-ulid_primary_key-source){: #attributes-ulid_primary_key-source } | `atom` |  | If the field should be mapped to a different name in the data layer. Support varies by data layer. |\n| [`always_select?`](#attributes-ulid_primary_key-always_select?){: #attributes-ulid_primary_key-always_select? } | `boolean` | `false` | Whether or not to ensure this attribute is always selected when reading from the database, regardless of applied select statements. |\n| [`primary_key?`](#attributes-ulid_primary_key-primary_key?){: #attributes-ulid_primary_key-primary_key? } | `boolean` | `true` | Whether the attribute is the primary key. Composite primary key is also possible by using `primary_key? true` in more than one attribute. If primary_key? is true, allow_nil? must be false. |\n| [`generated?`](#attributes-ulid_primary_key-generated?){: #attributes-ulid_primary_key-generated? } | `boolean` | `false` | Whether or not the value may be generated by the data layer. |\n| [`writable?`](#attributes-ulid_primary_key-writable?){: #attributes-ulid_primary_key-writable? } | `boolean` | `false` | Whether or not the value can be written to. Non-writable attributes can still be written with `Ash.Changeset.force_change_attribute/3`. |\n| [`public?`](#attributes-ulid_primary_key-public?){: #attributes-ulid_primary_key-public? } | `boolean` | `true` | Whether or not the attribute should be shown over public interfaces. See the [sensitive data guide](/documentation/topics/security/sensitive-data.md) for more. |\n| [`default`](#attributes-ulid_primary_key-default){: #attributes-ulid_primary_key-default } | `(-> any) \\| mfa \\| any` | `&AshUlid.generate/0` | A value to be set on all creates, unless a value is being provided already.  Note: The default value is casted according to the type's Ash.Type.* module, before it is saved.  For `:string`, for example, if `constraints: [allow_empty?: _]` is false, the value `\"\"` will be cast to `nil`.  See the `:constraints` option, the `:allow_nil?` option, and the relevant `Ash.Type.*` documentation. |\n| [`update_default`](#attributes-ulid_primary_key-update_default){: #attributes-ulid_primary_key-update_default } | `(-> any) \\| mfa \\| any` |  | A value to be set on all updates, unless a value is being provided already. |\n| [`filterable?`](#attributes-ulid_primary_key-filterable?){: #attributes-ulid_primary_key-filterable? } | `boolean \\| :simple_equality` | `true` | Whether or not the attribute can be referenced in filters. |\n| [`sortable?`](#attributes-ulid_primary_key-sortable?){: #attributes-ulid_primary_key-sortable? } | `boolean` | `true` | Whether or not the attribute can be referenced in sorts. |\n| [`match_other_defaults?`](#attributes-ulid_primary_key-match_other_defaults?){: #attributes-ulid_primary_key-match_other_defaults? } | `boolean` | `false` | Ensures that other attributes that use the same \"lazy\" default (a function or an mfa), use the same default value. Has no effect unless `default` is a zero argument function. |","ref":"dsl-ashulid-resource.html#options","title":"Options - DSL: AshUlid.Resource","type":"extras"},{"doc":"Target: `Ash.Resource.Attribute`\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ashulid-resource.html#introspection","title":"Introspection - DSL: AshUlid.Resource","type":"extras"},{"doc":"MIT License\n\nCopyright (c) 2023 Dmitry Maganov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.","ref":"license.html","title":"License","type":"extras"}],"producer":{"name":"ex_doc","version":[48,46,51,50,46,50]}}