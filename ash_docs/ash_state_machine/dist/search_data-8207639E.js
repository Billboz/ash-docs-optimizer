searchData={"content_type":"text/markdown","items":[{"doc":"The states that this action may move to. If not specified, then any state is accepted. Use `:*` to refer to all states.","ref":"dsl-ashstatemachine.html#state_machine-transitions-transition-to","title":"AshStateMachine.state_machine.transitions.transition.to","type":"DSL"},{"doc":"The states in which this action may be called. If not specified, then any state is accepted. Use `:*` to refer to all states.","ref":"dsl-ashstatemachine.html#state_machine-transitions-transition-from","title":"AshStateMachine.state_machine.transitions.transition.from","type":"DSL"},{"doc":"The corresponding action that is invoked for the transition. Use `:*` to allow any update action to perform this transition.","ref":"dsl-ashstatemachine.html#state_machine-transitions-transition-action","title":"AshStateMachine.state_machine.transitions.transition.action","type":"DSL"},{"doc":"","ref":"dsl-ashstatemachine.html#state_machine-transitions-transition","title":"AshStateMachine.state_machine.transitions.transition","type":"DSL"},{"doc":"# Wildcards\nUse `:*` to represent \"any action\" when used in place of an action, or \"any state\" when used in place of a state.\n\nFor example:\n\n```elixir\ntransition :*, from: :*, to: :*\n```\n\nThe full list of states is derived at compile time from the transitions.\nUse the `extra_states` to express that certain types should be included\nin that list even though no transitions go to/from that state explicitly.\nThis is necessary for cases where there are states that use `:*` and no\ntransition explicitly leads to that transition.\n","ref":"dsl-ashstatemachine.html#state_machine-transitions","title":"AshStateMachine.state_machine.transitions","type":"DSL"},{"doc":"The default initial state","ref":"dsl-ashstatemachine.html#state_machine-default_initial_state","title":"AshStateMachine.state_machine.default_initial_state","type":"DSL"},{"doc":"The allowed starting states of this state machine.","ref":"dsl-ashstatemachine.html#state_machine-initial_states","title":"AshStateMachine.state_machine.initial_states","type":"DSL"},{"doc":"The attribute to store the state in.","ref":"dsl-ashstatemachine.html#state_machine-state_attribute","title":"AshStateMachine.state_machine.state_attribute","type":"DSL"},{"doc":"A list of states that may be used by transitions to/from `:*`. See the docs on wildcards for more.\n","ref":"dsl-ashstatemachine.html#state_machine-extra_states","title":"AshStateMachine.state_machine.extra_states","type":"DSL"},{"doc":"A list of states that have been deprecated but are still valid. These will still be in the possible list of states, but `:*` will not include them.\n","ref":"dsl-ashstatemachine.html#state_machine-deprecated_states","title":"AshStateMachine.state_machine.deprecated_states","type":"DSL"},{"doc":"","ref":"dsl-ashstatemachine.html#state_machine","title":"AshStateMachine.state_machine","type":"DSL"},{"doc":"Provides tools for defining and working with resource-backed state machines.","ref":"AshStateMachine.html","title":"AshStateMachine","type":"module"},{"doc":"A reusable helper which returns all possible next states for a record\n(regardless of action).","ref":"AshStateMachine.html#possible_next_states/1","title":"AshStateMachine.possible_next_states/1","type":"function"},{"doc":"A reusable helper which returns all possible next states for a record given a\nspecific action.","ref":"AshStateMachine.html#possible_next_states/2","title":"AshStateMachine.possible_next_states/2","type":"function"},{"doc":"Hello!","ref":"AshStateMachine.html#state_machine/1","title":"AshStateMachine.state_machine/1","type":"macro"},{"doc":"A utility to transition the state of a changeset, honoring the rules of the resource.","ref":"AshStateMachine.html#transition_state/2","title":"AshStateMachine.transition_state/2","type":"function"},{"doc":"Introspection helpers for `AshStateMachine`","ref":"AshStateMachine.Info.html","title":"AshStateMachine.Info","type":"module"},{"doc":"","ref":"AshStateMachine.Info.html#state_machine_all_states/1","title":"AshStateMachine.Info.state_machine_all_states/1","type":"function"},{"doc":"The default initial state","ref":"AshStateMachine.Info.html#state_machine_default_initial_state/1","title":"AshStateMachine.Info.state_machine_default_initial_state/1","type":"function"},{"doc":"The default initial state","ref":"AshStateMachine.Info.html#state_machine_default_initial_state!/1","title":"AshStateMachine.Info.state_machine_default_initial_state!/1","type":"function"},{"doc":"A list of states that have been deprecated but are still valid. These will still be in the possible list of states, but `:*` will not include them.","ref":"AshStateMachine.Info.html#state_machine_deprecated_states/1","title":"AshStateMachine.Info.state_machine_deprecated_states/1","type":"function"},{"doc":"A list of states that have been deprecated but are still valid. These will still be in the possible list of states, but `:*` will not include them.","ref":"AshStateMachine.Info.html#state_machine_deprecated_states!/1","title":"AshStateMachine.Info.state_machine_deprecated_states!/1","type":"function"},{"doc":"A list of states that may be used by transitions to/from `:*`. See the docs on wildcards for more.","ref":"AshStateMachine.Info.html#state_machine_extra_states/1","title":"AshStateMachine.Info.state_machine_extra_states/1","type":"function"},{"doc":"A list of states that may be used by transitions to/from `:*`. See the docs on wildcards for more.","ref":"AshStateMachine.Info.html#state_machine_extra_states!/1","title":"AshStateMachine.Info.state_machine_extra_states!/1","type":"function"},{"doc":"The allowed starting states of this state machine.","ref":"AshStateMachine.Info.html#state_machine_initial_states/1","title":"AshStateMachine.Info.state_machine_initial_states/1","type":"function"},{"doc":"The allowed starting states of this state machine.","ref":"AshStateMachine.Info.html#state_machine_initial_states!/1","title":"AshStateMachine.Info.state_machine_initial_states!/1","type":"function"},{"doc":"state_machine DSL options\n\nReturns a map containing the and any configured or default values.","ref":"AshStateMachine.Info.html#state_machine_options/1","title":"AshStateMachine.Info.state_machine_options/1","type":"function"},{"doc":"The attribute to store the state in.","ref":"AshStateMachine.Info.html#state_machine_state_attribute/1","title":"AshStateMachine.Info.state_machine_state_attribute/1","type":"function"},{"doc":"The attribute to store the state in.","ref":"AshStateMachine.Info.html#state_machine_state_attribute!/1","title":"AshStateMachine.Info.state_machine_state_attribute!/1","type":"function"},{"doc":"state_machine.transitions DSL entities","ref":"AshStateMachine.Info.html#state_machine_transitions/1","title":"AshStateMachine.Info.state_machine_transitions/1","type":"function"},{"doc":"","ref":"AshStateMachine.Info.html#state_machine_transitions/2","title":"AshStateMachine.Info.state_machine_transitions/2","type":"function"},{"doc":"The configuration for an transition.","ref":"AshStateMachine.Transition.html","title":"AshStateMachine.Transition","type":"module"},{"doc":"","ref":"AshStateMachine.Transition.html#t:t/0","title":"AshStateMachine.Transition.t/0","type":"type"},{"doc":"Changes for working with AshStateMachine resources.","ref":"AshStateMachine.BuiltinChanges.html","title":"AshStateMachine.BuiltinChanges","type":"module"},{"doc":"Try and transition to the next state. Must be only one possible next state.","ref":"AshStateMachine.BuiltinChanges.html#next_state/0","title":"AshStateMachine.BuiltinChanges.next_state/0","type":"function"},{"doc":"Changes the state to the target state, validating the transition","ref":"AshStateMachine.BuiltinChanges.html#transition_state/1","title":"AshStateMachine.BuiltinChanges.transition_state/1","type":"function"},{"doc":"Returns a mermaid flow chart of a given state machine resource.","ref":"AshStateMachine.Charts.html","title":"AshStateMachine.Charts","type":"module"},{"doc":"","ref":"AshStateMachine.Charts.html#mermaid_flowchart/1","title":"AshStateMachine.Charts.mermaid_flowchart/1","type":"function"},{"doc":"","ref":"AshStateMachine.Charts.html#mermaid_state_diagram/1","title":"AshStateMachine.Charts.mermaid_state_diagram/1","type":"function"},{"doc":"Used when an initial state is set that is not a valid initial state","ref":"AshStateMachine.Errors.InvalidInitialState.html","title":"AshStateMachine.Errors.InvalidInitialState","type":"exception"},{"doc":"","ref":"AshStateMachine.Errors.InvalidInitialState.html#exception/0","title":"AshStateMachine.Errors.InvalidInitialState.exception/0","type":"function"},{"doc":"Used when a state change occurs in an action with no matching transition","ref":"AshStateMachine.Errors.NoMatchingTransition.html","title":"AshStateMachine.Errors.NoMatchingTransition","type":"exception"},{"doc":"","ref":"AshStateMachine.Errors.NoMatchingTransition.html#exception/0","title":"AshStateMachine.Errors.NoMatchingTransition.exception/0","type":"function"},{"doc":"A policy for pre_flight checking if a state transition is allowed.","ref":"AshStateMachine.Checks.ValidNextState.html","title":"AshStateMachine.Checks.ValidNextState","type":"module"},{"doc":"","ref":"AshStateMachine.Checks.ValidNextState.html#auto_filter/3","title":"AshStateMachine.Checks.ValidNextState.auto_filter/3","type":"function"},{"doc":"","ref":"AshStateMachine.Checks.ValidNextState.html#auto_filter_not/3","title":"AshStateMachine.Checks.ValidNextState.auto_filter_not/3","type":"function"},{"doc":"","ref":"AshStateMachine.Checks.ValidNextState.html#check/4","title":"AshStateMachine.Checks.ValidNextState.check/4","type":"function"},{"doc":"","ref":"AshStateMachine.Checks.ValidNextState.html#describe/1","title":"AshStateMachine.Checks.ValidNextState.describe/1","type":"function"},{"doc":"","ref":"AshStateMachine.Checks.ValidNextState.html#filter/3","title":"AshStateMachine.Checks.ValidNextState.filter/3","type":"function"},{"doc":"","ref":"AshStateMachine.Checks.ValidNextState.html#reject/3","title":"AshStateMachine.Checks.ValidNextState.reject/3","type":"function"},{"doc":"","ref":"AshStateMachine.Checks.ValidNextState.html#requires_original_data?/2","title":"AshStateMachine.Checks.ValidNextState.requires_original_data?/2","type":"function"},{"doc":"","ref":"AshStateMachine.Checks.ValidNextState.html#strict_check/3","title":"AshStateMachine.Checks.ValidNextState.strict_check/3","type":"function"},{"doc":"","ref":"AshStateMachine.Checks.ValidNextState.html#strict_check_context/1","title":"AshStateMachine.Checks.ValidNextState.strict_check_context/1","type":"function"},{"doc":"","ref":"AshStateMachine.Checks.ValidNextState.html#type/0","title":"AshStateMachine.Checks.ValidNextState.type/0","type":"function"},{"doc":"Mod Docs","ref":"AshStateMachine.StateMachine.Options.html","title":"AshStateMachine.StateMachine.Options","type":"module"},{"doc":"Hello 3","ref":"AshStateMachine.StateMachine.Options.html#default_initial_state/1","title":"AshStateMachine.StateMachine.Options.default_initial_state/1","type":"macro"},{"doc":"Hello 3","ref":"AshStateMachine.StateMachine.Options.html#deprecated_states/1","title":"AshStateMachine.StateMachine.Options.deprecated_states/1","type":"macro"},{"doc":"Hello 3","ref":"AshStateMachine.StateMachine.Options.html#extra_states/1","title":"AshStateMachine.StateMachine.Options.extra_states/1","type":"macro"},{"doc":"Hello 3","ref":"AshStateMachine.StateMachine.Options.html#initial_states/1","title":"AshStateMachine.StateMachine.Options.initial_states/1","type":"macro"},{"doc":"Hello 3","ref":"AshStateMachine.StateMachine.Options.html#state_attribute/1","title":"AshStateMachine.StateMachine.Options.state_attribute/1","type":"macro"},{"doc":"Mod docs","ref":"AshStateMachine.StateMachine.Transitions.Transition.html","title":"AshStateMachine.StateMachine.Transitions.Transition","type":"module"},{"doc":"Hello 4","ref":"AshStateMachine.StateMachine.Transitions.Transition.html#transition/2","title":"AshStateMachine.StateMachine.Transitions.Transition.transition/2","type":"macro"},{"doc":"Mod Docs","ref":"AshStateMachine.StateMachine.Transitions.Transition.Options.html","title":"AshStateMachine.StateMachine.Transitions.Transition.Options","type":"module"},{"doc":"Hello 2","ref":"AshStateMachine.StateMachine.Transitions.Transition.Options.html#from/1","title":"AshStateMachine.StateMachine.Transitions.Transition.Options.from/1","type":"macro"},{"doc":"Hello 2","ref":"AshStateMachine.StateMachine.Transitions.Transition.Options.html#to/1","title":"AshStateMachine.StateMachine.Transitions.Transition.Options.to/1","type":"macro"},{"doc":"MOD DOCS","ref":"AshStateMachine.Transitions.html","title":"AshStateMachine.Transitions","type":"module"},{"doc":"Hello!","ref":"AshStateMachine.Transitions.html#transitions/1","title":"AshStateMachine.Transitions.transitions/1","type":"macro"},{"doc":"Generates a Mermaid Flow Chart for each `Ash.Resource` with the `AshStateMachine`\nextension alongside the resource.","ref":"Mix.Tasks.AshStateMachine.GenerateFlowCharts.html","title":"mix ash_state_machine.generate_flow_charts","type":"task"},{"doc":"This mix task requires the Mermaid CLI to be installed on your system.\n\nSee https://github.com/mermaid-js/mermaid-cli","ref":"Mix.Tasks.AshStateMachine.GenerateFlowCharts.html#module-prerequisites","title":"Prerequisites - mix ash_state_machine.generate_flow_charts","type":"task"},{"doc":"* `--type` - generates a given type. Valid values are `\"state_diagram\"` and `\"flow_chart\"`. Defaults to `\"state_diagram\"`.\n  * `--only` - only generates the given Flow file\n  * `--format` - Can be set to one of either:\n    * `plain` - Prints just the mermaid output as text. This is the default.\n    * `md` - Prints the mermaid diagram in a markdown code block.\n    * `svg` - Generates an SVG\n    * `pdf` - Generates a PDF\n    * `png` - Generates a PNG","ref":"Mix.Tasks.AshStateMachine.GenerateFlowCharts.html#module-command-line-options","title":"Command line options - mix ash_state_machine.generate_flow_charts","type":"task"},{"doc":"","ref":"Mix.Tasks.AshStateMachine.GenerateFlowCharts.html#run/1","title":"Mix.Tasks.AshStateMachine.GenerateFlowCharts.run/1","type":"function"},{"doc":"![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-black-text.png?raw=true#gh-light-mode-only)\n![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-white-text.png?raw=true#gh-dark-mode-only)\n\n![Elixir CI](https://github.com/ash-project/ash_state_machine/workflows/CI/badge.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Hex version badge](https://img.shields.io/hexpm/v/ash_state_machine.svg)](https://hex.pm/packages/ash_state_machine)\n[![Hexdocs badge](https://img.shields.io/badge/docs-hexdocs-purple)](https://hexdocs.pm/ash_state_machine)\n\n# AshStateMachine\n\nWelcome! This is the extension for building state machines with [Ash](https://hexdocs.pm/ash_state_machine) resources.","ref":"readme.html","title":"Home","type":"extras"},{"doc":"- [Getting Started with AshStateMachine](documentation/tutorials/getting-started-with-ash-state-machine.md)","ref":"readme.html#tutorials","title":"Tutorials - Home","type":"extras"},{"doc":"- [What is AshStateMachine?](documentation/topics/what-is-ash-state-machine.md)\n- [Charts](documentation/topics/charts.md)\n- [Working with `Ash.can?`](documentation/topics/working-with-ash-can.md)","ref":"readme.html#topics","title":"Topics - Home","type":"extras"},{"doc":"- [AshStateMachine DSL](documentation/dsls/DSL:-AshStateMachine.md)","ref":"readme.html#reference","title":"Reference - Home","type":"extras"},{"doc":"# Getting Started with State Machines","ref":"getting-started-with-ash-state-machine.html","title":"Getting Started with State Machines","type":"extras"},{"doc":"If you haven't already, read the [Ash Getting Started Guide](https://hexdocs.pm/ash/get-started.html), and familiarize yourself with Ash and Ash resources.","ref":"getting-started-with-ash-state-machine.html#get-familiar-with-ash-resources","title":"Get familiar with Ash resources - Getting Started with State Machines","type":"extras"},{"doc":"```elixir\n{:ash_state_machine, \"~> 0.2.6\"}\n```","ref":"getting-started-with-ash-state-machine.html#bring-in-the-ash_state_machine-dependency","title":"Bring in the ash_state_machine dependency - Getting Started with State Machines","type":"extras"},{"doc":"```elixir\nuse Ash.Resource,\n  extensions: [AshStateMachine]\n```","ref":"getting-started-with-ash-state-machine.html#add-the-extension-to-your-resource","title":"Add the extension to your resource - Getting Started with State Machines","type":"extras"},{"doc":"```elixir\nuse Ash.Resource,\n  extensions: [AshStateMachine]\n\n...\n\nstate_machine do\n  initial_states [:pending]\n  default_initial_state :pending\nend\n```","ref":"getting-started-with-ash-state-machine.html#add-initial-states-and-a-default-initial-state","title":"Add initial states, and a default initial state - Getting Started with State Machines","type":"extras"},{"doc":"```elixir\nstate_machine do\n  initial_states [:pending]\n  default_initial_state :pending\n\n  transitions do\n    # `:begin` action can move state from `:pending` to `:started`/`:aborted`\n    transition :begin, from: :pending, to: [:started, :aborted]\n  end\nend\n```","ref":"getting-started-with-ash-state-machine.html#add-allowed-transitions","title":"Add allowed transitions - Getting Started with State Machines","type":"extras"},{"doc":"","ref":"getting-started-with-ash-state-machine.html#use-transition_state-in-your-actions","title":"Use `transition_state` in your actions - Getting Started with State Machines","type":"extras"},{"doc":"```elixir\nactions do\n  update :begin do\n    # for a static state transition\n    change transition_state(:started)\n  end\nend\n```","ref":"getting-started-with-ash-state-machine.html#for-simple-static-state-transitions","title":"For simple/static state transitions - Getting Started with State Machines","type":"extras"},{"doc":"```elixir\ndefmodule Start do\n  use Ash.Resource.Change\n\n  def change(changeset, _, _) do\n    if ready_to_start?(changeset) do\n      AshStateMachine.transition_state(changeset, :started)\n    else\n      AshStateMachine.transition_state(changeset, :aborted)\n    end\n  end\nend\n\nactions do\n  update :begin do\n    # for a dynamic state transition\n    change Start\n  end\nend\n```","ref":"getting-started-with-ash-state-machine.html#for-dynamic-conditional-state-transitions","title":"For dynamic/conditional state transitions - Getting Started with State Machines","type":"extras"},{"doc":"The concept of a state machine (in this case a \"Finite State Machine\"), essentially involves a single `state`, with specified transitions between states. For example, you might have an order state machine with states `[:pending, :on_its_way, :delivered]`. However, you can't go from `:pending` to `:delivered` (probably), and so you want to only allow certain transitions in certain circumstances, i.e `:pending -> :on_its_way -> :delivered`.\n\nThis extension's goal is to help you write clear and clean state machines, with all of the extensibility and power of Ash resources and actions.","ref":"getting-started-with-ash-state-machine.html#making-a-resource-into-a-state-machine","title":"Making a resource into a state machine - Getting Started with State Machines","type":"extras"},{"doc":"# What is AshStateMachine?","ref":"what-is-ash-state-machine.html","title":"What is AshStateMachine?","type":"extras"},{"doc":"A state machine is a program who's purpose is to manage an internal \"state\". The simplest example of a state machine could be a program representing a light switch. A light switch might have two states, \"on\" and \"off\". You can transition from \"on\" to \"off\", and back.\n\n```mermaid\nclassDiagram\n\nclass Switch {\n  state on | off\n  turnOn() off -> on\n  turnOff() on -> off\n}\n```\n\nTo build state machines with `Ash.Resource`, we use [`AshStateMachine`](https://hexdocs.pm/ash_state_machine).\n\nWhen we refer to \"state machines\" in AshStateMachine, we're referring to a specific type of state machine known as a \"Finite State Machine\".\nIt is \"finite\", because there are a statically known list of states that the machine may be in at any time, just like the `Switch` example above.","ref":"what-is-ash-state-machine.html#what-is-a-state-machine","title":"What is a State Machine? - What is AshStateMachine?","type":"extras"},{"doc":"#### Flexible\n\nState machines are a _simple_ and _powerful_ way to represent complex workflows. They are flexible to modifications over time by adding new states, or new transitions between states.\n\n#### Migrateable\n\nState machines typically contain additional data about the state that they are in, or past states that they have been in, and this state must be migrated over time. When representing data as state machines, it becomes simple to do things like \"update all `package` records that are in the `pending_shipment` state\".\n\n#### Easy to reason about for humans\n\nState machines, when compared to things like workflows, are easy for people to reason about. We have an intuition for things like \"the package is currently `on_its_way`, with a `current_location` of New York, New York\", or \"your package is now `out_for_delivery` with an ETA of 6PM\".\n\n#### Compatible with any storage mechanism\n\nSince state machines are backed by simple state, you can often avoid any fancy workflow runners or complex storage mechanisms. You can store them in a database table, a json blob, a CSV file, at the end of the day its just a `:state` field and accompanying additional fields.","ref":"what-is-ash-state-machine.html#why-should-we-use-state-machines","title":"Why should we use state machines? - What is AshStateMachine?","type":"extras"},{"doc":"AshStateMachine is an [`Ash.Resource`](https://hexdocs.pm/ash/Ash.Resource.html) extension, meaning it _enhances a resource_ with state machine capabilities. In `Ash`, all modifications go through [_actions_](actions.html). In accordance with this, `AshStateMachine` offers a DSL for declaring _valid states and transitions_, but does not, itself, _perform_ those transitions. You will use a change called `transition_state/1` in an action to move from one state to the other. For more, check out the [CookBook](https://hexdocs.pm/ash/readme.html#cookbook)","ref":"what-is-ash-state-machine.html#what-does-ashstatemachine-do-differently-than-other-implementations","title":"What does AshStateMachine do differently than other implementations? - What is AshStateMachine?","type":"extras"},{"doc":"# Charts\n\nRun `mix ash_state_machine.generate_flow_charts` to generate flow charts for your resources. See the task documentation for more. Here is an example:\n\n```mermaid\nstateDiagram-v2\npending --> confirmed: confirm\nconfirmed --> on_its_way: begin_delivery\non_its_way --> arrived: package_arrived\non_its_way --> error: error\nconfirmed --> error: error\npending --> error: error\n```","ref":"charts.html","title":"Charts","type":"extras"},{"doc":"# Working with `Ash.can?`\n\nUsing `Ash.can?/3` won't return `false` if a given state machine transition is invalid. This is because `Ash.can?/3` is only concerned with policies, not changes/validations. However, many folks use `Ash.can?/3` in their UI to determine whether a given button/form/etc should be shown. To help with this you can add the following to your resource:\n\n```elixir\npolicies do\n  policy always() do\n    authorize_if AshStateMachine.Checks.ValidNextState\n  end\nend\n```\n\nThis check is only used in _pre_flight_ authorization checks (i.e calling `Ash.can?/3`), but it will return `true` in all cases when running real authorization checks. This is because the change is validated when you use the `transition_state/1` change and `AshStateMachine.transition_state/2`, and so you would be doing extra work for no reason.","ref":"working-with-ash-can.html","title":"Working with Ash.can?","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: AshStateMachine\n\nProvides tools for defining and working with resource-backed state machines.","ref":"dsl-ashstatemachine.html","title":"DSL: AshStateMachine","type":"extras"},{"doc":"","ref":"dsl-ashstatemachine.html#state_machine","title":"state_machine - DSL: AshStateMachine","type":"extras"},{"doc":"* [transitions](#state_machine-transitions)\n   * transition","ref":"dsl-ashstatemachine.html#nested-dsls","title":"Nested DSLs - DSL: AshStateMachine","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`initial_states`](#state_machine-initial_states){: #state_machine-initial_states .spark-required} | `list(atom)` |  | The allowed starting states of this state machine. |\n| [`deprecated_states`](#state_machine-deprecated_states){: #state_machine-deprecated_states } | `list(atom)` | `[]` | A list of states that have been deprecated but are still valid. These will still be in the possible list of states, but `:*` will not include them. |\n| [`extra_states`](#state_machine-extra_states){: #state_machine-extra_states } | `list(atom)` | `[]` | A list of states that may be used by transitions to/from `:*`. See the docs on wildcards for more. |\n| [`state_attribute`](#state_machine-state_attribute){: #state_machine-state_attribute } | `atom` | `:state` | The attribute to store the state in. |\n| [`default_initial_state`](#state_machine-default_initial_state){: #state_machine-default_initial_state } | `atom` |  | The default initial state |","ref":"dsl-ashstatemachine.html#options","title":"Options - DSL: AshStateMachine","type":"extras"},{"doc":"","ref":"dsl-ashstatemachine.html#state_machine-transitions","title":"state_machine.transitions - DSL: AshStateMachine","type":"extras"},{"doc":"Use `:*` to represent \"any action\" when used in place of an action, or \"any state\" when used in place of a state.\n\nFor example:\n\n```elixir\ntransition :*, from: :*, to: :*\n```\n\nThe full list of states is derived at compile time from the transitions.\nUse the `extra_states` to express that certain types should be included\nin that list even though no transitions go to/from that state explicitly.\nThis is necessary for cases where there are states that use `:*` and no\ntransition explicitly leads to that transition.","ref":"dsl-ashstatemachine.html#wildcards","title":"Wildcards - DSL: AshStateMachine","type":"extras"},{"doc":"* [transition](#state_machine-transitions-transition)","ref":"dsl-ashstatemachine.html#nested-dsls","title":"Nested DSLs - DSL: AshStateMachine","type":"extras"},{"doc":"```elixir\ntransition action\n```","ref":"dsl-ashstatemachine.html#state_machine-transitions-transition","title":"state_machine.transitions.transition - DSL: AshStateMachine","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`action`](#state_machine-transitions-transition-action){: #state_machine-transitions-transition-action .spark-required} | `atom` |  | The corresponding action that is invoked for the transition. Use `:*` to allow any update action to perform this transition. |","ref":"dsl-ashstatemachine.html#arguments","title":"Arguments - DSL: AshStateMachine","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`from`](#state_machine-transitions-transition-from){: #state_machine-transitions-transition-from .spark-required} | `list(atom) \\| atom` |  | The states in which this action may be called. If not specified, then any state is accepted. Use `:*` to refer to all states. |\n| [`to`](#state_machine-transitions-transition-to){: #state_machine-transitions-transition-to .spark-required} | `list(atom) \\| atom` |  | The states that this action may move to. If not specified, then any state is accepted. Use `:*` to refer to all states. |","ref":"dsl-ashstatemachine.html#options","title":"Options - DSL: AshStateMachine","type":"extras"},{"doc":"Target: `AshStateMachine.Transition`\n\n\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ashstatemachine.html#introspection","title":"Introspection - DSL: AshStateMachine","type":"extras"},{"doc":"# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](Https://conventionalcommits.org) for commit guidelines.\n\n<!-- changelog -->\n\n## [v0.2.6](https://github.com/ash-project/ash_state_machine/compare/v0.2.5...v0.2.6) (2024-08-31)","ref":"changelog.html","title":"Change Log","type":"extras"},{"doc":"* don't return tuple from `valid_next_state`\n\n## [v0.2.5](https://github.com/ash-project/ash_state_machine/compare/v0.2.4...v0.2.5) (2024-07-13)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* simplify atomic state transition with new ash feature\n\n## [v0.2.4](https://github.com/ash-project/ash_state_machine/compare/v0.2.3...v0.2.4) (2024-06-17)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"* support accepting the `:state` attribute\n\n## [v0.2.3](https://github.com/ash-project/ash_state_machine/compare/v0.2.3-rc.1...v0.2.3) (2024-05-10)\n\n\n\n\n## [v0.2.3-rc.1](https://github.com/ash-project/ash_state_machine/compare/v0.2.3-rc.0...v0.2.3-rc.1) (2024-05-04)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* policy for including state machine in `can?` checks\n\n* optimize atomic state transition check\n\n* add atomic implementation\n\n## [v0.2.3-rc.0](https://github.com/ash-project/ash_state_machine/compare/v0.2.2...v0.2.3-rc.0) (2024-03-29)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"* update to Ash 3.0\n\n## [v0.2.2](https://github.com/ash-project/ash_state_machine/compare/v0.2.1...v0.2.2) (2023-09-15)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"* scrub `:*` from the list of states\n\n* proper entity path in replace logic","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* Add `possible_next_states` helper. (#9)\n\n* Add `possible_next_states` helper.\r\n\n* detect states used that don't exist and log an error\n\n## [v0.2.1](https://github.com/ash-project/ash_state_machine/compare/v0.2.0...v0.2.1) (2023-09-08)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"* Allow `next_state` to to match transitions from *. (#7)\n\n## [v0.2.0](https://github.com/ash-project/ash_state_machine/compare/v0.1.5...v0.2.0) (2023-09-08)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* Add `next_state` builtin change. (#6)","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"* exclude star from state_machine_all_states/1 to avoid inclusion in add_attribuet builder (#4)\n\n## [v0.1.5](https://github.com/ash-project/ash_state_machine/compare/v0.1.4...v0.1.5) (2023-08-04)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"* support :* in states\n\n## [v0.1.4](https://github.com/ash-project/ash_state_machine/compare/v0.1.3...v0.1.4) (2023-05-03)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"* Rename `from` to `old_state` in `NoMatchingTransition` error (#3)\n\n## [v0.1.3](https://github.com/ash-project/ash_state_machine/compare/v0.1.2...v0.1.3) (2023-04-28)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* == not != for checking all states\n\n## [v0.1.2](https://github.com/ash-project/ash_state_machine/compare/v0.1.1...v0.1.2) (2023-04-28)\n\n\n\n\n## [v0.1.1](https://github.com/ash-project/ash_state_machine/compare/v0.1.0...v0.1.1) (2023-04-23)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* make state diagrams the default chart\n\n## [v0.1.0](https://github.com/ash-project/ash_state_machine/compare/v0.1.0...v0.1.0) (2023-04-23)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"* add mix task `ash_state_machine.generate_flow_charts` (#1)","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"* action does not uniquely identify a transition\n\n* require `allow_nil? false` on state attribute","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* require `initial_states`\n\n* fix lint/credo, handle all changeset types\n\n* require from/to\n\n* flow chart generation\n\n* support `:*` as a transition action name to match all","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"}],"producer":{"name":"ex_doc","version":"0.34.2"}}