searchData={"content_type":"text/markdown","items":[{"doc":"The contents of the check. If this is set, the migration generator will include it when generating migrations","ref":"dsl-ashpostgres-datalayer.html#postgres-check_constraints-check_constraint-check","title":"AshPostgres.DataLayer.postgres.check_constraints.check_constraint.check","type":"DSL"},{"doc":"The message to be added if the check constraint fails","ref":"dsl-ashpostgres-datalayer.html#postgres-check_constraints-check_constraint-message","title":"AshPostgres.DataLayer.postgres.check_constraints.check_constraint.message","type":"DSL"},{"doc":"The name of the constraint","ref":"dsl-ashpostgres-datalayer.html#postgres-check_constraints-check_constraint-name","title":"AshPostgres.DataLayer.postgres.check_constraints.check_constraint.name","type":"DSL"},{"doc":"The attribute or list of attributes to which an error will be added if the check constraint fails","ref":"dsl-ashpostgres-datalayer.html#postgres-check_constraints-check_constraint-attribute","title":"AshPostgres.DataLayer.postgres.check_constraints.check_constraint.attribute","type":"DSL"},{"doc":"Add a check constraint to be validated.\n\nIf a check constraint exists on the table but not in this section, and it produces an error, a runtime error will be raised.\n\nProvide a list of attributes instead of a single attribute to add the message to multiple attributes.\n\nBy adding the `check` option, the migration generator will include it when generating migrations.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-check_constraints-check_constraint","title":"AshPostgres.DataLayer.postgres.check_constraints.check_constraint","type":"DSL"},{"doc":"A section for configuring the check constraints for a given table.\n\nThis can be used to automatically create those check constraints, or just to provide message when they are raised\n","ref":"dsl-ashpostgres-datalayer.html#postgres-check_constraints","title":"AshPostgres.DataLayer.postgres.check_constraints","type":"DSL"},{"doc":"Whether to create or not a corresponding index","ref":"dsl-ashpostgres-datalayer.html#postgres-references-reference-index?","title":"AshPostgres.DataLayer.postgres.references.reference.index?","type":"DSL"},{"doc":"select if the match is `:simple`, `:partial`, or `:full`","ref":"dsl-ashpostgres-datalayer.html#postgres-references-reference-match_type","title":"AshPostgres.DataLayer.postgres.references.reference.match_type","type":"DSL"},{"doc":"Defines additional keys to the foreign key in order to build a composite foreign key. The key should be the name of the source attribute (in the current resource), the value the name of the destination attribute.","ref":"dsl-ashpostgres-datalayer.html#postgres-references-reference-match_with","title":"AshPostgres.DataLayer.postgres.references.reference.match_with","type":"DSL"},{"doc":"The name of the foreign key to generate in the database. Defaults to <table>_<source_attribute>_fkey","ref":"dsl-ashpostgres-datalayer.html#postgres-references-reference-name","title":"AshPostgres.DataLayer.postgres.references.reference.name","type":"DSL"},{"doc":"Whether or not the constraint is deferrable. This only affects the migration generator.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-references-reference-deferrable","title":"AshPostgres.DataLayer.postgres.references.reference.deferrable","type":"DSL"},{"doc":"What should happen to records of this resource when the referenced destination_attribute of the *destination* record is update.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-references-reference-on_update","title":"AshPostgres.DataLayer.postgres.references.reference.on_update","type":"DSL"},{"doc":"What should happen to records of this resource when the referenced record of the *destination* resource is deleted.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-references-reference-on_delete","title":"AshPostgres.DataLayer.postgres.references.reference.on_delete","type":"DSL"},{"doc":"If set to true, no reference is created for the given relationship. This is useful if you need to define it in some custom way","ref":"dsl-ashpostgres-datalayer.html#postgres-references-reference-ignore?","title":"AshPostgres.DataLayer.postgres.references.reference.ignore?","type":"DSL"},{"doc":"The relationship to be configured","ref":"dsl-ashpostgres-datalayer.html#postgres-references-reference-relationship","title":"AshPostgres.DataLayer.postgres.references.reference.relationship","type":"DSL"},{"doc":"Configures the reference for a relationship in resource migrations.\n\nKeep in mind that multiple relationships can theoretically involve the same destination and foreign keys.\nIn those cases, you only need to configure the `reference` behavior for one of them. Any conflicts will result\nin an error, across this resource and any other resources that share a table with this one. For this reason,\ninstead of adding a reference configuration for `:nothing`, its best to just leave the configuration out, as that\nis the default behavior if *no* relationship anywhere has configured the behavior of that reference.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-references-reference","title":"AshPostgres.DataLayer.postgres.references.reference","type":"DSL"},{"doc":"For polymorphic resources, configures the on_update behavior of the automatically generated foreign keys to source tables.","ref":"dsl-ashpostgres-datalayer.html#postgres-references-polymorphic_on_update","title":"AshPostgres.DataLayer.postgres.references.polymorphic_on_update","type":"DSL"},{"doc":"For polymorphic resources, configures the on_delete behavior of the automatically generated foreign keys to source tables.","ref":"dsl-ashpostgres-datalayer.html#postgres-references-polymorphic_on_delete","title":"AshPostgres.DataLayer.postgres.references.polymorphic_on_delete","type":"DSL"},{"doc":"A section for configuring the references (foreign keys) in resource migrations.\n\nThis section is only relevant if you are using the migration generator with this resource.\nOtherwise, it has no effect.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-references","title":"AshPostgres.DataLayer.postgres.references","type":"DSL"},{"doc":"Whether or not to automatically update the tenant name if the record is udpated","ref":"dsl-ashpostgres-datalayer.html#postgres-manage_tenant-update?","title":"AshPostgres.DataLayer.postgres.manage_tenant.update?","type":"DSL"},{"doc":"Whether or not to automatically create a tenant when a record is created","ref":"dsl-ashpostgres-datalayer.html#postgres-manage_tenant-create?","title":"AshPostgres.DataLayer.postgres.manage_tenant.create?","type":"DSL"},{"doc":"A template that will cause the resource to create/manage the specified schema.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-manage_tenant-template","title":"AshPostgres.DataLayer.postgres.manage_tenant.template","type":"DSL"},{"doc":"Configuration for the behavior of a resource that manages a tenant\n","ref":"dsl-ashpostgres-datalayer.html#postgres-manage_tenant","title":"AshPostgres.DataLayer.postgres.manage_tenant","type":"DSL"},{"doc":"How to tear down the structure of the statement","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_statements-statement-down","title":"AshPostgres.DataLayer.postgres.custom_statements.statement.down","type":"DSL"},{"doc":"How to create the structure of the statement\n","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_statements-statement-up","title":"AshPostgres.DataLayer.postgres.custom_statements.statement.up","type":"DSL"},{"doc":"By default, we place the strings inside of ecto migration's `execute/1` function and assume they are sql. Use this option if you want to provide custom elixir code to be placed directly in the migrations\n","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_statements-statement-code?","title":"AshPostgres.DataLayer.postgres.custom_statements.statement.code?","type":"DSL"},{"doc":"The name of the statement, must be unique within the resource\n","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_statements-statement-name","title":"AshPostgres.DataLayer.postgres.custom_statements.statement.name","type":"DSL"},{"doc":"Add a custom statement for migrations.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_statements-statement","title":"AshPostgres.DataLayer.postgres.custom_statements.statement","type":"DSL"},{"doc":"A section for configuring custom statements to be added to migrations.\n\nChanging custom statements may require manual intervention, because Ash can't determine what order they should run\nin (i.e if they depend on table structure that you've added, or vice versa). As such, any `down` statements we run\nfor custom statements happen first, and any `up` statements happen last.\n\nAdditionally, when changing a custom statement, we must make some assumptions, i.e that we should migrate\nthe old structure down using the previously configured `down` and recreate it.\n\nThis may not be desired, and so what you may end up doing is simply modifying the old migration and deleting whatever was\ngenerated by the migration generator. As always: read your migrations after generating them!\n","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_statements","title":"AshPostgres.DataLayer.postgres.custom_statements","type":"DSL"},{"doc":"Whether or not the index should factor in the multitenancy attribute or not.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-all_tenants?","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.all_tenants?","type":"DSL"},{"doc":"A custom message to use for unique indexes that have been violated","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-message","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.message","type":"DSL"},{"doc":"specify whether null values should be considered distinct for a unique index. Requires PostgreSQL 15 or later","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-nulls_distinct","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.nulls_distinct","type":"DSL"},{"doc":"specify fields for a covering index. This is not supported by all databases. For more information on PostgreSQL support, please read the official docs.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-include","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.include","type":"DSL"},{"doc":"specify conditions for a partial index.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-where","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.where","type":"DSL"},{"doc":"specify an optional prefix for the index.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-prefix","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.prefix","type":"DSL"},{"doc":"configures the index type.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-using","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.using","type":"DSL"},{"doc":"indicates whether the index should be created/dropped concurrently.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-concurrently","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.concurrently","type":"DSL"},{"doc":"indicates whether the index should be unique.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-unique","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.unique","type":"DSL"},{"doc":"the name of the index. Defaults to \"#{table}_#{column}_index\".","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-name","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.name","type":"DSL"},{"doc":"The fields to attach the error to.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-error_fields","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.error_fields","type":"DSL"},{"doc":"The fields to include in the index.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index-fields","title":"AshPostgres.DataLayer.postgres.custom_indexes.index.fields","type":"DSL"},{"doc":"Add an index to be managed by the migration generator.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index","title":"AshPostgres.DataLayer.postgres.custom_indexes.index","type":"DSL"},{"doc":"A section for configuring indexes to be created by the migration generator.\n\nIn general, prefer to use `identities` for simple unique constraints. This is a tool to allow\nfor declaring more complex indexes.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes","title":"AshPostgres.DataLayer.postgres.custom_indexes","type":"DSL"},{"doc":"Declares this resource as polymorphic. See the [polymorphic resources guide](/documentation/topics/resources/polymorphic-resources.md) for more.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-polymorphic?","title":"AshPostgres.DataLayer.postgres.polymorphic?","type":"DSL"},{"doc":"The schema that the table is located in. Schema-based multitenancy will supercede this option. If this is changed, the migration generator will not remove the old schema.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-schema","title":"AshPostgres.DataLayer.postgres.schema","type":"DSL"},{"doc":"The table to store and read the resource from. If this is changed, the migration generator will not remove the old table.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-table","title":"AshPostgres.DataLayer.postgres.table","type":"DSL"},{"doc":"A list of attributes that will be ignored when generating migrations.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-migration_ignore_attributes","title":"AshPostgres.DataLayer.postgres.migration_ignore_attributes","type":"DSL"},{"doc":"A list of foreign keys that could raise errors, or an mfa to a function that takes a changeset and returns a list. In the format: `{:key, \"name_of_constraint\"}` or `{:key, \"name_of_constraint\", \"custom error message\"}`\n","ref":"dsl-ashpostgres-datalayer.html#postgres-foreign_key_names","title":"AshPostgres.DataLayer.postgres.foreign_key_names","type":"DSL"},{"doc":"A keyword list of identity names to the unique index name that they should use when being managed by the migration generator.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-identity_index_names","title":"AshPostgres.DataLayer.postgres.identity_index_names","type":"DSL"},{"doc":"A list of exclusion constraint names that could raise errors. Must be in the format `{:affected_key, \"name_of_constraint\"}` or `{:affected_key, \"name_of_constraint\", \"custom error message\"}`\n","ref":"dsl-ashpostgres-datalayer.html#postgres-exclusion_constraint_names","title":"AshPostgres.DataLayer.postgres.exclusion_constraint_names","type":"DSL"},{"doc":"A list of unique index names that could raise errors that are not configured in identities, or an mfa to a function that takes a changeset and returns the list. In the format `{[:affected, :keys], \"name_of_constraint\"}` or `{[:affected, :keys], \"name_of_constraint\", \"custom error message\"}`\n","ref":"dsl-ashpostgres-datalayer.html#postgres-unique_index_names","title":"AshPostgres.DataLayer.postgres.unique_index_names","type":"DSL"},{"doc":"Skip generating unique indexes when generating migrations","ref":"dsl-ashpostgres-datalayer.html#postgres-skip_unique_indexes","title":"AshPostgres.DataLayer.postgres.skip_unique_indexes","type":"DSL"},{"doc":"A list of `:first` type aggregate names that can be joined to using a simple join.  Use when you have a `:first` aggregate that uses a to-many relationship , but your `filter` statement ensures that there is only one result. Optimizes the generated query.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-simple_join_first_aggregates","title":"AshPostgres.DataLayer.postgres.simple_join_first_aggregates","type":"DSL"},{"doc":"A raw sql version of the base_filter, e.g `representative = true`. Required if trying to create a unique constraint on a resource with a base_filter","ref":"dsl-ashpostgres-datalayer.html#postgres-base_filter_sql","title":"AshPostgres.DataLayer.postgres.base_filter_sql","type":"DSL"},{"doc":"A keyword list of identity names and the SQL representation of their `where` clause. Used when creating unique indexes for identities over calculations","ref":"dsl-ashpostgres-datalayer.html#postgres-identity_wheres_to_sql","title":"AshPostgres.DataLayer.postgres.identity_wheres_to_sql","type":"DSL"},{"doc":"A keyword list of calculations and their SQL representation. Used when creating unique indexes for identities over calculations","ref":"dsl-ashpostgres-datalayer.html#postgres-calculations_to_sql","title":"AshPostgres.DataLayer.postgres.calculations_to_sql","type":"DSL"},{"doc":"A keyword list of attribute names to the ecto migration default that should be used for that attribute. The string you use will be placed verbatim in the migration. Use fragments like `fragment(\\\\\"now()\\\\\")`, or for `nil`, use `\\\\\"nil\\\\\"`.\n","ref":"dsl-ashpostgres-datalayer.html#postgres-migration_defaults","title":"AshPostgres.DataLayer.postgres.migration_defaults","type":"DSL"},{"doc":"A keyword list of attribute names to the ecto migration type that should be used for that attribute. Only necessary if you need to override the defaults.","ref":"dsl-ashpostgres-datalayer.html#postgres-migration_types","title":"AshPostgres.DataLayer.postgres.migration_types","type":"DSL"},{"doc":"A keyword list of attribute names to the ecto type that should be used for that attribute. Only necessary if you need to override the defaults.","ref":"dsl-ashpostgres-datalayer.html#postgres-storage_types","title":"AshPostgres.DataLayer.postgres.storage_types","type":"DSL"},{"doc":"Whether or not to include this resource in the generated migrations with `mix ash.generate_migrations`","ref":"dsl-ashpostgres-datalayer.html#postgres-migrate?","title":"AshPostgres.DataLayer.postgres.migrate?","type":"DSL"},{"doc":"The repo that will be used to fetch your data. See the `AshPostgres.Repo` documentation for more. Can also be a function that takes a resource and a type `:read | :mutate` and returns the repo","ref":"dsl-ashpostgres-datalayer.html#postgres-repo","title":"AshPostgres.DataLayer.postgres.repo","type":"DSL"},{"doc":"Postgres data layer configuration\n","ref":"dsl-ashpostgres-datalayer.html#postgres","title":"AshPostgres.DataLayer.postgres","type":"DSL"},{"doc":"MOD DOCS","ref":"AshPostgres.DataLayer.CheckConstraints.html","title":"AshPostgres.DataLayer.CheckConstraints","type":"module"},{"doc":"Hello!","ref":"AshPostgres.DataLayer.CheckConstraints.html#check_constraints/1","title":"AshPostgres.DataLayer.CheckConstraints.check_constraints/1","type":"macro"},{"doc":"MOD DOCS","ref":"AshPostgres.DataLayer.CustomIndexes.html","title":"AshPostgres.DataLayer.CustomIndexes","type":"module"},{"doc":"Hello!","ref":"AshPostgres.DataLayer.CustomIndexes.html#custom_indexes/1","title":"AshPostgres.DataLayer.CustomIndexes.custom_indexes/1","type":"macro"},{"doc":"MOD DOCS","ref":"AshPostgres.DataLayer.CustomStatements.html","title":"AshPostgres.DataLayer.CustomStatements","type":"module"},{"doc":"Hello!","ref":"AshPostgres.DataLayer.CustomStatements.html#custom_statements/1","title":"AshPostgres.DataLayer.CustomStatements.custom_statements/1","type":"macro"},{"doc":"MOD DOCS","ref":"AshPostgres.DataLayer.ManageTenant.html","title":"AshPostgres.DataLayer.ManageTenant","type":"module"},{"doc":"Hello!","ref":"AshPostgres.DataLayer.ManageTenant.html#manage_tenant/1","title":"AshPostgres.DataLayer.ManageTenant.manage_tenant/1","type":"macro"},{"doc":"Mod Docs","ref":"AshPostgres.DataLayer.ManageTenant.Options.html","title":"AshPostgres.DataLayer.ManageTenant.Options","type":"module"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.ManageTenant.Options.html#create?/1","title":"AshPostgres.DataLayer.ManageTenant.Options.create?/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.ManageTenant.Options.html#template/1","title":"AshPostgres.DataLayer.ManageTenant.Options.template/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.ManageTenant.Options.html#update?/1","title":"AshPostgres.DataLayer.ManageTenant.Options.update?/1","type":"macro"},{"doc":"Mod docs","ref":"AshPostgres.DataLayer.Postgres.CheckConstraints.CheckConstraint.html","title":"AshPostgres.DataLayer.Postgres.CheckConstraints.CheckConstraint","type":"module"},{"doc":"Hello 4","ref":"AshPostgres.DataLayer.Postgres.CheckConstraints.CheckConstraint.html#check_constraint/3","title":"AshPostgres.DataLayer.Postgres.CheckConstraints.CheckConstraint.check_constraint/3","type":"macro"},{"doc":"Mod Docs","ref":"AshPostgres.DataLayer.Postgres.CheckConstraints.CheckConstraint.Options.html","title":"AshPostgres.DataLayer.Postgres.CheckConstraints.CheckConstraint.Options","type":"module"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CheckConstraints.CheckConstraint.Options.html#check/1","title":"AshPostgres.DataLayer.Postgres.CheckConstraints.CheckConstraint.Options.check/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CheckConstraints.CheckConstraint.Options.html#message/1","title":"AshPostgres.DataLayer.Postgres.CheckConstraints.CheckConstraint.Options.message/1","type":"macro"},{"doc":"Mod docs","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.html","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index","type":"module"},{"doc":"Hello 4","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.html#index/2","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.index/2","type":"macro"},{"doc":"Mod Docs","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options","type":"module"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html#all_tenants?/1","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.all_tenants?/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html#concurrently/1","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.concurrently/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html#error_fields/1","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.error_fields/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html#include/1","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.include/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html#message/1","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.message/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html#name/1","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.name/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html#nulls_distinct/1","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.nulls_distinct/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html#prefix/1","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.prefix/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html#unique/1","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.unique/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html#using/1","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.using/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.html#where/1","title":"AshPostgres.DataLayer.Postgres.CustomIndexes.Index.Options.where/1","type":"macro"},{"doc":"Mod docs","ref":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement.html","title":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement","type":"module"},{"doc":"Hello 4","ref":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement.html#statement/2","title":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement.statement/2","type":"macro"},{"doc":"Mod Docs","ref":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement.Options.html","title":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement.Options","type":"module"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement.Options.html#code?/1","title":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement.Options.code?/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement.Options.html#down/1","title":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement.Options.down/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement.Options.html#up/1","title":"AshPostgres.DataLayer.Postgres.CustomStatements.Statement.Options.up/1","type":"macro"},{"doc":"Mod Docs","ref":"AshPostgres.DataLayer.Postgres.Options.html","title":"AshPostgres.DataLayer.Postgres.Options","type":"module"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#base_filter_sql/1","title":"AshPostgres.DataLayer.Postgres.Options.base_filter_sql/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#calculations_to_sql/1","title":"AshPostgres.DataLayer.Postgres.Options.calculations_to_sql/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#exclusion_constraint_names/1","title":"AshPostgres.DataLayer.Postgres.Options.exclusion_constraint_names/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#foreign_key_names/1","title":"AshPostgres.DataLayer.Postgres.Options.foreign_key_names/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#identity_index_names/1","title":"AshPostgres.DataLayer.Postgres.Options.identity_index_names/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#identity_wheres_to_sql/1","title":"AshPostgres.DataLayer.Postgres.Options.identity_wheres_to_sql/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#migrate?/1","title":"AshPostgres.DataLayer.Postgres.Options.migrate?/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#migration_defaults/1","title":"AshPostgres.DataLayer.Postgres.Options.migration_defaults/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#migration_ignore_attributes/1","title":"AshPostgres.DataLayer.Postgres.Options.migration_ignore_attributes/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#migration_types/1","title":"AshPostgres.DataLayer.Postgres.Options.migration_types/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#polymorphic?/1","title":"AshPostgres.DataLayer.Postgres.Options.polymorphic?/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#repo/1","title":"AshPostgres.DataLayer.Postgres.Options.repo/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#schema/1","title":"AshPostgres.DataLayer.Postgres.Options.schema/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#simple_join_first_aggregates/1","title":"AshPostgres.DataLayer.Postgres.Options.simple_join_first_aggregates/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#skip_unique_indexes/1","title":"AshPostgres.DataLayer.Postgres.Options.skip_unique_indexes/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#storage_types/1","title":"AshPostgres.DataLayer.Postgres.Options.storage_types/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#table/1","title":"AshPostgres.DataLayer.Postgres.Options.table/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.Postgres.Options.html#unique_index_names/1","title":"AshPostgres.DataLayer.Postgres.Options.unique_index_names/1","type":"macro"},{"doc":"Mod docs","ref":"AshPostgres.DataLayer.Postgres.References.Reference.html","title":"AshPostgres.DataLayer.Postgres.References.Reference","type":"module"},{"doc":"Hello 4","ref":"AshPostgres.DataLayer.Postgres.References.Reference.html#reference/2","title":"AshPostgres.DataLayer.Postgres.References.Reference.reference/2","type":"macro"},{"doc":"Mod Docs","ref":"AshPostgres.DataLayer.Postgres.References.Reference.Options.html","title":"AshPostgres.DataLayer.Postgres.References.Reference.Options","type":"module"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.References.Reference.Options.html#deferrable/1","title":"AshPostgres.DataLayer.Postgres.References.Reference.Options.deferrable/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.References.Reference.Options.html#ignore?/1","title":"AshPostgres.DataLayer.Postgres.References.Reference.Options.ignore?/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.References.Reference.Options.html#index?/1","title":"AshPostgres.DataLayer.Postgres.References.Reference.Options.index?/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.References.Reference.Options.html#match_type/1","title":"AshPostgres.DataLayer.Postgres.References.Reference.Options.match_type/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.References.Reference.Options.html#match_with/1","title":"AshPostgres.DataLayer.Postgres.References.Reference.Options.match_with/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.References.Reference.Options.html#name/1","title":"AshPostgres.DataLayer.Postgres.References.Reference.Options.name/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.References.Reference.Options.html#on_delete/1","title":"AshPostgres.DataLayer.Postgres.References.Reference.Options.on_delete/1","type":"macro"},{"doc":"Hello 2","ref":"AshPostgres.DataLayer.Postgres.References.Reference.Options.html#on_update/1","title":"AshPostgres.DataLayer.Postgres.References.Reference.Options.on_update/1","type":"macro"},{"doc":"MOD DOCS","ref":"AshPostgres.DataLayer.References.html","title":"AshPostgres.DataLayer.References","type":"module"},{"doc":"Hello!","ref":"AshPostgres.DataLayer.References.html#references/1","title":"AshPostgres.DataLayer.References.references/1","type":"macro"},{"doc":"Mod Docs","ref":"AshPostgres.DataLayer.References.Options.html","title":"AshPostgres.DataLayer.References.Options","type":"module"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.References.Options.html#polymorphic_on_delete/1","title":"AshPostgres.DataLayer.References.Options.polymorphic_on_delete/1","type":"macro"},{"doc":"Hello 3","ref":"AshPostgres.DataLayer.References.Options.html#polymorphic_on_update/1","title":"AshPostgres.DataLayer.References.Options.polymorphic_on_update/1","type":"macro"},{"doc":"Codemods and utilities for working with AshPostgres & Igniter","ref":"AshPostgres.Igniter.html","title":"AshPostgres.Igniter","type":"module"},{"doc":"","ref":"AshPostgres.Igniter.html#add_postgres_extension/3","title":"AshPostgres.Igniter.add_postgres_extension/3","type":"function"},{"doc":"","ref":"AshPostgres.Igniter.html#list_repos/1","title":"AshPostgres.Igniter.list_repos/1","type":"function"},{"doc":"","ref":"AshPostgres.Igniter.html#repo/2","title":"AshPostgres.Igniter.repo/2","type":"function"},{"doc":"","ref":"AshPostgres.Igniter.html#select_repo/2","title":"AshPostgres.Igniter.select_repo/2","type":"function"},{"doc":"","ref":"AshPostgres.Igniter.html#table/2","title":"AshPostgres.Igniter.table/2","type":"function"},{"doc":"Create the storage for repos in all resources for the given (or configured) domains.","ref":"Mix.Tasks.AshPostgres.Create.html","title":"mix ash_postgres.create","type":"task"},{"doc":"mix ash_postgres.create\n    mix ash_postgres.create --domains MyApp.Domain1,MyApp.Domain2","ref":"Mix.Tasks.AshPostgres.Create.html#module-examples","title":"Examples - mix ash_postgres.create","type":"task"},{"doc":"* `--domains` - the domains who's repos you want to migrate.\n  * `--quiet` - do not log output\n  * `--no-compile` - do not compile before creating\n  * `--no-deps-check` - do not compile before creating","ref":"Mix.Tasks.AshPostgres.Create.html#module-command-line-options","title":"Command line options - mix ash_postgres.create","type":"task"},{"doc":"Drop the storage for the given repository.","ref":"Mix.Tasks.AshPostgres.Drop.html","title":"mix ash_postgres.drop","type":"task"},{"doc":"mix ash_postgres.drop\n    mix ash_postgres.drop -r MyApp.Repo1,MyApp.Repo2","ref":"Mix.Tasks.AshPostgres.Drop.html#module-examples","title":"Examples - mix ash_postgres.drop","type":"task"},{"doc":"* `--domains` - the domains who's repos should be dropped\n  * `-q`, `--quiet` - run the command quietly\n  * `-f`, `--force` - do not ask for confirmation when dropping the database.\n    Configuration is asked only when `:start_permanent` is set to true\n    (typically in production)\n  * `--force-drop` - force the database to be dropped even\n    if it has connections to it (requires PostgreSQL 13+)\n  * `--no-compile` - do not compile before dropping\n  * `--no-deps-check` - do not compile before dropping","ref":"Mix.Tasks.AshPostgres.Drop.html#module-command-line-options","title":"Command line options - mix ash_postgres.drop","type":"task"},{"doc":"Generates or updates resources based on a database schema","ref":"Mix.Tasks.AshPostgres.Gen.Resources.html","title":"mix ash_postgres.gen.resources","type":"task"},{"doc":"`mix ash_postgres.gen.resource MyApp.MyDomain`","ref":"Mix.Tasks.AshPostgres.Gen.Resources.html#module-example","title":"Example - mix ash_postgres.gen.resources","type":"task"},{"doc":"The domain will be generated if it does not exist. If you aren't sure,\nwe suggest using something like `MyApp.App`.","ref":"Mix.Tasks.AshPostgres.Gen.Resources.html#module-domain","title":"Domain - mix ash_postgres.gen.resources","type":"task"},{"doc":"- `repo`, `r` - The repo or repos to generate resources for, comma separated. Can be specified multiple times. Defaults to all repos.\n- `tables`, `t` - Defaults to `public.*`. The tables to generate resources for, comma separated. Can be specified multiple times. See the section on tables for more.\n- `skip-tables`, `s` - The tables to skip generating resources for, comma separated. Can be specified multiple times. See the section on tables for more.\n- `snapshots-only` - Only generate snapshots for the generated resources, and not migraitons.\n- `extend`, `e` - Extension or extensions to apply to the generated resources. See `mix ash.patch.extend` for more.\n- `yes`, `y` - Answer yes (or skip) to all questions.","ref":"Mix.Tasks.AshPostgres.Gen.Resources.html#module-options","title":"Options - mix ash_postgres.gen.resources","type":"task"},{"doc":"When specifying tables to include with `--tables`, you can specify the table name, or the schema and table name separated by a period.\nFor example, `users` will generate resources for the `users` table in the `public` schema, but `accounts.users` will generate resources for the `users` table in the `accounts` schema.\n\nTo include all tables in a given schema, add a period only with no table name, i.e `schema.`, i.e `accounts.`.\n\nWhen skipping tables with `--skip-tables`, the same rules apply, except that the `schema.` format is not supported.","ref":"Mix.Tasks.AshPostgres.Gen.Resources.html#module-tables","title":"Tables - mix ash_postgres.gen.resources","type":"task"},{"doc":"Generates migrations, and stores a snapshot of your resources.\n\nOptions:\n\n* `domains` - a comma separated list of Domain modules, for which migrations will be generated\n* `snapshot-path` - a custom path to store the snapshots, defaults to \"priv/resource_snapshots\"\n* `migration-path` - a custom path to store the migrations, defaults to \"priv\".\n  Migrations are stored in a folder for each repo, so `priv/repo_name/migrations`\n* `tenant-migration-path` - Same as `migration_path`, except for any tenant specific migrations\n* `drop-columns` - whether or not to drop columns as attributes are removed. See below for more\n* `name` -\n    names the generated migrations, prepending with the timestamp. The default is `migrate_resources_ `,\n    where ` ` is the count of migrations matching `*migrate_resources*` plus one.\n    For example, `--name add_special_column` would get a name like `20210708181402_add_special_column.exs`\n\nFlags:\n\n* `quiet` - messages for file creations will not be printed\n* `no-format` - files that are created will not be formatted with the code formatter\n* `dry-run` - no files are created, instead the new migration is printed\n* `check` - no files are created, returns an exit(1) code if the current snapshots and resources don't fit\n* `snapshots-only` - no migrations are generated, only snapshots are stored\n\n#### Snapshots\n\nSnapshots are stored in a folder for each table that migrations are generated for. Each snapshot is\nstored in a file with a timestamp of when it was generated.\nThis is important because it allows for simultaneous work to be done on separate branches, and for rolling back\nchanges more easily, e.g removing a generated migration, and deleting the most recent snapshot, without having to redo\nall of it\n\n#### Dropping columns\n\nGenerally speaking, it is bad practice to drop columns when you deploy a change that\nwould remove an attribute. The main reasons for this are backwards compatibility and rolling restarts.\nIf you deploy an attribute removal, and run migrations. Regardless of your deployment sstrategy, you\nwon't be able to roll back, because the data has been deleted. In a rolling restart situation, some of\nthe machines/pods/whatever may still be running after the column has been deleted, causing errors. With\nthis in mind, its best not to delete those columns until later, after the data has been confirmed unnecessary.\nTo that end, you can pass `--dont-drop-columns` to tell it to comment out those statements.\n\n#### Conflicts/Multiple Resources\n\nThe migration generator can support multiple schemas using the same table.\nIt will raise on conflicts that it can't resolve, like the same field with different\ntypes. It will prompt to resolve conflicts that can be resolved with human input.\nFor example, if you remove an attribute and add an attribute, it will ask you if you are renaming\nthe column in question. If not, it will remove one column and add the other.\n\nAdditionally, it lowers things to the database where possible:\n\n#### Defaults\nThere are three anonymous functions that will translate to database-specific defaults currently:\n\n* `&Ash.UUID.generate/0` - Only if `uuid-ossp` is in your `c:AshPostgres.Repo.installed_extensions()`\n* `&Ecto.UUID.generate/0` - Only if `uuid-ossp` is in your `c:AshPostgres.Repo.installed_extensions()`\n* `&DateTime.utc_now/0`\n\nNon-function default values will be dumped to their native type and inspected. This may not work for some types,\nand may require manual intervention/patches to the migration generator code.\n\n#### Identities\n\nIdentities will cause the migration generator to generate unique constraints. If multiple\nresources target the same table, you will be asked to select the primary key, and any others\nwill be added as unique constraints.","ref":"Mix.Tasks.AshPostgres.GenerateMigrations.html","title":"mix ash_postgres.generate_migrations","type":"task"},{"doc":"","ref":"Mix.Tasks.AshPostgres.GenerateMigrations.html#run/1","title":"Mix.Tasks.AshPostgres.GenerateMigrations.run/1","type":"function"},{"doc":"Installs AshPostgres. Should be run with `mix igniter.install ash_postgres`","ref":"Mix.Tasks.AshPostgres.Install.html","title":"mix ash_postgres.install","type":"task"},{"doc":"","ref":"Mix.Tasks.AshPostgres.Install.html#igniter/2","title":"Mix.Tasks.AshPostgres.Install.igniter/2","type":"function"},{"doc":"Runs the pending migrations for the given repository.\n\nMigrations are expected at \"priv/YOUR_REPO/migrations\" directory\nof the current application (or `tenant_migrations` for multitenancy),\nwhere \"YOUR_REPO\" is the last segment\nin your repository name. For example, the repository `MyApp.Repo`\nwill use \"priv/repo/migrations\". The repository `Whatever.MyRepo`\nwill use \"priv/my_repo/migrations\".\n\nThis task runs all pending migrations by default. To migrate up to a\nspecific version number, supply `--to version_number`. To migrate a\nspecific number of times, use `--step n`.\n\nIf you have multiple repos and you want to run a single migration and/or\nmigrate them to different points, you will need to use the ecto specific task,\n`mix ecto.migrate` and provide your repo name.\n\nIf a repository has not yet been started, one will be started outside\nyour application supervision tree and shutdown afterwards.","ref":"Mix.Tasks.AshPostgres.Migrate.html","title":"mix ash_postgres.migrate","type":"task"},{"doc":"mix ash_postgres.migrate\n    mix ash_postgres.migrate --domains MyApp.Domain1,MyApp.Domain2\n\n    mix ash_postgres.migrate -n 3\n    mix ash_postgres.migrate --step 3\n\n    mix ash_postgres.migrate --to 20080906120000","ref":"Mix.Tasks.AshPostgres.Migrate.html#module-examples","title":"Examples - mix ash_postgres.migrate","type":"task"},{"doc":"* `--domains` - the domains who's repos should be migrated\n\n  * `--tenants` - Run the tenant migrations\n\n  * `--only-tenants` - in combo with `--tenants`, only runs migrations for the provided tenants, e.g `tenant1,tenant2,tenant3`\n\n  * `--except-tenants` - in combo with `--tenants`, does not run migrations for the provided tenants, e.g `tenant1,tenant2,tenant3`\n\n  * `--all` - run all pending migrations\n\n  * `--step`, `-n` - run n number of pending migrations\n\n  * `--to` - run all migrations up to and including version\n\n  * `--quiet` - do not log migration commands\n\n  * `--prefix` - the prefix to run migrations on. This is ignored if `--tenants` is provided.\n\n  * `--pool-size` - the pool size if the repository is started only for the task (defaults to 2)\n\n  * `--log-sql` - log the raw sql migrations are running\n\n  * `--strict-version-order` - abort when applying a migration with old timestamp\n\n  * `--no-compile` - does not compile applications before migrating\n\n  * `--no-deps-check` - does not check depedendencies before migrating\n\n  * `--migrations-path` - the path to load the migrations from, defaults to\n    `\"priv/repo/migrations\"`. This option may be given multiple times in which case the migrations\n    are loaded from all the given directories and sorted as if they were in the same one.\n\n    Note, if you have migrations paths e.g. `a/` and `b/`, and run\n    `mix ecto.migrate --migrations-path a/`, the latest migrations from `a/` will be run (even\n    if `b/` contains the overall latest migrations.)","ref":"Mix.Tasks.AshPostgres.Migrate.html#module-command-line-options","title":"Command line options - mix ash_postgres.migrate","type":"task"},{"doc":"Reverts applied migrations in the given repository.\nMigrations are expected at \"priv/YOUR_REPO/migrations\" directory\nof the current application but it can be configured by specifying\nthe `:priv` key under the repository configuration.\nRuns the latest applied migration by default. To roll back to\na version number, supply `--to version_number`. To roll back a\nspecific number of times, use `--step n`. To undo all applied\nmigrations, provide `--all`.\n\nThis is only really useful if your domains only use a single repo.\nIf you have multiple repos and you want to run a single migration and/or\nmigrate/roll them back to different points, you will need to use the\necto specific task, `mix ecto.migrate` and provide your repo name.","ref":"Mix.Tasks.AshPostgres.Rollback.html","title":"mix ash_postgres.rollback","type":"task"},{"doc":"mix ash_postgres.rollback\n    mix ash_postgres.rollback -r Custom.Repo\n    mix ash_postgres.rollback -n 3\n    mix ash_postgres.rollback --step 3\n    mix ash_postgres.rollback -v 20080906120000\n    mix ash_postgres.rollback --to 20080906120000","ref":"Mix.Tasks.AshPostgres.Rollback.html#module-examples","title":"Examples - mix ash_postgres.rollback","type":"task"},{"doc":"* `--domains` - the domains who's repos should be rolledback\n  * `--all` - revert all applied migrations\n  * `--step` / `-n` - revert n number of applied migrations\n  * `--to` / `-v` - revert all migrations down to and including version\n  * `--quiet` - do not log migration commands\n  * `--prefix` - the prefix to run migrations on\n  * `--pool-size` - the pool size if the repository is started only for the task (defaults to 1)\n  * `--log-sql` - log the raw sql migrations are running\n  * `--tenants` - roll back tenant migrations\n  * `--only-tenants` - in combo with `--tenants`, only rolls back the provided tenants, e.g `tenant1,tenant2,tenant3`\n  * `--except-tenants` - in combo with `--tenants`, does not rollback the provided tenants, e.g `tenant1,tenant2,tenant3`","ref":"Mix.Tasks.AshPostgres.Rollback.html#module-command-line-options","title":"Command line options - mix ash_postgres.rollback","type":"task"},{"doc":"Cleans snapshots folder, leaving only one snapshot per resource.","ref":"Mix.Tasks.AshPostgres.SquashSnapshots.html","title":"mix ash_postgres.squash_snapshots","type":"task"},{"doc":"mix ash_postgres.squash_snapshots\n    mix ash_postgres.squash_snapshots --check --quiet\n    mix ash_postgres.squash_snapshots --into zero\n    mix ash_postgres.squash_snapshots --dry-run","ref":"Mix.Tasks.AshPostgres.SquashSnapshots.html#module-examples","title":"Examples - mix ash_postgres.squash_snapshots","type":"task"},{"doc":"* `--into` -\n    `last`, `first` or `zero`. The default is `last`. Determines which name to use for\n    a remaining snapshot. `last` keeps the name of the last snapshot, `first` renames it to the previously first,\n    `zero` sets name with fourteen zeros.\n* `--snapshot-path` - a custom path to stored snapshots. The default is \"priv/resource_snapshots\".\n* `--quiet` - no messages will not be printed.\n* `--dry-run` - no files are touched, instead prints folders that have snapshots to squash.\n* `--check` - no files are touched, instead returns an exit(1) code if there are snapshots to squash.","ref":"Mix.Tasks.AshPostgres.SquashSnapshots.html#module-command-line-options","title":"Command line options - mix ash_postgres.squash_snapshots","type":"task"},{"doc":"","ref":"Mix.Tasks.AshPostgres.SquashSnapshots.html#run/1","title":"Mix.Tasks.AshPostgres.SquashSnapshots.run/1","type":"function"},{"doc":"Refers to the current table binding.","ref":"AshPostgres.Functions.Binding.html","title":"AshPostgres.Functions.Binding","type":"module"},{"doc":"","ref":"AshPostgres.Functions.Binding.html#args/0","title":"AshPostgres.Functions.Binding.args/0","type":"function"},{"doc":"The AshPostgres extension gives you tools to map a resource to a postgres database table.\n\nFor more, check out the [getting started guide](/documentation/tutorials/get-started-with-ash-postgres.md)","ref":"AshPostgres.html","title":"AshPostgres","type":"module"},{"doc":"","ref":"AshPostgres.html#base_filter_sql/1","title":"AshPostgres.base_filter_sql/1","type":"function"},{"doc":"","ref":"AshPostgres.html#check_constraints/1","title":"AshPostgres.check_constraints/1","type":"function"},{"doc":"","ref":"AshPostgres.html#custom_indexes/1","title":"AshPostgres.custom_indexes/1","type":"function"},{"doc":"","ref":"AshPostgres.html#custom_statements/1","title":"AshPostgres.custom_statements/1","type":"function"},{"doc":"","ref":"AshPostgres.html#exclusion_constraint_names/1","title":"AshPostgres.exclusion_constraint_names/1","type":"function"},{"doc":"","ref":"AshPostgres.html#foreign_key_names/1","title":"AshPostgres.foreign_key_names/1","type":"function"},{"doc":"","ref":"AshPostgres.html#identity_index_names/1","title":"AshPostgres.identity_index_names/1","type":"function"},{"doc":"","ref":"AshPostgres.html#manage_tenant_create?/1","title":"AshPostgres.manage_tenant_create?/1","type":"function"},{"doc":"","ref":"AshPostgres.html#manage_tenant_template/1","title":"AshPostgres.manage_tenant_template/1","type":"function"},{"doc":"","ref":"AshPostgres.html#manage_tenant_update?/1","title":"AshPostgres.manage_tenant_update?/1","type":"function"},{"doc":"","ref":"AshPostgres.html#migrate?/1","title":"AshPostgres.migrate?/1","type":"function"},{"doc":"","ref":"AshPostgres.html#migration_types/1","title":"AshPostgres.migration_types/1","type":"function"},{"doc":"","ref":"AshPostgres.html#polymorphic?/1","title":"AshPostgres.polymorphic?/1","type":"function"},{"doc":"","ref":"AshPostgres.html#polymorphic_name/1","title":"AshPostgres.polymorphic_name/1","type":"function"},{"doc":"","ref":"AshPostgres.html#polymorphic_on_delete/1","title":"AshPostgres.polymorphic_on_delete/1","type":"function"},{"doc":"","ref":"AshPostgres.html#polymorphic_on_update/1","title":"AshPostgres.polymorphic_on_update/1","type":"function"},{"doc":"","ref":"AshPostgres.html#references/1","title":"AshPostgres.references/1","type":"function"},{"doc":"","ref":"AshPostgres.html#repo/1","title":"AshPostgres.repo/1","type":"function"},{"doc":"","ref":"AshPostgres.html#schema/1","title":"AshPostgres.schema/1","type":"function"},{"doc":"","ref":"AshPostgres.html#skip_unique_indexes/1","title":"AshPostgres.skip_unique_indexes/1","type":"function"},{"doc":"","ref":"AshPostgres.html#table/1","title":"AshPostgres.table/1","type":"function"},{"doc":"","ref":"AshPostgres.html#unique_index_names/1","title":"AshPostgres.unique_index_names/1","type":"function"},{"doc":"A postgres data layer that leverages Ecto's postgres capabilities.","ref":"AshPostgres.DataLayer.html","title":"AshPostgres.DataLayer","type":"module"},{"doc":"","ref":"AshPostgres.DataLayer.html#add_known_binding/3","title":"AshPostgres.DataLayer.add_known_binding/3","type":"function"},{"doc":"","ref":"AshPostgres.DataLayer.html#codegen/1","title":"AshPostgres.DataLayer.codegen/1","type":"function"},{"doc":"","ref":"AshPostgres.DataLayer.html#from_ecto/1","title":"AshPostgres.DataLayer.from_ecto/1","type":"function"},{"doc":"","ref":"AshPostgres.DataLayer.html#install/4","title":"AshPostgres.DataLayer.install/4","type":"function"},{"doc":"","ref":"AshPostgres.DataLayer.html#install/5","title":"AshPostgres.DataLayer.install/5","type":"function"},{"doc":"","ref":"AshPostgres.DataLayer.html#migrate/1","title":"AshPostgres.DataLayer.migrate/1","type":"function"},{"doc":"Hello!","ref":"AshPostgres.DataLayer.html#postgres/1","title":"AshPostgres.DataLayer.postgres/1","type":"macro"},{"doc":"","ref":"AshPostgres.DataLayer.html#rollback/1","title":"AshPostgres.DataLayer.rollback/1","type":"function"},{"doc":"","ref":"AshPostgres.DataLayer.html#setup/1","title":"AshPostgres.DataLayer.setup/1","type":"function"},{"doc":"","ref":"AshPostgres.DataLayer.html#tear_down/1","title":"AshPostgres.DataLayer.tear_down/1","type":"function"},{"doc":"","ref":"AshPostgres.DataLayer.html#to_ecto/1","title":"AshPostgres.DataLayer.to_ecto/1","type":"function"},{"doc":"Resources that use `AshPostgres.DataLayer` use a `Repo` to access the database.\n\nThis repo is a thin wrapper around an `Ecto.Repo`.\n\nYou can use `Ecto.Repo`'s `init/2` to configure your repo like normal, but\ninstead of returning `{:ok, config}`, use `super(config)` to pass the\nconfiguration to the `AshPostgres.Repo` implementation.","ref":"AshPostgres.Repo.html","title":"AshPostgres.Repo","type":"behaviour"},{"doc":"To configure your list of installed extensions, define `installed_extensions/0`\n\nExtensions can be a string, representing a standard postgres extension, or a module that implements `AshPostgres.CustomExtension`.\nThat custom extension will be called to generate migrations that serve a specific purpose.\n\nExtensions that are relevant to ash_postgres:\n\n* \"ash-functions\" - This isn't really an extension, but it expresses that certain functions\n  should be added when generating migrations, to support the `||` and `&&` operators in expressions.\n* `\"uuid-ossp\"` - Sets UUID primary keys defaults in the migration generator\n* `\"pg_trgm\"` - Makes the `AshPostgres.Functions.TrigramSimilarity` function available\n* \"citext\" - Allows case insensitive fields to be used\n* `\"vector\"` - Makes the `AshPostgres.Functions.VectorCosineDistance` function available. See `AshPostgres.Extensions.Vector` for more setup instructions.\n\n```\ndef installed_extensions() do\n  [\"pg_trgm\", \"uuid-ossp\", \"vector\", YourCustomExtension]\nend\n```","ref":"AshPostgres.Repo.html#module-installed-extensions","title":"Installed Extensions - AshPostgres.Repo","type":"behaviour"},{"doc":"You can define `on_transaction_begin/1`, which will be invoked whenever a transaction is started for Ash.\n\nThis will be invoked with a map containing a `type` key and metadata.\n\n```elixir\n%{type: :create, %{resource: YourApp.YourResource, action: :action}}\n```","ref":"AshPostgres.Repo.html#module-transaction-hooks","title":"Transaction Hooks - AshPostgres.Repo","type":"behaviour"},{"doc":"Return a list of all schema names (only relevant for a multitenant implementation)","ref":"AshPostgres.Repo.html#c:all_tenants/0","title":"AshPostgres.Repo.all_tenants/0","type":"callback"},{"doc":"Should the repo should be created by `mix ash_postgres.create`?","ref":"AshPostgres.Repo.html#c:create?/0","title":"AshPostgres.Repo.create?/0","type":"callback"},{"doc":"The default prefix(postgres schema) to use when building queries","ref":"AshPostgres.Repo.html#c:default_prefix/0","title":"AshPostgres.Repo.default_prefix/0","type":"callback"},{"doc":"Should the repo should be dropped by `mix ash_postgres.drop`?","ref":"AshPostgres.Repo.html#c:drop?/0","title":"AshPostgres.Repo.drop?/0","type":"callback"},{"doc":"Use this to inform the data layer about what extensions are installed","ref":"AshPostgres.Repo.html#c:installed_extensions/0","title":"AshPostgres.Repo.installed_extensions/0","type":"callback"},{"doc":"The path where your migrations are stored","ref":"AshPostgres.Repo.html#c:migrations_path/0","title":"AshPostgres.Repo.migrations_path/0","type":"callback"},{"doc":"Configure the version of postgres that is being used.","ref":"AshPostgres.Repo.html#c:min_pg_version/0","title":"AshPostgres.Repo.min_pg_version/0","type":"callback"},{"doc":"Use this to inform the data layer about the oldest potential postgres version it will be run on.\n\nMust be an integer greater than or equal to 13.","ref":"AshPostgres.Repo.html#c:on_transaction_begin/1","title":"AshPostgres.Repo.on_transaction_begin/1","type":"callback"},{"doc":"For things like `Fly.Repo`, where you might need to have more fine grained control over the repo module,\nyou can use the `define_ecto_repo?: false` option to `use AshPostgres.Repo`.","ref":"AshPostgres.Repo.html#c:on_transaction_begin/1-combining-with-other-tools","title":"Combining with other tools - AshPostgres.Repo.on_transaction_begin/1","type":"callback"},{"doc":"Allows overriding a given migration type for *all* fields, for example if you wanted to always use :timestamptz for :utc_datetime fields","ref":"AshPostgres.Repo.html#c:override_migration_type/1","title":"AshPostgres.Repo.override_migration_type/1","type":"callback"},{"doc":"The path where your tenant migrations are stored (only relevant for a multitenant implementation)","ref":"AshPostgres.Repo.html#c:tenant_migrations_path/0","title":"AshPostgres.Repo.tenant_migrations_path/0","type":"callback"},{"doc":"A behavior for postgres-specific manual relationship functionality","ref":"AshPostgres.ManualRelationship.html","title":"AshPostgres.ManualRelationship","type":"behaviour"},{"doc":"","ref":"AshPostgres.ManualRelationship.html#c:ash_postgres_join/6","title":"AshPostgres.ManualRelationship.ash_postgres_join/6","type":"callback"},{"doc":"","ref":"AshPostgres.ManualRelationship.html#c:ash_postgres_subquery/4","title":"AshPostgres.ManualRelationship.ash_postgres_subquery/4","type":"callback"},{"doc":"Represents a configured check constraint on the table backing a resource","ref":"AshPostgres.CheckConstraint.html","title":"AshPostgres.CheckConstraint","type":"module"},{"doc":"","ref":"AshPostgres.CheckConstraint.html#schema/0","title":"AshPostgres.CheckConstraint.schema/0","type":"function"},{"doc":"A custom extension implementation.","ref":"AshPostgres.CustomExtension.html","title":"AshPostgres.CustomExtension","type":"behaviour"},{"doc":"","ref":"AshPostgres.CustomExtension.html#c:install/1","title":"AshPostgres.CustomExtension.install/1","type":"callback"},{"doc":"","ref":"AshPostgres.CustomExtension.html#c:uninstall/1","title":"AshPostgres.CustomExtension.uninstall/1","type":"callback"},{"doc":"Represents a custom index on the table backing a resource","ref":"AshPostgres.CustomIndex.html","title":"AshPostgres.CustomIndex","type":"module"},{"doc":"","ref":"AshPostgres.CustomIndex.html#fields/0","title":"AshPostgres.CustomIndex.fields/0","type":"function"},{"doc":"","ref":"AshPostgres.CustomIndex.html#name/2","title":"AshPostgres.CustomIndex.name/2","type":"function"},{"doc":"","ref":"AshPostgres.CustomIndex.html#schema/0","title":"AshPostgres.CustomIndex.schema/0","type":"function"},{"doc":"","ref":"AshPostgres.CustomIndex.html#transform/1","title":"AshPostgres.CustomIndex.transform/1","type":"function"},{"doc":"Introspection functions for","ref":"AshPostgres.DataLayer.Info.html","title":"AshPostgres.DataLayer.Info","type":"module"},{"doc":"A stringified version of the base_filter, to be used in a where clause when generating unique indexes","ref":"AshPostgres.DataLayer.Info.html#base_filter_sql/1","title":"AshPostgres.DataLayer.Info.base_filter_sql/1","type":"function"},{"doc":"","ref":"AshPostgres.DataLayer.Info.html#calculation_to_sql/2","title":"AshPostgres.DataLayer.Info.calculation_to_sql/2","type":"function"},{"doc":"A keyword list of calculations to their sql representation","ref":"AshPostgres.DataLayer.Info.html#calculations_to_sql/1","title":"AshPostgres.DataLayer.Info.calculations_to_sql/1","type":"function"},{"doc":"The configured check_constraints for a resource","ref":"AshPostgres.DataLayer.Info.html#check_constraints/1","title":"AshPostgres.DataLayer.Info.check_constraints/1","type":"function"},{"doc":"The configured custom_indexes for a resource","ref":"AshPostgres.DataLayer.Info.html#custom_indexes/1","title":"AshPostgres.DataLayer.Info.custom_indexes/1","type":"function"},{"doc":"The configured custom_statements for a resource","ref":"AshPostgres.DataLayer.Info.html#custom_statements/1","title":"AshPostgres.DataLayer.Info.custom_statements/1","type":"function"},{"doc":"The configured exclusion_constraint_names","ref":"AshPostgres.DataLayer.Info.html#exclusion_constraint_names/1","title":"AshPostgres.DataLayer.Info.exclusion_constraint_names/1","type":"function"},{"doc":"The configured foreign_key_names","ref":"AshPostgres.DataLayer.Info.html#foreign_key_names/1","title":"AshPostgres.DataLayer.Info.foreign_key_names/1","type":"function"},{"doc":"A list of keys to always include in upserts.","ref":"AshPostgres.DataLayer.Info.html#global_upsert_keys/1","title":"AshPostgres.DataLayer.Info.global_upsert_keys/1","type":"function"},{"doc":"The configured identity_index_names","ref":"AshPostgres.DataLayer.Info.html#identity_index_names/1","title":"AshPostgres.DataLayer.Info.identity_index_names/1","type":"function"},{"doc":"","ref":"AshPostgres.DataLayer.Info.html#identity_where_to_sql/2","title":"AshPostgres.DataLayer.Info.identity_where_to_sql/2","type":"function"},{"doc":"A keyword list of identity names to the sql representation of their where clauses","ref":"AshPostgres.DataLayer.Info.html#identity_wheres_to_sql/1","title":"AshPostgres.DataLayer.Info.identity_wheres_to_sql/1","type":"function"},{"doc":"Whether or not to create a tenant for a given resource","ref":"AshPostgres.DataLayer.Info.html#manage_tenant_create?/1","title":"AshPostgres.DataLayer.Info.manage_tenant_create?/1","type":"function"},{"doc":"The template for a managed tenant","ref":"AshPostgres.DataLayer.Info.html#manage_tenant_template/1","title":"AshPostgres.DataLayer.Info.manage_tenant_template/1","type":"function"},{"doc":"Whether or not to update a tenant for a given resource","ref":"AshPostgres.DataLayer.Info.html#manage_tenant_update?/1","title":"AshPostgres.DataLayer.Info.manage_tenant_update?/1","type":"function"},{"doc":"Whether or not the resource should be included when generating migrations","ref":"AshPostgres.DataLayer.Info.html#migrate?/1","title":"AshPostgres.DataLayer.Info.migrate?/1","type":"function"},{"doc":"A keyword list of customized migration defaults","ref":"AshPostgres.DataLayer.Info.html#migration_defaults/1","title":"AshPostgres.DataLayer.Info.migration_defaults/1","type":"function"},{"doc":"A list of attributes to be ignored when generating migrations","ref":"AshPostgres.DataLayer.Info.html#migration_ignore_attributes/1","title":"AshPostgres.DataLayer.Info.migration_ignore_attributes/1","type":"function"},{"doc":"A keyword list of customized migration types","ref":"AshPostgres.DataLayer.Info.html#migration_types/1","title":"AshPostgres.DataLayer.Info.migration_types/1","type":"function"},{"doc":"Gets the resource's repo's postgres version","ref":"AshPostgres.DataLayer.Info.html#min_pg_version/1","title":"AshPostgres.DataLayer.Info.min_pg_version/1","type":"function"},{"doc":"Checks a version requirement against the resource's repo's postgres version","ref":"AshPostgres.DataLayer.Info.html#pg_version_matches?/2","title":"AshPostgres.DataLayer.Info.pg_version_matches?/2","type":"function"},{"doc":"The configured polymorphic? for a resource","ref":"AshPostgres.DataLayer.Info.html#polymorphic?/1","title":"AshPostgres.DataLayer.Info.polymorphic?/1","type":"function"},{"doc":"The configured polymorphic_reference_name for a resource","ref":"AshPostgres.DataLayer.Info.html#polymorphic_name/1","title":"AshPostgres.DataLayer.Info.polymorphic_name/1","type":"function"},{"doc":"The configured polymorphic_reference_on_delete for a resource","ref":"AshPostgres.DataLayer.Info.html#polymorphic_on_delete/1","title":"AshPostgres.DataLayer.Info.polymorphic_on_delete/1","type":"function"},{"doc":"The configured polymorphic_reference_on_update for a resource","ref":"AshPostgres.DataLayer.Info.html#polymorphic_on_update/1","title":"AshPostgres.DataLayer.Info.polymorphic_on_update/1","type":"function"},{"doc":"The configured reference for a given relationship of a  resource","ref":"AshPostgres.DataLayer.Info.html#reference/2","title":"AshPostgres.DataLayer.Info.reference/2","type":"function"},{"doc":"The configured references for a resource","ref":"AshPostgres.DataLayer.Info.html#references/1","title":"AshPostgres.DataLayer.Info.references/1","type":"function"},{"doc":"The configured repo for a resource","ref":"AshPostgres.DataLayer.Info.html#repo/2","title":"AshPostgres.DataLayer.Info.repo/2","type":"function"},{"doc":"The configured schema for a resource","ref":"AshPostgres.DataLayer.Info.html#schema/1","title":"AshPostgres.DataLayer.Info.schema/1","type":"function"},{"doc":"","ref":"AshPostgres.DataLayer.Info.html#simple_join_first_aggregates/1","title":"AshPostgres.DataLayer.Info.simple_join_first_aggregates/1","type":"function"},{"doc":"Identities not to include in the migrations","ref":"AshPostgres.DataLayer.Info.html#skip_identities/1","title":"AshPostgres.DataLayer.Info.skip_identities/1","type":"function"},{"doc":"Skip generating unique indexes when generating migrations","ref":"AshPostgres.DataLayer.Info.html#skip_unique_indexes/1","title":"AshPostgres.DataLayer.Info.skip_unique_indexes/1","type":"function"},{"doc":"A keyword list of customized storage types","ref":"AshPostgres.DataLayer.Info.html#storage_types/1","title":"AshPostgres.DataLayer.Info.storage_types/1","type":"function"},{"doc":"The configured table for a resource","ref":"AshPostgres.DataLayer.Info.html#table/1","title":"AshPostgres.DataLayer.Info.table/1","type":"function"},{"doc":"The configured unique_index_names","ref":"AshPostgres.DataLayer.Info.html#unique_index_names/1","title":"AshPostgres.DataLayer.Info.unique_index_names/1","type":"function"},{"doc":"Represents the configuration of a reference (i.e foreign key).","ref":"AshPostgres.Reference.html","title":"AshPostgres.Reference","type":"module"},{"doc":"","ref":"AshPostgres.Reference.html#schema/0","title":"AshPostgres.Reference.schema/0","type":"function"},{"doc":"Represents a custom statement to be run in generated migrations","ref":"AshPostgres.Statement.html","title":"AshPostgres.Statement","type":"module"},{"doc":"","ref":"AshPostgres.Statement.html#fields/0","title":"AshPostgres.Statement.fields/0","type":"function"},{"doc":"","ref":"AshPostgres.Statement.html#schema/0","title":"AshPostgres.Statement.schema/0","type":"function"},{"doc":"Implements the PostgresSQL [timestamptz](https://www.postgresql.org/docs/current/datatype-datetime.html) (aka `timestamp with time zone`) type.\n\nPostgres [*strongly recommends*](https://wiki.postgresql.org/wiki/Don%27t_Do_This#Don.27t_use_timestamp_.28without_time_zone.29) using this type instead of the standard timestamps/datetimes without a time zone. Generally speaking, it is best practice to use the [nanosecond-precision](`AshPostgres.TimestamptzUsec`) variant.\n\nThe basic reason `timestamptz` exists is to guarantee that the precise moment in time is stored as microseconds since January 1st, 2000 in UTC. This guarantee eliminates many time arithmetic problems, and ensures portability.\n\nIt does not actually store a timezone, in spite of the name. As far as Elixir/Ecto is concerned, it it always of type `DateTime` and set to UTC. Using this type ensures Postgres internally uses the same contract as Ecto's `:utc_datetime`, which is to always store `DateTime` in UTC. This is especially helpful if you need to do complex time arithmetic in SQL fragments, or build reports/materialized views that use localized time formatting.\n\nUsing this type ubiquitously in your schemas is particularly beneficial for consistency, and this is currently [under consideration](https://github.com/ash-project/ash_postgres/issues/264) as a configuration option for the default datetime storage type.\n\n```elixir\nattribute :timestamp, AshPostgres.Timestamptz\ntimestamps type: AshPostgres.Timestamptz\n```\n\nAlternatively, you can set up a shortname:\n\n```elixir\n# config.exs\nconfig :ash, :custom_types, timestamptz: AshPostgres.Timestamptz\n```\n\nAfter saving, you will need to run `mix compile ash --force`.\n\n```elixir\nattribute :timestamp, :timestamptz\ntimestamps type: :timestamptz\n```","ref":"AshPostgres.Timestamptz.html","title":"AshPostgres.Timestamptz","type":"module"},{"doc":"Implements the PostgresSQL [timestamptz](https://www.postgresql.org/docs/current/datatype-datetime.html) (aka `timestamp with time zone`) type with nanosecond precision.\n\n```elixir\nattribute :timestamp, AshPostgres.TimestamptzUsec\ntimestamps type: AshPostgres.TimestamptzUsec\n```\n\nAlternatively, you can set up a shortname:\n\n```elixir\n# config.exs\nconfig :ash, :custom_types, timestamptz_usec: AshPostgres.TimestamptzUsec\n```\n\nAfter saving, you will need to run `mix compile ash --force`.\n\n```elixir\nattribute :timestamp, :timestamptz_usec\ntimestamps type: :timestamptz_usec\n```\n\n    \n\nPlease see `AshPostgres.Timestamptz` for details about the usecase for this type.","ref":"AshPostgres.TimestamptzUsec.html","title":"AshPostgres.TimestamptzUsec","type":"module"},{"doc":"A thin wrapper around `:string` for working with tsquery types in calculations.\n\nA calculation of this type cannot be selected, but may be used in calculations.","ref":"AshPostgres.Tsquery.html","title":"AshPostgres.Tsquery","type":"module"},{"doc":"A thin wrapper around `:string` for working with tsvector types in calculations.\n\nA calculation of this type cannot be selected, but may be used in calculations.","ref":"AshPostgres.Tsvector.html","title":"AshPostgres.Tsvector","type":"module"},{"doc":"Postgres specific callbacks for `Ash.Type`.\n\nUse this in addition to `Ash.Type`.","ref":"AshPostgres.Type.html","title":"AshPostgres.Type","type":"behaviour"},{"doc":"","ref":"AshPostgres.Type.html#c:value_to_postgres_default/3","title":"AshPostgres.Type.value_to_postgres_default/3","type":"callback"},{"doc":"An extension that adds support for the `vector` type.\n\nCreate a file with these contents, not inside of a module:\n\n```elixir\nPostgrex.Types.define( .PostgrexTypes, [AshPostgres.Extensions.Vector] ++ Ecto.Adapters.Postgres.extensions(), [])\n```\n\nAnd then ensure that you refer to these types in your repo configuration, i.e\n\n```elixir\nconfig :my_app, YourApp.Repo,\n  types:  .PostgrexTypes\n```","ref":"AshPostgres.Extensions.Vector.html","title":"AshPostgres.Extensions.Vector","type":"module"},{"doc":"","ref":"AshPostgres.Extensions.Vector.html#decode/1","title":"AshPostgres.Extensions.Vector.decode/1","type":"function"},{"doc":"","ref":"AshPostgres.Extensions.Vector.html#encode/1","title":"AshPostgres.Extensions.Vector.encode/1","type":"function"},{"doc":"","ref":"AshPostgres.Extensions.Vector.html#format/1","title":"AshPostgres.Extensions.Vector.format/1","type":"function"},{"doc":"","ref":"AshPostgres.Extensions.Vector.html#init/1","title":"AshPostgres.Extensions.Vector.init/1","type":"function"},{"doc":"","ref":"AshPostgres.Extensions.Vector.html#matching/1","title":"AshPostgres.Extensions.Vector.matching/1","type":"function"},{"doc":"A custom aggregate implementation for ecto.","ref":"AshPostgres.CustomAggregate.html","title":"AshPostgres.CustomAggregate","type":"behaviour"},{"doc":"The dynamic expression to create the aggregate.\n\nThe binding refers to the resource being aggregated,\nuse `as(^binding)` to reference it.\n\nFor example:\n\n    Ecto.Query.dynamic(\n      [],\n      fragment(\"string_agg(?, ?)\", field(as(^binding), ^opts[:field]), ^opts[:delimiter])\n    )","ref":"AshPostgres.CustomAggregate.html#c:dynamic/2","title":"AshPostgres.CustomAggregate.dynamic/2","type":"callback"},{"doc":"Utilities for use in migrations","ref":"AshPostgres.Migration.html","title":"AshPostgres.Migration","type":"module"},{"doc":"A utility for creating postgres enums for an Ash enum type.\n\nIn your migration, you can say:\n\n```elixir\ndef up() do\n  AshPostgres.Migration.create_enum(MyEnumType)\nend\n```\n\nAttribution:\n\nThis code and example was copied from ecto_enum. I didn't use the library itself\nbecause it has a lot that would not currently be relevant for Ash.\nhttps://github.com/gjaldon/ecto_enum\n\nMust be done manually, as the migration generator will not do it.\nAdditionally, altering the type must be done in its own, separate migration, which\nmust have `@disable_ddl_transaction true`, as you cannot do this operation\nin a transaction.\n\nFor example:\n\n```elixir\ndefmodule MyApp.Repo.Migrations.AddToGenderEnum do\n  use Ecto.Migration\n  @disable_ddl_transaction true\n\n  def up do\n    Ecto.Migration.execute \"ALTER TYPE gender ADD VALUE IF NOT EXISTS 'other'\"\n  end\n\n  def down do\n    ...\n  end\nend\n```\n\nKeep in mind, that if you want to create a custom enum type, you will want to add\n```elixir\ndef storage_type(_), do: :my_type_name\n```","ref":"AshPostgres.Migration.html#create_enum/2","title":"AshPostgres.Migration.create_enum/2","type":"function"},{"doc":"","ref":"AshPostgres.Migration.html#drop_enum/1","title":"AshPostgres.Migration.drop_enum/1","type":"function"},{"doc":"Allows configuring how values are translated to default values in migrations.\n\nStill a work in progress, but covers most standard values aside from maps.","ref":"EctoMigrationDefault.html","title":"EctoMigrationDefault","type":"protocol"},{"doc":"Returns the text (elixir code) that will be placed into a migration as the default value","ref":"EctoMigrationDefault.html#to_default/1","title":"EctoMigrationDefault.to_default/1","type":"function"},{"doc":"All the types that implement this protocol.","ref":"EctoMigrationDefault.html#t:t/0","title":"EctoMigrationDefault.t/0","type":"type"},{"doc":"Maps to the builtin postgres function `ilike`.","ref":"AshPostgres.Functions.ILike.html","title":"AshPostgres.Functions.ILike","type":"module"},{"doc":"","ref":"AshPostgres.Functions.ILike.html#args/0","title":"AshPostgres.Functions.ILike.args/0","type":"function"},{"doc":"Maps to the builtin postgres function `like`.","ref":"AshPostgres.Functions.Like.html","title":"AshPostgres.Functions.Like","type":"module"},{"doc":"","ref":"AshPostgres.Functions.Like.html#args/0","title":"AshPostgres.Functions.Like.args/0","type":"function"},{"doc":"Maps to the builtin postgres trigram similarity function. Requires `pgtrgm` extension to be installed.\n\nSee the postgres docs on [trigram](https://www.postgresql.org/docs/9.6/pgtrgm.html]) for more information.\n\nRequires the pg_trgm extension. Configure which extensions you have installed in your `AshPostgres.Repo`\n\n    # Example\n\n    filter(query, trigram_similarity(name, \"geoff\") > 0.4)","ref":"AshPostgres.Functions.TrigramSimilarity.html","title":"AshPostgres.Functions.TrigramSimilarity","type":"module"},{"doc":"","ref":"AshPostgres.Functions.TrigramSimilarity.html#args/0","title":"AshPostgres.Functions.TrigramSimilarity.args/0","type":"function"},{"doc":"Maps to the vector cosine distance operator. Requires `vector` extension to be installed.","ref":"AshPostgres.Functions.VectorCosineDistance.html","title":"AshPostgres.Functions.VectorCosineDistance","type":"module"},{"doc":"","ref":"AshPostgres.Functions.VectorCosineDistance.html#args/0","title":"AshPostgres.Functions.VectorCosineDistance.args/0","type":"function"},{"doc":"![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-black-text.png?raw=true#gh-light-mode-only)\n![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-white-text.png?raw=true#gh-dark-mode-only)\n\n![Elixir CI](https://github.com/ash-project/ash_postgres/workflows/CI/badge.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Hex version badge](https://img.shields.io/hexpm/v/ash_postgres.svg)](https://hex.pm/packages/ash_postgres)\n[![Hexdocs badge](https://img.shields.io/badge/docs-hexdocs-purple)](https://hexdocs.pm/ash_postgres)\n\n# AshPostgres\n\nWelcome! `AshPostgres` is the PostgreSQL data layer for [Ash Framework](https://hexdocs.pm/ash).","ref":"readme.html","title":"Home","type":"extras"},{"doc":"- [Get Started](documentation/tutorials/get-started-with-ash-postgres.md)","ref":"readme.html#tutorials","title":"Tutorials - Home","type":"extras"},{"doc":"- [What is AshPostgres?](documentation/topics/about-ash-postgres/what-is-ash-postgres.md)","ref":"readme.html#topics","title":"Topics - Home","type":"extras"},{"doc":"- [References](documentation/topics/resources/references.md)\n- [Polymorphic Resources](documentation/topics/resources/polymorphic-resources.md)","ref":"readme.html#resources","title":"Resources - Home","type":"extras"},{"doc":"- [Migrations and tasks](documentation/topics/development/migrations-and-tasks.md)\n- [Testing](documentation/topics/development/testing.md)\n- [Upgrading to 2.0](documentation/topics/development/upgrading-to-2.0.md)","ref":"readme.html#development","title":"Development - Home","type":"extras"},{"doc":"- [Expressions](documentation/topics/advanced/expressions.md)\n- [Manual Relationships](documentation/topics/advanced/manual-relationships.md)\n- [Schema Based Multitenancy](documentation/topics/advanced/schema-based-multitenancy.md)","ref":"readme.html#advanced","title":"Advanced - Home","type":"extras"},{"doc":"- [AshPostgres.DataLayer DSL](documentation/dsls/DSL:-AshPostgres.DataLayer.md)","ref":"readme.html#reference","title":"Reference - Home","type":"extras"},{"doc":"# Get Started With Postgres","ref":"get-started-with-ash-postgres.html","title":"Get Started With Postgres","type":"extras"},{"doc":"We recommend [reading up on postgresql](https://www.postgresql.org/docs/16/index.html) if you haven't.\n\n- [Postgres must be installed](https://www.postgresql.org/download/) with a sufficiently permissive user\n\n<!-- tabs-open -->","ref":"get-started-with-ash-postgres.html#installation","title":"Installation - Get Started With Postgres","type":"extras"},{"doc":"```sh\nmix igniter.install ash_postgres\n```","ref":"get-started-with-ash-postgres.html#using-igniter-recommended","title":"Using Igniter (recommended) - Get Started With Postgres","type":"extras"},{"doc":"#### Add AshPostgres\n\nAdd the `:ash_postgres` dependency to your application\n\n`{:ash_postgres, \"~> 2.0.0\"}`\n\nAdd `:ash_postgres` to your `.formatter.exs` file\n\n```elixir\n[\n  # import the formatter rules from `:ash_postgres`\n  import_deps: [..., :ash_postgres],\n  inputs: [...]\n]\n```\n\n#### Create and configure your Repo\n\nCreate `lib/helpdesk/repo.ex` with the following contents. `AshPostgres.Repo` is a thin wrapper around `Ecto.Repo`, so see their documentation for how to use it if you need to use it directly. For standard Ash usage, all you will need to do is configure your resources to use your repo.\n\n```elixir\n# in lib/helpdesk/repo.ex\n\ndefmodule Helpdesk.Repo do\n  use AshPostgres.Repo, otp_app: :helpdesk\n\n  def installed_extensions do\n    # Ash installs some functions that it needs to run the\n    # first time you generate migrations.\n    [\"ash-functions\"]\n  end\nend\n```\n\nNext we will need to create configuration files for various environments. Run the following to create the configuration files we need.\n\n```bash\nmkdir -p config\ntouch config/config.exs\ntouch config/dev.exs\ntouch config/runtime.exs\ntouch config/test.exs\n```\n\nPlace the following contents in those files, ensuring that the credentials match the user you created for your database. For most conventional installations this will work out of the box. If you've followed other guides before this one, they may have had you create these files already, so just make sure these contents are there.\n\n```elixir\n# in config/config.exs\nimport Config\n\n# This should already have been added in the first\n# getting started guide\nconfig :helpdesk,\n  ash_domains: [Helpdesk.Support]\n\nconfig :helpdesk,\n  ecto_repos: [Helpdesk.Repo]\n\n# Import environment specific config. This must remain at the bottom\n# of this file so it overrides the configuration defined above.\nimport_config \"#{config_env()}.exs\"\n```\n\n```elixir\n# in config/dev.exs\n\nimport Config\n\n# Configure your database\nconfig :helpdesk, Helpdesk.Repo,\n  username: \"postgres\",\n  password: \"postgres\",\n  hostname: \"localhost\",\n  database: \"helpdesk_dev\",\n  port: 5432,\n  show_sensitive_data_on_connection_error: true,\n  pool_size: 10\n```\n\n```elixir\n# in config/runtime.exs\n\nimport Config\n\nif config_env() == :prod do\n  database_url =\n    System.get_env(\"DATABASE_URL\") ||\n      raise \"\"\"\n      environment variable DATABASE_URL is missing.\n      For example: ecto://USER:PASS@HOST/DATABASE\n      \"\"\"\n\n  config :helpdesk, Helpdesk.Repo,\n    url: database_url,\n    pool_size: String.to_integer(System.get_env(\"POOL_SIZE\") || \"10\")\nend\n```\n\n```elixir\n# in config/test.exs\n\nimport Config\n\n# Configure your database\n#\n# The MIX_TEST_PARTITION environment variable can be used\n# to provide built-in test partitioning in CI environment.\n# Run `mix help test` for more information.\nconfig :helpdesk, Helpdesk.Repo,\n  username: \"postgres\",\n  password: \"postgres\",\n  hostname: \"localhost\",\n  database: \"helpdesk_test#{System.get_env(\"MIX_TEST_PARTITION\")}\",\n  pool: Ecto.Adapters.SQL.Sandbox,\n  pool_size: 10\n```\n\nAnd finally, add the repo to your application\n\n```elixir\n# in lib/helpdesk/application.ex\n\n  def start(_type, _args) do\n    children = [\n      # Starts a worker by calling: Helpdesk.Worker.start_link(arg)\n      # {Helpdesk.Worker, arg}\n      Helpdesk.Repo\n    ]\n\n    ...\n```\n\n#### Add AshPostgres to our resources\n\nNow we can add the data layer to our resources. The basic configuration for a resource requires the `d:AshPostgres.postgres|table` and the `d:AshPostgres.postgres|repo`.\n\n```elixir\n# in lib/helpdesk/support/ticket.ex\n\n  use Ash.Resource,\n    domain: Helpdesk.Support,\n    data_layer: AshPostgres.DataLayer\n\n  postgres do\n    table \"tickets\"\n    repo Helpdesk.Repo\n  end\n```\n\n```elixir\n# in lib/helpdesk/support/representative.ex\n\n  use Ash.Resource,\n    domain: Helpdesk.Support,\n    data_layer: AshPostgres.DataLayer\n\n  postgres do\n    table \"representatives\"\n    repo Helpdesk.Repo\n  end\n```\n\n#### Create the database and tables\n\nFirst, we'll create the database with `mix ash.setup`.\n\nThen we will generate database migrations. This is one of the many ways that AshPostgres can save time and reduce complexity.\n\n```bash\nmix ash.codegen add_tickets_and_representatives\n```\n\nIf you are unfamiliar with database migrations, it is a good idea to get a rough idea of what they are and how they work. See the links at the bottom of this guide for more. A rough overview of how migrations work is that each time you need to make changes to your database, they are saved as small, reproducible scripts that can be applied in order. This is necessary both for clean deploys as well as working with multiple developers making changes to the structure of a single database.\n\nTypically, you need to write these by hand. AshPostgres, however, will store snapshots each time you run the command to generate migrations and will figure out what migrations need to be created.\n\nYou should always look at the generated migrations to ensure that they look correct. Do so now by looking at the generated file in `priv/repo/migrations`.\n\nFinally, we will create the local database and apply the generated migrations:\n\n```bash\nmix ash.setup\n```\n\n<!-- tabs-close -->","ref":"get-started-with-ash-postgres.html#manually","title":"Manually - Get Started With Postgres","type":"extras"},{"doc":"This is based on the [Getting Started](https://hexdocs.pm/ash/getting_started.html) guide.\nIf you haven't already, you should read that first.\n\nAnd now we're ready to try it out! Run the following in iex:\n\nLets create some data. We'll make a representative and give them some open and some closed tickets.\n\n```elixir\nrequire Ash.Query\n\nrepresentative = (\n  Helpdesk.Support.Representative\n  |> Ash.Changeset.for_create(:create, %{name: \"Joe Armstrong\"})\n  |> Ash.create!()\n)\n\nfor i <- 0..5 do\n  ticket =\n    Helpdesk.Support.Ticket\n    |> Ash.Changeset.for_create(:open, %{subject: \"Issue #{i}\"})\n    |> Helpdesk.Support.create!()\n    |> Ash.Changeset.for_update(:assign, %{representative_id: representative.id})\n    |> Ash.update!()\n\n  if rem(i, 2) == 0 do\n    ticket\n    |> Ash.Changeset.for_update(:close)\n    |> Ash.update!()\n  end\nend\n```\n\nAnd now we can read that data. You should see some debug logs that show the sql queries AshPostgres is generating.\n\n```elixir\nrequire Ash.Query\n\n# Show the tickets where the subject contains \"2\"\nHelpdesk.Support.Ticket\n|> Ash.Query.filter(contains(subject, \"2\"))\n|> Ash.read!()\n```\n\n```elixir\nrequire Ash.Query\n\n# Show the tickets that are closed and their subject does not contain \"4\"\nHelpdesk.Support.Ticket\n|> Ash.Query.filter(status == :closed and not(contains(subject, \"4\")))\n|> Ash.read!()\n```\n\nAnd, naturally, now that we are storing this in postgres, this database is persisted even if we stop/start our application. The nice thing, however, is that this was the _exact_ same code that we ran against our resources when they were backed by ETS.","ref":"get-started-with-ash-postgres.html#try-it-out","title":"Try it out - Get Started With Postgres","type":"extras"},{"doc":"Lets add some aggregates to our representatives resource. Aggregates are a tool to include grouped up data about relationships. You can read more about them in the [Aggregates guide](https://hexdocs.pm/ash/aggregates.html).\n\nHere we will add an aggregate to easily query how many tickets are assigned to a representative, and how many of those tickets are open/closed.\n\n```elixir\n# in lib/helpdesk/support/representative.ex\n\n  aggregates do\n    # The first argument here is the name of the aggregate\n    # The second is the relationship\n    count :total_tickets, :tickets\n\n    count :open_tickets, :tickets do\n      # Here we add a filter over the data that we are aggregating\n      filter expr(status == :open)\n    end\n\n    count :closed_tickets, :tickets do\n      filter expr(status == :closed)\n    end\n  end\n```\n\nAggregates are powerful because they will be translated to SQL, and can be used in filters and sorts. For example:\n\n```elixir\n# in iex\n\nrequire Ash.Query\n\nHelpdesk.Support.Representative\n|> Ash.Query.filter(closed_tickets < 4)\n|> Ash.Query.sort(closed_tickets: :desc)\n|> Ash.read!()\n```\n\nYou can also load individual aggregates on demand after queries have already been run, and minimal SQL will be issued to run the aggregate.\n\n```elixir\n# in iex\n\nrequire Ash.Query\n\nrepresentatives = Helpdesk.Support.read!(Helpdesk.Support.Representative)\n\nAsh.load!(representatives, :open_tickets)\n```","ref":"get-started-with-ash-postgres.html#aggregates","title":"Aggregates - Get Started With Postgres","type":"extras"},{"doc":"Calculations can be pushed down into SQL in the same way. Calculations are similar to aggregates, except they work on individual records. They can, however, refer to aggregates on the resource, which opens up powerful possibilities with very simple code.\n\nFor example, we can determine the percentage of tickets that are open:\n\n```elixir\n# in lib/helpdesk/support/representative.ex\n\n  calculations do\n    calculate :percent_open, :float, expr(open_tickets / total_tickets)\n  end\n```\n\nCalculations can be loaded and used in the same way as aggregates.\n\n```elixir\nrequire Ash.Query\n\nHelpdesk.Support.Representative\n|> Ash.Query.filter(percent_open > 0.25)\n|> Ash.Query.sort(:percent_open)\n|> Ash.Query.load(:percent_open)\n|> Ash.read!()\n```","ref":"get-started-with-ash-postgres.html#calculations","title":"Calculations - Get Started With Postgres","type":"extras"},{"doc":"Take a look at the DSL documentation for more information on what you can configure. You can add check constraints, configure the behavior of foreign keys, use postgres schemas with Ash's [multitenancy](https://hexdocs.pm/ash/multitenancy.html) feature, and more!","ref":"get-started-with-ash-postgres.html#rich-configuration-options","title":"Rich Configuration Options - Get Started With Postgres","type":"extras"},{"doc":"- Check out the data layer docs: `AshPostgres.DataLayer`\n\n- [Ecto's documentation](https://hexdocs.pm/ecto/Ecto.html). AshPostgres (and much of Ash itself) is made possible by the amazing Ecto. If you find yourself looking for escape hatches when using Ash or ways to work directly with your database, you will want to know how Ecto works. Ash and AshPostgres intentionally do not hide Ecto, and in fact encourages its use whenever you need an escape hatch.\n\n- [Postgres' documentation](https://www.postgresql.org/docs/). Although AshPostgres makes things a lot easier, you should understand the basics of postgres and SQL.\n\n- [Ecto's Migration documentation](https://hexdocs.pm/ecto_sql/Ecto.Migration.html) read more about migrations. Even with the ash_postgres migration generator, you will very likely need to modify your own migrations some day.","ref":"get-started-with-ash-postgres.html#what-next","title":"What next? - Get Started With Postgres","type":"extras"},{"doc":"# Setting AshPostgres up with an existing database\n\nIf you already have a postgres database and you'd like to get\nstarted quickly, you can scaffold resources directly from your\ndatabase.\n\nFirst, create an application with AshPostgres if you haven't already:\n\n```bash\nmix igniter.new my_app\n  --install ash,ash_postgres\n  --with phx.new # add this if you will be using phoenix too\n```\n\nThen, go into your `config/dev.exs` and configure your repo to use\nyour existing database.\n\nFinally, run:\n\n```bash\nmix ash_postgres.gen.resources MyApp.MyDomain --tables table1,table2,table3\n```","ref":"set-up-with-existing-database.html","title":"Setting AshPostgres up with an existing database","type":"extras"},{"doc":"You may want to do multiple passes to separate your application into multiple domains. For example:\n\n```bash\nmix ash_postgres.gen.resources MyApp.Accounts --tables users,roles,tokens\nmix ash_postgres.gen.resources MyApp.Blog --tables posts,comments\n```\n\nSee the docs for `mix ash_postgres.gen.resources` for more information.","ref":"set-up-with-existing-database.html#more-fine-grained-control","title":"More fine grained control - Setting AshPostgres up with an existing database","type":"extras"},{"doc":"# What is AshPostgres?\n\nAshPostgres is the PostgreSQL `Ash.DataLayer` for [Ash Framework](https://hexdocs.pm/ash). This is the most fully-featured Ash data layer, and unless you need a specific characteristic or feature of another data layer, you should use `AshPostgres`.\n\n>","ref":"what-is-ash-postgres.html","title":"What is AshPostgres?","type":"extras"},{"doc":">\n> Any version higher than 13 is fully supported. Versions lower than this can be made to work, but certain edge cases may need to be manually handled. This becomes more and more true the further back in versions that you go.\n\nUse this to persist records in a PostgreSQL table or view. For example, the resource below would be persisted in a table called `tweets`:\n\n```elixir\ndefmodule MyApp.Tweet do\n  use Ash.Resource,\n    data_layer: AshPostgres.DataLayer\n\n  attributes do\n    integer_primary_key :id\n    attribute :text, :string\n  end\n\n  relationships do\n    belongs_to :author, MyApp.User\n  end\n\n  postgres do\n    table \"tweets\"\n    repo MyApp.Repo\n  end\nend\n```\n\nThe table might look like this:\n\n| id  | text            | author_id |\n| --- | --------------- | --------- |\n| 1   | \"Hello, world!\" | 1         |\n\nCreating records would add to the table, destroying records would remove from the table, and updating records would update the table.","ref":"what-is-ash-postgres.html#what-versions-are-supported-info","title":"What versions are supported? {: .info} - What is AshPostgres?","type":"extras"},{"doc":"# References\n\nTo configure the behavior of generated foreign keys on a resource, we use the `references` section, within the `postgres` configuration block.\n\nFor example:\n\n```elixir\npostgres do\n  # other PostgreSQL config here\n\n  references do\n    reference :post, on_delete: :delete, on_update: :update, name: \"comments_to_posts_fkey\"\n  end\nend\n```\n\n>","ref":"references.html","title":"References","type":"extras"},{"doc":">\n> No resource logic is applied with these operations! No authorization rules or validations take place, and no notifications are issued. This operation happens _directly_ in the database.","ref":"references.html#actions-are-not-used-for-this-behavior-warning","title":"Actions are not used for this behavior {: .warning} - References","type":"extras"},{"doc":"This option describes what to do if the referenced row is deleted.\n\nThe option is called `on_delete`, instead of `on_destroy`, because it is hooking into the database level deletion, _not_ a `destroy` action in your resource. See the warning above.\n\nThe possible values for the option are `:nothing`, `:restrict`, `:delete`, `:nilify`, `{:nilify, columns}`.\n\nWith `:nothing` or `:restrict` the deletion of the referenced row is prevented.\n\nWith `:delete` the row is deleted together with the referenced row.\n\nWith `:nilify` all columns of the foreign-key constraint are nilified.\n\nWith `{:nilify, columns}` a column list can specify which columns should be set to `nil`.\nIf you intend to use this option to nilify a subset of the columns, note that it cannot be used together with the `match: :full` option otherwise a mix of nil and non-nil values would fail the constraint and prevent the deletion of the referenced row.\nIn addition, keep into consideration that this option is only supported from Postgres v15.0 onwards.","ref":"references.html#on-delete","title":"On Delete - References","type":"extras"},{"doc":"This option describes what to do if the referenced row is updated.\n\nThe possible values for the option are `:nothing`, `:restrict`, `:update`, `:nilify`.\n\nWith `:nothing` or `:restrict` the update of the referenced row is prevented.\n\nWith `:update` the row is updated according to the referenced row.\n\nWith `:nilify` all columns of the foreign-key constraint are nilified.","ref":"references.html#on-update","title":"On Update - References","type":"extras"},{"doc":"```elixir\nreferences do\n  reference :post, on_delete: :nothing\n  # vs\n  reference :post, on_delete: :restrict\nend\n```\n\nThe difference between `:nothing` and `:restrict` is subtle and, if you are unsure, choose `:nothing` (the default behavior). `:restrict` will immediately check the foreign-key constraint and prevent the update or deletion from happening, whereas `:nothing` allows the check to be deferred until later in the transaction. This allows for things like updating or deleting the destination row and _then_ updating updating or deleting the reference (as long as you are in a transaction). The reason that `:nothing` still ultimately prevents the update or deletion is because postgres enforces foreign key referential integrity.","ref":"references.html#nothing-vs-restrict","title":"Nothing vs Restrict - References","type":"extras"},{"doc":"# Polymorphic Resources\n\nTo support leveraging the same resource backed by multiple tables (useful for things like polymorphic associations), AshPostgres supports setting the `data_layer.table` context for a given resource. For this example, lets assume that you have a `MyApp.Post` resource and a `MyApp.Comment` resource. For each of those resources, users can submit `reactions`. However, you want a separate table for `post_reactions` and `comment_reactions`. You could accomplish that like so:\n\n```elixir\ndefmodule MyApp.Reaction do\n  use Ash.Resource,\n    domain: MyDomain,\n    data_layer: AshPostgres.DataLayer\n\n  postgres do\n    polymorphic? true # Without this, `table` is a required configuration\n  end\n\n  attributes do\n    attribute :resource_id, :uuid, public?: true\n  end\n\n  ...\nend\n```\n\nThen, in your related resources, you set the table context like so:\n\n```elixir\ndefmodule MyApp.Post do\n  use Ash.Resource,\n    domain: MyDomain,\n    data_layer: AshPostgres.DataLayer\n\n  ...\n\n  relationships do\n    has_many :reactions, MyApp.Reaction,\n      relationship_context: %{data_layer: %{table: \"post_reactions\"}},\n      destination_attribute: :resource_id\n  end\nend\n\ndefmodule MyApp.Comment do\n  use Ash.Resource,\n    domain: MyDomain,\n    data_layer: AshPostgres.DataLayer\n\n  ...\n\n  relationships do\n    has_many :reactions, MyApp.Reaction,\n      relationship_context: %{data_layer: %{table: \"comment_reactions\"}},\n      destination_attribute: :resource_id\n  end\nend\n```\n\nWith this, when loading or editing related data, ash will automatically set that context.\nFor managing related data, see `Ash.Changeset.manage_relationship/4` and other relationship functions\nin `Ash.Changeset`","ref":"polymorphic-resources.html","title":"Polymorphic Resources","type":"extras"},{"doc":"To make actions use a specific table, you can use the `set_context` query preparation/change.\n\nFor example:\n\n```elixir\ndefmodule MyApp.Reaction do\n  # ...\n  actions do\n    read :for_comments do\n      prepare set_context(%{data_layer: %{table: \"comment_reactions\"}})\n    end\n\n    read :for_posts do\n      prepare set_context(%{data_layer: %{table: \"post_reactions\"}})\n    end\n  end\nend\n```","ref":"polymorphic-resources.html#table-specific-actions","title":"Table specific actions - Polymorphic Resources","type":"extras"},{"doc":"When a migration is marked as `polymorphic? true`, the migration generator will look at\nall resources that are related to it, that set the `%{data_layer: %{table: \"table\"}}` context.\nFor each of those, a migration is generated/managed automatically. This means that adding reactions\nto a new resource is as easy as adding the relationship and table context, and then running\n`mix ash.codegen`.","ref":"polymorphic-resources.html#migrations","title":"Migrations - Polymorphic Resources","type":"extras"},{"doc":"# Migrations","ref":"migrations-and-tasks.html","title":"Migrations","type":"extras"},{"doc":"Ash comes with its own tasks, and AshPostgres exposes lower level tasks that you can use if necessary. This guide shows the process using `ash.*` tasks, and the `ash_postgres.*` tasks are illustrated at the bottom.","ref":"migrations-and-tasks.html#tasks","title":"Tasks - Migrations","type":"extras"},{"doc":"- Make resource changes\n- Run `mix ash.codegen --name add_a_combobulator` to generate migrations and resource snapshots\n- Run `mix ash.migrate` to run those migrations\n\nFor more information on generating migrations, run `mix help ash_postgres.generate_migrations` (the underlying task that is called by `mix ash.migrate`)\n\n>","ref":"migrations-and-tasks.html#basic-workflow","title":"Basic Workflow - Migrations","type":"extras"},{"doc":">\n> If you have are using schema-based multitenancy, you will also need to define a `list_tenants/0` function in your repo module. See `AshPostgres.Repo` for more.","ref":"migrations-and-tasks.html#list_tenants-0-info","title":"list_tenants/0 {: .info} - Migrations","type":"extras"},{"doc":"Often, you will run into a situation where you want to make a slight change to a resource after you've already generated and run migrations. If you are using git and would like to undo those changes, then regenerate the migrations, this script may prove useful:\n\n```bash\n#!/bin/bash\n\n# Get count of untracked migrations\nN_MIGRATIONS=$(git ls-files --others priv/repo/migrations | wc -l)\n\n# Rollback untracked migrations\nmix ash_postgres.rollback -n $N_MIGRATIONS\n\n# Delete untracked migrations and snapshots\ngit ls-files --others priv/repo/migrations | xargs rm\ngit ls-files --others priv/resource_snapshots | xargs rm\n\n# Regenerate migrations\nmix ash.codegen --name $1\n\n# Run migrations if flag\nif echo $* | grep -e \"-m\" -q\nthen\n  mix ash.migrate\nfi\n```\n\nAfter saving this file to something like `regen.sh`, make it executable with `chmod +x regen.sh`. Now you can run it with `./regen.sh name_of_operation`. If you would like the migrations to automatically run after regeneration, add the `-m` flag: `./regen.sh name_of_operation -m`.","ref":"migrations-and-tasks.html#regenerating-migrations","title":"Regenerating Migrations - Migrations","type":"extras"},{"doc":"Define a module similar to the following:\n\n```elixir\ndefmodule MyApp.Release do\n  @moduledoc \"\"\"\nTasks that need to be executed in the released application (because mix is not present in releases).\n  \"\"\"\n  @app :my_app\n  def migrate do\n    load_app()\n\n    for repo <- repos() do\n      {:ok, _, _} = Ecto.Migrator.with_repo(repo, &Ecto.Migrator.run(&1, :up, all: true))\n    end\n  end\n\n  # only needed if you are using postgres multitenancy\n  def migrate_tenants do\n    load_app()\n\n    for repo <- repos() do\n      repo_name = repo |> Module.split() |> List.last() |> Macro.underscore()\n\n      path =\n        \"priv/\"\n        |> Path.join(repo_name)\n        |> Path.join(\"tenant_migrations\")\n        # This may be different for you if you are not using the default tenant migrations\n\n      {:ok, _, _} =\n        Ecto.Migrator.with_repo(\n          repo,\n          fn repo ->\n            for tenant <- repo.all_tenants() do\n              Ecto.Migrator.run(repo, path, :up, all: true, prefix: tenant)\n            end\n          end\n        )\n    end\n  end\n\n  # only needed if you are using postgres multitenancy\n  def migrate_all do\n    load_app()\n    migrate()\n    migrate_tenants()\n  end\n\n  def rollback(repo, version) do\n    load_app()\n    {:ok, _, _} = Ecto.Migrator.with_repo(repo, &Ecto.Migrator.run(&1, :down, to: version))\n  end\n\n  # only needed if you are using postgres multitenancy\n  def rollback_tenants(repo, version) do\n    load_app()\n    repo_name = repo |> Module.split() |> List.last() |> Macro.underscore()\n\n    path =\n      \"priv/\"\n      |> Path.join(repo_name)\n      |> Path.join(\"tenant_migrations\")\n      # This may be different for you if you are not using the default tenant migrations\n\n    for tenant <- repo.all_tenants() do\n      {:ok, _, _} =\n        Ecto.Migrator.with_repo(\n          repo,\n          &Ecto.Migrator.run(&1, path, :down,\n            to: version,\n            prefix: tenant\n          )\n        )\n    end\n  end\n\n  defp repos do\n    domains()\n    |> Enum.flat_map(fn domain ->\n      domain\n      |> Ash.Domain.Info.resources()\n      |> Enum.map(&AshPostgres.DataLayer.Info.repo/1)\n      |> Enum.reject(&is_nil/1)\n    end)\n    |> Enum.uniq()\n  end\n\n  defp domains do\n    Application.fetch_env!(@app, :ash_domains)\n  end\n\n  defp load_app do\n    Application.load(@app)\n  end\nend\n```","ref":"migrations-and-tasks.html#running-migrations-in-production","title":"Running Migrations in Production - Migrations","type":"extras"},{"doc":"- `mix ash_postgres.generate_migrations`\n- `mix ash_postgres.create`\n- `mix ash_postgres.drop`\n- `mix ash_postgres.migrate` (use `mix ash_postgres.migrate --tenants` to run tenant migrations)\n- `mix ash_postgres.rollback` (use `mix ash_postgres.rollback --tenants` to rollback tenant migrations)","ref":"migrations-and-tasks.html#ashpostgres-specific-mix-tasks","title":"AshPostgres-specific mix tasks - Migrations","type":"extras"},{"doc":"# Testing with AshPostgres\n\nWhen using AshPostgres resources in tests, you will likely want to include use a test case similar to the following. This will ensure that your repo runs everything in a transaction.\n\n```elixir\ndefmodule MyApp.DataCase do\n  @moduledoc \"\"\"\n  This module defines the setup for tests requiring\n  access to the application's data layer.\n\n  You may define functions here to be used as helpers in\n  your tests.\n\n  Finally, if the test case interacts with the database,\n  we enable the SQL sandbox, so changes done to the database\n  are reverted at the end of every test. If you are using\n  PostgreSQL, you can even run database tests asynchronously\n  by setting `use AshHq.DataCase, async: true`, although\n  this option is not recommended for other databases.\n  \"\"\"\n\n  use ExUnit.CaseTemplate\n\n  using do\n    quote do\n      alias MyApp.Repo\n\n      import Ecto\n      import Ecto.Changeset\n      import Ecto.Query\n      import MyApp.DataCase\n    end\n  end\n\n  setup tags do\n    pid = Ecto.Adapters.SQL.Sandbox.start_owner!(MyApp.Repo, shared: not tags[:async])\n    on_exit(fn -> Ecto.Adapters.SQL.Sandbox.stop_owner(pid) end)\n    :ok\n  end\nend\n```\n\nThis should be coupled with to make sure that Ash does not spawn any tasks.\n\n```elixir\nconfig :ash, :disable_async?, true\n```","ref":"testing.html","title":"Testing with AshPostgres","type":"extras"},{"doc":"# Upgrading to 2.0\n\nThere are only three breaking changes in this release, one of them is very significant, the other two are minor.\n\n# AshPostgres officially supports only postgresql version 14 or higher\n\nA new callback `min_pg_version/0` has been added to the repo, but a default implementation is set up that reads the version from postgres directly, the first time it is required. It is cached until the repo is reinitialized, at which point it is looked up again.\n\nWhile _most_ things will work with versions as low as 9, we are relying on features of newer postgres versions and intend to do so more in the future. We will not be testing against versions lower than 14, and we will not be supporting them. If you are using an older version of postgres, you will need to upgrade.\n\nIf you _must_ use an older version, the only thing that you'll need to change in the short term is to handle the fact that we now use `gen_random_uuid()` as the default for generated uuids (see below), which is only available after postgres _13_. Additionally, if you are on postgres 12 or earlier, you will need to replace `ANYCOMPATIBLE` with `ANYELEMENT` in the `ash-functions` extension migration.\n\n## `gen_random_uuid()` is now the default for generated uuids\n\nIn the past, we used `uuid_generate_v4()` as the default for generated uuids. This function is part of the `uuid-ossp` extension, which is not installed by default in postgres. `gen_random_uuid()` is a built-in function that is available in all versions of postgres 13 and higher. If you are using an older version of postgres, you will need to install the `uuid-ossp` extension and change the default in your migrations.","ref":"upgrading-to-2-0.html","title":"Upgrading to 2.0","type":"extras"},{"doc":"This is a layer of safety to ensure consistency in the default values of a database and the datetimes that are sent to/from the database. When you generate migrations you will notice your timestamps change from defaulting to `now()` in your migrations to `now() AT TIMESTAMP 'utc'`. You are free to undo this change, by setting `migration_defaults` in your resource, or simply by deleting the generated migration.","ref":"upgrading-to-2-0.html#utc-datetimes-that-default-to-datetime-now-0-are-now-cast-to-utc","title":"utc datetimes that default to `&DateTime.now/0` are now cast to `UTC` - Upgrading to 2.0","type":"extras"},{"doc":"# Expressions\n\nIn addition to the expressions listed in the [Ash expressions guide](https://hexdocs.pm/ash/expressions.html), AshPostgres provides the following expressions\n\n# Fragments\n\nFragments allow you to use arbitrary postgres expressions in your queries. Fragments can often be an escape hatch to allow you to do things that don't have something officially supported with Ash.","ref":"expressions.html","title":"Expressions","type":"extras"},{"doc":"#### Simple expressions\n\n```elixir\nfragment(\"? / ?\", points, count)\n```\n\n#### Calling functions\n\n```elixir\nfragment(\"repeat('hello', 4)\")\n```\n\n#### Using entire queries\n\n```elixir\nfragment(\"points > (SELECT SUM(points) FROM games WHERE user_id = ? AND id != ?)\", user_id, id)\n```\n\n>","ref":"expressions.html#examples","title":"Examples - Expressions","type":"extras"},{"doc":">\n> Using entire queries as shown above is a last resort, but can sometimes be the best way to accomplish a given task.\n\n#### In calculations\n\n```elixir\ncalculations do\n  calculate :lower_name, :string, expr(\n    fragment(\"LOWER(?)\", name)\n  )\nend\n```\n\n#### In migrations\n\n```elixir\ncreate table(:managers, primary_key: false) do\n  add :id, :uuid, null: false, default: fragment(\"UUID_GENERATE_V4()\"), primary_key: true\nend\n```","ref":"expressions.html#a-last-resport-warning","title":"a last resport {: .warning} - Expressions","type":"extras"},{"doc":"These wrap the postgres builtin like and ilike operators.\n\nPlease be aware, these match _patterns_ not raw text. Use `contains/1` if you want to match text without supporting patterns, i.e `%` and `_` have semantic meaning!\n\nFor example:\n\n```elixir\nAsh.Query.filter(User, like(name, \"%obo%\")) # name contains obo anywhere in the string, case sensitively\n```\n\n```elixir\nAsh.Query.filter(User, ilike(name, \"%ObO%\")) # name contains ObO anywhere in the string, case insensitively\n```","ref":"expressions.html#like-and-ilike","title":"Like and ILike - Expressions","type":"extras"},{"doc":"To use this expression, you must have the `pg_trgm` extension in your repos `installed_extensions` list.\n\nThis calls the `similarity` function from that extension. See more in the [pgtrgm guide](https://www.postgresql.org/docs/current/pgtrgm.html)\n\nFor example:\n\n```elixir\nAsh.Query.filter(User, trigram_similarity(first_name, \"fred\") > 0.8)\n```","ref":"expressions.html#trigram-similarity","title":"Trigram similarity - Expressions","type":"extras"},{"doc":"# Schema Based Multitenancy\n\nMultitenancy in AshPostgres is implemented via postgres schemas. For more information on schemas, see postgres' [schema documentation](https://www.postgresql.org/docs/current/ddl-schemas.html)\n\nImplementing multitenancy via schema's involves tracking \"tenant migrations\" separately from migrations for your public schema. You can see what this looks like by simply creating a multitenant resource, and using the migration generator `mix ash.codegen`. It will put schema specific migrations in `priv/repo/tenant_migrations`. When you generate migrations, you'll want to be sure to audit migrations in both directories. Additionally, when you deploy, you'll want to run your migrations, as well as running them with the migrations path `priv/repo/tenant_migrations`.","ref":"schema-based-multitenancy.html","title":"Schema Based Multitenancy","type":"extras"},{"doc":"The generated migrations include a lot of niceties around multitenancy. Specifically, foreign keys will point at tables in the correct schema, and foreign keys to non-multitenant resources will point to the correct table. If you are using attribute multitenancy, foreign keys to tables _also_ using attribute multitenancy will be composite foreign keys, including the tenant attribute as well as the referencing field.\n\nMigrations in the tenant directory will call `repo().all_tenants()`, which is a callback you will need to implement in your repo that should return a list of all schemas that need to be migrated.","ref":"schema-based-multitenancy.html#generated-migrations","title":"Generated migrations - Schema Based Multitenancy","type":"extras"},{"doc":"By setting the `template` configuration, in the `manage_tenant` section, you can cause the creation/updating of a given resource to create/rename tenants. For example:\n\n```elixir\ndefmodule MyApp.Organization do\n  use Ash.Resource,\n    ...\n\n  postgres do\n    ...\n\n    manage_tenant do\n      template [\"org_\", :id]\n    end\n  end\nend\n```\n\nWith this configuration, if you create an organization, it will create a corresponding schema, e.g. `org_10` in the database. Then it will run your tenant migrations on that schema. To override the tenant_migrations path, implement the `c:AshPostgres.Repo.tenant_migrations_path/0` callback.\n\nNotice that `manage_tenant` is nested inside the `postgres` block. This is because the method of managing tenants is specific to postgres, and if another data layer supported multitenancy they may or may not support managing tenants in the same way.","ref":"schema-based-multitenancy.html#automatically-managing-tenants","title":"Automatically managing tenants - Schema Based Multitenancy","type":"extras"},{"doc":"# Manual Relationships\n\nSee [Defining Manual Relationships](https://hexdocs.pm/ash/defining-manual-relationships.html) for an idea of manual relationships in general.\nManual relationships allow for expressing complex/non-typical relationships between resources in a standard way.\nIndividual data layers may interact with manual relationships in their own way, so see their corresponding guides.","ref":"manual-relationships.html","title":"Manual Relationships","type":"extras"},{"doc":"```elixir\n# in the resource\n\nrelationships do\n  has_many :tickets_above_threshold, Helpdesk.Support.Ticket do\n    manual Helpdesk.Support.Ticket.Relationships.TicketsAboveThreshold\n  end\nend\n\n# implementation\ndefmodule Helpdesk.Support.Ticket.Relationships.TicketsAboveThreshold do\n  use Ash.Resource.ManualRelationship\n  use AshPostgres.ManualRelationship\n\n  require Ash.Query\n  require Ecto.Query\n\n  def load(records, _opts, %{query: query, actor: actor, authorize?: authorize?}) do\n    # Use existing records to limit resultds\n    rep_ids = Enum.map(records, & &1.id)\n     # Using Ash to get the destination records is ideal, so you can authorize access like normal\n     # but if you need to use a raw ecto query here, you can. As long as you return the right structure.\n\n    {:ok,\n     query\n     |> Ash.Query.filter(representative_id in ^rep_ids)\n     |> Ash.Query.filter(priority > representative.priority_threshold)\n     |> Helpdesk.Support.read!(actor: actor, authorize?: authorize?)\n     # Return the items grouped by the primary key of the source, i.e representative.id => [...tickets above threshold]\n     |> Enum.group_by(& &1.representative_id)}\n  end\n\n  # query is the \"source\" query that is being built.\n\n  # _opts are options provided to the manual relationship, i.e `{Manual, opt: :val}`\n\n  # current_binding is what the source of the relationship is bound to. Access fields with `as(^current_binding).field`\n\n  # as_binding is the binding that your join should create. When you join, make sure you say `as: ^as_binding` on the\n  # part of the query that represents the destination of the relationship\n\n  # type is `:inner` or `:left`.\n  # destination_query is what you should join to to add the destination to the query, i.e `join: dest in ^destination-query`\n  def ash_postgres_join(query, _opts, current_binding, as_binding, :inner, destination_query) do\n    {:ok,\n     Ecto.Query.from(_ in query,\n       join: dest in ^destination_query,\n       as: ^as_binding,\n       on: dest.representative_id == as(^current_binding).id,\n       on: dest.priority > as(^current_binding).priority_threshold\n     )}\n  end\n\n  def ash_postgres_join(query, _opts, current_binding, as_binding, :left, destination_query) do\n    {:ok,\n     Ecto.Query.from(_ in query,\n       left_join: dest in ^destination_query,\n       as: ^as_binding,\n       on: dest.representative_id == as(^current_binding).id,\n       on: dest.priority > as(^current_binding).priority_threshold\n     )}\n  end\n\n  # _opts are options provided to the manual relationship, i.e `{Manual, opt: :val}`\n\n  # current_binding is what the source of the relationship is bound to. Access fields with `parent_as(^current_binding).field`\n\n  # as_binding is the binding that has already been created for your join. Access fields on it via `as(^as_binding)`\n\n  # destination_query is what you should use as the basis of your query\n  def ash_postgres_subquery(_opts, current_binding, as_binding, destination_query) do\n    {:ok,\n     Ecto.Query.from(_ in destination_query,\n       where: parent_as(^current_binding).id == as(^as_binding).representative_id,\n       where: as(^as_binding).priority > parent_as(^current_binding).priority_threshold\n     )}\n  end\nend\n```","ref":"manual-relationships.html#example","title":"Example - Manual Relationships","type":"extras"},{"doc":"# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](Https://conventionalcommits.org) for commit guidelines.\n\n<!-- changelog -->\n\n## [v2.3.1](https://github.com/ash-project/ash_postgres/compare/v2.3.0...v2.3.1) (2024-09-05)","ref":"changelog.html","title":"Change Log","type":"extras"},{"doc":"- [`mix ash_postgres.gen.migrations`] better imported index names\n\n- [`mix ash_postgres.gen.migrations`] add `--extend` option, forwarded to generated resource\n\n## [v2.3.0](https://github.com/ash-project/ash_postgres/compare/v2.2.5...v2.3.0) (2024-09-05)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [`mix ash_postgres.gen.resources`] Add `mix ash_postgres.gen.resources` for importing tables from an existing database as resources\n\n## [v2.2.5](https://github.com/ash-project/ash_postgres/compare/v2.2.4...v2.2.5) (2024-09-04)","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"- [`AshPostgres.DataLayer`] support ash main upsert_condition logic\n\n## [v2.2.4](https://github.com/ash-project/ash_postgres/compare/v2.2.3...v2.2.4) (2024-09-03)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [`AshPostgres.DataLayer`] ensure default bindings are present on data layer\n\n- [`AshPostgres.DataLayer`] properly traverse newtypes when determining types\n\n## [v2.2.3](https://github.com/ash-project/ash_postgres/compare/v2.2.2...v2.2.3) (2024-08-18)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [`mix ash_postgres.install`] was not adding ash_functions/min_pg_version\n\n## [v2.2.2](https://github.com/ash-project/ash_postgres/compare/v2.2.1...v2.2.2) (2024-08-17)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [`mix ash_postgres.install`] properly handle new igniter installer functions\n\n## [v2.2.1](https://github.com/ash-project/ash_postgres/compare/v2.2.0...v2.2.1) (2024-08-16)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [`AshPostgres.DataLayer`] set a proper default for `skip_unique_indexes`","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [`mix ash_postgres.install`] include `min_pg_version` in new generators\n\n## [v2.2.0](https://github.com/ash-project/ash_postgres/compare/v2.1.19...v2.2.0) (2024-08-13)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [`AshPostgres.Repo`] remove `Agent` \"convenience\" for determining min pg version\n\nWe need to require that users provide this function. To that end we're\nadding a warning in a minor release branch telling users to define this.\nThe agent was acting as a bottleneck that all queries must go through,\ncausing nontrivial performance issues at scale.\n\n- [upserts] handle filter condition on create (#368)\n\n## [v2.1.19](https://github.com/ash-project/ash_postgres/compare/v2.1.18...v2.1.19) (2024-08-12)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [ecto compatibility] we missed a change when preparing for ecto 3.12 parameterized type changes\n\n- [exists aggregates] update ash_sql for exists aggregate fixes\n\n## [v2.1.18](https://github.com/ash-project/ash_postgres/compare/v2.1.17...v2.1.18) (2024-08-09)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [`ash_postgres.gen.migration`] dynamically select and allow setting a repo\n\n## [v2.1.17](https://github.com/ash-project/ash_postgres/compare/v2.1.16...v2.1.17) (2024-07-27)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [`ash_sql`] update ash & ash_sql for various fixes\n\n## [v2.1.16](https://github.com/ash-project/ash_postgres/compare/v2.1.15...v2.1.16) (2024-07-25)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [updates] don't overwrite non-updated fields on update\n\n- [`mix ash_postgres.generate_migrations`] ensure app is compiled before using repo modules","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [`ash_sql`] update ash_sql for cleaner queries\n\n## [v2.1.15](https://github.com/ash-project/ash_postgres/compare/v2.1.14...v2.1.15) (2024-07-23)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [query building] use a subquery if any exists aggregates are in play\n\n## [v2.1.14](https://github.com/ash-project/ash_postgres/compare/v2.1.13...v2.1.14) (2024-07-22)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [multitenancy] properly convert tenant to string when building lateral join\n\n## [v2.1.13](https://github.com/ash-project/ash_postgres/compare/v2.1.12...v2.1.13) (2024-07-22)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [atomic validations] update ash & ash_sql for fixes, test atomic validations in destroys\n\n## [v2.1.12](https://github.com/ash-project/ash_postgres/compare/v2.1.11...v2.1.12) (2024-07-19)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [`mix ash_postgres.install`] properly add prod config in installer","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [`mix ash_postgres.install`] properly perform or don't perform configuration modification code\n\n- [`has_many` relationships] allow non-unique has_many source_attributes (#355)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [`mix ash_postgres.install`] prepend `:postgres` to section order\n\n- [`mix ash.patch.extend`] pluralize table name in extender\n\n## [v2.1.10](https://github.com/ash-project/ash_postgres/compare/v2.1.9...v2.1.10) (2024-07-18)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [lateral joins] allow non-unique has_many source_attributes (#355)\n\n## [v2.1.9](https://github.com/ash-project/ash_postgres/compare/v2.1.8...v2.1.9) (2024-07-18)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [`mix ash.gen.resource`] pluralize table name in extender\n\n## [v2.1.8](https://github.com/ash-project/ash_postgres/compare/v2.1.7...v2.1.8) (2024-07-17)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [aggregates] update ash_sql & ash for include_nil? fix (and test it)\n\n- [aggregates] ensure synthesized query aggregates have context set","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [installers] update igniter dependencies\n\n- [expressions] add `binding()` expression, for referring to the current table\n\n## [v2.1.7](https://github.com/ash-project/ash_postgres/compare/v2.1.6...v2.1.7) (2024-07-17)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- update to latest ash version for aggregate fix\n\n- update ash_sql for include_nil? fix and test it\n\n- ensure synthesized query aggregates have context set","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- update ash/igniter dependencies\n\n- add `binding()` expression\n\n- use latest type casting code from ash\n\n- support new type determination code\n\n## [v2.1.6](https://github.com/ash-project/ash_postgres/compare/v2.1.5...v2.1.6) (2024-07-16)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- ensure synthesized query aggregates have context set","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- update ash/igniter dependencies\n\n- add `binding()` expression\n\n- use latest type casting code from ash\n\n- support new type determination code\n\n## [v2.1.5](https://github.com/ash-project/ash_postgres/compare/v2.1.4...v2.1.5) (2024-07-15)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [`Ash.Expr`] add `binding()` expression to refer to current table\n\n- [`Ash.Expr`] use latest type casting code from ash\n\n## [v2.1.4](https://github.com/ash-project/ash_postgres/compare/v2.1.3...v2.1.4) (2024-07-14)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [`Ash.Expr`] use latest type casting code from ash\n\n## [v2.1.3](https://github.com/ash-project/ash_postgres/compare/v2.1.2...v2.1.3) (2024-07-14)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [`Ash.Expr`] support new type determination code\n\n## [v2.1.2](https://github.com/ash-project/ash_postgres/compare/v2.1.1...v2.1.2) (2024-07-13)\n\n- [query builder] update ash & improve type casting behavior\n\n## [v2.1.1](https://github.com/ash-project/ash_postgres/compare/v2.1.0...v2.1.1) (2024-07-10)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [mix ash_postgres.install] properly interpolate module names in installer\n\n## [v2.1.0](https://github.com/ash-project/ash_postgres/compare/v2.0.12...v2.1.0) (2024-07-10)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [AshPostgres.DataLayer] add `storage_types` configuration (#342)\n- [generators] add `mix ash_postgres.install` (`mix igniter.install ash_postgres`)","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"- [AshPostgres.DataLayer] ensure that `from_many?` relationships in lateral join have a limit applied\n\n- [migration generator] properly delete args passed from migrate to ecto","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [Ash.Type.UUIDv7] add support for `:uuid_v7` type (#333)\n\n- [migration generator] order keys in snapshot json (#339)\n\n## [v2.0.12](https://github.com/ash-project/ash_postgres/compare/v2.0.11...v2.0.12) (2024-06-20)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [migration generator] only add references indexes if they've changed\n\n## [v2.0.11](https://github.com/ash-project/ash_postgres/compare/v2.0.10...v2.0.11) (2024-06-19)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [AshPostgres.DataLayer] rework expression type detection\n\n- [migration generator] ensure index keys are atoms in generated migrations (#332)\n\n## [v2.0.10](https://github.com/ash-project/ash_postgres/compare/v2.0.9...v2.0.10) (2024-06-18)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [AshPostgres.DataLayer] update ash_sql to fix query generation issues\n\n- [migration generator] ensure that parens are always added to calculation generated SQL\n\n- [migration generator] properly get calculation sql","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [AshPostgres.DataLayer] better type handling using new type inference\n\n- [identities] identities w/ calculations and where clauses in upserts\n\n## [v2.0.9](https://github.com/ash-project/ash_postgres/compare/v2.0.8...v2.0.9) (2024-06-13)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [migration generator] autogenerate index in references (#321)","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"- [AshPostgres.DataLayer] fix invalid select on sorting by some calculations\n\n- [AshPostgres.DataLayer] fix error message displaying in identity verifier\n\n- [lateral joining] ensure that context multitenancy is properly applied to lateral many-to-many joins\n\n- [migration generator] don't assume old snapshots have `index?` key for attributes\n\n- [ash.rollback] `list_tenants` -> `all_tenants`\n\n- [ash.rollback] when checking for roll back-able migrations, only check `Path.basename`","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [migration generator] don't sort identity keys.\n\n## [v2.0.8](https://github.com/ash-project/ash_postgres/compare/v2.0.7...v2.0.8) (2024-06-06)\n\n## [v2.0.7](https://github.com/ash-project/ash_postgres/compare/v2.0.6...v2.0.7) (2024-06-06)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [fix] update ash_sql and fix issues retaining lateral join context\n\n- [fix] ensure that all current attribute values are selected on bulk update shifted root query\n\n## [v2.0.6](https://github.com/ash-project/ash_postgres/compare/v2.0.5...v2.0.6) (2024-05-29)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [atomic updates] properly support aggregate references in atomic updates\n\n- [migration generator] ensure that identities are dropped when where/nils_distinct? are changed\n\n- [migration generator] ensure that `where` is wrapped in parenthesis\n\n- [ecto compatibility] support old/new parameterized type format","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [identities] require clarification of index names > 63 characters\n\n- [mix ash_postgres.squash_snapshots] add `ash_postgres.squash_snapshots` mix task (#302)\n\n## [v2.0.5](https://github.com/ash-project/ash_postgres/compare/v2.0.4...v2.0.5) (2024-05-24)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [idenities] update `ash` and support new `identity` features\n\n## [v2.0.4](https://github.com/ash-project/ash_postgres/compare/v2.0.3...v2.0.4) (2024-05-23)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"[updates] ensure update's reselect all changing values\n\n## [v2.0.3](https://github.com/ash-project/ash_postgres/compare/v2.0.2...v2.0.3) (2024-05-22)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"[updates] handle complex maps/list on update\n\n[Ash.Query] support anonymous aggregates in sorts\n\n[exists] ensure parent_as bindings properly reference binding names\n\n[migration generator] add and remove custom indexes in tandem properly","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"[references] support `on_delete: :nilify` for specific columns (#289)\n\n## [v2.0.2](https://github.com/ash-project/ash_postgres/compare/v2.0.1...v2.0.2) (2024-05-15)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"- [update_query/destroy_query] rework the update and destroy query builder to support multiple kinds of joining\n\n- [mix ash_postgres.migrate] remove duplicate repo flags (#285)\n\n- [Ash.Error.Changes.StaleRecord] ensure filter is included in stale record error messages we return\n\n- [AshPostgres.MigrationGenerator] properly parse previous version from migration generation\n\n## [v2.0.1](https://github.com/ash-project/ash_postgres/compare/v2.0.0...v2.0.1) (2024-05-12)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [AshPostgres.MigrationGenerator] properly parse previous version of custom extensions when generating migrations\n\n## [v2.0.0](https://github.com/ash-project/ash_postgres/compare/v2.0.0...2.0)\n\nThe changelog is starting over. Please see `/documentation/1.0-CHANGELOG.md` in GitHub for previous changelogs.","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [Ash.Type.UUID] change defaults in migrations for uuids to `gen_random_uuid()`\n- [Ash.Type.DateTime] Use UTC for default generated timestamps (#131)\n- [AshPostgres.DataLayer] must now know the min_pg_version that will be used. By default we check this at repo startup by asking the database, but you can also define it yourself.\n- [AshPostgres.DataLayer] Now requires postgres version 14 or higher","ref":"changelog.html#breaking-changes","title":"Breaking Changes: - Change Log","type":"extras"},{"doc":"- [AshPostgres.Timestamptz] add timestamptz types (#266)\n- [AshPostgres.Repo] add `create?` and `drop?` callbacks to `AshPostgres.Repo` (#143)\n- [AshPostgres.DataLayer] support `c:AshDataLayer.calculate/3` capability","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"- [AshPostgres.MigrationGenerator] honor dry_run option in extension migrations\n- [AshPostgres.MigrationGenerator] don't wait for shell input when checking migrations\n- [AshPostgres.DataLayer] ensure limit/offset triggers joining for update/destroy query\n- [AshPostgres.DataLayer] properly honor `limit` in bulk operations\n- [AshPostgres.DataLayer] ensure that `exists` with a filter paired with `from_many?` functions properly","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"- [AshPostgres.Repo] warn on missing ash-functions at compile time\n- [AshPostgres.Repo] add default implementation for pg_version, and rename to `min_pg_version`\n- [mix ash.rollback] support `mix ash.rollback` with interactive rollback\n- [AshSql] move many internals out to `AshSql` package to be shared","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: AshPostgres.DataLayer\n\nA postgres data layer that leverages Ecto's postgres capabilities.","ref":"dsl-ashpostgres-datalayer.html","title":"DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"Postgres data layer configuration","ref":"dsl-ashpostgres-datalayer.html#postgres","title":"postgres - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"* [custom_indexes](#postgres-custom_indexes)\n   * index\n * [custom_statements](#postgres-custom_statements)\n   * statement\n * [manage_tenant](#postgres-manage_tenant)\n * [references](#postgres-references)\n   * reference\n * [check_constraints](#postgres-check_constraints)\n   * check_constraint","ref":"dsl-ashpostgres-datalayer.html#nested-dsls","title":"Nested DSLs - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```\npostgres do\n  repo MyApp.Repo\n  table \"organizations\"\nend\n\n```","ref":"dsl-ashpostgres-datalayer.html#examples","title":"Examples - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`repo`](#postgres-repo){: #postgres-repo .spark-required} | `module \\| (any, any -> any)` |  | The repo that will be used to fetch your data. See the `AshPostgres.Repo` documentation for more. Can also be a function that takes a resource and a type `:read \\| :mutate` and returns the repo |\n| [`migrate?`](#postgres-migrate?){: #postgres-migrate? } | `boolean` | `true` | Whether or not to include this resource in the generated migrations with `mix ash.generate_migrations` |\n| [`storage_types`](#postgres-storage_types){: #postgres-storage_types } | `keyword` | `[]` | A keyword list of attribute names to the ecto type that should be used for that attribute. Only necessary if you need to override the defaults. |\n| [`migration_types`](#postgres-migration_types){: #postgres-migration_types } | `keyword` | `[]` | A keyword list of attribute names to the ecto migration type that should be used for that attribute. Only necessary if you need to override the defaults. |\n| [`migration_defaults`](#postgres-migration_defaults){: #postgres-migration_defaults } | `keyword` | `[]` | A keyword list of attribute names to the ecto migration default that should be used for that attribute. The string you use will be placed verbatim in the migration. Use fragments like `fragment(\\\\\"now()\\\\\")`, or for `nil`, use `\\\\\"nil\\\\\"`. |\n| [`calculations_to_sql`](#postgres-calculations_to_sql){: #postgres-calculations_to_sql } | `keyword` |  | A keyword list of calculations and their SQL representation. Used when creating unique indexes for identities over calculations |\n| [`identity_wheres_to_sql`](#postgres-identity_wheres_to_sql){: #postgres-identity_wheres_to_sql } | `keyword` |  | A keyword list of identity names and the SQL representation of their `where` clause. Used when creating unique indexes for identities over calculations |\n| [`base_filter_sql`](#postgres-base_filter_sql){: #postgres-base_filter_sql } | `String.t` |  | A raw sql version of the base_filter, e.g `representative = true`. Required if trying to create a unique constraint on a resource with a base_filter |\n| [`simple_join_first_aggregates`](#postgres-simple_join_first_aggregates){: #postgres-simple_join_first_aggregates } | `list(atom)` | `[]` | A list of `:first` type aggregate names that can be joined to using a simple join.  Use when you have a `:first` aggregate that uses a to-many relationship , but your `filter` statement ensures that there is only one result. Optimizes the generated query. |\n| [`skip_unique_indexes`](#postgres-skip_unique_indexes){: #postgres-skip_unique_indexes } | `atom \\| list(atom)` | `[]` | Skip generating unique indexes when generating migrations |\n| [`unique_index_names`](#postgres-unique_index_names){: #postgres-unique_index_names } | `list({list(atom), String.t} \\| {list(atom), String.t, String.t})` | `[]` | A list of unique index names that could raise errors that are not configured in identities, or an mfa to a function that takes a changeset and returns the list. In the format `{[:affected, :keys], \"name_of_constraint\"}` or `{[:affected, :keys], \"name_of_constraint\", \"custom error message\"}` |\n| [`exclusion_constraint_names`](#postgres-exclusion_constraint_names){: #postgres-exclusion_constraint_names } | `any` | `[]` | A list of exclusion constraint names that could raise errors. Must be in the format `{:affected_key, \"name_of_constraint\"}` or `{:affected_key, \"name_of_constraint\", \"custom error message\"}` |\n| [`identity_index_names`](#postgres-identity_index_names){: #postgres-identity_index_names } | `any` | `[]` | A keyword list of identity names to the unique index name that they should use when being managed by the migration generator. |\n| [`foreign_key_names`](#postgres-foreign_key_names){: #postgres-foreign_key_names } | `list({atom \\| String.t, String.t} \\| {atom \\| String.t, String.t, String.t})` | `[]` | A list of foreign keys that could raise errors, or an mfa to a function that takes a changeset and returns a list. In the format: `{:key, \"name_of_constraint\"}` or `{:key, \"name_of_constraint\", \"custom error message\"}` |\n| [`migration_ignore_attributes`](#postgres-migration_ignore_attributes){: #postgres-migration_ignore_attributes } | `list(atom)` | `[]` | A list of attributes that will be ignored when generating migrations. |\n| [`table`](#postgres-table){: #postgres-table } | `String.t` |  | The table to store and read the resource from. If this is changed, the migration generator will not remove the old table. |\n| [`schema`](#postgres-schema){: #postgres-schema } | `String.t` |  | The schema that the table is located in. Schema-based multitenancy will supercede this option. If this is changed, the migration generator will not remove the old schema. |\n| [`polymorphic?`](#postgres-polymorphic?){: #postgres-polymorphic? } | `boolean` | `false` | Declares this resource as polymorphic. See the [polymorphic resources guide](/documentation/topics/resources/polymorphic-resources.md) for more. |","ref":"dsl-ashpostgres-datalayer.html#options","title":"Options - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"A section for configuring indexes to be created by the migration generator.\n\nIn general, prefer to use `identities` for simple unique constraints. This is a tool to allow\nfor declaring more complex indexes.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes","title":"postgres.custom_indexes - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"* [index](#postgres-custom_indexes-index)","ref":"dsl-ashpostgres-datalayer.html#nested-dsls","title":"Nested DSLs - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```\ncustom_indexes do\n  index [:column1, :column2], unique: true, where: \"thing = TRUE\"\nend\n\n```","ref":"dsl-ashpostgres-datalayer.html#examples","title":"Examples - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```elixir\nindex fields\n```\n\n\nAdd an index to be managed by the migration generator.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_indexes-index","title":"postgres.custom_indexes.index - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```\nindex [\"column\", \"column2\"], unique: true, where: \"thing = TRUE\"\n```","ref":"dsl-ashpostgres-datalayer.html#examples","title":"Examples - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`fields`](#postgres-custom_indexes-index-fields){: #postgres-custom_indexes-index-fields } | `atom \\| String.t \\| list(atom \\| String.t)` |  | The fields to include in the index. |","ref":"dsl-ashpostgres-datalayer.html#arguments","title":"Arguments - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`error_fields`](#postgres-custom_indexes-index-error_fields){: #postgres-custom_indexes-index-error_fields } | `list(atom)` |  | The fields to attach the error to. |\n| [`name`](#postgres-custom_indexes-index-name){: #postgres-custom_indexes-index-name } | `String.t` |  | the name of the index. Defaults to \"#{table}_#{column}_index\". |\n| [`unique`](#postgres-custom_indexes-index-unique){: #postgres-custom_indexes-index-unique } | `boolean` | `false` | indicates whether the index should be unique. |\n| [`concurrently`](#postgres-custom_indexes-index-concurrently){: #postgres-custom_indexes-index-concurrently } | `boolean` | `false` | indicates whether the index should be created/dropped concurrently. |\n| [`using`](#postgres-custom_indexes-index-using){: #postgres-custom_indexes-index-using } | `String.t` |  | configures the index type. |\n| [`prefix`](#postgres-custom_indexes-index-prefix){: #postgres-custom_indexes-index-prefix } | `String.t` |  | specify an optional prefix for the index. |\n| [`where`](#postgres-custom_indexes-index-where){: #postgres-custom_indexes-index-where } | `String.t` |  | specify conditions for a partial index. |\n| [`include`](#postgres-custom_indexes-index-include){: #postgres-custom_indexes-index-include } | `list(String.t)` |  | specify fields for a covering index. This is not supported by all databases. For more information on PostgreSQL support, please read the official docs. |\n| [`nulls_distinct`](#postgres-custom_indexes-index-nulls_distinct){: #postgres-custom_indexes-index-nulls_distinct } | `boolean` | `true` | specify whether null values should be considered distinct for a unique index. Requires PostgreSQL 15 or later |\n| [`message`](#postgres-custom_indexes-index-message){: #postgres-custom_indexes-index-message } | `String.t` |  | A custom message to use for unique indexes that have been violated |\n| [`all_tenants?`](#postgres-custom_indexes-index-all_tenants?){: #postgres-custom_indexes-index-all_tenants? } | `boolean` | `false` | Whether or not the index should factor in the multitenancy attribute or not. |","ref":"dsl-ashpostgres-datalayer.html#options","title":"Options - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"Target: `AshPostgres.CustomIndex`","ref":"dsl-ashpostgres-datalayer.html#introspection","title":"Introspection - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"A section for configuring custom statements to be added to migrations.\n\nChanging custom statements may require manual intervention, because Ash can't determine what order they should run\nin (i.e if they depend on table structure that you've added, or vice versa). As such, any `down` statements we run\nfor custom statements happen first, and any `up` statements happen last.\n\nAdditionally, when changing a custom statement, we must make some assumptions, i.e that we should migrate\nthe old structure down using the previously configured `down` and recreate it.\n\nThis may not be desired, and so what you may end up doing is simply modifying the old migration and deleting whatever was\ngenerated by the migration generator. As always: read your migrations after generating them!","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_statements","title":"postgres.custom_statements - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"* [statement](#postgres-custom_statements-statement)","ref":"dsl-ashpostgres-datalayer.html#nested-dsls","title":"Nested DSLs - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```\ncustom_statements do\n  # the name is used to detect if you remove or modify the statement\n  statement :pgweb_idx do\n    up \"CREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector('english', title || ' ' || body));\"\n    down \"DROP INDEX pgweb_idx;\"\n  end\nend\n\n```","ref":"dsl-ashpostgres-datalayer.html#examples","title":"Examples - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```elixir\nstatement name\n```\n\n\nAdd a custom statement for migrations.","ref":"dsl-ashpostgres-datalayer.html#postgres-custom_statements-statement","title":"postgres.custom_statements.statement - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```\nstatement :pgweb_idx do\n  up \"CREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector('english', title || ' ' || body));\"\n  down \"DROP INDEX pgweb_idx;\"\nend\n\n```","ref":"dsl-ashpostgres-datalayer.html#examples","title":"Examples - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#postgres-custom_statements-statement-name){: #postgres-custom_statements-statement-name .spark-required} | `atom` |  | The name of the statement, must be unique within the resource |","ref":"dsl-ashpostgres-datalayer.html#arguments","title":"Arguments - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`up`](#postgres-custom_statements-statement-up){: #postgres-custom_statements-statement-up .spark-required} | `String.t` |  | How to create the structure of the statement |\n| [`down`](#postgres-custom_statements-statement-down){: #postgres-custom_statements-statement-down .spark-required} | `String.t` |  | How to tear down the structure of the statement |\n| [`code?`](#postgres-custom_statements-statement-code?){: #postgres-custom_statements-statement-code? } | `boolean` | `false` | By default, we place the strings inside of ecto migration's `execute/1` function and assume they are sql. Use this option if you want to provide custom elixir code to be placed directly in the migrations |","ref":"dsl-ashpostgres-datalayer.html#options","title":"Options - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"Target: `AshPostgres.Statement`","ref":"dsl-ashpostgres-datalayer.html#introspection","title":"Introspection - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"Configuration for the behavior of a resource that manages a tenant","ref":"dsl-ashpostgres-datalayer.html#postgres-manage_tenant","title":"postgres.manage_tenant - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```\nmanage_tenant do\n  template [\"organization_\", :id]\n  create? true\n  update? false\nend\n\n```","ref":"dsl-ashpostgres-datalayer.html#examples","title":"Examples - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`template`](#postgres-manage_tenant-template){: #postgres-manage_tenant-template .spark-required} | `String.t \\| atom \\| list(String.t \\| atom)` |  | A template that will cause the resource to create/manage the specified schema. |\n| [`create?`](#postgres-manage_tenant-create?){: #postgres-manage_tenant-create? } | `boolean` | `true` | Whether or not to automatically create a tenant when a record is created |\n| [`update?`](#postgres-manage_tenant-update?){: #postgres-manage_tenant-update? } | `boolean` | `true` | Whether or not to automatically update the tenant name if the record is udpated |","ref":"dsl-ashpostgres-datalayer.html#options","title":"Options - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"A section for configuring the references (foreign keys) in resource migrations.\n\nThis section is only relevant if you are using the migration generator with this resource.\nOtherwise, it has no effect.","ref":"dsl-ashpostgres-datalayer.html#postgres-references","title":"postgres.references - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"* [reference](#postgres-references-reference)","ref":"dsl-ashpostgres-datalayer.html#nested-dsls","title":"Nested DSLs - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```\nreferences do\n  reference :post, on_delete: :delete, on_update: :update, name: \"comments_to_posts_fkey\"\nend\n\n```","ref":"dsl-ashpostgres-datalayer.html#examples","title":"Examples - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`polymorphic_on_delete`](#postgres-references-polymorphic_on_delete){: #postgres-references-polymorphic_on_delete } | `:delete \\| :nilify \\| :nothing \\| :restrict \\| {:nilify, atom \\| list(atom)}` |  | For polymorphic resources, configures the on_delete behavior of the automatically generated foreign keys to source tables. |\n| [`polymorphic_on_update`](#postgres-references-polymorphic_on_update){: #postgres-references-polymorphic_on_update } | `:update \\| :nilify \\| :nothing \\| :restrict` |  | For polymorphic resources, configures the on_update behavior of the automatically generated foreign keys to source tables. |","ref":"dsl-ashpostgres-datalayer.html#options","title":"Options - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```elixir\nreference relationship\n```\n\n\nConfigures the reference for a relationship in resource migrations.\n\nKeep in mind that multiple relationships can theoretically involve the same destination and foreign keys.\nIn those cases, you only need to configure the `reference` behavior for one of them. Any conflicts will result\nin an error, across this resource and any other resources that share a table with this one. For this reason,\ninstead of adding a reference configuration for `:nothing`, its best to just leave the configuration out, as that\nis the default behavior if *no* relationship anywhere has configured the behavior of that reference.","ref":"dsl-ashpostgres-datalayer.html#postgres-references-reference","title":"postgres.references.reference - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```\nreference :post, on_delete: :delete, on_update: :update, name: \"comments_to_posts_fkey\"\n```","ref":"dsl-ashpostgres-datalayer.html#examples","title":"Examples - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`relationship`](#postgres-references-reference-relationship){: #postgres-references-reference-relationship .spark-required} | `atom` |  | The relationship to be configured |","ref":"dsl-ashpostgres-datalayer.html#arguments","title":"Arguments - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`ignore?`](#postgres-references-reference-ignore?){: #postgres-references-reference-ignore? } | `boolean` |  | If set to true, no reference is created for the given relationship. This is useful if you need to define it in some custom way |\n| [`on_delete`](#postgres-references-reference-on_delete){: #postgres-references-reference-on_delete } | `:delete \\| :nilify \\| :nothing \\| :restrict \\| {:nilify, atom \\| list(atom)}` |  | What should happen to records of this resource when the referenced record of the *destination* resource is deleted. |\n| [`on_update`](#postgres-references-reference-on_update){: #postgres-references-reference-on_update } | `:update \\| :nilify \\| :nothing \\| :restrict` |  | What should happen to records of this resource when the referenced destination_attribute of the *destination* record is update. |\n| [`deferrable`](#postgres-references-reference-deferrable){: #postgres-references-reference-deferrable } | `false \\| true \\| :initially` | `false` | Whether or not the constraint is deferrable. This only affects the migration generator. |\n| [`name`](#postgres-references-reference-name){: #postgres-references-reference-name } | `String.t` |  | The name of the foreign key to generate in the database. Defaults to  _ _fkey |\n| [`match_with`](#postgres-references-reference-match_with){: #postgres-references-reference-match_with } | `keyword` |  | Defines additional keys to the foreign key in order to build a composite foreign key. The key should be the name of the source attribute (in the current resource), the value the name of the destination attribute. |\n| [`match_type`](#postgres-references-reference-match_type){: #postgres-references-reference-match_type } | `:simple \\| :partial \\| :full` |  | select if the match is `:simple`, `:partial`, or `:full` |\n| [`index?`](#postgres-references-reference-index?){: #postgres-references-reference-index? } | `boolean` | `false` | Whether to create or not a corresponding index |","ref":"dsl-ashpostgres-datalayer.html#options","title":"Options - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"Target: `AshPostgres.Reference`","ref":"dsl-ashpostgres-datalayer.html#introspection","title":"Introspection - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"A section for configuring the check constraints for a given table.\n\nThis can be used to automatically create those check constraints, or just to provide message when they are raised","ref":"dsl-ashpostgres-datalayer.html#postgres-check_constraints","title":"postgres.check_constraints - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"* [check_constraint](#postgres-check_constraints-check_constraint)","ref":"dsl-ashpostgres-datalayer.html#nested-dsls","title":"Nested DSLs - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```\ncheck_constraints do\n  check_constraint :price, \"price_must_be_positive\", check: \"price > 0\", message: \"price must be positive\"\nend\n\n```","ref":"dsl-ashpostgres-datalayer.html#examples","title":"Examples - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```elixir\ncheck_constraint attribute, name\n```\n\n\nAdd a check constraint to be validated.\n\nIf a check constraint exists on the table but not in this section, and it produces an error, a runtime error will be raised.\n\nProvide a list of attributes instead of a single attribute to add the message to multiple attributes.\n\nBy adding the `check` option, the migration generator will include it when generating migrations.","ref":"dsl-ashpostgres-datalayer.html#postgres-check_constraints-check_constraint","title":"postgres.check_constraints.check_constraint - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"```\ncheck_constraint :price, \"price_must_be_positive\", check: \"price > 0\", message: \"price must be positive\"\n\n```","ref":"dsl-ashpostgres-datalayer.html#examples","title":"Examples - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`attribute`](#postgres-check_constraints-check_constraint-attribute){: #postgres-check_constraints-check_constraint-attribute .spark-required} | `any` |  | The attribute or list of attributes to which an error will be added if the check constraint fails |\n| [`name`](#postgres-check_constraints-check_constraint-name){: #postgres-check_constraints-check_constraint-name .spark-required} | `String.t` |  | The name of the constraint |","ref":"dsl-ashpostgres-datalayer.html#arguments","title":"Arguments - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`message`](#postgres-check_constraints-check_constraint-message){: #postgres-check_constraints-check_constraint-message } | `String.t` |  | The message to be added if the check constraint fails |\n| [`check`](#postgres-check_constraints-check_constraint-check){: #postgres-check_constraints-check_constraint-check } | `String.t` |  | The contents of the check. If this is set, the migration generator will include it when generating migrations |","ref":"dsl-ashpostgres-datalayer.html#options","title":"Options - DSL: AshPostgres.DataLayer","type":"extras"},{"doc":"Target: `AshPostgres.CheckConstraint`\n\n\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ashpostgres-datalayer.html#introspection","title":"Introspection - DSL: AshPostgres.DataLayer","type":"extras"}],"producer":{"name":"ex_doc","version":"0.34.2"}}