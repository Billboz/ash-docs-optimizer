searchData={"content_type":"text/markdown","items":[{"doc":"A description for the step.\n","ref":"dsl-ash-flow.html#steps-custom-description","title":"Ash.Flow.steps.custom.description","type":"DSL"},{"doc":"Configures the reason for the `halt_if` clause.\n","ref":"dsl-ash-flow.html#steps-custom-halt_reason","title":"Ash.Flow.steps.custom.halt_reason","type":"DSL"},{"doc":"Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more.\n","ref":"dsl-ash-flow.html#steps-custom-halt_if","title":"Ash.Flow.steps.custom.halt_if","type":"DSL"},{"doc":"A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps.\n","ref":"dsl-ash-flow.html#steps-custom-touches_resources","title":"Ash.Flow.steps.custom.touches_resources","type":"DSL"},{"doc":"Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited.\n","ref":"dsl-ash-flow.html#steps-custom-wait_for","title":"Ash.Flow.steps.custom.wait_for","type":"DSL"},{"doc":"Set a short name for the step. Will be used when building things like mermaid charts.","ref":"dsl-ash-flow.html#steps-custom-short_name","title":"Ash.Flow.steps.custom.short_name","type":"DSL"},{"doc":"The name of the step. Will be used when expressing dependencies, and step inputs.","ref":"dsl-ash-flow.html#steps-custom-name","title":"Ash.Flow.steps.custom.name","type":"DSL"},{"doc":"Whether or not this step can be run outside of the current process.\n","ref":"dsl-ash-flow.html#steps-custom-async?","title":"Ash.Flow.steps.custom.async?","type":"DSL"},{"doc":"The module that implements the step behaviour. Also accepts a 2 argument function that takes the input and the context.","ref":"dsl-ash-flow.html#steps-custom-custom","title":"Ash.Flow.steps.custom.custom","type":"DSL"},{"doc":"A template for the input.\n","ref":"dsl-ash-flow.html#steps-custom-input","title":"Ash.Flow.steps.custom.input","type":"DSL"},{"doc":"Runs a custom step module.\n\nSee `Ash.Flow.Step` for the necessary callbacks and more information.\n","ref":"dsl-ash-flow.html#steps-custom","title":"Ash.Flow.steps.custom","type":"DSL"},{"doc":"A description for the step.\n","ref":"dsl-ash-flow.html#steps-run_flow-description","title":"Ash.Flow.steps.run_flow.description","type":"DSL"},{"doc":"Configures the reason for the `halt_if` clause.\n","ref":"dsl-ash-flow.html#steps-run_flow-halt_reason","title":"Ash.Flow.steps.run_flow.halt_reason","type":"DSL"},{"doc":"Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more.\n","ref":"dsl-ash-flow.html#steps-run_flow-halt_if","title":"Ash.Flow.steps.run_flow.halt_if","type":"DSL"},{"doc":"A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps.\n","ref":"dsl-ash-flow.html#steps-run_flow-touches_resources","title":"Ash.Flow.steps.run_flow.touches_resources","type":"DSL"},{"doc":"Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited.\n","ref":"dsl-ash-flow.html#steps-run_flow-wait_for","title":"Ash.Flow.steps.run_flow.wait_for","type":"DSL"},{"doc":"Set a short name for the step. Will be used when building things like mermaid charts.","ref":"dsl-ash-flow.html#steps-run_flow-short_name","title":"Ash.Flow.steps.run_flow.short_name","type":"DSL"},{"doc":"The name of the step. Will be used when expressing dependencies, and step inputs.","ref":"dsl-ash-flow.html#steps-run_flow-name","title":"Ash.Flow.steps.run_flow.name","type":"DSL"},{"doc":"A template for the input.\n","ref":"dsl-ash-flow.html#steps-run_flow-input","title":"Ash.Flow.steps.run_flow.input","type":"DSL"},{"doc":"The flow to run.","ref":"dsl-ash-flow.html#steps-run_flow-flow","title":"Ash.Flow.steps.run_flow.flow","type":"DSL"},{"doc":"Runs another flow as part of the current flow.\nThe return value of the step is the return value of the flow.\n","ref":"dsl-ash-flow.html#steps-run_flow","title":"Ash.Flow.steps.run_flow","type":"DSL"},{"doc":"A template for the input.\n","ref":"dsl-ash-flow.html#steps-read-input","title":"Ash.Flow.steps.read.input","type":"DSL"},{"doc":"A tenant to use for the operation. May be a template or a literal value.","ref":"dsl-ash-flow.html#steps-read-tenant","title":"Ash.Flow.steps.read.tenant","type":"DSL"},{"doc":"The domain to use when calling the action. Defaults to the domain set in the `flow` section.","ref":"dsl-ash-flow.html#steps-read-domain","title":"Ash.Flow.steps.read.domain","type":"DSL"},{"doc":"The action to call on the resource.","ref":"dsl-ash-flow.html#steps-read-action","title":"Ash.Flow.steps.read.action","type":"DSL"},{"doc":"The resource to call the action on.","ref":"dsl-ash-flow.html#steps-read-resource","title":"Ash.Flow.steps.read.resource","type":"DSL"},{"doc":"A description for the step.\n","ref":"dsl-ash-flow.html#steps-read-description","title":"Ash.Flow.steps.read.description","type":"DSL"},{"doc":"Configures the reason for the `halt_if` clause.\n","ref":"dsl-ash-flow.html#steps-read-halt_reason","title":"Ash.Flow.steps.read.halt_reason","type":"DSL"},{"doc":"Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more.\n","ref":"dsl-ash-flow.html#steps-read-halt_if","title":"Ash.Flow.steps.read.halt_if","type":"DSL"},{"doc":"A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps.\n","ref":"dsl-ash-flow.html#steps-read-touches_resources","title":"Ash.Flow.steps.read.touches_resources","type":"DSL"},{"doc":"Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited.\n","ref":"dsl-ash-flow.html#steps-read-wait_for","title":"Ash.Flow.steps.read.wait_for","type":"DSL"},{"doc":"Set a short name for the step. Will be used when building things like mermaid charts.","ref":"dsl-ash-flow.html#steps-read-short_name","title":"Ash.Flow.steps.read.short_name","type":"DSL"},{"doc":"The name of the step. Will be used when expressing dependencies, and step inputs.","ref":"dsl-ash-flow.html#steps-read-name","title":"Ash.Flow.steps.read.name","type":"DSL"},{"doc":"Whether or not finding no record should result in a not found error\n","ref":"dsl-ash-flow.html#steps-read-not_found_error?","title":"Ash.Flow.steps.read.not_found_error?","type":"DSL"},{"doc":"Whether or not read action is expected to return a single result or `nil`. Set to `true` automatically if `get? true`.\n","ref":"dsl-ash-flow.html#steps-read-get?","title":"Ash.Flow.steps.read.get?","type":"DSL"},{"doc":"Declares a step that will call a read action on a resource.\n","ref":"dsl-ash-flow.html#steps-read","title":"Ash.Flow.steps.read","type":"DSL"},{"doc":"A template for the input.\n","ref":"dsl-ash-flow.html#steps-validate-input","title":"Ash.Flow.steps.validate.input","type":"DSL"},{"doc":"A tenant to use for the operation. May be a template or a literal value.","ref":"dsl-ash-flow.html#steps-validate-tenant","title":"Ash.Flow.steps.validate.tenant","type":"DSL"},{"doc":"The domain to use when calling the action. Defaults to the domain set in the `flow` section.","ref":"dsl-ash-flow.html#steps-validate-domain","title":"Ash.Flow.steps.validate.domain","type":"DSL"},{"doc":"The action to call on the resource.","ref":"dsl-ash-flow.html#steps-validate-action","title":"Ash.Flow.steps.validate.action","type":"DSL"},{"doc":"The resource to call the action on.","ref":"dsl-ash-flow.html#steps-validate-resource","title":"Ash.Flow.steps.validate.resource","type":"DSL"},{"doc":"A description for the step.\n","ref":"dsl-ash-flow.html#steps-validate-description","title":"Ash.Flow.steps.validate.description","type":"DSL"},{"doc":"Configures the reason for the `halt_if` clause.\n","ref":"dsl-ash-flow.html#steps-validate-halt_reason","title":"Ash.Flow.steps.validate.halt_reason","type":"DSL"},{"doc":"Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more.\n","ref":"dsl-ash-flow.html#steps-validate-halt_if","title":"Ash.Flow.steps.validate.halt_if","type":"DSL"},{"doc":"A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps.\n","ref":"dsl-ash-flow.html#steps-validate-touches_resources","title":"Ash.Flow.steps.validate.touches_resources","type":"DSL"},{"doc":"Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited.\n","ref":"dsl-ash-flow.html#steps-validate-wait_for","title":"Ash.Flow.steps.validate.wait_for","type":"DSL"},{"doc":"Set a short name for the step. Will be used when building things like mermaid charts.","ref":"dsl-ash-flow.html#steps-validate-short_name","title":"Ash.Flow.steps.validate.short_name","type":"DSL"},{"doc":"The name of the step. Will be used when expressing dependencies, and step inputs.","ref":"dsl-ash-flow.html#steps-validate-name","title":"Ash.Flow.steps.validate.name","type":"DSL"},{"doc":"A list of keys or paths to keys that should be validated. Others will be ignored, and errors generated for other fields will be ignored.\n","ref":"dsl-ash-flow.html#steps-validate-only_keys","title":"Ash.Flow.steps.validate.only_keys","type":"DSL"},{"doc":"The record to be created/updated/destroyed. If the value is `nil` and would be required by the action type, the step is skipped and `nil` is the result of the step.\n","ref":"dsl-ash-flow.html#steps-validate-record","title":"Ash.Flow.steps.validate.record","type":"DSL"},{"doc":"Validates some input against an action.\n","ref":"dsl-ash-flow.html#steps-validate","title":"Ash.Flow.steps.validate","type":"DSL"},{"doc":"A template for the input.\n","ref":"dsl-ash-flow.html#steps-destroy-input","title":"Ash.Flow.steps.destroy.input","type":"DSL"},{"doc":"A tenant to use for the operation. May be a template or a literal value.","ref":"dsl-ash-flow.html#steps-destroy-tenant","title":"Ash.Flow.steps.destroy.tenant","type":"DSL"},{"doc":"The domain to use when calling the action. Defaults to the domain set in the `flow` section.","ref":"dsl-ash-flow.html#steps-destroy-domain","title":"Ash.Flow.steps.destroy.domain","type":"DSL"},{"doc":"The action to call on the resource.","ref":"dsl-ash-flow.html#steps-destroy-action","title":"Ash.Flow.steps.destroy.action","type":"DSL"},{"doc":"The resource to call the action on.","ref":"dsl-ash-flow.html#steps-destroy-resource","title":"Ash.Flow.steps.destroy.resource","type":"DSL"},{"doc":"A description for the step.\n","ref":"dsl-ash-flow.html#steps-destroy-description","title":"Ash.Flow.steps.destroy.description","type":"DSL"},{"doc":"Configures the reason for the `halt_if` clause.\n","ref":"dsl-ash-flow.html#steps-destroy-halt_reason","title":"Ash.Flow.steps.destroy.halt_reason","type":"DSL"},{"doc":"Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more.\n","ref":"dsl-ash-flow.html#steps-destroy-halt_if","title":"Ash.Flow.steps.destroy.halt_if","type":"DSL"},{"doc":"A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps.\n","ref":"dsl-ash-flow.html#steps-destroy-touches_resources","title":"Ash.Flow.steps.destroy.touches_resources","type":"DSL"},{"doc":"Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited.\n","ref":"dsl-ash-flow.html#steps-destroy-wait_for","title":"Ash.Flow.steps.destroy.wait_for","type":"DSL"},{"doc":"Set a short name for the step. Will be used when building things like mermaid charts.","ref":"dsl-ash-flow.html#steps-destroy-short_name","title":"Ash.Flow.steps.destroy.short_name","type":"DSL"},{"doc":"The name of the step. Will be used when expressing dependencies, and step inputs.","ref":"dsl-ash-flow.html#steps-destroy-name","title":"Ash.Flow.steps.destroy.name","type":"DSL"},{"doc":"The record to be updated, can use template helpers, e.g `result(:step_name)`.\n","ref":"dsl-ash-flow.html#steps-destroy-record","title":"Ash.Flow.steps.destroy.record","type":"DSL"},{"doc":"Declares a step that will call a destroy action on a resource.\n","ref":"dsl-ash-flow.html#steps-destroy","title":"Ash.Flow.steps.destroy","type":"DSL"},{"doc":"A template for the input.\n","ref":"dsl-ash-flow.html#steps-update-input","title":"Ash.Flow.steps.update.input","type":"DSL"},{"doc":"A tenant to use for the operation. May be a template or a literal value.","ref":"dsl-ash-flow.html#steps-update-tenant","title":"Ash.Flow.steps.update.tenant","type":"DSL"},{"doc":"The domain to use when calling the action. Defaults to the domain set in the `flow` section.","ref":"dsl-ash-flow.html#steps-update-domain","title":"Ash.Flow.steps.update.domain","type":"DSL"},{"doc":"The action to call on the resource.","ref":"dsl-ash-flow.html#steps-update-action","title":"Ash.Flow.steps.update.action","type":"DSL"},{"doc":"The resource to call the action on.","ref":"dsl-ash-flow.html#steps-update-resource","title":"Ash.Flow.steps.update.resource","type":"DSL"},{"doc":"A description for the step.\n","ref":"dsl-ash-flow.html#steps-update-description","title":"Ash.Flow.steps.update.description","type":"DSL"},{"doc":"Configures the reason for the `halt_if` clause.\n","ref":"dsl-ash-flow.html#steps-update-halt_reason","title":"Ash.Flow.steps.update.halt_reason","type":"DSL"},{"doc":"Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more.\n","ref":"dsl-ash-flow.html#steps-update-halt_if","title":"Ash.Flow.steps.update.halt_if","type":"DSL"},{"doc":"A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps.\n","ref":"dsl-ash-flow.html#steps-update-touches_resources","title":"Ash.Flow.steps.update.touches_resources","type":"DSL"},{"doc":"Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited.\n","ref":"dsl-ash-flow.html#steps-update-wait_for","title":"Ash.Flow.steps.update.wait_for","type":"DSL"},{"doc":"Set a short name for the step. Will be used when building things like mermaid charts.","ref":"dsl-ash-flow.html#steps-update-short_name","title":"Ash.Flow.steps.update.short_name","type":"DSL"},{"doc":"The name of the step. Will be used when expressing dependencies, and step inputs.","ref":"dsl-ash-flow.html#steps-update-name","title":"Ash.Flow.steps.update.name","type":"DSL"},{"doc":"The record to be updated, can use template helpers, e.g `result(:step_name)`.\n","ref":"dsl-ash-flow.html#steps-update-record","title":"Ash.Flow.steps.update.record","type":"DSL"},{"doc":"Declares a step that will call a update action on a resource.\n","ref":"dsl-ash-flow.html#steps-update","title":"Ash.Flow.steps.update","type":"DSL"},{"doc":"A description for the step.\n","ref":"dsl-ash-flow.html#steps-debug-description","title":"Ash.Flow.steps.debug.description","type":"DSL"},{"doc":"Configures the reason for the `halt_if` clause.\n","ref":"dsl-ash-flow.html#steps-debug-halt_reason","title":"Ash.Flow.steps.debug.halt_reason","type":"DSL"},{"doc":"Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more.\n","ref":"dsl-ash-flow.html#steps-debug-halt_if","title":"Ash.Flow.steps.debug.halt_if","type":"DSL"},{"doc":"Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited.\n","ref":"dsl-ash-flow.html#steps-debug-wait_for","title":"Ash.Flow.steps.debug.wait_for","type":"DSL"},{"doc":"Set a short name for the step. Will be used when building things like mermaid charts.","ref":"dsl-ash-flow.html#steps-debug-short_name","title":"Ash.Flow.steps.debug.short_name","type":"DSL"},{"doc":"The name of the step. Will be used when expressing dependencies, and step inputs.","ref":"dsl-ash-flow.html#steps-debug-name","title":"Ash.Flow.steps.debug.name","type":"DSL"},{"doc":"A template for the input.\n","ref":"dsl-ash-flow.html#steps-debug-input","title":"Ash.Flow.steps.debug.input","type":"DSL"},{"doc":"Declares a step that will inspect its input and provide\nadditional debug information.\n","ref":"dsl-ash-flow.html#steps-debug","title":"Ash.Flow.steps.debug","type":"DSL"},{"doc":"A template for the input.\n","ref":"dsl-ash-flow.html#steps-create-input","title":"Ash.Flow.steps.create.input","type":"DSL"},{"doc":"A tenant to use for the operation. May be a template or a literal value.","ref":"dsl-ash-flow.html#steps-create-tenant","title":"Ash.Flow.steps.create.tenant","type":"DSL"},{"doc":"The domain to use when calling the action. Defaults to the domain set in the `flow` section.","ref":"dsl-ash-flow.html#steps-create-domain","title":"Ash.Flow.steps.create.domain","type":"DSL"},{"doc":"The action to call on the resource.","ref":"dsl-ash-flow.html#steps-create-action","title":"Ash.Flow.steps.create.action","type":"DSL"},{"doc":"The resource to call the action on.","ref":"dsl-ash-flow.html#steps-create-resource","title":"Ash.Flow.steps.create.resource","type":"DSL"},{"doc":"A description for the step.\n","ref":"dsl-ash-flow.html#steps-create-description","title":"Ash.Flow.steps.create.description","type":"DSL"},{"doc":"Configures the reason for the `halt_if` clause.\n","ref":"dsl-ash-flow.html#steps-create-halt_reason","title":"Ash.Flow.steps.create.halt_reason","type":"DSL"},{"doc":"Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more.\n","ref":"dsl-ash-flow.html#steps-create-halt_if","title":"Ash.Flow.steps.create.halt_if","type":"DSL"},{"doc":"A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps.\n","ref":"dsl-ash-flow.html#steps-create-touches_resources","title":"Ash.Flow.steps.create.touches_resources","type":"DSL"},{"doc":"Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited.\n","ref":"dsl-ash-flow.html#steps-create-wait_for","title":"Ash.Flow.steps.create.wait_for","type":"DSL"},{"doc":"Set a short name for the step. Will be used when building things like mermaid charts.","ref":"dsl-ash-flow.html#steps-create-short_name","title":"Ash.Flow.steps.create.short_name","type":"DSL"},{"doc":"The name of the step. Will be used when expressing dependencies, and step inputs.","ref":"dsl-ash-flow.html#steps-create-name","title":"Ash.Flow.steps.create.name","type":"DSL"},{"doc":"The identity to use for the upsert.","ref":"dsl-ash-flow.html#steps-create-upsert_identity","title":"Ash.Flow.steps.create.upsert_identity","type":"DSL"},{"doc":"Whether or not this action is always an upsert.","ref":"dsl-ash-flow.html#steps-create-upsert?","title":"Ash.Flow.steps.create.upsert?","type":"DSL"},{"doc":"Declares a step that will call a create action on a resource.\n","ref":"dsl-ash-flow.html#steps-create","title":"Ash.Flow.steps.create","type":"DSL"},{"doc":"A description for the step.\n","ref":"dsl-ash-flow.html#steps-transaction-description","title":"Ash.Flow.steps.transaction.description","type":"DSL"},{"doc":"Configures the reason for the `halt_if` clause.\n","ref":"dsl-ash-flow.html#steps-transaction-halt_reason","title":"Ash.Flow.steps.transaction.halt_reason","type":"DSL"},{"doc":"Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more.\n","ref":"dsl-ash-flow.html#steps-transaction-halt_if","title":"Ash.Flow.steps.transaction.halt_if","type":"DSL"},{"doc":"A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps.\n","ref":"dsl-ash-flow.html#steps-transaction-touches_resources","title":"Ash.Flow.steps.transaction.touches_resources","type":"DSL"},{"doc":"Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited.\n","ref":"dsl-ash-flow.html#steps-transaction-wait_for","title":"Ash.Flow.steps.transaction.wait_for","type":"DSL"},{"doc":"Set a short name for the step. Will be used when building things like mermaid charts.","ref":"dsl-ash-flow.html#steps-transaction-short_name","title":"Ash.Flow.steps.transaction.short_name","type":"DSL"},{"doc":"The name of the step. Will be used when expressing dependencies, and step inputs.","ref":"dsl-ash-flow.html#steps-transaction-name","title":"Ash.Flow.steps.transaction.name","type":"DSL"},{"doc":"The Ash resource to use for the transaction.\n","ref":"dsl-ash-flow.html#steps-transaction-resource","title":"Ash.Flow.steps.transaction.resource","type":"DSL"},{"doc":"A timeout to apply to the transaction.","ref":"dsl-ash-flow.html#steps-transaction-timeout","title":"Ash.Flow.steps.transaction.timeout","type":"DSL"},{"doc":"Which step or steps to use when constructing the output. Defaults to the last step.","ref":"dsl-ash-flow.html#steps-transaction-output","title":"Ash.Flow.steps.transaction.output","type":"DSL"},{"doc":"Runs a set of steps in a transaction.\n","ref":"dsl-ash-flow.html#steps-transaction","title":"Ash.Flow.steps.transaction","type":"DSL"},{"doc":"A description for the step.\n","ref":"dsl-ash-flow.html#steps-branch-description","title":"Ash.Flow.steps.branch.description","type":"DSL"},{"doc":"Configures the reason for the `halt_if` clause.\n","ref":"dsl-ash-flow.html#steps-branch-halt_reason","title":"Ash.Flow.steps.branch.halt_reason","type":"DSL"},{"doc":"Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more.\n","ref":"dsl-ash-flow.html#steps-branch-halt_if","title":"Ash.Flow.steps.branch.halt_if","type":"DSL"},{"doc":"A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps.\n","ref":"dsl-ash-flow.html#steps-branch-touches_resources","title":"Ash.Flow.steps.branch.touches_resources","type":"DSL"},{"doc":"Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited.\n","ref":"dsl-ash-flow.html#steps-branch-wait_for","title":"Ash.Flow.steps.branch.wait_for","type":"DSL"},{"doc":"Set a short name for the step. Will be used when building things like mermaid charts.","ref":"dsl-ash-flow.html#steps-branch-short_name","title":"Ash.Flow.steps.branch.short_name","type":"DSL"},{"doc":"The name of the step. Will be used when expressing dependencies, and step inputs.","ref":"dsl-ash-flow.html#steps-branch-name","title":"Ash.Flow.steps.branch.name","type":"DSL"},{"doc":"Which step to use as the output. Defaults to the last step.","ref":"dsl-ash-flow.html#steps-branch-output","title":"Ash.Flow.steps.branch.output","type":"DSL"},{"doc":"A template that must evaluate to `true` for the branch to be executed.","ref":"dsl-ash-flow.html#steps-branch-condition","title":"Ash.Flow.steps.branch.condition","type":"DSL"},{"doc":"Runs a set of steps based on a given value.\n","ref":"dsl-ash-flow.html#steps-branch","title":"Ash.Flow.steps.branch","type":"DSL"},{"doc":"A description for the step.\n","ref":"dsl-ash-flow.html#steps-map-description","title":"Ash.Flow.steps.map.description","type":"DSL"},{"doc":"Configures the reason for the `halt_if` clause.\n","ref":"dsl-ash-flow.html#steps-map-halt_reason","title":"Ash.Flow.steps.map.halt_reason","type":"DSL"},{"doc":"Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more.\n","ref":"dsl-ash-flow.html#steps-map-halt_if","title":"Ash.Flow.steps.map.halt_if","type":"DSL"},{"doc":"A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps.\n","ref":"dsl-ash-flow.html#steps-map-touches_resources","title":"Ash.Flow.steps.map.touches_resources","type":"DSL"},{"doc":"Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited.\n","ref":"dsl-ash-flow.html#steps-map-wait_for","title":"Ash.Flow.steps.map.wait_for","type":"DSL"},{"doc":"Set a short name for the step. Will be used when building things like mermaid charts.","ref":"dsl-ash-flow.html#steps-map-short_name","title":"Ash.Flow.steps.map.short_name","type":"DSL"},{"doc":"The name of the step. Will be used when expressing dependencies, and step inputs.","ref":"dsl-ash-flow.html#steps-map-name","title":"Ash.Flow.steps.map.name","type":"DSL"},{"doc":"Which step to use when constructing the output list. Defaults to the last step.","ref":"dsl-ash-flow.html#steps-map-output","title":"Ash.Flow.steps.map.output","type":"DSL"},{"doc":"The value to be iterated over. Will be available inside the `map` step as `element(:map_step_name)`","ref":"dsl-ash-flow.html#steps-map-over","title":"Ash.Flow.steps.map.over","type":"DSL"},{"doc":"Runs a set of steps for each item in a provided list.\n","ref":"dsl-ash-flow.html#steps-map","title":"Ash.Flow.steps.map","type":"DSL"},{"doc":"The steps to run.\n","ref":"dsl-ash-flow.html#steps","title":"Ash.Flow.steps","type":"DSL"},{"doc":"Constraints to provide to the type when casting the value. See the type's documentation for more information.","ref":"dsl-ash-flow.html#flow-argument-constraints","title":"Ash.Flow.flow.argument.constraints","type":"DSL"},{"doc":"Whether or not the argument value may be nil","ref":"dsl-ash-flow.html#flow-argument-allow_nil?","title":"Ash.Flow.flow.argument.allow_nil?","type":"DSL"},{"doc":"A default value to use for the argument if not provided","ref":"dsl-ash-flow.html#flow-argument-default","title":"Ash.Flow.flow.argument.default","type":"DSL"},{"doc":"The type of the argument. See `Ash.Type` for more.","ref":"dsl-ash-flow.html#flow-argument-type","title":"Ash.Flow.flow.argument.type","type":"DSL"},{"doc":"The name to use for the argument","ref":"dsl-ash-flow.html#flow-argument-name","title":"Ash.Flow.flow.argument.name","type":"DSL"},{"doc":"An argument to be passed into the flow\n","ref":"dsl-ash-flow.html#flow-argument","title":"Ash.Flow.flow.argument","type":"DSL"},{"doc":"The step or step that should constitute the return value.\n","ref":"dsl-ash-flow.html#flow-returns","title":"Ash.Flow.flow.returns","type":"DSL"},{"doc":"A short name to use for the flow. Defaults to the last to parts of the module name, underscored.","ref":"dsl-ash-flow.html#flow-short_name","title":"Ash.Flow.flow.short_name","type":"DSL"},{"doc":"The name to use when creating traces. Defaults to the short name.","ref":"dsl-ash-flow.html#flow-trace_name","title":"Ash.Flow.flow.trace_name","type":"DSL"},{"doc":"A description of the flow","ref":"dsl-ash-flow.html#flow-description","title":"Ash.Flow.flow.description","type":"DSL"},{"doc":"An domain to use by default when calling actions","ref":"dsl-ash-flow.html#flow-domain","title":"Ash.Flow.flow.domain","type":"DSL"},{"doc":"Details about the flow itself, like description and the successful return type.\n","ref":"dsl-ash-flow.html#flow","title":"Ash.Flow.flow","type":"DSL"},{"doc":"Documentation for `AshFlow`.","ref":"AshFlow.html","title":"AshFlow","type":"module"},{"doc":"Hello world.","ref":"AshFlow.html#hello/0","title":"AshFlow.hello/0","type":"function"},{"doc":"iex> AshFlow.hello()\n    :world","ref":"AshFlow.html#hello/0-examples","title":"Examples - AshFlow.hello/0","type":"function"},{"doc":"Generates a Mermaid Flow Chart for each `Ash.Flow` alongside the flow.\n\nIf there is a `run_flow` step in the flow, this will also create\nan \"expanded\" Mermaid Flow Chart which includes all child steps.","ref":"Mix.Tasks.Ash.GenerateFlowCharts.html","title":"mix ash.generate_flow_charts","type":"task"},{"doc":"This mix task requires the Mermaid CLI to be installed on your system.\n\nSee https://github.com/mermaid-js/mermaid-cli","ref":"Mix.Tasks.Ash.GenerateFlowCharts.html#module-prerequisites","title":"Prerequisites - mix ash.generate_flow_charts","type":"task"},{"doc":"* `--only` - only generates the given Flow file\n  * `--format` - Can be set to one of either:\n    * `plain` - Prints just the mermaid output as text. This is the default.\n    * `md` - Prints the mermaid diagram in a markdown code block.\n    * `svg` - Generates an SVG\n    * `pdf` - Generates a PDF\n    * `png` - Generates a PNG","ref":"Mix.Tasks.Ash.GenerateFlowCharts.html#module-command-line-options","title":"Command line options - mix ash.generate_flow_charts","type":"task"},{"doc":"Generates Mermaid Flow Charts for each `Ash.Flow`","ref":"Mix.Tasks.Ash.GenerateFlowCharts.html#run/1","title":"Mix.Tasks.Ash.GenerateFlowCharts.run/1","type":"function"},{"doc":"A flow is a static definition of a set of steps to be run.\n\nSee the [guide](/documentation/topics/flows.md) for more.","ref":"Ash.Flow.html","title":"Ash.Flow","type":"module"},{"doc":"* `:extensions` (list of module that adopts `Spark.Dsl.Extension`) - A list of DSL extensions to add to the `Spark.Dsl`\n\n* `:otp_app` (`t:atom/0`) - The otp_app to use for any application configurable options\n\n* `:fragments` (list of `t:module/0`) - Fragments to include in the `Spark.Dsl`. See the fragments guide for more.","ref":"Ash.Flow.html#module-options","title":"Options - Ash.Flow","type":"module"},{"doc":"","ref":"Ash.Flow.html#do_fetch_in/2","title":"Ash.Flow.do_fetch_in/2","type":"function"},{"doc":"","ref":"Ash.Flow.html#element_refs/1","title":"Ash.Flow.element_refs/1","type":"function"},{"doc":"","ref":"Ash.Flow.html#handle_modifiers/1","title":"Ash.Flow.handle_modifiers/1","type":"function"},{"doc":"","ref":"Ash.Flow.html#run/3","title":"Ash.Flow.run/3","type":"function"},{"doc":"","ref":"Ash.Flow.html#run!/3","title":"Ash.Flow.run!/3","type":"function"},{"doc":"","ref":"Ash.Flow.html#t:t/0","title":"Ash.Flow.t/0","type":"type"},{"doc":"An argument to a flow","ref":"Ash.Flow.Argument.html","title":"Ash.Flow.Argument","type":"module"},{"doc":"","ref":"Ash.Flow.Argument.html#schema/0","title":"Ash.Flow.Argument.schema/0","type":"function"},{"doc":"Tools to render an Ash.Flow as a mermaid chart.","ref":"Ash.Flow.Chart.Mermaid.html","title":"Ash.Flow.Chart.Mermaid","type":"module"},{"doc":"","ref":"Ash.Flow.Chart.Mermaid.html#add_links/4","title":"Ash.Flow.Chart.Mermaid.add_links/4","type":"function"},{"doc":"","ref":"Ash.Flow.Chart.Mermaid.html#chart/2","title":"Ash.Flow.Chart.Mermaid.chart/2","type":"function"},{"doc":"A flow executor runs a given flow module","ref":"Ash.Flow.Executor.html","title":"Ash.Flow.Executor","type":"behaviour"},{"doc":"","ref":"Ash.Flow.Executor.html#c:build/3","title":"Ash.Flow.Executor.build/3","type":"callback"},{"doc":"","ref":"Ash.Flow.Executor.html#c:execute/3","title":"Ash.Flow.Executor.execute/3","type":"callback"},{"doc":"","ref":"Ash.Flow.Executor.html#t:built_flow/0","title":"Ash.Flow.Executor.built_flow/0","type":"type"},{"doc":"Executes the requests using the Ash engine, which can parallelize individual steps when possible.","ref":"Ash.Flow.Executor.AshEngine.html","title":"Ash.Flow.Executor.AshEngine","type":"module"},{"doc":"","ref":"Ash.Flow.Executor.AshEngine.html#build/3","title":"Ash.Flow.Executor.AshEngine.build/3","type":"function"},{"doc":"","ref":"Ash.Flow.Executor.AshEngine.html#deps_keys/0","title":"Ash.Flow.Executor.AshEngine.deps_keys/0","type":"function"},{"doc":"","ref":"Ash.Flow.Executor.AshEngine.html#execute/3","title":"Ash.Flow.Executor.AshEngine.execute/3","type":"function"},{"doc":"Flow introspection functions.","ref":"Ash.Flow.Info.html","title":"Ash.Flow.Info","type":"module"},{"doc":"","ref":"Ash.Flow.Info.html#arguments/1","title":"Ash.Flow.Info.arguments/1","type":"function"},{"doc":"","ref":"Ash.Flow.Info.html#description/1","title":"Ash.Flow.Info.description/1","type":"function"},{"doc":"","ref":"Ash.Flow.Info.html#domain/1","title":"Ash.Flow.Info.domain/1","type":"function"},{"doc":"","ref":"Ash.Flow.Info.html#returns/1","title":"Ash.Flow.Info.returns/1","type":"function"},{"doc":"","ref":"Ash.Flow.Info.html#short_name/1","title":"Ash.Flow.Info.short_name/1","type":"function"},{"doc":"","ref":"Ash.Flow.Info.html#steps/1","title":"Ash.Flow.Info.steps/1","type":"function"},{"doc":"","ref":"Ash.Flow.Info.html#trace_name/1","title":"Ash.Flow.Info.trace_name/1","type":"function"},{"doc":"The result of running a flow.","ref":"Ash.Flow.Result.html","title":"Ash.Flow.Result","type":"module"},{"doc":"","ref":"Ash.Flow.Result.html#t:t/0","title":"Ash.Flow.Result.t/0","type":"type"},{"doc":"A behaviour for implementing a custom step in a flow.","ref":"Ash.Flow.Step.html","title":"Ash.Flow.Step","type":"behaviour"},{"doc":"","ref":"Ash.Flow.Step.html#c:describe/1","title":"Ash.Flow.Step.describe/1","type":"callback"},{"doc":"","ref":"Ash.Flow.Step.html#c:run/3","title":"Ash.Flow.Step.run/3","type":"callback"},{"doc":"","ref":"Ash.Flow.Step.html#c:short_name/1","title":"Ash.Flow.Step.short_name/1","type":"callback"},{"doc":"Represents a branching set of steps in an Ash.Flow","ref":"Ash.Flow.Step.Branch.html","title":"Ash.Flow.Step.Branch","type":"module"},{"doc":"","ref":"Ash.Flow.Step.Branch.html#schema/0","title":"Ash.Flow.Step.Branch.schema/0","type":"function"},{"doc":"Represents a create action step in an Ash.Flow","ref":"Ash.Flow.Step.Create.html","title":"Ash.Flow.Step.Create","type":"module"},{"doc":"","ref":"Ash.Flow.Step.Create.html#schema/0","title":"Ash.Flow.Step.Create.schema/0","type":"function"},{"doc":"Represents a custom step in an Ash.Flow","ref":"Ash.Flow.Step.Custom.html","title":"Ash.Flow.Step.Custom","type":"module"},{"doc":"","ref":"Ash.Flow.Step.Custom.html#schema/0","title":"Ash.Flow.Step.Custom.schema/0","type":"function"},{"doc":"Represents a debug step in an Ash.Flow","ref":"Ash.Flow.Step.Debug.html","title":"Ash.Flow.Step.Debug","type":"module"},{"doc":"","ref":"Ash.Flow.Step.Debug.html#schema/0","title":"Ash.Flow.Step.Debug.schema/0","type":"function"},{"doc":"Represents a destroy action step in an Ash.Flow","ref":"Ash.Flow.Step.Destroy.html","title":"Ash.Flow.Step.Destroy","type":"module"},{"doc":"","ref":"Ash.Flow.Step.Destroy.html#schema/0","title":"Ash.Flow.Step.Destroy.schema/0","type":"function"},{"doc":"Represents a map grouping of steps in an Ash.Flow","ref":"Ash.Flow.Step.Map.html","title":"Ash.Flow.Step.Map","type":"module"},{"doc":"","ref":"Ash.Flow.Step.Map.html#schema/0","title":"Ash.Flow.Step.Map.schema/0","type":"function"},{"doc":"Represents a read action step in an Ash.Flow","ref":"Ash.Flow.Step.Read.html","title":"Ash.Flow.Step.Read","type":"module"},{"doc":"","ref":"Ash.Flow.Step.Read.html#schema/0","title":"Ash.Flow.Step.Read.schema/0","type":"function"},{"doc":"Represents a nested flow step in an Ash.Flow","ref":"Ash.Flow.Step.RunFlow.html","title":"Ash.Flow.Step.RunFlow","type":"module"},{"doc":"","ref":"Ash.Flow.Step.RunFlow.html#schema/0","title":"Ash.Flow.Step.RunFlow.schema/0","type":"function"},{"doc":"Represents steps grouped into a transaction in an Ash.Flow","ref":"Ash.Flow.Step.Transaction.html","title":"Ash.Flow.Step.Transaction","type":"module"},{"doc":"","ref":"Ash.Flow.Step.Transaction.html#schema/0","title":"Ash.Flow.Step.Transaction.schema/0","type":"function"},{"doc":"Represents an update action step in an Ash.Flow","ref":"Ash.Flow.Step.Update.html","title":"Ash.Flow.Step.Update","type":"module"},{"doc":"","ref":"Ash.Flow.Step.Update.html#schema/0","title":"Ash.Flow.Step.Update.schema/0","type":"function"},{"doc":"Template functions available while declaring steps.","ref":"Ash.Flow.StepHelpers.html","title":"Ash.Flow.StepHelpers","type":"module"},{"doc":"Accesses a flow argument","ref":"Ash.Flow.StepHelpers.html#arg/1","title":"Ash.Flow.StepHelpers.arg/1","type":"function"},{"doc":"Accesses the value being iterated over for a given map step. The name is required so that `map` steps can be nested.","ref":"Ash.Flow.StepHelpers.html#element/1","title":"Ash.Flow.StepHelpers.element/1","type":"function"},{"doc":"Constructs an expression that can access","ref":"Ash.Flow.StepHelpers.html#expr/1","title":"Ash.Flow.StepHelpers.expr/1","type":"macro"},{"doc":"Accesses a flow argument","ref":"Ash.Flow.StepHelpers.html#merge/1","title":"Ash.Flow.StepHelpers.merge/1","type":"function"},{"doc":"Accesses a path in a value lazily. Supports the value being a template, e.g `path(result(:foo), [:bar, 0, :baz])`","ref":"Ash.Flow.StepHelpers.html#path/2","title":"Ash.Flow.StepHelpers.path/2","type":"function"},{"doc":"Creates a range lazily. Supports the start or finish being a template, e.g `range(result(:foo), result(:bar))`","ref":"Ash.Flow.StepHelpers.html#range/2","title":"Ash.Flow.StepHelpers.range/2","type":"function"},{"doc":"Accesses the result of a step","ref":"Ash.Flow.StepHelpers.html#result/1","title":"Ash.Flow.StepHelpers.result/1","type":"function"},{"doc":"Helpers for working with Ash.Flow templates.\n\nAt first glance it would seem that all of this could be replaced by some calls to\n`Macro.prewalk` but that is unfortunately not the case. We don't traverse through structs,\nand in some cases we do things like return ranges/merge maps that require having the entire\nnested part of the template, i.e `{:_merge, [list, of, maps]}` has to get the fully handled\nlist of maps, and so has to call itself.","ref":"Ash.Flow.Template.html","title":"Ash.Flow.Template","type":"module"},{"doc":"","ref":"Ash.Flow.Template.html#arg_refs/1","title":"Ash.Flow.Template.arg_refs/1","type":"function"},{"doc":"","ref":"Ash.Flow.Template.html#element_refs/1","title":"Ash.Flow.Template.element_refs/1","type":"function"},{"doc":"","ref":"Ash.Flow.Template.html#handle_input_template/2","title":"Ash.Flow.Template.handle_input_template/2","type":"function"},{"doc":"","ref":"Ash.Flow.Template.html#is_template?/1","title":"Ash.Flow.Template.is_template?/1","type":"function"},{"doc":"","ref":"Ash.Flow.Template.html#remap_result_references/2","title":"Ash.Flow.Template.remap_result_references/2","type":"function"},{"doc":"","ref":"Ash.Flow.Template.html#result_refs/1","title":"Ash.Flow.Template.result_refs/1","type":"function"},{"doc":"","ref":"Ash.Flow.Template.html#set_dependent_values/2","title":"Ash.Flow.Template.set_dependent_values/2","type":"function"},{"doc":"Validates that no nested steps contain no steps","ref":"Ash.Flow.Verifiers.ValidateNoEmptySteps.html","title":"Ash.Flow.Verifiers.ValidateNoEmptySteps","type":"module"},{"doc":"","ref":"Ash.Flow.Verifiers.ValidateNoEmptySteps.html#verify/1","title":"Ash.Flow.Verifiers.ValidateNoEmptySteps.verify/1","type":"function"},{"doc":"Validates that steps have unique names.","ref":"Ash.Flow.Verifiers.ValidateUniqueNames.html","title":"Ash.Flow.Verifiers.ValidateUniqueNames","type":"module"},{"doc":"","ref":"Ash.Flow.Verifiers.ValidateUniqueNames.html#verify/1","title":"Ash.Flow.Verifiers.ValidateUniqueNames.verify/1","type":"function"},{"doc":"Ensures that all steps in a return statement are returnable","ref":"Ash.Flow.Verifiers.VerifyReturn.html","title":"Ash.Flow.Verifiers.VerifyReturn","type":"module"},{"doc":"","ref":"Ash.Flow.Verifiers.VerifyReturn.html#verify/1","title":"Ash.Flow.Verifiers.VerifyReturn.verify/1","type":"function"},{"doc":"Sets the domain on the steps of a flow to the default domain, unless an domain is set explicitly.","ref":"Ash.Flow.Transformers.SetDomain.html","title":"Ash.Flow.Transformers.SetDomain","type":"module"},{"doc":"","ref":"Ash.Flow.Transformers.SetDomain.html#after?/1","title":"Ash.Flow.Transformers.SetDomain.after?/1","type":"function"},{"doc":"","ref":"Ash.Flow.Transformers.SetDomain.html#after_compile?/0","title":"Ash.Flow.Transformers.SetDomain.after_compile?/0","type":"function"},{"doc":"","ref":"Ash.Flow.Transformers.SetDomain.html#before?/1","title":"Ash.Flow.Transformers.SetDomain.before?/1","type":"function"},{"doc":"","ref":"Ash.Flow.Transformers.SetDomain.html#set_domain/2","title":"Ash.Flow.Transformers.SetDomain.set_domain/2","type":"function"},{"doc":"","ref":"Ash.Flow.Transformers.SetDomain.html#transform/1","title":"Ash.Flow.Transformers.SetDomain.transform/1","type":"function"},{"doc":"Used when the Ash engine has an internal error","ref":"Ash.Error.EngineError.html","title":"Ash.Error.EngineError","type":"exception"},{"doc":"","ref":"Ash.Error.EngineError.html#exception/0","title":"Ash.Error.EngineError.exception/0","type":"function"},{"doc":"Used when a flow has been halted for some reason","ref":"Ash.Error.Flow.Halted.html","title":"Ash.Error.Flow.Halted","type":"exception"},{"doc":"","ref":"Ash.Error.Flow.Halted.html#exception/0","title":"Ash.Error.Flow.Halted.exception/0","type":"function"},{"doc":"# Flows\n\nA flow is a static definition of a set of steps to be run.\n\nFlows are backed by `executors`, which determine how the workflow steps are performed.\nThe executor can be overridden on invocation, but not all executors will be capable of running all flows.\nAs of this writing, the default executor is the only one. It runs all steps in parallel unless values must be provided from one step to another, or in steps that are enclosed by a transaction.\n\nAsh.Flow is still in its early days, so expect many features, step types, and executors to come in the future.\n\nAll explanations here pertain to the builtin executor, so be sure to read the documentation of any other executor you may use.\n\nFlows are comprised of steps, which each have an `input` and an `result`. By default, each step is executed concurrently (or at least _may_ be executed concurrently). When the result of one step is used in another, that will cause them to run in sequence. In the following flow, for example, the `:create_user` and `:create_blank_project` steps would happen concurrently, but both would wait on the `:create_org` step.\n\n```elixir\nflow do\n  # Flow arguments allow you to parameterize the flow\n  argument :org_name, :string do\n    allow_nil? false\n  end\n\n  argument :user_name, :string do\n    allow_nil? false\n  end\n\n  # The flow returns the result of the `:create_user` step.\n  returns :create_user\nend\n\nsteps do\n  # The step is called `:create_org`, and it creates an `Organization` using the `register_org` action.\n  create :create_org, MyApp.Accounts.Organization, :register_org do\n    # The input to the action refers to an argument of the flow\n    input %{\n      name: arg(:org_name)\n    }\n  end\n\n  # The step is called :create_user, and it creates a `User` using the `:register_user` action.\n  create :create_user, MyApp.Accounts.User, :register_user do\n    input %{\n      # The input refers to an argument of the flow\n      name: arg(:user_name),\n      # and to the result of another step\n      org: result(:create_org)\n    }\n  end\n\n  # The step is called :create_blank_project, and it creates a `Project` using the `:create_example` action.\n  create :create_blank_project, MyApp.Accounts.Project, :create_example do\n    input %{\n      # The input refers to the result of another step\n      org: result(:create_org)\n    }\n  end\nend\n```","ref":"flows.html","title":"Flows","type":"extras"},{"doc":"`returns` determines what the flow returns, and may be one of three things:\n\n- `:step_name` - will return the result of the configured step\n- `%{step_name: :key}` will return a map of each key to the provided step name, i.e `%{key:  }`\n- `[:step_name]` - which is equivalent to `%{step_name: :step_name}`\n\nA flow always returns an `%Ash.Flow.Result{}`, and the return value of a successful flow will be available in `%Ash.Flow.Result{result: result}` when the flow did not encounter an error.\n\nIf the flow resulted in an error, `error?` is set to `true`, and the result will be `nil`.","ref":"flows.html#return-values","title":"Return Values - Flows","type":"extras"},{"doc":"A flow can be halted by using the `halt_if` option on a step, or by a custom step returning `{:error, Ash.Flow.Error.Halted.exception(reason: reason)}`\n\nIn this case, the flow will be marked as `complete?: false`. The result of each step up until this point is saved, and you can then rerun the flow with different inputs by passing the incomplete result into the `resume` option when running the flow again. Individual steps can be rerun by deleting them from the `data` field of the flow.","ref":"flows.html#halting-and-resuming-flows","title":"Halting and Resuming Flows - Flows","type":"extras"},{"doc":"Currently, any error anywhere in the flow will fail the flow and will return an error. Over time, error handling behavior will be added, as well as the ability to customize how transactions are rolled back, and to handle errors in a custom way.","ref":"flows.html#errors","title":"Errors - Flows","type":"extras"},{"doc":"Custom steps allow you to implement any custom logic that you need. There aren't really any restrictions on what you do in a custom step, but there is one main consideration if you want your custom step to play nicely with transactions:\n\nGenerally speaking you should set the `touches_resources` if you set `async?` to true.\nThis ensures that the custom step will be run synchronously if any of those resource's data\nlayers is in a corresponding transaction. You don't necessarily need to set _all_ of the\nresources that will be touched. For example, all AshPostgres resources that share the same\nrepo share the same transaction state.","ref":"flows.html#custom-steps","title":"Custom steps - Flows","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: Ash.Flow.Dsl","ref":"dsl-ash-flow.html","title":"DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Details about the flow itself, like description and the successful return type.","ref":"dsl-ash-flow.html#flow","title":"flow - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"* [argument](#flow-argument)","ref":"dsl-ash-flow.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`domain`](#flow-domain){: #flow-domain } | `module` |  | An domain to use by default when calling actions |\n| [`description`](#flow-description){: #flow-description } | `String.t` |  | A description of the flow |\n| [`trace_name`](#flow-trace_name){: #flow-trace_name } | `String.t` |  | The name to use when creating traces. Defaults to the short name. |\n| [`short_name`](#flow-short_name){: #flow-short_name } | `atom` |  | A short name to use for the flow. Defaults to the last to parts of the module name, underscored. |\n| [`returns`](#flow-returns){: #flow-returns } | `any` |  | The step or step that should constitute the return value. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\nargument name, type\n```\n\n\nAn argument to be passed into the flow","ref":"dsl-ash-flow.html#flow-argument","title":"flow.argument - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\nargument :params, :map do\n  default %{}\nend\n\n```\n\n```\nargument :retries, :integer do\n  allow_nil? false\nend\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#flow-argument-name){: #flow-argument-name .spark-required} | `atom` |  | The name to use for the argument |\n| [`type`](#flow-argument-type){: #flow-argument-type .spark-required} | `module` |  | The type of the argument. See `Ash.Type` for more. |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`default`](#flow-argument-default){: #flow-argument-default } | `(-> any) \\| mfa \\| any` |  | A default value to use for the argument if not provided |\n| [`allow_nil?`](#flow-argument-allow_nil?){: #flow-argument-allow_nil? } | `boolean` | `true` | Whether or not the argument value may be nil |\n| [`constraints`](#flow-argument-constraints){: #flow-argument-constraints } | `keyword` | `[]` | Constraints to provide to the type when casting the value. See the type's documentation for more information. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Target: `Ash.Flow.Argument`","ref":"dsl-ash-flow.html#introspection","title":"Introspection - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"The steps to run.","ref":"dsl-ash-flow.html#steps","title":"steps - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"* [map](#steps-map)\n\n * [branch](#steps-branch)\n\n * [transaction](#steps-transaction)\n\n * [create](#steps-create)\n * [debug](#steps-debug)\n * [update](#steps-update)\n * [destroy](#steps-destroy)\n * [validate](#steps-validate)\n * [read](#steps-read)\n * [run_flow](#steps-run_flow)\n * [custom](#steps-custom)","ref":"dsl-ash-flow.html#nested-dsls","title":"Nested DSLs - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\nsteps do\n  # invokes a create action\n  create :create_post, MyApp.Post, :create\nend\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\nmap name, over\n```\n\n\nRuns a set of steps for each item in a provided list.","ref":"dsl-ash-flow.html#steps-map","title":"steps.map - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\nmap :create_users, range(1, arg(:count)) do\n  output :create_user\n\n  create :create_user, Org, :create do\n    input %{\n      first_name: {Faker.Person, :first_name, []},\n      last_name: {Faker.Person, :last_name, []}\n    }\n  end\nend\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#steps-map-name){: #steps-map-name .spark-required} | `atom` |  | The name of the step. Will be used when expressing dependencies, and step inputs. |\n| [`over`](#steps-map-over){: #steps-map-over } | `any` |  | The value to be iterated over. Will be available inside the `map` step as `element(:map_step_name)` |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`output`](#steps-map-output){: #steps-map-output } | `atom` |  | Which step to use when constructing the output list. Defaults to the last step. |\n| [`short_name`](#steps-map-short_name){: #steps-map-short_name } | `String.t` |  | Set a short name for the step. Will be used when building things like mermaid charts. |\n| [`wait_for`](#steps-map-wait_for){: #steps-map-wait_for } | `any` |  | Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited. |\n| [`touches_resources`](#steps-map-touches_resources){: #steps-map-touches_resources } | `list(atom)` |  | A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps. |\n| [`halt_if`](#steps-map-halt_if){: #steps-map-halt_if } | `any` |  | Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more. |\n| [`halt_reason`](#steps-map-halt_reason){: #steps-map-halt_reason } | `any` | `:halted` | Configures the reason for the `halt_if` clause. |\n| [`description`](#steps-map-description){: #steps-map-description } | `String.t` |  | A description for the step. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Target: `Ash.Flow.Step.Map`","ref":"dsl-ash-flow.html#introspection","title":"Introspection - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\nbranch name, condition\n```\n\n\nRuns a set of steps based on a given value.","ref":"dsl-ash-flow.html#steps-branch","title":"steps.branch - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\nbranch :create_users, result(:create_users?) do\n  output :create_user\n\n  create :create_user, Org, :create do\n    input %{\n      first_name: {Faker.Person, :first_name, []},\n      last_name: {Faker.Person, :last_name, []}\n    }\n  end\nend\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#steps-branch-name){: #steps-branch-name .spark-required} | `atom` |  | The name of the step. Will be used when expressing dependencies, and step inputs. |\n| [`condition`](#steps-branch-condition){: #steps-branch-condition } | `any` |  | A template that must evaluate to `true` for the branch to be executed. |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`output`](#steps-branch-output){: #steps-branch-output } | `atom` |  | Which step to use as the output. Defaults to the last step. |\n| [`short_name`](#steps-branch-short_name){: #steps-branch-short_name } | `String.t` |  | Set a short name for the step. Will be used when building things like mermaid charts. |\n| [`wait_for`](#steps-branch-wait_for){: #steps-branch-wait_for } | `any` |  | Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited. |\n| [`touches_resources`](#steps-branch-touches_resources){: #steps-branch-touches_resources } | `list(atom)` |  | A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps. |\n| [`halt_if`](#steps-branch-halt_if){: #steps-branch-halt_if } | `any` |  | Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more. |\n| [`halt_reason`](#steps-branch-halt_reason){: #steps-branch-halt_reason } | `any` | `:halted` | Configures the reason for the `halt_if` clause. |\n| [`description`](#steps-branch-description){: #steps-branch-description } | `String.t` |  | A description for the step. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Target: `Ash.Flow.Step.Branch`","ref":"dsl-ash-flow.html#introspection","title":"Introspection - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\ntransaction name, resource\n```\n\n\nRuns a set of steps in a transaction.","ref":"dsl-ash-flow.html#steps-transaction","title":"steps.transaction - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\ntransaction :create_user_with_org do\n  touches_resources [User, Org]\n\n  create :create_user, User, :create do\n    input %{\n      first_name: {Faker.Person, :first_name, []},\n      last_name: {Faker.Person, :last_name, []}\n    }\n  end\n\n  create :create_org, Org, :create do\n    input %{\n      user_id: path(result(:create_user), :id),\n      name: {Faker.Color, :name, []}\n    }\n  end\nend\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#steps-transaction-name){: #steps-transaction-name .spark-required} | `atom` |  | The name of the step. Will be used when expressing dependencies, and step inputs. |\n| [`resource`](#steps-transaction-resource){: #steps-transaction-resource } | `module \\| list(module)` |  | The Ash resource to use for the transaction. |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`output`](#steps-transaction-output){: #steps-transaction-output } | `any` |  | Which step or steps to use when constructing the output. Defaults to the last step. |\n| [`timeout`](#steps-transaction-timeout){: #steps-transaction-timeout } | `timeout` |  | A timeout to apply to the transaction. |\n| [`short_name`](#steps-transaction-short_name){: #steps-transaction-short_name } | `String.t` |  | Set a short name for the step. Will be used when building things like mermaid charts. |\n| [`wait_for`](#steps-transaction-wait_for){: #steps-transaction-wait_for } | `any` |  | Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited. |\n| [`touches_resources`](#steps-transaction-touches_resources){: #steps-transaction-touches_resources } | `list(atom)` |  | A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps. |\n| [`halt_if`](#steps-transaction-halt_if){: #steps-transaction-halt_if } | `any` |  | Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more. |\n| [`halt_reason`](#steps-transaction-halt_reason){: #steps-transaction-halt_reason } | `any` | `:halted` | Configures the reason for the `halt_if` clause. |\n| [`description`](#steps-transaction-description){: #steps-transaction-description } | `String.t` |  | A description for the step. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Target: `Ash.Flow.Step.Transaction`","ref":"dsl-ash-flow.html#introspection","title":"Introspection - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\ncreate name, resource, action\n```\n\n\nDeclares a step that will call a create action on a resource.","ref":"dsl-ash-flow.html#steps-create","title":"steps.create - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\ncreate :create_post, MyApp.Post, :create\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#steps-create-name){: #steps-create-name .spark-required} | `atom` |  | The name of the step. Will be used when expressing dependencies, and step inputs. |\n| [`resource`](#steps-create-resource){: #steps-create-resource .spark-required} | `any` |  | The resource to call the action on. |\n| [`action`](#steps-create-action){: #steps-create-action .spark-required} | `any` |  | The action to call on the resource. |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`upsert?`](#steps-create-upsert?){: #steps-create-upsert? } | `boolean` | `false` | Whether or not this action is always an upsert. |\n| [`upsert_identity`](#steps-create-upsert_identity){: #steps-create-upsert_identity } | `atom` |  | The identity to use for the upsert. |\n| [`short_name`](#steps-create-short_name){: #steps-create-short_name } | `String.t` |  | Set a short name for the step. Will be used when building things like mermaid charts. |\n| [`wait_for`](#steps-create-wait_for){: #steps-create-wait_for } | `any` |  | Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited. |\n| [`touches_resources`](#steps-create-touches_resources){: #steps-create-touches_resources } | `list(atom)` |  | A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps. |\n| [`halt_if`](#steps-create-halt_if){: #steps-create-halt_if } | `any` |  | Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more. |\n| [`halt_reason`](#steps-create-halt_reason){: #steps-create-halt_reason } | `any` | `:halted` | Configures the reason for the `halt_if` clause. |\n| [`description`](#steps-create-description){: #steps-create-description } | `String.t` |  | A description for the step. |\n| [`domain`](#steps-create-domain){: #steps-create-domain } | `any` |  | The domain to use when calling the action. Defaults to the domain set in the `flow` section. |\n| [`tenant`](#steps-create-tenant){: #steps-create-tenant } | `any` |  | A tenant to use for the operation. May be a template or a literal value. |\n| [`input`](#steps-create-input){: #steps-create-input } | `any` |  | A template for the input. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Target: `Ash.Flow.Step.Create`","ref":"dsl-ash-flow.html#introspection","title":"Introspection - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\ndebug name\n```\n\n\nDeclares a step that will inspect its input and provide\nadditional debug information.","ref":"dsl-ash-flow.html#steps-debug","title":"steps.debug - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\ndebug :show_some_information do\n  input %{post: result(:create_post)}\nend\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#steps-debug-name){: #steps-debug-name .spark-required} | `atom` |  | The name of the step. Will be used when expressing dependencies, and step inputs. |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`input`](#steps-debug-input){: #steps-debug-input } | `any` |  | A template for the input. |\n| [`short_name`](#steps-debug-short_name){: #steps-debug-short_name } | `String.t` |  | Set a short name for the step. Will be used when building things like mermaid charts. |\n| [`wait_for`](#steps-debug-wait_for){: #steps-debug-wait_for } | `any` |  | Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited. |\n| [`halt_if`](#steps-debug-halt_if){: #steps-debug-halt_if } | `any` |  | Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more. |\n| [`halt_reason`](#steps-debug-halt_reason){: #steps-debug-halt_reason } | `any` | `:halted` | Configures the reason for the `halt_if` clause. |\n| [`description`](#steps-debug-description){: #steps-debug-description } | `String.t` |  | A description for the step. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Target: `Ash.Flow.Step.Debug`","ref":"dsl-ash-flow.html#introspection","title":"Introspection - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\nupdate name, resource, action\n```\n\n\nDeclares a step that will call a update action on a resource.","ref":"dsl-ash-flow.html#steps-update","title":"steps.update - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\nupdate :update_post, MyApp.Post, :update do\n  record result(:get_post)\nend\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#steps-update-name){: #steps-update-name .spark-required} | `atom` |  | The name of the step. Will be used when expressing dependencies, and step inputs. |\n| [`resource`](#steps-update-resource){: #steps-update-resource .spark-required} | `any` |  | The resource to call the action on. |\n| [`action`](#steps-update-action){: #steps-update-action .spark-required} | `any` |  | The action to call on the resource. |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`record`](#steps-update-record){: #steps-update-record .spark-required} | `any` |  | The record to be updated, can use template helpers, e.g `result(:step_name)`. |\n| [`short_name`](#steps-update-short_name){: #steps-update-short_name } | `String.t` |  | Set a short name for the step. Will be used when building things like mermaid charts. |\n| [`wait_for`](#steps-update-wait_for){: #steps-update-wait_for } | `any` |  | Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited. |\n| [`touches_resources`](#steps-update-touches_resources){: #steps-update-touches_resources } | `list(atom)` |  | A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps. |\n| [`halt_if`](#steps-update-halt_if){: #steps-update-halt_if } | `any` |  | Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more. |\n| [`halt_reason`](#steps-update-halt_reason){: #steps-update-halt_reason } | `any` | `:halted` | Configures the reason for the `halt_if` clause. |\n| [`description`](#steps-update-description){: #steps-update-description } | `String.t` |  | A description for the step. |\n| [`domain`](#steps-update-domain){: #steps-update-domain } | `any` |  | The domain to use when calling the action. Defaults to the domain set in the `flow` section. |\n| [`tenant`](#steps-update-tenant){: #steps-update-tenant } | `any` |  | A tenant to use for the operation. May be a template or a literal value. |\n| [`input`](#steps-update-input){: #steps-update-input } | `any` |  | A template for the input. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Target: `Ash.Flow.Step.Update`","ref":"dsl-ash-flow.html#introspection","title":"Introspection - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\ndestroy name, resource, action\n```\n\n\nDeclares a step that will call a destroy action on a resource.","ref":"dsl-ash-flow.html#steps-destroy","title":"steps.destroy - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\ndestroy :destroy_post, MyApp.Post, :destroy\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#steps-destroy-name){: #steps-destroy-name .spark-required} | `atom` |  | The name of the step. Will be used when expressing dependencies, and step inputs. |\n| [`resource`](#steps-destroy-resource){: #steps-destroy-resource .spark-required} | `any` |  | The resource to call the action on. |\n| [`action`](#steps-destroy-action){: #steps-destroy-action .spark-required} | `any` |  | The action to call on the resource. |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`record`](#steps-destroy-record){: #steps-destroy-record .spark-required} | `any` |  | The record to be updated, can use template helpers, e.g `result(:step_name)`. |\n| [`short_name`](#steps-destroy-short_name){: #steps-destroy-short_name } | `String.t` |  | Set a short name for the step. Will be used when building things like mermaid charts. |\n| [`wait_for`](#steps-destroy-wait_for){: #steps-destroy-wait_for } | `any` |  | Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited. |\n| [`touches_resources`](#steps-destroy-touches_resources){: #steps-destroy-touches_resources } | `list(atom)` |  | A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps. |\n| [`halt_if`](#steps-destroy-halt_if){: #steps-destroy-halt_if } | `any` |  | Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more. |\n| [`halt_reason`](#steps-destroy-halt_reason){: #steps-destroy-halt_reason } | `any` | `:halted` | Configures the reason for the `halt_if` clause. |\n| [`description`](#steps-destroy-description){: #steps-destroy-description } | `String.t` |  | A description for the step. |\n| [`domain`](#steps-destroy-domain){: #steps-destroy-domain } | `any` |  | The domain to use when calling the action. Defaults to the domain set in the `flow` section. |\n| [`tenant`](#steps-destroy-tenant){: #steps-destroy-tenant } | `any` |  | A tenant to use for the operation. May be a template or a literal value. |\n| [`input`](#steps-destroy-input){: #steps-destroy-input } | `any` |  | A template for the input. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Target: `Ash.Flow.Step.Destroy`","ref":"dsl-ash-flow.html#introspection","title":"Introspection - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\nvalidate name, resource, action\n```\n\n\nValidates some input against an action.","ref":"dsl-ash-flow.html#steps-validate","title":"steps.validate - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\nvalidate :update_post, MyApp.Post, :update do\n  record result(:get_post)\n  only_keys [:name]\nend\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#steps-validate-name){: #steps-validate-name .spark-required} | `atom` |  | The name of the step. Will be used when expressing dependencies, and step inputs. |\n| [`resource`](#steps-validate-resource){: #steps-validate-resource .spark-required} | `any` |  | The resource to call the action on. |\n| [`action`](#steps-validate-action){: #steps-validate-action .spark-required} | `any` |  | The action to call on the resource. |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`record`](#steps-validate-record){: #steps-validate-record } | `any` |  | The record to be created/updated/destroyed. If the value is `nil` and would be required by the action type, the step is skipped and `nil` is the result of the step. |\n| [`only_keys`](#steps-validate-only_keys){: #steps-validate-only_keys } | `list(atom \\| list(atom))` |  | A list of keys or paths to keys that should be validated. Others will be ignored, and errors generated for other fields will be ignored. |\n| [`short_name`](#steps-validate-short_name){: #steps-validate-short_name } | `String.t` |  | Set a short name for the step. Will be used when building things like mermaid charts. |\n| [`wait_for`](#steps-validate-wait_for){: #steps-validate-wait_for } | `any` |  | Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited. |\n| [`touches_resources`](#steps-validate-touches_resources){: #steps-validate-touches_resources } | `list(atom)` |  | A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps. |\n| [`halt_if`](#steps-validate-halt_if){: #steps-validate-halt_if } | `any` |  | Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more. |\n| [`halt_reason`](#steps-validate-halt_reason){: #steps-validate-halt_reason } | `any` | `:halted` | Configures the reason for the `halt_if` clause. |\n| [`description`](#steps-validate-description){: #steps-validate-description } | `String.t` |  | A description for the step. |\n| [`domain`](#steps-validate-domain){: #steps-validate-domain } | `any` |  | The domain to use when calling the action. Defaults to the domain set in the `flow` section. |\n| [`tenant`](#steps-validate-tenant){: #steps-validate-tenant } | `any` |  | A tenant to use for the operation. May be a template or a literal value. |\n| [`input`](#steps-validate-input){: #steps-validate-input } | `any` |  | A template for the input. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\nread name, resource, action\n```\n\n\nDeclares a step that will call a read action on a resource.","ref":"dsl-ash-flow.html#steps-read","title":"steps.read - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\nread :destroy_post, MyApp.Post, :destroy\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#steps-read-name){: #steps-read-name .spark-required} | `atom` |  | The name of the step. Will be used when expressing dependencies, and step inputs. |\n| [`resource`](#steps-read-resource){: #steps-read-resource .spark-required} | `any` |  | The resource to call the action on. |\n| [`action`](#steps-read-action){: #steps-read-action .spark-required} | `any` |  | The action to call on the resource. |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`get?`](#steps-read-get?){: #steps-read-get? } | `boolean` | `false` | Whether or not read action is expected to return a single result or `nil`. Set to `true` automatically if `get? true`. |\n| [`not_found_error?`](#steps-read-not_found_error?){: #steps-read-not_found_error? } | `boolean` | `true` | Whether or not finding no record should result in a not found error |\n| [`short_name`](#steps-read-short_name){: #steps-read-short_name } | `String.t` |  | Set a short name for the step. Will be used when building things like mermaid charts. |\n| [`wait_for`](#steps-read-wait_for){: #steps-read-wait_for } | `any` |  | Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited. |\n| [`touches_resources`](#steps-read-touches_resources){: #steps-read-touches_resources } | `list(atom)` |  | A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps. |\n| [`halt_if`](#steps-read-halt_if){: #steps-read-halt_if } | `any` |  | Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more. |\n| [`halt_reason`](#steps-read-halt_reason){: #steps-read-halt_reason } | `any` | `:halted` | Configures the reason for the `halt_if` clause. |\n| [`description`](#steps-read-description){: #steps-read-description } | `String.t` |  | A description for the step. |\n| [`domain`](#steps-read-domain){: #steps-read-domain } | `any` |  | The domain to use when calling the action. Defaults to the domain set in the `flow` section. |\n| [`tenant`](#steps-read-tenant){: #steps-read-tenant } | `any` |  | A tenant to use for the operation. May be a template or a literal value. |\n| [`input`](#steps-read-input){: #steps-read-input } | `any` |  | A template for the input. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Target: `Ash.Flow.Step.Read`","ref":"dsl-ash-flow.html#introspection","title":"Introspection - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\nrun_flow name, flow\n```\n\n\nRuns another flow as part of the current flow.\nThe return value of the step is the return value of the flow.","ref":"dsl-ash-flow.html#steps-run_flow","title":"steps.run_flow - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\nrun_flow :get_org, GetOrgByName do\n  input %{\n    name: arg(:org_name)\n  }\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#steps-run_flow-name){: #steps-run_flow-name .spark-required} | `atom` |  | The name of the step. Will be used when expressing dependencies, and step inputs. |\n| [`flow`](#steps-run_flow-flow){: #steps-run_flow-flow .spark-required} | `atom` |  | The flow to run. |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`input`](#steps-run_flow-input){: #steps-run_flow-input } | `any` |  | A template for the input. |\n| [`short_name`](#steps-run_flow-short_name){: #steps-run_flow-short_name } | `String.t` |  | Set a short name for the step. Will be used when building things like mermaid charts. |\n| [`wait_for`](#steps-run_flow-wait_for){: #steps-run_flow-wait_for } | `any` |  | Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited. |\n| [`touches_resources`](#steps-run_flow-touches_resources){: #steps-run_flow-touches_resources } | `list(atom)` |  | A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps. |\n| [`halt_if`](#steps-run_flow-halt_if){: #steps-run_flow-halt_if } | `any` |  | Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more. |\n| [`halt_reason`](#steps-run_flow-halt_reason){: #steps-run_flow-halt_reason } | `any` | `:halted` | Configures the reason for the `halt_if` clause. |\n| [`description`](#steps-run_flow-description){: #steps-run_flow-description } | `String.t` |  | A description for the step. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Target: `Ash.Flow.Step.RunFlow`","ref":"dsl-ash-flow.html#introspection","title":"Introspection - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```elixir\ncustom name, custom\n```\n\n\nRuns a custom step module.\n\nSee `Ash.Flow.Step` for the necessary callbacks and more information.","ref":"dsl-ash-flow.html#steps-custom","title":"steps.custom - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"```\ncustom :do_custom_thing, MyApp.DoCustomThing do\n  input %{...}\nend\n\n```\n\n```\ncustom :do_custom_thing, {MyApp.DoCustomThing, opt1: :foo, opt2: :bar} do\n  input %{...}\nend\n\n```","ref":"dsl-ash-flow.html#examples","title":"Examples - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#steps-custom-name){: #steps-custom-name .spark-required} | `atom` |  | The name of the step. Will be used when expressing dependencies, and step inputs. |\n| [`custom`](#steps-custom-custom){: #steps-custom-custom } | `(any, any -> any) \\| module` |  | The module that implements the step behaviour. Also accepts a 2 argument function that takes the input and the context. |","ref":"dsl-ash-flow.html#arguments","title":"Arguments - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`input`](#steps-custom-input){: #steps-custom-input } | `any` |  | A template for the input. |\n| [`async?`](#steps-custom-async?){: #steps-custom-async? } | `boolean` | `false` | Whether or not this step can be run outside of the current process. |\n| [`short_name`](#steps-custom-short_name){: #steps-custom-short_name } | `String.t` |  | Set a short name for the step. Will be used when building things like mermaid charts. |\n| [`wait_for`](#steps-custom-wait_for){: #steps-custom-wait_for } | `any` |  | Ensures that the step happens after the configured step or steps. This is a template who's results are not used, only awaited. |\n| [`touches_resources`](#steps-custom-touches_resources){: #steps-custom-touches_resources } | `list(atom)` |  | A list of resources touched by any custom logic in this step. This is used in the case that this step is run in a transaction. This is primarily only needed for `custom` steps. |\n| [`halt_if`](#steps-custom-halt_if){: #steps-custom-halt_if } | `any` |  | Halts the step by emitting an error (with an `Ash.Error.Flow.Halted`). Can use template variables. See the section on Halting for more. |\n| [`halt_reason`](#steps-custom-halt_reason){: #steps-custom-halt_reason } | `any` | `:halted` | Configures the reason for the `halt_if` clause. |\n| [`description`](#steps-custom-description){: #steps-custom-description } | `String.t` |  | A description for the step. |","ref":"dsl-ash-flow.html#options","title":"Options - DSL: Ash.Flow.Dsl","type":"extras"},{"doc":"Target: `Ash.Flow.Step.Custom`\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ash-flow.html#introspection","title":"Introspection - DSL: Ash.Flow.Dsl","type":"extras"}],"producer":{"name":"ex_doc","version":[48,46,51,49,46,50]}}