searchData={"content_type":"text/markdown","items":[{"doc":"Automatically include all version resources in the domain.","ref":"dsl-ashpapertrail-domain.html#paper_trail-include_versions?","title":"AshPaperTrail.Domain.paper_trail.include_versions?","type":"DSL"},{"doc":"A section for configuring paper_trail behavior at the domain level.\n","ref":"dsl-ashpapertrail-domain.html#paper_trail","title":"AshPaperTrail.Domain.paper_trail","type":"DSL"},{"doc":"The resource of the actor (e.g. MyApp.Users.User)","ref":"dsl-ashpapertrail-resource.html#paper_trail-belongs_to_actor-destination","title":"AshPaperTrail.Resource.paper_trail.belongs_to_actor.destination","type":"DSL"},{"doc":"If set to `false` an attribute is not created on the resource for this relationship, and one must be manually added in `attributes`, invalidating many other options.","ref":"dsl-ashpapertrail-resource.html#paper_trail-belongs_to_actor-define_attribute?","title":"AshPaperTrail.Resource.paper_trail.belongs_to_actor.define_attribute?","type":"DSL"},{"doc":"Whether this relationship should be included in public interfaces","ref":"dsl-ashpapertrail-resource.html#paper_trail-belongs_to_actor-public?","title":"AshPaperTrail.Resource.paper_trail.belongs_to_actor.public?","type":"DSL"},{"doc":"The type of the generated created attribute. See `Ash.Type` for more.","ref":"dsl-ashpapertrail-resource.html#paper_trail-belongs_to_actor-attribute_type","title":"AshPaperTrail.Resource.paper_trail.belongs_to_actor.attribute_type","type":"DSL"},{"doc":"The Domain module to use when working with the related entity.\n","ref":"dsl-ashpapertrail-resource.html#paper_trail-belongs_to_actor-domain","title":"AshPaperTrail.Resource.paper_trail.belongs_to_actor.domain","type":"DSL"},{"doc":"Whether this relationship must always be present, e.g: must be included on creation, and never removed (it may be modified). The generated attribute will not allow nil values.","ref":"dsl-ashpapertrail-resource.html#paper_trail-belongs_to_actor-allow_nil?","title":"AshPaperTrail.Resource.paper_trail.belongs_to_actor.allow_nil?","type":"DSL"},{"doc":"The name of the relationship to use for the actor (e.g. :user)","ref":"dsl-ashpapertrail-resource.html#paper_trail-belongs_to_actor-name","title":"AshPaperTrail.Resource.paper_trail.belongs_to_actor.name","type":"DSL"},{"doc":"Creates a belongs_to relationship for the actor resource. When creating a new version, if the actor on the action is set and\nmatches the resource type, the version will be related to the actor. If your actors are polymorphic or varying types, declare a\nbelongs_to_actor for each type.\n\nA reference is also created with `on_delete: :nilify` and `on_update: :update`\n\nIf you need more complex relationships, set `define_attribute? false` and add the relationship via a mixin.\n\nIf your actor is not a resource, add a mixin and with a change for all creates that sets the actor's to one your attributes.\nThe actor on the version changeset is set.\n","ref":"dsl-ashpapertrail-resource.html#paper_trail-belongs_to_actor","title":"AshPaperTrail.Resource.paper_trail.belongs_to_actor","type":"DSL"},{"doc":"Extensions that should be used by the version resource. For example: `extensions: [AshGraphql.Resource], notifier: [Ash.Notifiers.PubSub]`\n","ref":"dsl-ashpapertrail-resource.html#paper_trail-version_extensions","title":"AshPaperTrail.Resource.paper_trail.version_extensions","type":"DSL"},{"doc":"Whether or not to add the `version_action_name` attribute to the  version resource. This is useful for auditing purposes. The `version_action_type` attribute is always stored.","ref":"dsl-ashpapertrail-resource.html#paper_trail-store_action_name?","title":"AshPaperTrail.Resource.paper_trail.store_action_name?","type":"DSL"},{"doc":"Options to pass to the has_many :paper_trail_versions relationship that is created on this resource. For example, `public?: true` to expose the relationship over graphql. See `d:Ash.Resource.Dsl.relationships.has_many`.","ref":"dsl-ashpapertrail-resource.html#paper_trail-relationship_opts","title":"AshPaperTrail.Resource.paper_trail.relationship_opts","type":"DSL"},{"doc":"Whether or not to create a foreign key reference from the version to the source.  This should be set to `false` if you are allowing actual deletion of data. Only relevant for resources using the AshPostgres data layer.","ref":"dsl-ashpapertrail-resource.html#paper_trail-reference_source?","title":"AshPaperTrail.Resource.paper_trail.reference_source?","type":"DSL"},{"doc":"Which actions should produce new versions. By default, all create/update actions will produce new versions.\n","ref":"dsl-ashpapertrail-resource.html#paper_trail-on_actions","title":"AshPaperTrail.Resource.paper_trail.on_actions","type":"DSL"},{"doc":"A module that defines a `using` macro or {module, function, arguments} tuple that will be mixed into the version resource.\n","ref":"dsl-ashpapertrail-resource.html#paper_trail-mixin","title":"AshPaperTrail.Resource.paper_trail.mixin","type":"DSL"},{"doc":"A list of attributes that should be ignored. Typically you'll want to ignore your timestamps. The primary key is always ignored.\n","ref":"dsl-ashpapertrail-resource.html#paper_trail-ignore_attributes","title":"AshPaperTrail.Resource.paper_trail.ignore_attributes","type":"DSL"},{"doc":"Changes are stored in a map attribute called `changes`.  The `change_tracking_mode` determines what's stored. See the getting started guide for more.","ref":"dsl-ashpapertrail-resource.html#paper_trail-change_tracking_mode","title":"AshPaperTrail.Resource.paper_trail.change_tracking_mode","type":"DSL"},{"doc":"A set of attributes that should be set as attributes on the version resource, instead of stored in the freeform `changes` map attribute.\n","ref":"dsl-ashpapertrail-resource.html#paper_trail-attributes_as_attributes","title":"AshPaperTrail.Resource.paper_trail.attributes_as_attributes","type":"DSL"},{"doc":"A section for configuring how versioning is derived for the resource.\n","ref":"dsl-ashpapertrail-resource.html#paper_trail","title":"AshPaperTrail.Resource.paper_trail","type":"DSL"},{"doc":"Documentation for `AshPaperTrail`.","ref":"AshPaperTrail.html","title":"AshPaperTrail","type":"module"},{"doc":"","ref":"AshPaperTrail.html#allow_resource_versions/2","title":"AshPaperTrail.allow_resource_versions/2","type":"function"},{"doc":"Builds a diff of the changeset that is both fairly easy read and includes a complete\n  representation of the changes mades.","ref":"AshPaperTrail.ChangeBuilders.FullDiff.html","title":"AshPaperTrail.ChangeBuilders.FullDiff","type":"module"},{"doc":"Return a map of the changes made with a key for each attribute and a value\n  that is a map representing each change.  The structure of map representing the\n  each change comes in multiple:  simple/native, embedded, union, and array of embedded and array of unions.\n\n  %{\n    subject: %{ from: \"subject\", to: \"new subject\" },\n    body: { unchanged: \"body\" }\n  }","ref":"AshPaperTrail.ChangeBuilders.FullDiff.html#build_changes/3","title":"AshPaperTrail.ChangeBuilders.FullDiff.build_changes/3","type":"function"},{"doc":"A simple attribute change will be represented as a map:\n\n  %{ created: %{ subject: %{to: \"subject\"} } }\n  %{ updated: %{ subject: %{from: \"subject\", to: \"new subject\"} } }\n  %{ unchanged: %{ subject: %{unchanged: \"subject\"} } }\n  %{ destroyed: %{ subject: %{unchanged: \"subject\"} } }","ref":"AshPaperTrail.ChangeBuilders.FullDiff.EmbeddedChange.html","title":"AshPaperTrail.ChangeBuilders.FullDiff.EmbeddedChange","type":"module"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.EmbeddedChange.html#build/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.EmbeddedChange.build/2","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.EmbeddedChange.html#dump_data_value/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.EmbeddedChange.dump_data_value/2","type":"function"},{"doc":"Misc helpers for building a full diff of a changeset.","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers","type":"module"},{"doc":"Builds a simple change map based on the given values.\n\nattribute_change_map({data_present, data, value_present, value})","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html#attribute_change_map/1","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.attribute_change_map/1","type":"function"},{"doc":"Building a map of attribute changes for the embedded resource","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html#attribute_changes/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.attribute_changes/2","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html#build_index_change/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.build_index_change/2","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html#dump_value/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.dump_value/2","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html#embedded?/1","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.embedded?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html#embedded_change_map/1","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.embedded_change_map/1","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html#embedded_union?/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.embedded_union?/2","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html#map_get_keys/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.map_get_keys/2","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html#union?/1","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.union?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html#union_change_map/1","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.union_change_map/1","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.html#unique_id/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.Helpers.unique_id/2","type":"function"},{"doc":"A list of changes represented as a map:\n\n  %{ to: nil }\n  %{ unchanged: nil }\n  %{ from: nil, to: [ ...all.new.items... ] }\n  %{ from: [ ...all.new.items.removed.... ], to: nil }\n  %{ to: [ ...one.or.more.items.changing... ] }\n  %{ unchanged: [ ...no.items.changing... ] }\n\nWith each element of the array represented as a change:\n\n#TODO: instead of `to:` and `from:` used `added:` and `removed:`\n#\n\nA nil item added:\n  %{ to: nil, index: %{to: index} }\n\nA nil item unchanged:\n  %{ unchanged: nil, index: %{unchanged: index} }\n\nA simple item added:\n  %{ to: value, index: %{to: index} }\n\nA simple item removed:\n  %{ from: value, index: %{from: index} }\n\nA simple item moved:\n  %{ unchanged: value, index: %{from: from, to: to} }\n\nA simple item unchanged:\n  %{ unchanged: value, index: %{unchanged: index} }\n\nA union item when added:\n  %{ to: %{type: type, value: value }, index: %{to: index} }\n\nA union item when unchanged:\n  %{ unchanged: %{type: type, value: value }, index: %{unchanged: index} }\n\nA union item when removed:\n  %{ from: %{type: type, value: value }, index: %{from: index} }\n\nAn embedded item added:\n  %{ created: %{ ...attrs...}, index: %{to: index} }\n\nAn embedded item when unchanged and unmoved:\n  %{ unchanged: %{...attrs...}, index: %{unchanged: index} }\n\nAn embedded item when updated and unmoved:\n  %{ updated: %{...attrs...}, index: %{unchanged: index} }\n\nAn embedded item when unchanged and moved:\n  %{ unchanged: %{...attrs...} }, index: %{from: prev, to: index} }\n\nAn embedded item when updated and moved:\n  %{ updated: %{...attrs...}, index: %{from: prev, to: index} }\n\nAn embedded item when removed:\n  %{ destroyed: value: %{...attrs...}, index: %{from: index} }","ref":"AshPaperTrail.ChangeBuilders.FullDiff.ListChange.html","title":"AshPaperTrail.ChangeBuilders.FullDiff.ListChange","type":"module"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.ListChange.html#add_index_change/3","title":"AshPaperTrail.ChangeBuilders.FullDiff.ListChange.add_index_change/3","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.ListChange.html#build/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.ListChange.build/2","type":"function"},{"doc":"A simple attribute change will be represented as a map:\n\n  %{ to: value }\n  %{ from: value, to: value }\n  %{ unchange: value }","ref":"AshPaperTrail.ChangeBuilders.FullDiff.SimpleChange.html","title":"AshPaperTrail.ChangeBuilders.FullDiff.SimpleChange","type":"module"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.SimpleChange.html#build/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.SimpleChange.build/2","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.SimpleChange.html#dump_data_value/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.SimpleChange.dump_data_value/2","type":"function"},{"doc":"A non-embedded union attribute change will be represented as a map:\n\n  %{ to: nil }\n  %{ to: %{value: value, type: type } }\n  %{ from: %{value: value, type: type }, to: %{value: value, type: type } }\n  %{ unchanged: %{value: value, type: type } }\n\n  If the from & to are embedded resources with the same primary key\n  then, we'll have consider it changed and represent it as:\n\n  %{ changed: %{type: type, updated: %{ ...attributes... } } }\n\n  If the union value is an embedded resource the `value` key will be replaced with\n  created, unchanged, updated, destroyed.\n\n  %{ from: nil, created: %{type: type, value: %{ ...attributes... } } }\n  %{ unchanged: %{type: type, value: %{ ...attributes... } } }\n  %{ updated: %{type: type, value: %{ ...attributes... } } }\n  %{ from: %{type: type, value: value}, created: %{type: type, value: %{ ...attributes... } }\n  %{ destroyed: %{type: type, value: %{ ...attributes... } }, to: nil }\n  %{ destroyed: %{type: type, value: %{ ...attributes... } }, created: %{type: type, value: %{ ...attributes... } } }\n  %{ destroyed: %{type: type, destroyed: %{ ...attributes... } }, to: %{type: type, value: value } }","ref":"AshPaperTrail.ChangeBuilders.FullDiff.UnionChange.html","title":"AshPaperTrail.ChangeBuilders.FullDiff.UnionChange","type":"module"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.UnionChange.html#build/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.UnionChange.build/2","type":"function"},{"doc":"","ref":"AshPaperTrail.ChangeBuilders.FullDiff.UnionChange.html#dump_union_type_value/2","title":"AshPaperTrail.ChangeBuilders.FullDiff.UnionChange.dump_union_type_value/2","type":"function"},{"doc":"Documentation for `AshPaperTrail.Domain`.","ref":"AshPaperTrail.Domain.html","title":"AshPaperTrail.Domain","type":"module"},{"doc":"Introspection helpers for `AshPaperTrail.Domain`","ref":"AshPaperTrail.Domain.Info.html","title":"AshPaperTrail.Domain.Info","type":"module"},{"doc":"","ref":"AshPaperTrail.Domain.Info.html#include_versions?/1","title":"AshPaperTrail.Domain.Info.include_versions?/1","type":"function"},{"doc":"Adds any version resources to the domain for any resources.","ref":"AshPaperTrail.Domain.Transformers.AllowResourceVersions.html","title":"AshPaperTrail.Domain.Transformers.AllowResourceVersions","type":"module"},{"doc":"","ref":"AshPaperTrail.Domain.Transformers.AllowResourceVersions.html#after?/1","title":"AshPaperTrail.Domain.Transformers.AllowResourceVersions.after?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Domain.Transformers.AllowResourceVersions.html#after_compile?/0","title":"AshPaperTrail.Domain.Transformers.AllowResourceVersions.after_compile?/0","type":"function"},{"doc":"","ref":"AshPaperTrail.Domain.Transformers.AllowResourceVersions.html#before?/1","title":"AshPaperTrail.Domain.Transformers.AllowResourceVersions.before?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Domain.Transformers.AllowResourceVersions.html#transform/1","title":"AshPaperTrail.Domain.Transformers.AllowResourceVersions.transform/1","type":"function"},{"doc":"Documentation for `AshPaperTrail.Resource`.","ref":"AshPaperTrail.Resource.html","title":"AshPaperTrail.Resource","type":"module"},{"doc":"Represents a belongs_to_actor relationship on a version resource","ref":"AshPaperTrail.Resource.BelongsToActor.html","title":"AshPaperTrail.Resource.BelongsToActor","type":"module"},{"doc":"","ref":"AshPaperTrail.Resource.BelongsToActor.html#t:t/0","title":"AshPaperTrail.Resource.BelongsToActor.t/0","type":"type"},{"doc":"Creates a new version whenever a resource is created, deleted, or updated","ref":"AshPaperTrail.Resource.Changes.CreateNewVersion.html","title":"AshPaperTrail.Resource.Changes.CreateNewVersion","type":"module"},{"doc":"Introspection helpers for `AshPaperTrail.Resource`","ref":"AshPaperTrail.Resource.Info.html","title":"AshPaperTrail.Resource.Info","type":"module"},{"doc":"","ref":"AshPaperTrail.Resource.Info.html#attributes_as_attributes/1","title":"AshPaperTrail.Resource.Info.attributes_as_attributes/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Info.html#belongs_to_actor/1","title":"AshPaperTrail.Resource.Info.belongs_to_actor/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Info.html#change_tracking_mode/1","title":"AshPaperTrail.Resource.Info.change_tracking_mode/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Info.html#ignore_attributes/1","title":"AshPaperTrail.Resource.Info.ignore_attributes/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Info.html#mixin/1","title":"AshPaperTrail.Resource.Info.mixin/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Info.html#on_actions/1","title":"AshPaperTrail.Resource.Info.on_actions/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Info.html#reference_source?/1","title":"AshPaperTrail.Resource.Info.reference_source?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Info.html#relationship_opts/1","title":"AshPaperTrail.Resource.Info.relationship_opts/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Info.html#store_action_name?/1","title":"AshPaperTrail.Resource.Info.store_action_name?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Info.html#version_extensions/1","title":"AshPaperTrail.Resource.Info.version_extensions/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Info.html#version_resource/1","title":"AshPaperTrail.Resource.Info.version_resource/1","type":"function"},{"doc":"Creates a version resource for a given resource","ref":"AshPaperTrail.Resource.Transformers.CreateVersionResource.html","title":"AshPaperTrail.Resource.Transformers.CreateVersionResource","type":"module"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.CreateVersionResource.html#after?/1","title":"AshPaperTrail.Resource.Transformers.CreateVersionResource.after?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.CreateVersionResource.html#after_compile?/0","title":"AshPaperTrail.Resource.Transformers.CreateVersionResource.after_compile?/0","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.CreateVersionResource.html#before?/1","title":"AshPaperTrail.Resource.Transformers.CreateVersionResource.before?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.CreateVersionResource.html#transform/1","title":"AshPaperTrail.Resource.Transformers.CreateVersionResource.transform/1","type":"function"},{"doc":"Relates the resource to its created version resource","ref":"AshPaperTrail.Resource.Transformers.RelateVersionResource.html","title":"AshPaperTrail.Resource.Transformers.RelateVersionResource","type":"module"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.RelateVersionResource.html#after?/1","title":"AshPaperTrail.Resource.Transformers.RelateVersionResource.after?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.RelateVersionResource.html#after_compile?/0","title":"AshPaperTrail.Resource.Transformers.RelateVersionResource.after_compile?/0","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.RelateVersionResource.html#before?/1","title":"AshPaperTrail.Resource.Transformers.RelateVersionResource.before?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.RelateVersionResource.html#transform/1","title":"AshPaperTrail.Resource.Transformers.RelateVersionResource.transform/1","type":"function"},{"doc":"Validates that when multiple belongs_to_actor options are defined that they all allow_nil? true","ref":"AshPaperTrail.Resource.Transformers.ValidateBelongsToActor.html","title":"AshPaperTrail.Resource.Transformers.ValidateBelongsToActor","type":"module"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.ValidateBelongsToActor.html#after?/1","title":"AshPaperTrail.Resource.Transformers.ValidateBelongsToActor.after?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.ValidateBelongsToActor.html#after_compile?/0","title":"AshPaperTrail.Resource.Transformers.ValidateBelongsToActor.after_compile?/0","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.ValidateBelongsToActor.html#before?/1","title":"AshPaperTrail.Resource.Transformers.ValidateBelongsToActor.before?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.ValidateBelongsToActor.html#transform/1","title":"AshPaperTrail.Resource.Transformers.ValidateBelongsToActor.transform/1","type":"function"},{"doc":"Adds the `CreateNewVersion` change to the resource.","ref":"AshPaperTrail.Resource.Transformers.VersionOnChange.html","title":"AshPaperTrail.Resource.Transformers.VersionOnChange","type":"module"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.VersionOnChange.html#after?/1","title":"AshPaperTrail.Resource.Transformers.VersionOnChange.after?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.VersionOnChange.html#after_compile?/0","title":"AshPaperTrail.Resource.Transformers.VersionOnChange.after_compile?/0","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.VersionOnChange.html#before?/1","title":"AshPaperTrail.Resource.Transformers.VersionOnChange.before?/1","type":"function"},{"doc":"","ref":"AshPaperTrail.Resource.Transformers.VersionOnChange.html#transform/1","title":"AshPaperTrail.Resource.Transformers.VersionOnChange.transform/1","type":"function"},{"doc":"![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-black-text.png?raw=true#gh-light-mode-only)\n![Logo](https://github.com/ash-project/ash/blob/main/logos/cropped-for-header-white-text.png?raw=true#gh-dark-mode-only)\n\n![Elixir CI](https://github.com/ash-project/ash_paper_trail/workflows/CI/badge.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Hex version badge](https://img.shields.io/hexpm/v/ash_paper_trail.svg)](https://hex.pm/packages/ash_paper_trail)\n[![Hexdocs badge](https://img.shields.io/badge/docs-hexdocs-purple)](https://hexdocs.pm/ash_paper_trail)\n\n# AshPaperTrail\n\nWelcome! This is the extension for keeping an audit log of changes to your [Ash](https://hexdocs.pm/ash) resources.","ref":"readme.html","title":"Home","type":"extras"},{"doc":"- [Getting Started with AshPaperTrail](documentation/tutorials/getting-started-with-ash-paper-trail.md)","ref":"readme.html#tutorials","title":"Tutorials - Home","type":"extras"},{"doc":"- [AshPaperTrail.Resource DSL](documentation/dsls/DSL:-AshPaperTrail.Resource.md)\n- [AshPaperTrail.Domain DSL](documentation/dsls/DSL:-AshPaperTrail.Domain.md)","ref":"readme.html#reference","title":"Reference - Home","type":"extras"},{"doc":"# Getting started with AshPaperTrail\n\nFirst, add the dependency to your `mix.exs`\n\n```elixir\n{:ash_paper_trail, \"~> 0.1.4\"}\n```\n\nThen, add the `AshPaperTrail.Resource` extension to any resource you would like to version and configure the change tracking mode\n\n```elixir\nuse Ash.Resource,\n  domain: MyDomain,\n  extensions: [\n    AshPaperTrail.Resource\n  ]\n\n  paper_trail do\n    change_tracking_mode :changes_only # default is :snapshot\n    store_action_name? true # default is false\n    ignore_attributes [:inserted_at, :updated_at] # the primary keys are always ignored\n  end\n```\n\nThis will generate the version resource automatically and add them to your domain. The autogenerated resource will be named `Version` under the namespace of the original resource and will belong to the original resource. For example, if your original resource is `MyApp.Post` the autogenerated resource will be `MyApp.Post.Version`. `Post` has_many `paper_trail_versions` and `Version` belong_to `source_version`","ref":"getting-started-with-ash-paper-trail.html","title":"Getting started with AshPaperTrail","type":"extras"},{"doc":"First, add the `AshPaperTrail.Domain` extension to your domain.\n\n```elixir\nuse Ash.Domain,\n  extensions: [\n    AshPaperTrail.Domain\n  ]\n```","ref":"getting-started-with-ash-paper-trail.html#including-version-resources-in-your-domain","title":"Including version resources in your domain - Getting started with AshPaperTrail","type":"extras"},{"doc":"Set `include_verisons? true` in the configuration, like so:\n\n```elixir\npaper_trail do\n  include_versions? true\nend\n```","ref":"getting-started-with-ash-paper-trail.html#including-all-version-resources","title":"Including all version resources: - Getting started with AshPaperTrail","type":"extras"},{"doc":"Alternatively, you can configure individual version resources, like so:\n\n```\nresources do\n  resource MyApp.Post\n  resource MyApp.Post.Version # <- add version resource\nend\n```","ref":"getting-started-with-ash-paper-trail.html#including-specific-version-resources","title":"Including specific version resources - Getting started with AshPaperTrail","type":"extras"},{"doc":"If you are using `AshPostgres`, and you want to support destroy actions, you need to do one of two things:\n\n1. use something like `AshArchival` in conjunction with this resource to ensure that destroy actions are `soft?` and do not actually result in row deletion\n\n2. configure `AshPaperTrail` not to create references, via:\n\n```elixir\npaper_trail do\n  reference_source? false\nend\n```","ref":"getting-started-with-ash-paper-trail.html#destroy-actions","title":"Destroy Actions - Getting started with AshPaperTrail","type":"extras"},{"doc":"By default, attribute values are stored in the `changes` attribute. This is to protect you over time as your resources change. However, if there are attributes that you are confident will not change,\nyou can create attributes for them on the version resource, like so:\n\n```elixir\npaper_trail do\n  attributes_as_attributes [:organization_id, :author_id]\nend\n```\n\nThis will make your version resource have `foo` and `bar` attributes (they will still show up in `changes`), i.e\n\n```elixir\n%ThingVersion{foo: \"foo\", bar: \"bar\", changes: %{\"foo\" => \"foo\", \"bar\" => \"bar\"}}\n```","ref":"getting-started-with-ash-paper-trail.html#attributes","title":"Attributes - Getting started with AshPaperTrail","type":"extras"},{"doc":"Valid options are `:snapshot` and `:changes_only` and `:full_diff`.","ref":"getting-started-with-ash-paper-trail.html#change-tracking-modes","title":"Change Tracking Modes - Getting started with AshPaperTrail","type":"extras"},{"doc":"`:snapshot` will json dump the contents of every attribute whether they changed or not.\n\n`{ subject: \"new subject\", body: \"unchanged body\", author: { name: \"bob\"}}`","ref":"getting-started-with-ash-paper-trail.html#snapshots","title":"Snapshots - Getting started with AshPaperTrail","type":"extras"},{"doc":"`:changes_only` will json dump the contents of only the attributes that have changed.\nNote if any part of an embedded attribute and array of embedded attributes, changes then the entire top level attribute is dumped.\n\n`{ subject: \"new subject\" }`","ref":"getting-started-with-ash-paper-trail.html#changes-only","title":"Changes Only - Getting started with AshPaperTrail","type":"extras"},{"doc":"`:full_diff` will json dump the contents of each attribute.\n\n`{ subject: { from: \"subject\", to: \"new subject\" }, body: { unchanged: \"unchanged_body\" }}, author: { changes: { unchanged: \"bob\" }}`","ref":"getting-started-with-ash-paper-trail.html#full-diff","title":"Full Diff - Getting started with AshPaperTrail","type":"extras"},{"doc":"You can record the actor who made the change by declaring one or more resources that can be actors.\n\n```\npaper_trail do\n  belongs_to_actor :user, MyApp.Accounts.User, domain: MyApp.Accounts\n  belongs_to_actor :news_feed, MyApp.Accounts.NewsFeed, domain: MyApp.Accounts\nend\n```\n\nEach `belongs_to_actor` will create a `belongs_to` relationship with the given name destination. When creating a new version, if the actor on the action is set and matches the resource type, the version will be related to the actor. If your actors are polymorphic or varying types, declare a belongs_to_actor for each type.\n\nA reference is also created with `on_delete: :nilify` and `on_update: :update`\n\nIf you need a more complex relationship or your actor is not a resource (e.g. String), the actor is always set on Version create and you can store it by adding `:on_create` `change` in a mixin.","ref":"getting-started-with-ash-paper-trail.html#associating-versions-with-actors","title":"Associating Versions with Actors - Getting started with AshPaperTrail","type":"extras"},{"doc":"If your resource uses multitenancy, then the strategy, attribute, and parse_attribute options (if any) will be applied to the version resource. If using the attribute strategy you will need to ensure this is also an attribute on the version using the `attributes_as_attributes` option (described above) or via a mixin (described below)","ref":"getting-started-with-ash-paper-trail.html#multitenancy","title":"Multitenancy - Getting started with AshPaperTrail","type":"extras"},{"doc":"If you want to do something like exposing your versions resource over your graphql, you can use the `mixin` and `version_extensions` options.\n\nFor example:\n\n```elixir\npaper_trail do\n  mixin {MyApp.MyResource.PaperTrailMixin, :graphql, [:my_resource_version]}\n  relationship_opts public?: true\n  version_extensions extensions: [AshGraphql.Resource]\nend\n```\n\nAnd then you can define a module like so:\n\n```elixir\ndefmodule MyApp.MyResource.PaperTrailMixin do\n\n  def graphql(type) do\n    quote do\n      graphql do\n        type unquote(type)\n\n        queries do\n          list :list_versions, action: :read\n        end\n      end\n    end\n  end\nend\n```","ref":"getting-started-with-ash-paper-trail.html#enriching-the-versions-resource","title":"Enriching the Versions resource - Getting started with AshPaperTrail","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: AshPaperTrail.Resource\n\nDocumentation for `AshPaperTrail.Resource`.","ref":"dsl-ashpapertrail-resource.html","title":"DSL: AshPaperTrail.Resource","type":"extras"},{"doc":"A section for configuring how versioning is derived for the resource.","ref":"dsl-ashpapertrail-resource.html#paper_trail","title":"paper_trail - DSL: AshPaperTrail.Resource","type":"extras"},{"doc":"* [belongs_to_actor](#paper_trail-belongs_to_actor)","ref":"dsl-ashpapertrail-resource.html#nested-dsls","title":"Nested DSLs - DSL: AshPaperTrail.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`attributes_as_attributes`](#paper_trail-attributes_as_attributes){: #paper_trail-attributes_as_attributes } | `list(atom)` | `[]` | A set of attributes that should be set as attributes on the version resource, instead of stored in the freeform `changes` map attribute. |\n| [`change_tracking_mode`](#paper_trail-change_tracking_mode){: #paper_trail-change_tracking_mode } | `:snapshot \\| :changes_only \\| :full_diff` | `:snapshot` | Changes are stored in a map attribute called `changes`.  The `change_tracking_mode` determines what's stored. See the getting started guide for more. |\n| [`ignore_attributes`](#paper_trail-ignore_attributes){: #paper_trail-ignore_attributes } | `list(atom)` | `[]` | A list of attributes that should be ignored. Typically you'll want to ignore your timestamps. The primary key is always ignored. |\n| [`mixin`](#paper_trail-mixin){: #paper_trail-mixin } | `atom \\| mfa` |  | A module that defines a `using` macro or {module, function, arguments} tuple that will be mixed into the version resource. |\n| [`on_actions`](#paper_trail-on_actions){: #paper_trail-on_actions } | `list(atom)` |  | Which actions should produce new versions. By default, all create/update actions will produce new versions. |\n| [`reference_source?`](#paper_trail-reference_source?){: #paper_trail-reference_source? } | `boolean` | `true` | Whether or not to create a foreign key reference from the version to the source.  This should be set to `false` if you are allowing actual deletion of data. Only relevant for resources using the AshPostgres data layer. |\n| [`relationship_opts`](#paper_trail-relationship_opts){: #paper_trail-relationship_opts } | `keyword` |  | Options to pass to the has_many :paper_trail_versions relationship that is created on this resource. For example, `public?: true` to expose the relationship over graphql. See `d:Ash.Resource.Dsl.relationships.has_many`. |\n| [`store_action_name?`](#paper_trail-store_action_name?){: #paper_trail-store_action_name? } | `boolean` | `false` | Whether or not to add the `version_action_name` attribute to the  version resource. This is useful for auditing purposes. The `version_action_type` attribute is always stored. |\n| [`version_extensions`](#paper_trail-version_extensions){: #paper_trail-version_extensions } | `keyword` | `[]` | Extensions that should be used by the version resource. For example: `extensions: [AshGraphql.Resource], notifier: [Ash.Notifiers.PubSub]` |","ref":"dsl-ashpapertrail-resource.html#options","title":"Options - DSL: AshPaperTrail.Resource","type":"extras"},{"doc":"```elixir\nbelongs_to_actor name, destination\n```\n\n\nCreates a belongs_to relationship for the actor resource. When creating a new version, if the actor on the action is set and\nmatches the resource type, the version will be related to the actor. If your actors are polymorphic or varying types, declare a\nbelongs_to_actor for each type.\n\nA reference is also created with `on_delete: :nilify` and `on_update: :update`\n\nIf you need more complex relationships, set `define_attribute? false` and add the relationship via a mixin.\n\nIf your actor is not a resource, add a mixin and with a change for all creates that sets the actor's to one your attributes.\nThe actor on the version changeset is set.","ref":"dsl-ashpapertrail-resource.html#paper_trail-belongs_to_actor","title":"paper_trail.belongs_to_actor - DSL: AshPaperTrail.Resource","type":"extras"},{"doc":"```\nbelongs_to_actor :user, MyApp.Users.User, domain: MyApp.Users\n```","ref":"dsl-ashpapertrail-resource.html#examples","title":"Examples - DSL: AshPaperTrail.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`name`](#paper_trail-belongs_to_actor-name){: #paper_trail-belongs_to_actor-name .spark-required} | `atom` |  | The name of the relationship to use for the actor (e.g. :user) |\n| [`destination`](#paper_trail-belongs_to_actor-destination){: #paper_trail-belongs_to_actor-destination } | `module` |  | The resource of the actor (e.g. MyApp.Users.User) |","ref":"dsl-ashpapertrail-resource.html#arguments","title":"Arguments - DSL: AshPaperTrail.Resource","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`allow_nil?`](#paper_trail-belongs_to_actor-allow_nil?){: #paper_trail-belongs_to_actor-allow_nil? } | `boolean` | `true` | Whether this relationship must always be present, e.g: must be included on creation, and never removed (it may be modified). The generated attribute will not allow nil values. |\n| [`domain`](#paper_trail-belongs_to_actor-domain){: #paper_trail-belongs_to_actor-domain } | `atom` |  | The Domain module to use when working with the related entity. |\n| [`attribute_type`](#paper_trail-belongs_to_actor-attribute_type){: #paper_trail-belongs_to_actor-attribute_type } | `any` | `:uuid` | The type of the generated created attribute. See `Ash.Type` for more. |\n| [`public?`](#paper_trail-belongs_to_actor-public?){: #paper_trail-belongs_to_actor-public? } | `boolean` | `false` | Whether this relationship should be included in public interfaces |\n| [`define_attribute?`](#paper_trail-belongs_to_actor-define_attribute?){: #paper_trail-belongs_to_actor-define_attribute? } | `boolean` | `true` | If set to `false` an attribute is not created on the resource for this relationship, and one must be manually added in `attributes`, invalidating many other options. |","ref":"dsl-ashpapertrail-resource.html#options","title":"Options - DSL: AshPaperTrail.Resource","type":"extras"},{"doc":"Target: `AshPaperTrail.Resource.BelongsToActor`\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ashpapertrail-resource.html#introspection","title":"Introspection - DSL: AshPaperTrail.Resource","type":"extras"},{"doc":"<!--\nThis file was generated by Spark. Do not edit it by hand.\n-->\n# DSL: AshPaperTrail.Domain\n\nDocumentation for `AshPaperTrail.Domain`.","ref":"dsl-ashpapertrail-domain.html","title":"DSL: AshPaperTrail.Domain","type":"extras"},{"doc":"A section for configuring paper_trail behavior at the domain level.","ref":"dsl-ashpapertrail-domain.html#paper_trail","title":"paper_trail - DSL: AshPaperTrail.Domain","type":"extras"},{"doc":"| Name | Type | Default | Docs |\n|------|------|---------|------|\n| [`include_versions?`](#paper_trail-include_versions?){: #paper_trail-include_versions? } | `boolean` | `false` | Automatically include all version resources in the domain. |\n\n\n\n\n\n\n\n .spark-required::after { content: \"*\"; color: red !important; }","ref":"dsl-ashpapertrail-domain.html#options","title":"Options - DSL: AshPaperTrail.Domain","type":"extras"},{"doc":"# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](Https://conventionalcommits.org) for commit guidelines.\n\n<!-- changelog -->\n\n## [v0.1.4](https://github.com/ash-project/ash_paper_trail/compare/v0.1.3...v0.1.4) (2024-07-10)","ref":"changelog.html","title":"Change Log","type":"extras"},{"doc":"* use `String.to_atom/1` instead of `to_existing_atom`\n\n## [v0.1.3](https://github.com/ash-project/ash_paper_trail/compare/v0.1.2...v0.1.3) (2024-07-10)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* fix bulk destroy handling\n\n* Check if `Ash.Domain` requires authorization (#82)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* pick new values off of result\n\n* allow opts to be passed to the generated relationship (#92)\n\n* add `include_versions?` option\n\n* add `atomic/3` callback to `CreateNewVersion`\n\n* set context that can be used in policies\r\n\n## [v0.1.2](https://github.com/ash-project/ash_paper_trail/compare/v0.1.2-rc.0...v0.1.2) (2024-05-10)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"* fix tenant attribute must allow_nil?: true (#56)\n\n* Replace private in AshPaperTrail.Resource.Changes.CreateNewVersion with public (#54)\n\n## [v0.1.2-rc.0](https://github.com/ash-project/ash_paper_trail/compare/v0.1.1...v0.1.2-rc.0) (2024-03-30)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* update to Ash 3.0\n\n## [v0.1.1](https://github.com/ash-project/ash_paper_trail/compare/v0.1.0...v0.1.1) (2024-03-30)","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"},{"doc":"* correctly carry over first primary key attribute type and constraints (#36)\n\n* carry over first primary key attribute type and constraints\n\n## [v0.1.0](https://github.com/ash-project/ash_paper_trail/compare/v0.1.0...v0.1.0) (2024-01-31)","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* remove defaults for ignored_attributes (#27)","ref":"changelog.html#breaking-changes","title":"Breaking Changes: - Change Log","type":"extras"},{"doc":"* Full diff change tracking mode (#18)","ref":"changelog.html#features","title":"Features: - Change Log","type":"extras"},{"doc":"* Honour upstream attribute constraints. (#31)\n\n* properly set added relationship sources\n\n* take only existing attributes for private attributes\n\n* update deps and fix introspection","ref":"changelog.html#bug-fixes","title":"Bug Fixes: - Change Log","type":"extras"},{"doc":"* belongs_to_actor (#16)\n\n* add store_action_name option (#14)\n\n* support embedded resources (#10)\n\n* use api resources or registry (#6)\n\n* update to latest ash and use new docs\n\n* flesh out options/tools\n\n* make it all work, add some tests","ref":"changelog.html#improvements","title":"Improvements: - Change Log","type":"extras"}],"producer":{"name":"ex_doc","version":[48,46,51,52,46,50]}}