searchData={"items":[{"type":"module","title":"Iter","doc":"Functions for working with iterators.\n\nAn iterator is a struct that wraps any value which implements the\n`Iter.Iterable` protocol. Lists, maps and ranges are all common data types\nwhich can be used as iterators.","ref":"Iter.html"},{"type":"module","title":"Explicit conversion - Iter","doc":"Whilst the `Iter.Iterable` protocol is designed to work with many different\ntypes, you must explicitly convert your iterables into an iterator using\n`Iter.from/1`.  This allows for easy pattern matching of iterators as well as\nfor default implementations of Elixir's `Enum` and `Collectable` protocols.\n\nAny value passed to `Iter.from/1` must implement the `Iter.IntoIterable`\nprotocol.","ref":"Iter.html#module-explicit-conversion"},{"type":"module","title":"Lazy by default - Iter","doc":"Like Elixir's `Stream`, an `Iter` is lazy by default.  Any function which\nreturns an `Iter.t` does so by simply composing iterables on top of each\nother.  No iteration is performed until it is needed, and then only the\nminimum amount needed to return the result.","ref":"Iter.html#module-lazy-by-default"},{"type":"function","title":"Iter.all?/1","doc":"Returns `true` if all elements in the iterator are truthy.","ref":"Iter.html#all?/1"},{"type":"function","title":"Examples - Iter.all?/1","doc":"iex> [1, 2, false]\n    ...> |> Iter.from()\n    ...> |> Iter.all?()\n    false\n\n    iex> [1, 2, nil]\n    ...> |> Iter.from()\n    ...> |> Iter.all?()\n    false\n\n    iex> [1, 2, 3]\n    ...> |> Iter.from()\n    ...> |> Iter.all?()\n    true","ref":"Iter.html#all?/1-examples"},{"type":"function","title":"Iter.all?/2","doc":"Returns `true` if `fun.(element)` is truthy for all elements in the iterator.\n\nIterates over the iterator and invokes `fun` on each element. If `fun` ever\nreturns a falsy value (`false` or `nil`), iteration stops immediately and\n`false` is returned.  Otherwise `true` is returned.","ref":"Iter.html#all?/2"},{"type":"function","title":"Examples - Iter.all?/2","doc":"iex> [2, 4, 6]\n    ...> |> Iter.from()\n    ...> |> Iter.all?(&(rem(&1, 2) == 0))\n    true\n\n    iex> [2, 3, 4]\n    ...> |> Iter.from()\n    ...> |> Iter.all?(&(rem(&1, 2) == 0))\n    false\n\n    iex> []\n    ...> |> Iter.from()\n    ...> |> Iter.all?()\n    true","ref":"Iter.html#all?/2-examples"},{"type":"function","title":"Iter.any?/1","doc":"Returns `true` if at least one element in the iterator is truthy.\n\nWhen an element is a truthy value (neither `false` nor `nil`) iteration stops\nimmediately and `true` is returned.  In all other cases `false` is returned.","ref":"Iter.html#any?/1"},{"type":"function","title":"Examples - Iter.any?/1","doc":"iex> [false, false, false]\n    ...> |> Iter.from()\n    ...> |> Iter.any?()\n    false\n\n    iex> [false, true, false]\n    ...> |> Iter.from()\n    ...> |> Iter.any?()\n    true\n\n    iex> []\n    ...> |> Iter.from()\n    ...> |> Iter.any?()\n    false","ref":"Iter.html#any?/1-examples"},{"type":"function","title":"Iter.any?/2","doc":"Returns `true` if `fun.(element)` is truthy for at least one element in the\niterator.\n\nConsumes the iterator and invokes `fun` on each element.  When an invocation\nof `fun` returns a truthy value (neither `false` nor `nil`) iteration stops\nimmediately and `true` is returned.  In all other cases `false` is returned.","ref":"Iter.html#any?/2"},{"type":"function","title":"Examples - Iter.any?/2","doc":"iex> [2, 4, 6]\n    ...> |> Iter.from()\n    ...> |> Iter.any?(&(rem(&1, 2) == 1))\n    false\n\n    iex> [2, 3, 4]\n    ...> |> Iter.from()\n    ...> |> Iter.any?(&(rem(&1, 2) == 1))\n    true\n\n    iex> []\n    ...> |> Iter.from()\n    ...> |> Iter.any?(&(rem(&1, 2) == 1))\n    false","ref":"Iter.html#any?/2-examples"},{"type":"function","title":"Iter.append/2","doc":"Append a new element to the end of the iterable.","ref":"Iter.html#append/2"},{"type":"function","title":"Example - Iter.append/2","doc":"iex> 1..3\n    ...> |> Iter.from()\n    ...> |> Iter.append(4)\n    ...> |> Iter.to_list()\n    [1, 2, 3, 4]","ref":"Iter.html#append/2-example"},{"type":"function","title":"Iter.at/2","doc":"Return the element `index` items from the beginning of the iterator.\n\nWorks by advancing the iterator the specified number of elements and then\nreturning the element requested and an iterator of the remaining elements.","ref":"Iter.html#at/2"},{"type":"function","title":"Return values - Iter.at/2","doc":"- `{:ok, element, new_iterator}` - the element requested and the iterator of\n  the remaining elements.\n- `:done` - the iterator was exhausted before the element was found.","ref":"Iter.html#at/2-return-values"},{"type":"function","title":"Examples - Iter.at/2","doc":"iex> 10..20\n    ...> |> Iter.from()\n    ...> |> Iter.at(5)\n    {:ok, 15, Iter.from(16..20)}","ref":"Iter.html#at/2-examples"},{"type":"function","title":"Iter.chunk_by/2","doc":"Chunks the iterator by buffering elements for which `fun` returns the same\nvalue.\n\nElements are only emitted when `fun` returns a new value or `iterable` is\nexhausted.","ref":"Iter.html#chunk_by/2"},{"type":"function","title":"Examples - Iter.chunk_by/2","doc":"iex> [1, 2, 2, 3, 4, 4, 6, 7, 7]\n    ...> |> Iter.from()\n    ...> |> Iter.chunk_by(&(rem(&1, 2) == 1))\n    ...> |> Iter.to_list()\n    [[1], [2, 2], [3], [4, 4, 6], [7, 7]]","ref":"Iter.html#chunk_by/2-examples"},{"type":"function","title":"Iter.chunk_every/2","doc":"Shortcut to `chunk_every(iterable, count, count)`.","ref":"Iter.html#chunk_every/2"},{"type":"function","title":"Iter.chunk_every/3","doc":"Consumes the iterator in chunks, containing `count` elements each, where each\nnew chunk steps `step` elements into the iterator.\n\n`step` is optional and, if not passed defaults to `count`, i.e. chunks do not\noverlap.  Chunking will stop as soon as the iterable is exhausted or when we\nemit an incomplete chunk.\n\nIf the last chunk does not have `chunk` elements to fill the chunk, elements\nare taken from `leftover` to fill in the chunk, if `leftover` does not have\nenough elements to fill the chunk, then a partial chunk is returned with less\nthan `count` elements.\n\nIf `:discard` is given in `leftover` the last chunk is discarded unless it has\nexactly `count` elements.","ref":"Iter.html#chunk_every/3"},{"type":"function","title":"Examples - Iter.chunk_every/3","doc":"iex> [a, b, c] = [1, 2, 3, 4, 5, 6]\n    ...> |> Iter.from()\n    ...> |> Iter.chunk_every(2)\n    ...> |> Iter.to_list()\n    iex> Iter.to_list(a)\n    [1, 2]\n    iex> Iter.to_list(b)\n    [3, 4]\n    iex> Iter.to_list(c)\n    [5, 6]\n\n    iex> [a, b] = [1, 2, 3, 4, 5, 6]\n    ...> |> Iter.from()\n    ...> |> Iter.chunk_every(3, 2, :discard)\n    ...> |> Iter.to_list()\n    iex> Iter.to_list(a)\n    [1, 2, 3]\n    iex> Iter.to_list(b)\n    [3, 4, 5]\n\n    iex> [a, b, c] = [1, 2, 3, 4, 5, 6]\n    ...> |> Iter.from()\n    ...> |> Iter.chunk_every(3, 2, [7] |> Iter.from())\n    ...> |> Iter.to_list()\n    iex> Iter.to_list(a)\n    [1, 2, 3]\n    iex> Iter.to_list(b)\n    [3, 4, 5]\n    iex> Iter.to_list(c)\n    [5, 6, 7]\n\n    iex> [a, b] = [1, 2, 3, 4, 5, 6]\n    ...> |> Iter.from()\n    ...> |> Iter.chunk_every(3, 3, [] |> Iter.from())\n    ...> |> Iter.to_list()\n    iex> Iter.to_list(a)\n    [1, 2, 3]\n    iex> Iter.to_list(b)\n    [4, 5, 6]\n\n    iex> [a, b] = [1, 2, 3, 4]\n    ...> |> Iter.from()\n    ...> |> Iter.chunk_every(3, 3, [0] |> Iter.from() |> Iter.cycle())\n    ...> |> Iter.to_list()\n    iex> Iter.to_list(a)\n    [1, 2, 3]\n    iex> Iter.to_list(b)\n    [4, 0, 0]","ref":"Iter.html#chunk_every/3-examples"},{"type":"function","title":"Iter.chunk_every/4","doc":"","ref":"Iter.html#chunk_every/4"},{"type":"function","title":"Iter.chunk_while/4","doc":"Chunks the iterator with fine grained control of when every chunk is emitted.\n\n`chunk_fun` receives the current element and the accumulator and must return\n`{:cont, element, acc}` to emit the given chunk and continue with accumulator\nor `{:cont, acc}` to not emit any chunk and continue with the return\naccumulator.\n\n`after_fun` is invoked when iteration is done and must also return `{:cont,\nelement, acc}` or `{:cont, acc}`.","ref":"Iter.html#chunk_while/4"},{"type":"function","title":"Examples - Iter.chunk_while/4","doc":"iex> chunk_fun = fn element, acc ->\n    ...>   if rem(element, 2) == 0 do\n    ...>     {:cont, Enum.reverse([element | acc]), []}\n    ...>   else\n    ...>     {:cont, [element | acc]}\n    ...>   end\n    ...> end\n    iex> after_fun = fn\n    ...>   [] -> {:cont, []}\n    ...>   acc -> {:cont, Enum.reverse(acc), []}\n    ...> end\n    iex> 1..10\n    ...> |> Iter.from()\n    ...> |> Iter.chunk_while([], chunk_fun, after_fun)\n    ...> |> Iter.to_list()\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]","ref":"Iter.html#chunk_while/4-examples"},{"type":"function","title":"Iter.concat/1","doc":"Creates an iterator that concatenates an iterator of iterators.","ref":"Iter.html#concat/1"},{"type":"function","title":"Example - Iter.concat/1","doc":"iex> [Iter.from(1..2), Iter.from(3..4)]\n    ...> |> Iter.from()\n    ...> |> Iter.concat()\n    ...> |> Iter.to_list()\n    [1, 2, 3, 4]","ref":"Iter.html#concat/1-example"},{"type":"function","title":"Iter.concat/2","doc":"Creates an iterator that iterates the first argument, followed by the second argument.","ref":"Iter.html#concat/2"},{"type":"function","title":"Example - Iter.concat/2","doc":"iex> lhs = Iter.from(1..3)\n    ...> rhs = Iter.from(4..6)\n    ...> Iter.concat(lhs, rhs) |> Iter.to_list()\n    [1, 2, 3, 4, 5, 6]","ref":"Iter.html#concat/2-example"},{"type":"function","title":"Iter.count/1","doc":"Count the number of elements remaining in the iterator.\n\nSome iterators can be counted without consuming the iterator, but most cannot\nand you should consider the iterator passed to this function as having been\nexhausted.","ref":"Iter.html#count/1"},{"type":"function","title":"Example - Iter.count/1","doc":"iex> 1..10\n    ...> |> Iter.from()\n    ...> |> Iter.count()\n    10","ref":"Iter.html#count/1-example"},{"type":"function","title":"Iter.count/2","doc":"Count the number of elements for which `fun` returns a truthy value.","ref":"Iter.html#count/2"},{"type":"function","title":"Example - Iter.count/2","doc":"iex> 1..5\n    ...> |> Iter.from()\n    ...> |> Iter.count(&(rem(&1, 2) == 0))\n    2","ref":"Iter.html#count/2-example"},{"type":"function","title":"Iter.count_until/2","doc":"Counts the elements in iterator stopping at `limit`.","ref":"Iter.html#count_until/2"},{"type":"function","title":"Examples - Iter.count_until/2","doc":"iex> 1..20\n    ...> |> Iter.from()\n    ...> |> Iter.count_until(5)\n    {:ok, 5, Iter.from(6..20)}\n\n    iex> 1..3\n    ...> |> Iter.from()\n    ...> |> Iter.count_until(5)\n    {:ok, 3, Iter.empty()}\n\n    iex> []\n    ...> |> Iter.from()\n    ...> |> Iter.count_until(5)\n    {:ok, 0, Iter.empty()}","ref":"Iter.html#count_until/2-examples"},{"type":"function","title":"Iter.count_until/3","doc":"Counts the elements of iterator for which `predicate` returns a truthy value, stopping at `limit`.","ref":"Iter.html#count_until/3"},{"type":"function","title":"Examples - Iter.count_until/3","doc":"iex> 1..20\n    ...> |> Iter.from()\n    ...> |> Iter.count_until(&(rem(&1, 2) == 0), 7)\n    {:ok, 7, Iter.from(15..20)}\n\n    iex> 1..20\n    ...> |> Iter.from()\n    ...> |> Iter.count_until(&(rem(&1, 2) == 0), 11)\n    {:ok, 10, Iter.empty()}","ref":"Iter.html#count_until/3-examples"},{"type":"function","title":"Iter.cycle/1","doc":"Create an iterator that cycles it's elements eternally.\n\n    iex> [:a, :b, :c]\n    ...> |> Iter.from()\n    ...> |> Iter.cycle()\n    ...> |> Iter.take(5)\n    ...> |> Iter.to_list()\n    [:a, :b, :c, :a, :b]","ref":"Iter.html#cycle/1"},{"type":"function","title":"Iter.dedup/1","doc":"Remove consecutive duplicate elements from the iterator.","ref":"Iter.html#dedup/1"},{"type":"function","title":"Example - Iter.dedup/1","doc":"iex> [1, 1, 2, 3, 3, 4, 5, 4]\n    ...> |> Iter.from()\n    ...> |> Iter.dedup()\n    ...> |> Iter.to_list()\n    [1, 2, 3, 4, 5, 4]","ref":"Iter.html#dedup/1-example"},{"type":"function","title":"Iter.dedup_by/2","doc":"Remove consecutive elements for which `fun` returns duplicate values from the iterator.","ref":"Iter.html#dedup_by/2"},{"type":"function","title":"Example - Iter.dedup_by/2","doc":"iex> [{1, :a}, {2, :b}, {2, :c}, {1, :a}]\n  ...> |> Iter.from()\n  ...> |> Iter.dedup_by(&elem(&1, 0))\n  ...> |> Iter.to_list()\n  [{1, :a}, {2, :b}, {1, :a}]","ref":"Iter.html#dedup_by/2-example"},{"type":"function","title":"Iter.drop/2","doc":"Returns a new iterator which drops the first `how_many` elements.","ref":"Iter.html#drop/2"},{"type":"function","title":"Examples - Iter.drop/2","doc":"iex> 1..3\n    ...> |> Iter.from()\n    ...> |> Iter.drop(2)\n    ...> |> Iter.to_list()\n    [3]","ref":"Iter.html#drop/2-examples"},{"type":"function","title":"Iter.drop_every/2","doc":"Returns a new iterator with every `nth` element in the iterator dropped,\nstarting with the first element.","ref":"Iter.html#drop_every/2"},{"type":"function","title":"Examples - Iter.drop_every/2","doc":"iex> 1..10\n    ...> |> Iter.from()\n    ...> |> Iter.drop_every(2)\n    ...> |> Iter.to_list()\n    [2, 4, 6, 8, 10]\n\n    iex> 1..10\n    ...> |> Iter.from()\n    ...> |> Iter.drop_every(0)\n    ...> |> Iter.to_list()\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    iex> [1, 2, 3]\n    ...> |> Iter.from()\n    ...> |> Iter.drop_every(1)\n    ...> |> Iter.to_list()\n    []","ref":"Iter.html#drop_every/2-examples"},{"type":"function","title":"Iter.drop_while/2","doc":"Returns a new iterator which drops elements at the beginning of the iterator\nuntil `predicate` returns a truthy value.","ref":"Iter.html#drop_while/2"},{"type":"function","title":"Example - Iter.drop_while/2","doc":"iex> [1, 2, 3, 2, 1]\n    ...> |> Iter.from()\n    ...> |> Iter.drop_while(&(&1 < 3))\n    ...> |> Iter.to_list()\n    [3, 2, 1]","ref":"Iter.html#drop_while/2-example"},{"type":"function","title":"Iter.each/2","doc":"Call `fun` for every element in the iterator.\n\nThe return value is not used.","ref":"Iter.html#each/2"},{"type":"function","title":"Example - Iter.each/2","doc":"```elixir\n[\"marty\", \"doc\"]\n|> Iter.from()\n|> Iter.each(&IO.puts/1)\n\"marty\"\n\"doc\"\n#=> :done\n```","ref":"Iter.html#each/2-example"},{"type":"function","title":"Iter.empty/0","doc":"Returns an iterator that contains no elements.","ref":"Iter.html#empty/0"},{"type":"function","title":"Example - Iter.empty/0","doc":"iex> Iter.empty()\n    ...> |> Iter.to_list()\n    []","ref":"Iter.html#empty/0-example"},{"type":"function","title":"Iter.empty?/1","doc":"Determines if the iterator is empty.","ref":"Iter.html#empty?/1"},{"type":"function","title":"Examples - Iter.empty?/1","doc":"iex> Iter.empty()\n    ...> |> Iter.empty?()\n    true\n\n    iex> 1..20\n    ...> |> Iter.from()\n    ...> |> Iter.empty?\n    false","ref":"Iter.html#empty?/1-examples"},{"type":"function","title":"Iter.filter/2","doc":"Remove elements for which `predicate` returns a truthy value.","ref":"Iter.html#filter/2"},{"type":"function","title":"Example - Iter.filter/2","doc":"iex> [1, 2, 3, 4]\n    ...> |> Iter.from()\n    ...> |> Iter.filter(&(rem(&1, 2) == 0))\n    ...> |> Iter.to_list()\n    [2, 4]","ref":"Iter.html#filter/2-example"},{"type":"function","title":"Iter.find/2","doc":"Searches for the first element in the iterator which matches `predicate`.","ref":"Iter.html#find/2"},{"type":"function","title":"Example - Iter.find/2","doc":"iex> [1, 2, 3, 4, 5]\n    ...> |> Iter.from()\n    ...> |> Iter.find(&(&1 > 3))\n    {:ok, 4, Iter.from([5])}\n\n    iex> [1, 2, 3]\n    ...> |> Iter.from()\n    ...> |> Iter.find(&(&1 > 4))\n    :done","ref":"Iter.html#find/2-example"},{"type":"function","title":"Iter.find_index/2","doc":"Finds the index of the first value in the iterator that matches `predicate`.","ref":"Iter.html#find_index/2"},{"type":"function","title":"Example - Iter.find_index/2","doc":"iex> [1, 2, 3, 4, 5]\n    ...> |> Iter.from()\n    ...> |> Iter.find_index(&(&1 > 3))\n    {:ok, 3, Iter.from([5])}","ref":"Iter.html#find_index/2-example"},{"type":"function","title":"Iter.find_value/2","doc":"Similar to `find/3`, but returns the value of the function invocation instead\nof the element itself.","ref":"Iter.html#find_value/2"},{"type":"function","title":"Example - Iter.find_value/2","doc":"iex> [2, 3, 4]\n    ...> |> Iter.from()\n    ...> |> Iter.find_value(fn x ->\n    ...>   if x > 2, do: x * x\n    ...> end)\n    {:ok, 9, Iter.from([4])}\n\n    iex> [2, 4, 6]\n    ...> |> Iter.from()\n    ...> |> Iter.find_value(&(rem(&1, 2) == 1))\n    :done\n\n    iex> [2, 3, 4]\n    ...> |> Iter.from()\n    ...> |> Iter.find_value(&(rem(&1, 2) == 1))\n    {:ok, true, Iter.from([4])}","ref":"Iter.html#find_value/2-example"},{"type":"function","title":"Iter.flat_map/2","doc":"Maps `fun` over the iterator flattening the result.","ref":"Iter.html#flat_map/2"},{"type":"function","title":"Example - Iter.flat_map/2","doc":"iex> [:a, :b, :c]\n    ...> |> Iter.from()\n    ...> |> Iter.flat_map(&Iter.from([&1, &1]))\n    ...> |> Iter.to_list()\n    [:a, :a, :b, :b, :c, :c]","ref":"Iter.html#flat_map/2-example"},{"type":"function","title":"Iter.flatten/1","doc":"Flattens nested iterators.","ref":"Iter.html#flatten/1"},{"type":"function","title":"Example - Iter.flatten/1","doc":"iex> [[:a, :a], [:b, :b], [:c, :c]]\n    ...> |> Iter.from()\n    ...> |> Iter.flatten()\n    ...> |> Iter.to_list()\n    [:a, :a, :b, :b, :c, :c]","ref":"Iter.html#flatten/1-example"},{"type":"function","title":"Iter.from/1","doc":"Convert anything that implements `Iter.IntoIterable` into an `Iter`.","ref":"Iter.html#from/1"},{"type":"function","title":"Iter.from_enum/1","doc":"Convert an `Enumerable` into an `Iter`.\n\nProvides an `Enumerable` compatible source for `Iter` using a `GenServer` to\norchestrate reduction and block as required.\n\n> #### Warning {: .warning}\n> You should almost always implement `IntoIterable` for your enumerable and\n> use `from/1` rather than resort to calling this function.  Unfortunately it\n> cannot always be avoided.","ref":"Iter.html#from_enum/1"},{"type":"function","title":"Iter.intersperse/2","doc":"Intersperses `separator` between each element of the iterator.","ref":"Iter.html#intersperse/2"},{"type":"function","title":"Examples - Iter.intersperse/2","doc":"iex> 1..3\n    ...> |> Iter.from()\n    ...> |> Iter.intersperse(0)\n    ...> |> Iter.to_list()\n    [1, 0, 2, 0, 3]\n\n    iex> [1]\n    ...> |> Iter.from()\n    ...> |> Iter.intersperse(0)\n    ...> |> Iter.to_list()\n    [1]\n\n    iex> []\n    ...> |> Iter.from()\n    ...> |> Iter.intersperse(0)\n    ...> |> Iter.to_list()\n    []","ref":"Iter.html#intersperse/2-examples"},{"type":"macro","title":"Iter.is_iter/1","doc":"Is the passed value an iterator?","ref":"Iter.html#is_iter/1"},{"type":"function","title":"Iter.iterate/2","doc":"Emits a sequence of values, starting with `start_value`. Successive values are\ngenerated by calling `next_fun` on the previous value.\n\n    iex> Iter.iterate(0, &(&1 + 1))\n    ...> |> Iter.take(5)\n    ...> |> Iter.to_list()\n    [0, 1, 2, 3, 4]","ref":"Iter.html#iterate/2"},{"type":"function","title":"Iter.map/2","doc":"Apply `fun` to each element in the iterator and collect the result.","ref":"Iter.html#map/2"},{"type":"function","title":"Example - Iter.map/2","doc":"iex> [1, 2, 3, 4]\n    ...> |> Iter.from()\n    ...> |> Iter.map(&(&1 * 2))\n    ...> |> Iter.to_list()\n    [2, 4, 6, 8]","ref":"Iter.html#map/2-example"},{"type":"function","title":"Iter.map_every/3","doc":"Creates a new iterator which applies `mapper` on every `nth` element of the\niterator, starting with the first element.\n\nThe first element is always mapped unless `nth` is `0`.","ref":"Iter.html#map_every/3"},{"type":"function","title":"Examples - Iter.map_every/3","doc":"iex> 1..10\n    ...> |> Iter.from()\n    ...> |> Iter.map_every(2, fn x -> x + 1000 end)\n    ...> |> Iter.to_list()\n    [1001, 2, 1003, 4, 1005, 6, 1007, 8, 1009, 10]\n\n    iex> 1..10\n    ...> |> Iter.from()\n    ...> |> Iter.map_every(3, fn x -> x + 1000 end)\n    ...> |> Iter.to_list()\n    [1001, 2, 3, 1004, 5, 6, 1007, 8, 9, 1010]\n\n    iex> 1..5\n    ...> |> Iter.from()\n    ...> |> Iter.map_every(0, fn x -> x + 1000 end)\n    ...> |> Iter.to_list()\n    [1, 2, 3, 4, 5]\n\n    iex> 1..3\n    ...> |> Iter.from()\n    ...> |> Iter.map_every(1, fn x -> x + 1000 end)\n    ...> |> Iter.to_list()\n    [1001, 1002, 1003]","ref":"Iter.html#map_every/3-examples"},{"type":"function","title":"Iter.max/2","doc":"Returns the maximal element in the iterator according to Erlang's term sorting.","ref":"Iter.html#max/2"},{"type":"function","title":"Example - Iter.max/2","doc":"iex> [1, 4, 3, 2]\n    ...> |> Iter.from()\n    ...> |> Iter.max()\n    {:ok, 4}\n\n    iex> Iter.empty()\n    ...> |> Iter.max()\n    :done","ref":"Iter.html#max/2-example"},{"type":"function","title":"Iter.max_by/3","doc":"Returns the maximal element in the iterator as calculated by `mapper`.","ref":"Iter.html#max_by/3"},{"type":"function","title":"Example - Iter.max_by/3","doc":"iex> [\"a\", \"aa\", \"aaa\"]\n    ...> |> Iter.from()\n    ...> |> Iter.max_by(&String.length/1)\n    {:ok, \"aaa\"}\n\n    iex> Iter.empty()\n    ...> |> Iter.max_by(&String.length/1)\n    :done","ref":"Iter.html#max_by/3-example"},{"type":"function","title":"Iter.member?/2","doc":"Checks if `element` is a member of `iterable`.","ref":"Iter.html#member?/2"},{"type":"function","title":"Examples - Iter.member?/2","doc":"iex> 1..5\n    ...> |> Iter.from()\n    ...> |> Iter.member?(3)\n    true\n\n    iex> 1..5\n    ...> |> Iter.from()\n    ...> |> Iter.member?(6)\n    false","ref":"Iter.html#member?/2-examples"},{"type":"function","title":"Iter.min/2","doc":"Returns the minimal element in the iterator according to Erlang's term sorting.","ref":"Iter.html#min/2"},{"type":"function","title":"Example - Iter.min/2","doc":"iex> [1, 4, 3, 2]\n    ...> |> Iter.from()\n    ...> |> Iter.min()\n    {:ok, 1}","ref":"Iter.html#min/2-example"},{"type":"function","title":"Iter.min_by/3","doc":"Returns the minimal element in the iterator as calculated by `mapper`.","ref":"Iter.html#min_by/3"},{"type":"function","title":"Example - Iter.min_by/3","doc":"iex> [\"a\", \"aa\", \"aaa\"]\n    ...> |> Iter.from()\n    ...> |> Iter.min_by(&String.length/1)\n    {:ok, \"a\"}\n\n    iex> Iter.empty()\n    ...> |> Iter.min_by(&String.length/1)\n    :done","ref":"Iter.html#min_by/3-example"},{"type":"function","title":"Iter.min_max/1","doc":"Returns the minimal and maximal element in the iterator according to Erlang's\nterm ordering.","ref":"Iter.html#min_max/1"},{"type":"function","title":"Example - Iter.min_max/1","doc":"iex> [2, 3, 1]\n    ...> |> Iter.from()\n    ...> |> Iter.min_max()\n    {:ok, 1, 3}\n\n    iex> Iter.empty()\n    ...> |> Iter.min_max()\n    :done","ref":"Iter.html#min_max/1-example"},{"type":"function","title":"Iter.next/1","doc":"Advance the iterator and return the next value.","ref":"Iter.html#next/1"},{"type":"function","title":"Return values - Iter.next/1","doc":"- `{:ok, element, new_iterator}` - returns the next element and an updated iterator.\n  - `:done` - the iterator is exhausted.","ref":"Iter.html#next/1-return-values"},{"type":"function","title":"Iter.peek/1","doc":"Peeks at the first element of the iterator, without consuming it.\n\n> #### Warning {: .warning}\n> Many iterators cannot be peeked, so this function simulates peeking by\n> consuming an element from the iterator and returning a new iterator which\n> pushes that element back onto the front.","ref":"Iter.html#peek/1"},{"type":"function","title":"Example - Iter.peek/1","doc":"iex> {:ok, 1, iter} = 1..3\n    ...> |> Iter.from()\n    ...> |> Iter.peek()\n    ...> Iter.to_list(iter)\n    [1, 2, 3]","ref":"Iter.html#peek/1-example"},{"type":"function","title":"Iter.peek/2","doc":"Peeks at the first `how_many` elements of the iterator, without consuming\nthem.\n\n> #### Warning {: .warning}\n> Many iterables cannot be peeked, so this function simulates peeking by\n> consuming elements from the iterator and returning a new iterator which\n> pushes those elements back on to the front.\n\nBecause it's possible to try and peek past the end of an iterator you\nshouldn't expect the number of elements returned to always be the same as how\nmany you asked for.  For this reason the return value includes the number of\nelements that were able to be peeked.","ref":"Iter.html#peek/2"},{"type":"function","title":"Example - Iter.peek/2","doc":"iex> {:ok, peeks, 3, iter} = 1..5\n    ...> |> Iter.from()\n    ...> |> Iter.peek(3)\n    iex> Iter.to_list(peeks)\n    [1, 2, 3]\n    iex> Iter.to_list(iter)\n    [1, 2, 3, 4, 5]\n\n    iex> {:ok, peeks, 3, iter} = 1..3\n    ...> |> Iter.from()\n    ...> |> Iter.peek(5)\n    iex> Iter.to_list(peeks)\n    [1, 2, 3]\n    iex> Iter.to_list(iter)\n    [1, 2, 3]","ref":"Iter.html#peek/2-example"},{"type":"function","title":"Iter.prepend/2","doc":"Prepend a new element to the beginning of the iterable.","ref":"Iter.html#prepend/2"},{"type":"function","title":"Example - Iter.prepend/2","doc":"iex> 1..3\n    ...> |> Iter.from()\n    ...> |> Iter.prepend(4)\n    ...> |> Iter.to_list()\n    [4, 1, 2, 3]","ref":"Iter.html#prepend/2-example"},{"type":"function","title":"Iter.reject/2","doc":"Keep elements for which `predicate` returns a truthy value.","ref":"Iter.html#reject/2"},{"type":"function","title":"Example - Iter.reject/2","doc":"iex> [1, 2, 3, 4]\n    ...> |> Iter.from()\n    ...> |> Iter.reject(&(rem(&1, 2) == 0))\n    ...> |> Iter.to_list()\n    [1, 3]","ref":"Iter.html#reject/2-example"},{"type":"function","title":"Iter.repeatedly/1","doc":"Returns an iterator generated by calling `generator_fun` repeatedly.","ref":"Iter.html#repeatedly/1"},{"type":"function","title":"Examples - Iter.repeatedly/1","doc":"# Although not necessary, let's seed the random algorithm\n    iex> :rand.seed(:exsss, {1, 2, 3})\n    iex> Iter.repeatedly(&:rand.uniform/0) |> Iter.take(3) |> Iter.to_list()\n    [0.5455598952593053, 0.6039309974353404, 0.6684893034823949]","ref":"Iter.html#repeatedly/1-examples"},{"type":"function","title":"Iter.resource/3","doc":"Create an iterator from a resource.\n\n    iex> Iter.resource(\n    ...>   fn ->\n    ...>     {:ok, pid} = StringIO.open(\"Marty\")\n    ...>     pid\n    ...>   end,\n    ...>   fn pid ->\n    ...>     case IO.read(pid, 1) do\n    ...>       :eof -> {:halt, pid}\n    ...>       char -> {[char], pid}\n    ...>     end\n    ...>   end,\n    ...>   fn pid ->\n    ...>     StringIO.close(pid)\n    ...>   end\n    ...> )\n    ...> |> Iter.to_list()\n    [\"M\", \"a\", \"r\", \"t\", \"y\"]","ref":"Iter.html#resource/3"},{"type":"function","title":"Iter.step_by/2","doc":"Creates an iterator starting at the same point, but stepping by `step_size`\neach iteration.\n\nThe first element of the iterator will always be returned, regardless of the step given.","ref":"Iter.html#step_by/2"},{"type":"function","title":"Examples - Iter.step_by/2","doc":"iex> 1..9\n      ...> |> Iter.from()\n      ...> |> Iter.step_by(3)\n      ...> |> Iter.to_list()\n      [1, 4, 7]","ref":"Iter.html#step_by/2-examples"},{"type":"function","title":"Iter.take/2","doc":"Takes the next `count` elements from the iterable and stops iteration.\n\nIf a negative count is given, the last count values will be taken. For such,\nthe collection is fully enumerated keeping up to `count` elements in memory.\nOnce the end of the collection is reached, the last `count` elements will be\niterated. Therefore, using a negative count on an infinite collection will\nnever return.\n\nThe rest of the underlying iterable is discarded.","ref":"Iter.html#take/2"},{"type":"function","title":"Examples - Iter.take/2","doc":"iex> Iter.empty()\n    ...> |> Iter.take(3)\n    ...> |> Iter.to_list()\n    []\n\n    iex> Iter.empty()\n    ...> |> Iter.take(-3)\n    ...> |> Iter.to_list()\n    []\n\n    iex> 1..5\n    ...> |> Iter.from()\n    ...> |> Iter.take(3)\n    ...> |> Iter.to_list()\n    [1, 2, 3]\n\n    iex> 1..5\n    ...> |> Iter.from()\n    ...> |> Iter.take(-3)\n    ...> |> Iter.to_list()\n    [3, 4, 5]","ref":"Iter.html#take/2-examples"},{"type":"function","title":"Iter.take_chunk/2","doc":"Collects the first `how_many` elements into a new iterator and returns it\nalong with the advanced initial iterator.\n\nThis is very much like `take/2` except that it returns the remaining iterator\nso that it can be called repeatedly.","ref":"Iter.html#take_chunk/2"},{"type":"function","title":"Example - Iter.take_chunk/2","doc":"iex> iter = Iter.from(1..9)\n    ...> {:ok, chunk_a, iter} = Iter.take_chunk(iter, 3)\n    ...> {:ok, chunk_b, remainder} = Iter.take_chunk(iter, 3)\n    ...> Iter.to_list(chunk_a)\n    [1, 2, 3]\n    iex> Iter.to_list(chunk_b)\n    [4, 5, 6]\n    iex> Iter.to_list(remainder)\n    [7, 8, 9]","ref":"Iter.html#take_chunk/2-example"},{"type":"function","title":"Iter.take_while/2","doc":"Creates an iterable which emits elements until `predicate` returns `false`.\n\nThe rest of the underlying iterable is discarded.","ref":"Iter.html#take_while/2"},{"type":"function","title":"Example - Iter.take_while/2","doc":"iex> 1..3\n    ...> |> Iter.from()\n    ...> |> Iter.take_while(&(&1 < 3))\n    ...> |> Iter.to_list()\n    [1, 2]","ref":"Iter.html#take_while/2-example"},{"type":"function","title":"Iter.to_list/1","doc":"Convert an iterator into a list.","ref":"Iter.html#to_list/1"},{"type":"function","title":"Iter.to_stream/1","doc":"Convert an iterator into an Elixir stream.","ref":"Iter.html#to_stream/1"},{"type":"function","title":"Example - Iter.to_stream/1","doc":"iex> [:a, :b, :c]\n    ...> |> Iter.from()\n    ...> |> Iter.cycle()\n    ...> |> Iter.to_stream()\n    ...> |> Enum.take(5)\n    [:a, :b, :c, :a, :b]","ref":"Iter.html#to_stream/1-example"},{"type":"function","title":"Iter.uniq/1","doc":"Creates a new iterator which returns only unique elements.\n\n> #### Warning {: .warning}\n> Except for specific data structures (eg `MapSet` and `Range`) most iterators\n> will need to store a set of \"seen values\" in order to provide this function.\n> In such cases memory usage will grow in direct relation to the number of\n> unique elements in the iterator.","ref":"Iter.html#uniq/1"},{"type":"function","title":"Example - Iter.uniq/1","doc":"iex> 1..5\n    ...> |> Iter.from()\n    ...> |> Iter.uniq()\n    Iter.from(1..5)\n\n    iex> [1, 2, 3, 2, 1]\n    ...> |> Iter.from()\n    ...> |> Iter.uniq()\n    ...> |> Iter.to_list()\n    [1, 2, 3]","ref":"Iter.html#uniq/1-example"},{"type":"function","title":"Iter.with_index/1","doc":"Creates a new iterator which replaces each element with a tuple containing the\noriginal element and the count of elements so far.","ref":"Iter.html#with_index/1"},{"type":"function","title":"Example - Iter.with_index/1","doc":"iex> 1..3\n    ...> |> Iter.from()\n    ...> |> Iter.with_index()\n    ...> |> Iter.to_list()\n    [{1, 0}, {2, 1}, {3, 2}]","ref":"Iter.html#with_index/1-example"},{"type":"function","title":"Iter.zip/1","doc":"Zips corresponding elements from a finite collection of iterators into one iterator of tuples.\n\nThe zipping finishes as soon as any iterable in the collection is exhausted.","ref":"Iter.html#zip/1"},{"type":"function","title":"Example - Iter.zip/1","doc":"iex> first = Iter.from(1..3)\n    ...> second = Iter.from([:a, :b, :c])\n    ...> third = Iter.from([\"a\", \"b\", \"c\"])\n    ...> [first, second, third]\n    ...> |> Iter.from()\n    ...> |> Iter.zip()\n    ...> |> Iter.to_list()\n    [{1, :a, \"a\"}, {2, :b, \"b\"}, {3, :c, \"c\"}]","ref":"Iter.html#zip/1-example"},{"type":"function","title":"Iter.zip/2","doc":"Zips to iterators together.\n\nThe zipping finishes as soon as either iterator is exhausted.","ref":"Iter.html#zip/2"},{"type":"function","title":"Example - Iter.zip/2","doc":"iex> first = Iter.from(1..3)\n    ...> second = Iter.from([:a, :b, :c])\n    ...> Iter.zip(first, second)\n    ...> |> Iter.to_list()\n    [{1, :a}, {2, :b}, {3, :c}]","ref":"Iter.html#zip/2-example"},{"type":"function","title":"Iter.zip_with/2","doc":"Zips corresponding elements from a finite collection of iterators into a new\niterator, transforming them with `zip_fun` as it goes.\n\nThe first element from each of the iterators will be put into a list which is\nthen passed to the one-arity `zip_fun` function.  Then, the second elements\nfrom each of the iterators are put into a list, and so on until any of the\niterators are exhausted.","ref":"Iter.html#zip_with/2"},{"type":"function","title":"Example - Iter.zip_with/2","doc":"iex> first = Iter.from(1..3)\n    ...> second = Iter.from(4..6)\n    ...> third = Iter.from(7..9)\n    ...> [first, second, third]\n    ...> |> Iter.from()\n    ...> |> Iter.zip_with(fn [a, b, c] -> a + b + c end)\n    ...> |> Iter.to_list()\n    [12, 15, 18]","ref":"Iter.html#zip_with/2-example"},{"type":"function","title":"Iter.zip_with/3","doc":"Zips corresponding elements from two iterators into a new one, transforming\nthem with `zip_fun` as it goes.\n\nThe `zip_fun` will be called with the first elements from the iterators, then\nthe second elements and so on.","ref":"Iter.html#zip_with/3"},{"type":"function","title":"Example - Iter.zip_with/3","doc":"iex> first = Iter.from(1..3)\n    ...> second = Iter.from(4..6)\n    ...> Iter.zip_with(first, second, &(&1 + &2))\n    ...> |> Iter.to_list()\n    [5, 7, 9]","ref":"Iter.html#zip_with/3-example"},{"type":"type","title":"Iter.element/0","doc":"","ref":"Iter.html#t:element/0"},{"type":"type","title":"Iter.mapper/0","doc":"","ref":"Iter.html#t:mapper/0"},{"type":"type","title":"Iter.predicate/0","doc":"","ref":"Iter.html#t:predicate/0"},{"type":"type","title":"Iter.sorter/0","doc":"","ref":"Iter.html#t:sorter/0"},{"type":"type","title":"Iter.t/0","doc":"","ref":"Iter.html#t:t/0"},{"type":"module","title":"Iter.Impl","doc":"The default implementations of all `Iter.Iterable` callbacks except `next/1`.\n\nBy adding `use Iter.Impl` to your `Iter.Iterable` definition all of the\ndefault functions will be automatically delegated and marked as overridable.\n\nThis allows you to implement only those callbacks which can reasonably be made\nfaster for your particular iterable, and not have to implement all of them.\n\nFor example, here's a fictional implementation of iterable for `List`:\n\n```elixir\ndefimpl Iter.Iterable, for: List do\n  use Iter.Impl\n\n  def next([head | tail]), do: {:ok, head, tail}\n  def next([]), do: :done\n\n  def peek([]), do: :done\n  def peek([head | _] = list), do: {:ok, head, list}\n\n  def empty?([]), do: true\n  def empty?(_), do: false\nend\n```\n\nBe aware that all the default implementations rely on your implementation of\n`next/1` which you always must provide.","ref":"Iter.Impl.html"},{"type":"macro","title":"Iter.Impl.__using__/1","doc":"Generate overridable delegations to the default iterable callbacks.","ref":"Iter.Impl.html#__using__/1"},{"type":"function","title":"Iter.Impl.all?/2","doc":"Tests if every element in the iterable matches `predicate`.","ref":"Iter.Impl.html#all?/2"},{"type":"function","title":"Examples - Iter.Impl.all?/2","doc":"iex> Impl.all?([2, 4, 6, 8], &(rem(&1, 2) == 0))\n    true\n\n    iex> Impl.all?([2, 3, 4], &(rem(&1, 2) == 0))\n    false","ref":"Iter.Impl.html#all?/2-examples"},{"type":"function","title":"Iter.Impl.any?/2","doc":"Tests if any element in the iterable matches `predicate`.","ref":"Iter.Impl.html#any?/2"},{"type":"function","title":"Examples - Iter.Impl.any?/2","doc":"iex> Impl.any?([2, 4, 6], &(rem(&1, 2) == 1))\n    false\n\n    iex> Impl.any?([2, 3, 4], &(rem(&1, 2) == 1))\n    true","ref":"Iter.Impl.html#any?/2-examples"},{"type":"function","title":"Iter.Impl.append/2","doc":"Creates an iterable that appends an element to the end of the iterable.","ref":"Iter.Impl.html#append/2"},{"type":"function","title":"Examples - Iter.Impl.append/2","doc":"iex> Impl.append(1..3, 4)\n    ...> |> Impl.to_list()\n    [1, 2, 3, 4]","ref":"Iter.Impl.html#append/2-examples"},{"type":"function","title":"Iter.Impl.at/2","doc":"Returns the element `index` items from the beginning of the iterable.","ref":"Iter.Impl.html#at/2"},{"type":"function","title":"Example - Iter.Impl.at/2","doc":"iex> Impl.at([:a, :b, :c], 1)\n    {:ok, :b, [:c]}","ref":"Iter.Impl.html#at/2-example"},{"type":"function","title":"Iter.Impl.chunk_by/2","doc":"Creates an iterable that chunks elements by subsequent return values of `fun`.","ref":"Iter.Impl.html#chunk_by/2"},{"type":"function","title":"Example - Iter.Impl.chunk_by/2","doc":"iex> Impl.chunk_by([1, 2, 2, 3, 4, 4, 6, 7, 7], &(rem(&1, 2) == 1))\n    ...> |> Impl.to_list()\n    [[1], [2, 2], [3], [4, 4, 6], [7, 7]]","ref":"Iter.Impl.html#chunk_by/2-example"},{"type":"function","title":"Iter.Impl.chunk_every/4","doc":"Creates an iterable that chunks elements into `count` sized chunks of `step` spacing.","ref":"Iter.Impl.html#chunk_every/4"},{"type":"function","title":"Examples - Iter.Impl.chunk_every/4","doc":"iex> Impl.chunk_every([1, 2, 3, 4, 5, 6], 2, 2, []) |> Impl.to_list()\n    [[1, 2], [3, 4], [5, 6]]\n\n    iex> Impl.chunk_every([1, 2, 3, 4, 5, 6], 3, 2, :discard) |> Impl.to_list()\n    [[1, 2, 3], [3, 4, 5]]\n\n    iex> Impl.chunk_every([1, 2, 3, 4, 5, 6], 3, 2, [7]) |> Impl.to_list()\n    [[1, 2, 3], [3, 4, 5], [5, 6, 7]]\n\n    iex> Impl.chunk_every([1, 2, 3, 4, 5, 6], 3, 3, []) |> Impl.to_list()\n    [[1, 2, 3], [4, 5, 6]]\n\n    iex> cycler = Impl.cycle([0])\n    iex> Impl.chunk_every([1, 2, 3, 4], 3, 3, cycler) |> Impl.to_list()\n    [[1, 2, 3], [4, 0, 0]]","ref":"Iter.Impl.html#chunk_every/4-examples"},{"type":"function","title":"Iter.Impl.chunk_while/4","doc":"Creates an iterable that chunks based on a chunk function.","ref":"Iter.Impl.html#chunk_while/4"},{"type":"function","title":"Examples - Iter.Impl.chunk_while/4","doc":"iex> chunk_fun = fn element, acc ->\n    ...>   if rem(element, 2) == 0 do\n    ...>     {:cont, Enum.reverse([element | acc]), []}\n    ...>   else\n    ...>     {:cont, [element | acc]}\n    ...>   end\n    ...> end\n    iex> after_fun = fn\n    ...>   [] -> {:cont, []}\n    ...>   acc -> {:cont, Enum.reverse(acc), []}\n    ...> end\n    iex> iter = 1..10 |> Impl.chunk_while([], chunk_fun, after_fun)\n    iex> Impl.to_list(iter)\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]","ref":"Iter.Impl.html#chunk_while/4-examples"},{"type":"function","title":"Iter.Impl.concat/1","doc":"Takes an iterable and iterates each iterable in an iterable.","ref":"Iter.Impl.html#concat/1"},{"type":"function","title":"Example - Iter.Impl.concat/1","doc":"iex> Impl.concat([1..3, 2..4, 3..5]) |> Impl.to_list()\n    [1, 2, 3, 2, 3, 4, 3, 4, 5]","ref":"Iter.Impl.html#concat/1-example"},{"type":"function","title":"Iter.Impl.count/1","doc":"Consumes the iterable, returning the number of elements within","ref":"Iter.Impl.html#count/1"},{"type":"function","title":"Examples - Iter.Impl.count/1","doc":"iex> Impl.count([])\n    0\n\n    iex> Impl.count([1,2,3])\n    3","ref":"Iter.Impl.html#count/1-examples"},{"type":"function","title":"Iter.Impl.count/2","doc":"Consumes the iterable, returning the number of elements for which `fun` returns a truthy value.","ref":"Iter.Impl.html#count/2"},{"type":"function","title":"Example - Iter.Impl.count/2","doc":"iex> 1..5\n    ...> |> Impl.count(&(rem(&1, 2) == 0))\n    2","ref":"Iter.Impl.html#count/2-example"},{"type":"function","title":"Iter.Impl.cycle/1","doc":"Creates an iterator that cycles it's elements eternally.","ref":"Iter.Impl.html#cycle/1"},{"type":"function","title":"Example - Iter.Impl.cycle/1","doc":"iex> Impl.cycle(1..3)\n    ...> |> Impl.take_head(5)\n    ...> |> Impl.to_list()\n    [1, 2, 3, 1, 2]","ref":"Iter.Impl.html#cycle/1-example"},{"type":"function","title":"Iter.Impl.dedup/1","doc":"Creates an iterable that only emits elements if they are different from the previous element.","ref":"Iter.Impl.html#dedup/1"},{"type":"function","title":"Example - Iter.Impl.dedup/1","doc":"iex> Impl.dedup([:a, :a, :b, :c, :b, :c, :c, :d])\n    ...> |> Impl.to_list()\n    [:a, :b, :c, :b, :c, :d]","ref":"Iter.Impl.html#dedup/1-example"},{"type":"function","title":"Iter.Impl.dedup_by/2","doc":"Creates an iterable that only emits elements if they are different from the previous element.\n\nThe function `fun` maps every element to a term which is used to determine if two elements are duplicates.","ref":"Iter.Impl.html#dedup_by/2"},{"type":"function","title":"Example - Iter.Impl.dedup_by/2","doc":"iex> [{1, :a}, {2, :b}, {2, :c}, {1, :a}]\n    ...> |> Impl.dedup_by(&elem(&1, 0))\n    ...> |> Impl.to_list()\n    [{1, :a}, {2, :b}, {1, :a}]","ref":"Iter.Impl.html#dedup_by/2-example"},{"type":"function","title":"Iter.Impl.drop/2","doc":"Creates an iterable which drops the first `how_many` elements.","ref":"Iter.Impl.html#drop/2"},{"type":"function","title":"Examples - Iter.Impl.drop/2","doc":"iex> Impl.drop([1, 2, 3], 2)\n    ...> |> Impl.to_list()\n    [3]\n\n    iex> Impl.drop([1, 2, 3], 0)\n    ...> |> Impl.to_list()\n    [1, 2, 3]\n\n    iex> Impl.drop([1, 2, 3], -2)\n    ...> |> Impl.to_list()\n    [1]","ref":"Iter.Impl.html#drop/2-examples"},{"type":"function","title":"Iter.Impl.drop_every/2","doc":"Returns a new iterable with every `nth` element in the `iterable` dropped,\nstarting with the first element.","ref":"Iter.Impl.html#drop_every/2"},{"type":"function","title":"Examples - Iter.Impl.drop_every/2","doc":"iex> 1..10\n    ...> |> Impl.drop_every(2)\n    ...> |> Impl.to_list()\n    [2, 4, 6, 8, 10]\n\n    iex> 1..12\n    ...> |> Impl.drop_every(3)\n    ...> |> Impl.to_list()\n    [2, 3, 5, 6, 8, 9, 11, 12]\n\n    iex> 1..10\n    ...> |> Impl.drop_every(0)\n    ...> |> Impl.to_list()\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    iex> [1, 2, 3]\n    ...> |> Impl.drop_every(1)\n    ...> |> Impl.to_list()\n    []","ref":"Iter.Impl.html#drop_every/2-examples"},{"type":"function","title":"Iter.Impl.drop_while/2","doc":"Drops elements at the beginning of `iterable` while fun returns a truthy\nvalue.","ref":"Iter.Impl.html#drop_while/2"},{"type":"function","title":"Example - Iter.Impl.drop_while/2","doc":"iex> [1, 2, 3, 2, 1]\n    ...> |> Impl.drop_while(&(&1 < 3))\n    ...> |> Impl.to_list()\n    [3, 2, 1]","ref":"Iter.Impl.html#drop_while/2-example"},{"type":"function","title":"Iter.Impl.each/2","doc":"Consumes the iterable and applies `fun` to each element.\n\nPrimarily used for side-effects.\n\nAlways returns `:done`.","ref":"Iter.Impl.html#each/2"},{"type":"function","title":"Example - Iter.Impl.each/2","doc":"```elixir\nImpl.each([1, 2, 3], &IO.puts(\"#{&1}\"))\n\"1\"\n\"2\"\n\"3\"\n#=> :done\n```","ref":"Iter.Impl.html#each/2-example"},{"type":"function","title":"Iter.Impl.empty?/1","doc":"Determines if the iterable is empty.","ref":"Iter.Impl.html#empty?/1"},{"type":"function","title":"Example - Iter.Impl.empty?/1","doc":"iex> Impl.empty?([])\n    true\n\n    iex> Impl.empty?(1..20)\n    false","ref":"Iter.Impl.html#empty?/1-example"},{"type":"function","title":"Iter.Impl.filter/2","doc":"Creates an iterable which drops elements for which `predicate` doesn't return true.","ref":"Iter.Impl.html#filter/2"},{"type":"function","title":"Example - Iter.Impl.filter/2","doc":"iex> Impl.filter([1, 2, 3, 4], &(rem(&1, 2) == 1))\n    ...> |> Impl.to_list()\n    [1, 3]","ref":"Iter.Impl.html#filter/2-example"},{"type":"function","title":"Iter.Impl.find/2","doc":"Searches for the first element in the iterable which matches `predicate`.","ref":"Iter.Impl.html#find/2"},{"type":"function","title":"Example - Iter.Impl.find/2","doc":"iex> Impl.find([1, 2, 3, 4], &(&1 > 2))\n    {:ok, 3, [4]}\n\n    iex> Impl.find([1, 2, 3, 4], &(&1 > 4))\n    :done","ref":"Iter.Impl.html#find/2-example"},{"type":"function","title":"Iter.Impl.find_index/2","doc":"Returns the index of the first element in the iterable which matches `predicate`.","ref":"Iter.Impl.html#find_index/2"},{"type":"function","title":"Examples - Iter.Impl.find_index/2","doc":"iex> Impl.find_index([1, 2, 3, 4], &(&1 > 2))\n    {:ok, 2, [4]}\n\n    iex> Impl.find_index([1, 2, 3, 4], &(&1 > 4))\n    :done","ref":"Iter.Impl.html#find_index/2-examples"},{"type":"function","title":"Iter.Impl.find_value/2","doc":"Returns the first truthy value returned by `fun`.","ref":"Iter.Impl.html#find_value/2"},{"type":"function","title":"Example - Iter.Impl.find_value/2","doc":"iex> Impl.find_value([1, 2, 3, 4], fn\n    ...>   i when i > 2 -> i * 2\n    ...>   _ -> nil\n    ...> end)\n    {:ok, 6, [4]}","ref":"Iter.Impl.html#find_value/2-example"},{"type":"function","title":"Iter.Impl.flat_map/2","doc":"Creates an iterable which works like `map/2` but flattens nested iterables.","ref":"Iter.Impl.html#flat_map/2"},{"type":"function","title":"Example - Iter.Impl.flat_map/2","doc":"iex> [:a, :b, :c]\n    ...> |> Impl.flat_map(&[&1, &1])\n    ...> |> Impl.to_list()\n    [:a, :a, :b, :b, :c, :c]","ref":"Iter.Impl.html#flat_map/2-example"},{"type":"function","title":"Iter.Impl.flatten/1","doc":"Creates an iterable which flattens nested iterables.","ref":"Iter.Impl.html#flatten/1"},{"type":"function","title":"Example - Iter.Impl.flatten/1","doc":"iex> Impl.flatten([[1, 2], [3, [4, [5, 6]]]])\n    ...> |> Impl.to_list()\n    [1, 2, 3, 4, 5, 6]","ref":"Iter.Impl.html#flatten/1-example"},{"type":"function","title":"Iter.Impl.intersperse/2","doc":"Creates a new iterable which places `separator` between adjacent items of the original iterable.","ref":"Iter.Impl.html#intersperse/2"},{"type":"function","title":"Example - Iter.Impl.intersperse/2","doc":"iex> Impl.intersperse([:a, :b, :c], :wat)\n    ...> |> Impl.to_list()\n    [:a, :wat, :b, :wat, :c]","ref":"Iter.Impl.html#intersperse/2-example"},{"type":"function","title":"Iter.Impl.map/2","doc":"Creates a new iterable which applies `mapper` to each element and using it's\nresult as the new element value.","ref":"Iter.Impl.html#map/2"},{"type":"function","title":"Example - Iter.Impl.map/2","doc":"iex> Impl.map([1, 2, 3], &(&1 * &1))\n    ...> |> Impl.to_list()\n    [1, 4, 9]","ref":"Iter.Impl.html#map/2-example"},{"type":"function","title":"Iter.Impl.map_every/3","doc":"Creates a new iterable which applies `mapper` on every `nth` element of the\niterable, starting with the first element.\n\nThe first element is always mapped unless `nth` is `0`.","ref":"Iter.Impl.html#map_every/3"},{"type":"function","title":"Examples - Iter.Impl.map_every/3","doc":"iex> Impl.map_every(1..10, 2, fn x -> x + 1000 end)\n    ...> |> Impl.to_list()\n    [1001, 2, 1003, 4, 1005, 6, 1007, 8, 1009, 10]\n\n    iex> Impl.map_every(1..10, 3, fn x -> x + 1000 end)\n    ...> |> Impl.to_list()\n    [1001, 2, 3, 1004, 5, 6, 1007, 8, 9, 1010]\n\n    iex> Impl.map_every(1..5, 0, fn x -> x + 1000 end)\n    ...> |> Impl.to_list()\n    [1, 2, 3, 4, 5]\n\n    iex> Impl.map_every([1, 2, 3], 1, fn x -> x + 1000 end)\n    ...> |> Impl.to_list()\n    [1001, 1002, 1003]","ref":"Iter.Impl.html#map_every/3-examples"},{"type":"function","title":"Iter.Impl.max/2","doc":"Returns the maximal element in the `iterable` according to Erlang's term ordering.","ref":"Iter.Impl.html#max/2"},{"type":"function","title":"Examples - Iter.Impl.max/2","doc":"iex> Impl.max([1, 3, 2], &>=/2)\n    {:ok, 3}\n\n    iex> Impl.max([], &>=/2)\n    :done","ref":"Iter.Impl.html#max/2-examples"},{"type":"function","title":"Iter.Impl.max_by/3","doc":"Returns the maximal element in the `iterable` as calculated by `mapper`.","ref":"Iter.Impl.html#max_by/3"},{"type":"function","title":"Example - Iter.Impl.max_by/3","doc":"iex> Impl.max_by([\"a\", \"aa\", \"aaa\"], &String.length/1, &>=/2)\n    {:ok, \"aaa\"}\n\n    iex> Impl.max_by([], &String.length/1, &>=/2)\n    :done","ref":"Iter.Impl.html#max_by/3-example"},{"type":"function","title":"Iter.Impl.member?/2","doc":"Is the element a member of the iterable?","ref":"Iter.Impl.html#member?/2"},{"type":"function","title":"Iter.Impl.min/2","doc":"Returns the minimal element in the `iterable` according to Erlang's term ordering.","ref":"Iter.Impl.html#min/2"},{"type":"function","title":"Examples - Iter.Impl.min/2","doc":"iex> Impl.min([1, 3, 2], &<=/2)\n    {:ok, 1}\n\n    iex> Impl.min([], &<=/2)\n    :done","ref":"Iter.Impl.html#min/2-examples"},{"type":"function","title":"Iter.Impl.min_by/3","doc":"Returns the minimal element in the `iterable` as calculated by `mapper`.","ref":"Iter.Impl.html#min_by/3"},{"type":"function","title":"Example - Iter.Impl.min_by/3","doc":"iex> Impl.min_by([\"a\", \"aa\", \"aaa\"], &String.length/1, &<=/2)\n    {:ok, \"a\"}\n\n    iex> Impl.min_by([], &String.length/1, &<=/2)\n    :done","ref":"Iter.Impl.html#min_by/3-example"},{"type":"function","title":"Iter.Impl.min_max/1","doc":"Finds the minimal and maximal elements in the iterable.","ref":"Iter.Impl.html#min_max/1"},{"type":"function","title":"Example - Iter.Impl.min_max/1","doc":"iex> Impl.min_max(1..12)\n    {:ok, 1, 12}\n\n    iex> Impl.min_max([])\n    :done","ref":"Iter.Impl.html#min_max/1-example"},{"type":"function","title":"Iter.Impl.peek/1","doc":"Peeks at the first element of the iterable, without consuming it.\n\n> #### Warning {: .warning}\n> Many iterables cannot be peeked, so this function simulates peeking by\n> consuming an element from the iterable and returning a new iterable which\n> pushes that element back on to the front.","ref":"Iter.Impl.html#peek/1"},{"type":"function","title":"Example - Iter.Impl.peek/1","doc":"iex> {:ok, :a, iterable} = Impl.peek([:a, :b, :c])\n    ...> Impl.to_list(iterable)\n    [:a, :b, :c]","ref":"Iter.Impl.html#peek/1-example"},{"type":"function","title":"Iter.Impl.peek/2","doc":"Peeks at the first `how_many` elements of the iterable, without consuming them.\n\n> #### Warning {: .warning}\n> Many iterables cannot be peeked, so this function simulates peeking by\n> consuming elements from the iterable and returning a new iterable which\n> pushes those elements back on to the front.","ref":"Iter.Impl.html#peek/2"},{"type":"function","title":"Example - Iter.Impl.peek/2","doc":"iex> {:ok, [:a, :b, :c], 3, iterable} = Impl.peek([:a, :b, :c, :d], 3)\n    ...> Impl.to_list(iterable)\n    [:a, :b, :c, :d]","ref":"Iter.Impl.html#peek/2-example"},{"type":"function","title":"Iter.Impl.prepend/2","doc":"Creates a new iterable which places `element` at the beginning of the iterable.","ref":"Iter.Impl.html#prepend/2"},{"type":"function","title":"Example - Iter.Impl.prepend/2","doc":"iex> 1..5\n    ...> |> Impl.prepend(6)\n    ...> |> Impl.to_list()\n    [6, 1, 2, 3, 4, 5]","ref":"Iter.Impl.html#prepend/2-example"},{"type":"function","title":"Iter.Impl.step_by/2","doc":"Creates an iterable starting at the same point, but stepping by `how_many` each iteration.","ref":"Iter.Impl.html#step_by/2"},{"type":"function","title":"Example - Iter.Impl.step_by/2","doc":"iex> [0, 1, 2, 3, 4, 5]\n    ...> |> Impl.step_by(2)\n    ...> |> Impl.to_list()\n    [0, 2, 4]","ref":"Iter.Impl.html#step_by/2-example"},{"type":"function","title":"Iter.Impl.take_chunk/2","doc":"Collects the first `how_many` elements into a new iterable and returns it\nalong with the advanced initial iterable.\n\nThis is very much like `take/2` except that it returns the remaining iterable\nso that it can be called repeatedly.","ref":"Iter.Impl.html#take_chunk/2"},{"type":"function","title":"Example - Iter.Impl.take_chunk/2","doc":"iex> iter = 1..9\n    ...> {:ok, [1, 2, 3], iter} = Impl.take_chunk(iter, 3)\n    ...> {:ok, [4, 5, 6], iter} = Impl.take_chunk(iter, 3)\n    ...> Impl.to_list(iter)\n    [7, 8, 9]","ref":"Iter.Impl.html#take_chunk/2-example"},{"type":"function","title":"Iter.Impl.take_head/2","doc":"Creates an iterable which takes the first `how_many` elements.","ref":"Iter.Impl.html#take_head/2"},{"type":"function","title":"Example - Iter.Impl.take_head/2","doc":"iex> Impl.take_head(1..5, 0)\n    ...> |> Impl.to_list()\n    []\n\n    iex> Impl.take_head(1..5, 3)\n    ...> |> Impl.to_list()\n    [1, 2, 3]","ref":"Iter.Impl.html#take_head/2-example"},{"type":"function","title":"Iter.Impl.take_tail/2","doc":"Creates an iterable which takes the last `how_many` elements.","ref":"Iter.Impl.html#take_tail/2"},{"type":"function","title":"Example - Iter.Impl.take_tail/2","doc":"iex> Impl.take_tail(1..5, 0)\n    ...> |> Impl.to_list()\n    []\n\n    iex> Impl.take_tail(1..5, 3)\n    ...> |> Impl.to_list()\n    [3, 4, 5]","ref":"Iter.Impl.html#take_tail/2-example"},{"type":"function","title":"Iter.Impl.take_while/2","doc":"Creates an iterable which emits elements until `predicate` returns `false`.","ref":"Iter.Impl.html#take_while/2"},{"type":"function","title":"Example - Iter.Impl.take_while/2","doc":"iex> [1, 2, 3]\n    ...> |> Impl.take_while(&(&1 < 3))\n    ...> |> Impl.to_list()\n    [1, 2]","ref":"Iter.Impl.html#take_while/2-example"},{"type":"function","title":"Iter.Impl.to_list/1","doc":"Convert the iterable into a list.","ref":"Iter.Impl.html#to_list/1"},{"type":"function","title":"Iter.Impl.uniq/1","doc":"Creates an iterable that only emits unique elements.","ref":"Iter.Impl.html#uniq/1"},{"type":"function","title":"Example - Iter.Impl.uniq/1","doc":"iex> Impl.uniq([:a, :a, :b, :c, :b, :c, :c, :d])\n    ...> |> Impl.to_list()\n    [:a, :b, :c, :d]","ref":"Iter.Impl.html#uniq/1-example"},{"type":"function","title":"Iter.Impl.with_index/1","doc":"Creates an iterable which emits the current iteration count as well as the\nnext value.\n\nThis is analogous to `Enum.with_index/1` except that counting starts from the\nbeginning of the iterable, meaning you can convert an iterable into an\nenumerator after consuming some if it.","ref":"Iter.Impl.html#with_index/1"},{"type":"function","title":"Examples - Iter.Impl.with_index/1","doc":"iex> Impl.with_index([:a, :b, :c])\n  ...> |> Impl.to_list()\n  [a: 0, b: 1, c: 2]\n\n   iex> [:a, :b, :c, :d]\n   ...> |> Impl.drop(2)\n   ...> |> Impl.with_index()\n   ...> |> Impl.to_list()\n   [c: 0, d: 1]","ref":"Iter.Impl.html#with_index/1-examples"},{"type":"function","title":"Iter.Impl.zip/2","doc":"Zips corresponding elements from a finite collection of iterables into one iterable of results as computed by `zipper`.","ref":"Iter.Impl.html#zip/2"},{"type":"function","title":"Example - Iter.Impl.zip/2","doc":"iex> Impl.zip([1..3, 4..6, 7..9], &List.to_tuple/1)\n  ...> |> Impl.to_list()\n  [{1, 4, 7}, {2, 5, 8}, {3, 6, 9}]","ref":"Iter.Impl.html#zip/2-example"},{"type":"type","title":"Iter.Impl.element/0","doc":"","ref":"Iter.Impl.html#t:element/0"},{"type":"type","title":"Iter.Impl.iterable/0","doc":"","ref":"Iter.Impl.html#t:iterable/0"},{"type":"type","title":"Iter.Impl.predicate/0","doc":"","ref":"Iter.Impl.html#t:predicate/0"},{"type":"protocol","title":"Iter.IntoIterable","doc":"A protocol for converting a value into an iterable.\n\nRequired by `Iter.from/1` and others.\n\nBy default this protocol is implemented for `List`, `Map`, `MapSet`, `Range`,\n`Date.Range`, `File.Stream` and `IO.Stream` as well as all iterex's internal\ntypes.\n\nAllows the data and the iterable for that data to be separate.  It could be as\nsimple as a reference to some external data source and a position marker or it\nmay be more efficient to read data in batches and iterate it.  Regardless,\nmost types simply return themselves from this function.\n\nIt is important that your `into_iterable/1` callback must not actually start\niterating, it simply returns a data structure suitable to track the iteration\nof the underlying data.","ref":"Iter.IntoIterable.html"},{"type":"function","title":"Iter.IntoIterable.into_iterable/1","doc":"Convert a value into an iterable.","ref":"Iter.IntoIterable.html#into_iterable/1"},{"type":"type","title":"Iter.IntoIterable.t/0","doc":"All the types that implement this protocol.","ref":"Iter.IntoIterable.html#t:t/0"},{"type":"protocol","title":"Iter.Iterable","doc":"This is the main iterable protocol.\n\nIt is intentionally huge, however rte only function you have to implement is\n`next/1`, for the remainder you can rely on the default implementations from\n`Iter.Impl` unless your data structure can provide a more\nefficient method of generating the correct answer.","ref":"Iter.Iterable.html"},{"type":"function","title":"Iter.Iterable.all?/2","doc":"Tests if every element in the iterable matches `predicate`.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#all?/2"},{"type":"function","title":"Iter.Iterable.any?/2","doc":"Tests if any element in the iterable matches `predicate`.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#any?/2"},{"type":"function","title":"Iter.Iterable.append/2","doc":"Append an element onto the end of the iterable.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#append/2"},{"type":"function","title":"Iter.Iterable.at/2","doc":"Returns the element `index` items from the beginning of the iterator.\n\nNote that all preceding elements, as well as the returned element, will be consumed from the iterable.","ref":"Iter.Iterable.html#at/2"},{"type":"function","title":"Return values - Iter.Iterable.at/2","doc":"- `{:ok, element, new_iterable}` - the next element and an updated iterable.\n  - `:done` - the iterable was exhausted before the element was found.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#at/2-return-values"},{"type":"function","title":"Iter.Iterable.chunk_by/2","doc":"Creates an iterable that only emits elements for which `fun` returns a new\nvalue.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#chunk_by/2"},{"type":"function","title":"Iter.Iterable.chunk_every/4","doc":"Creates an iterable that chunks into `count` size elements, where each new\nchunk starts `step` elements into the enumerable.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#chunk_every/4"},{"type":"function","title":"Iter.Iterable.chunk_while/4","doc":"Creates an iterable that chunks based on a chunk function.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#chunk_while/4"},{"type":"function","title":"Iter.Iterable.concat/1","doc":"Creates an iterable that iterates each iterable in an iterable.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#concat/1"},{"type":"function","title":"Iter.Iterable.count/1","doc":"Consumes the iterable, counting the number of iterations remaining.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#count/1"},{"type":"function","title":"Iter.Iterable.count/2","doc":"Consumes the iterable, counting the number of elements for which `fun` returns a truthy value.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#count/2"},{"type":"function","title":"Iter.Iterable.cycle/1","doc":"Creates an iterable that cycles it's elements eternally.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#cycle/1"},{"type":"function","title":"Iter.Iterable.dedup/1","doc":"Creates an iterable that only emits elements if they are different from the previous element.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#dedup/1"},{"type":"function","title":"Iter.Iterable.dedup_by/2","doc":"Creates an iterable that only emits elements if they are different from the previous element.\n\nThe function `fun` maps every element to a term which is used to determine if two elements are duplicates.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#dedup_by/2"},{"type":"function","title":"Iter.Iterable.drop/2","doc":"Creates an iterable which drops the first `how_many` elements.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#drop/2"},{"type":"function","title":"Iter.Iterable.drop_every/2","doc":"Returns a new iterable with every `nth` element in the `iterable` dropped,\nstarting with the first element.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#drop_every/2"},{"type":"function","title":"Iter.Iterable.drop_while/2","doc":"Drops elements at the beginning of the `iterable` while `predicate` returns a\ntruthy value.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#drop_while/2"},{"type":"function","title":"Iter.Iterable.each/2","doc":"Consumes the iterable and applies `fun` to each element.\n\nPrimarily used for side-effects.\n\nAlways returns `:done`.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#each/2"},{"type":"function","title":"Iter.Iterable.empty?/1","doc":"Determines if the iterable is empty.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#empty?/1"},{"type":"function","title":"Iter.Iterable.filter/2","doc":"Creates an iterable which drops elements for which `predicate` doesn't return\na truthy value.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#filter/2"},{"type":"function","title":"Iter.Iterable.find/2","doc":"Searches for the first element in the iterable which matches `predicate`.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#find/2"},{"type":"function","title":"Iter.Iterable.find_index/2","doc":"Returns the index of the first element in the iterable which matches `predicate`.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#find_index/2"},{"type":"function","title":"Iter.Iterable.find_value/2","doc":"Returns the first non-falsy result of `fun`.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#find_value/2"},{"type":"function","title":"Iter.Iterable.flat_map/2","doc":"Creates an iterable which works like `map/2` but flattens nested iterables.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#flat_map/2"},{"type":"function","title":"Iter.Iterable.flatten/1","doc":"Creates an iterable which flattens nested iterables.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#flatten/1"},{"type":"function","title":"Iter.Iterable.intersperse/2","doc":"Creates a new iterable which places `separator` between adjacent items of the original iterable.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#intersperse/2"},{"type":"function","title":"Iter.Iterable.map/2","doc":"Creates a new iterable which applies `mapper` to each element and using it's\nresult as the new element value.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#map/2"},{"type":"function","title":"Iter.Iterable.map_every/3","doc":"Creates a new iterable which applies `mapper` on every `nth` element of the\niterable, starting with the first element.\n\nThe first element is always mapped unless `nth` is `0`.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#map_every/3"},{"type":"function","title":"Iter.Iterable.max/2","doc":"Returns the maximal element in the `iterable` according to Erlang's term ordering.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#max/2"},{"type":"function","title":"Iter.Iterable.max_by/3","doc":"Returns the maximal element in the `iterable` as calculated by `mapper`.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#max_by/3"},{"type":"function","title":"Iter.Iterable.member?/2","doc":"Is the element a member of the iterable?\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#member?/2"},{"type":"function","title":"Iter.Iterable.min/2","doc":"Returns the minimal element in the `iterable` according to Erlang's term ordering.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#min/2"},{"type":"function","title":"Iter.Iterable.min_by/3","doc":"Returns the minimal element in the `iterable` as calculated by `mapper`.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#min_by/3"},{"type":"function","title":"Iter.Iterable.min_max/1","doc":"Return the minimal and maximal element of the iterable.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#min_max/1"},{"type":"function","title":"Iter.Iterable.next/1","doc":"Advance the iterable and return the next value.\n\nThis is the only required callback in the `Iterable` protocol.","ref":"Iter.Iterable.html#next/1"},{"type":"function","title":"Return values - Iter.Iterable.next/1","doc":"- `{:ok, element, new_iterable}` - returns the next element and an updated iterable.\n  - `:done` - the iterable is exhausted.","ref":"Iter.Iterable.html#next/1-return-values"},{"type":"function","title":"Iter.Iterable.peek/1","doc":"Peeks at the first element of the iterable, without consuming it.","ref":"Iter.Iterable.html#peek/1"},{"type":"function","title":"Return values - Iter.Iterable.peek/1","doc":"- `{:ok, element, new_iterable}` - the next element and an updated iterable.\n  - `:done` - the iterable is exhausted.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#peek/1-return-values"},{"type":"function","title":"Iter.Iterable.peek/2","doc":"Peeks at the first n elements of the iterable, without consuming it.","ref":"Iter.Iterable.html#peek/2"},{"type":"function","title":"Return values - Iter.Iterable.peek/2","doc":"- `{:ok, [element], how_many, new_iterable}` - the peekable elements and an\n    updated iterable.  Note that `how_many` may not be the same as you asked\n    for if the underlying iterable is exhausted.\n  - `:done` - the iterable is exhausted.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#peek/2-return-values"},{"type":"function","title":"Iter.Iterable.prepend/2","doc":"Creates an iterable which prepends an element to the beginning of another\niterable.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#prepend/2"},{"type":"function","title":"Iter.Iterable.step_by/2","doc":"Creates an iterable starting at the same point, but stepping by `step_size` each iteration.\n\nThe first element of the iterable will always be returned, regardless of the step given.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#step_by/2"},{"type":"function","title":"Iter.Iterable.take_chunk/2","doc":"Collects `how_many` elements into a chunk and returns it as well as the\nremaining iterable.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#take_chunk/2"},{"type":"function","title":"Iter.Iterable.take_head/2","doc":"Creates an iterable which takes the first `how_many` elements.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#take_head/2"},{"type":"function","title":"Iter.Iterable.take_tail/2","doc":"Creates an iterable which takes the last `how_many` elements.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#take_tail/2"},{"type":"function","title":"Iter.Iterable.take_while/2","doc":"Creates an iterable which emits elements until `predicate` returns `false`.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#take_while/2"},{"type":"function","title":"Iter.Iterable.to_list/1","doc":"Convert the iterable into a list.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#to_list/1"},{"type":"function","title":"Iter.Iterable.uniq/1","doc":"Creates an iterable that returns only unique elements.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#uniq/1"},{"type":"function","title":"Iter.Iterable.with_index/1","doc":"Creates an iterable which emits the current iteration count as well as the next value.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#with_index/1"},{"type":"function","title":"Iter.Iterable.zip/2","doc":"Zips corresponding elements from a number of iterables into an iterable of\nresults as computed by `zipper`.\n\n> #### Optional callback {: .tip}\n> A default implementation of this function exists in the `Iter.Impl` module.\n>\n> You can add it to your protocol implementation by adding `use Iter.Impl`.","ref":"Iter.Iterable.html#zip/2"},{"type":"type","title":"Iter.Iterable.element/0","doc":"","ref":"Iter.Iterable.html#t:element/0"},{"type":"type","title":"Iter.Iterable.mapper/0","doc":"","ref":"Iter.Iterable.html#t:mapper/0"},{"type":"type","title":"Iter.Iterable.predicate/0","doc":"","ref":"Iter.Iterable.html#t:predicate/0"},{"type":"type","title":"Iter.Iterable.t/0","doc":"","ref":"Iter.Iterable.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Appender","doc":"An iterable which appends a single element to the end of another iterable.","ref":"Iter.Iterable.Appender.html"},{"type":"function","title":"Iter.Iterable.Appender.new/2","doc":"Create a new appender iterable.","ref":"Iter.Iterable.Appender.html#new/2"},{"type":"type","title":"Iter.Iterable.Appender.t/0","doc":"","ref":"Iter.Iterable.Appender.html#t:t/0"},{"type":"module","title":"Iter.Iterable.ByChunker","doc":"An iterable that chunks elements by subsequent return values of `fun`.","ref":"Iter.Iterable.ByChunker.html"},{"type":"function","title":"Iter.Iterable.ByChunker.new/2","doc":"Creates an iterable that chunks elements by subsequent return values of `fun`.","ref":"Iter.Iterable.ByChunker.html#new/2"},{"type":"type","title":"Iter.Iterable.ByChunker.t/0","doc":"","ref":"Iter.Iterable.ByChunker.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Concatenator","doc":"An iterable which can concatenate a number of iterables.","ref":"Iter.Iterable.Concatenator.html"},{"type":"function","title":"Iter.Iterable.Concatenator.new/1","doc":"Create a new concatenator out of an iterable of iterables.","ref":"Iter.Iterable.Concatenator.html#new/1"},{"type":"type","title":"Iter.Iterable.Concatenator.t/0","doc":"","ref":"Iter.Iterable.Concatenator.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Cycler","doc":"An iterable which emits elements for ever.","ref":"Iter.Iterable.Cycler.html"},{"type":"function","title":"Iter.Iterable.Cycler.new/1","doc":"Create an eternal iterable.","ref":"Iter.Iterable.Cycler.html#new/1"},{"type":"type","title":"Iter.Iterable.Cycler.t/0","doc":"","ref":"Iter.Iterable.Cycler.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Deduper","doc":"An iterable that only emits elements if they are different from the previous element.","ref":"Iter.Iterable.Deduper.html"},{"type":"function","title":"Iter.Iterable.Deduper.new/2","doc":"Creates an iterable that only emits elements if they are different from the previous element.","ref":"Iter.Iterable.Deduper.html#new/2"},{"type":"type","title":"Iter.Iterable.Deduper.t/0","doc":"","ref":"Iter.Iterable.Deduper.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Empty","doc":"An iterable that's always exhausted","ref":"Iter.Iterable.Empty.html"},{"type":"function","title":"Iter.Iterable.Empty.new/0","doc":"Creates an iterable that's always exhausted.","ref":"Iter.Iterable.Empty.html#new/0"},{"type":"opaque","title":"Iter.Iterable.Empty.t/0","doc":"","ref":"Iter.Iterable.Empty.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Enumerable","doc":"Can we convert a enum into an iterable?  Let's find out.","ref":"Iter.Iterable.Enumerable.html"},{"type":"function","title":"Iter.Iterable.Enumerable.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"Iter.Iterable.Enumerable.html#child_spec/1"},{"type":"function","title":"Iter.Iterable.Enumerable.new/1","doc":"Wrap an enumerable in a genserver","ref":"Iter.Iterable.Enumerable.html#new/1"},{"type":"type","title":"Iter.Iterable.Enumerable.t/0","doc":"","ref":"Iter.Iterable.Enumerable.html#t:t/0"},{"type":"module","title":"Iter.Iterable.EveryChunker","doc":"An iterable that chunks into `count` size elements, where each new chunk\nstarts `step` elements into the enumerable.","ref":"Iter.Iterable.EveryChunker.html"},{"type":"function","title":"Iter.Iterable.EveryChunker.new/4","doc":"Creates an iterable that chunks into `count` size elements, where each new\nchunk starts `step` elements into the enumerable.","ref":"Iter.Iterable.EveryChunker.html#new/4"},{"type":"type","title":"Iter.Iterable.EveryChunker.t/0","doc":"","ref":"Iter.Iterable.EveryChunker.html#t:t/0"},{"type":"module","title":"Iter.Iterable.EveryDropper","doc":"An iterable which drops every `nth` element from the iterable.","ref":"Iter.Iterable.EveryDropper.html"},{"type":"function","title":"Iter.Iterable.EveryDropper.new/2","doc":"Creates an iterable which drops every `nth` element from the iterable.","ref":"Iter.Iterable.EveryDropper.html#new/2"},{"type":"type","title":"Iter.Iterable.EveryDropper.t/0","doc":"","ref":"Iter.Iterable.EveryDropper.html#t:t/0"},{"type":"module","title":"Iter.Iterable.EveryMapper","doc":"An iterable which maps every `nth` element in the iterable.","ref":"Iter.Iterable.EveryMapper.html"},{"type":"function","title":"Iter.Iterable.EveryMapper.new/3","doc":"Creates a new iterable which maps every `nth` element in the iterable.","ref":"Iter.Iterable.EveryMapper.html#new/3"},{"type":"type","title":"Iter.Iterable.EveryMapper.t/0","doc":"","ref":"Iter.Iterable.EveryMapper.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Filterer","doc":"An iterable which drops elements for which `predicate` doesn't return a truthy value.","ref":"Iter.Iterable.Filterer.html"},{"type":"function","title":"Iter.Iterable.Filterer.new/2","doc":"Create a new filter iterable.","ref":"Iter.Iterable.Filterer.html#new/2"},{"type":"type","title":"Iter.Iterable.Filterer.t/0","doc":"","ref":"Iter.Iterable.Filterer.html#t:t/0"},{"type":"module","title":"Iter.Iterable.FlatMapper","doc":"An iterable which works like `map/2` but flattens nested iterables.","ref":"Iter.Iterable.FlatMapper.html"},{"type":"function","title":"Iter.Iterable.FlatMapper.new/2","doc":"Creates an iterable which works like `map/2` but flattens nested iterables.","ref":"Iter.Iterable.FlatMapper.html#new/2"},{"type":"type","title":"Iter.Iterable.FlatMapper.mapper/0","doc":"","ref":"Iter.Iterable.FlatMapper.html#t:mapper/0"},{"type":"type","title":"Iter.Iterable.FlatMapper.t/0","doc":"","ref":"Iter.Iterable.FlatMapper.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Flattener","doc":"An iterable which flattens nested iterables.","ref":"Iter.Iterable.Flattener.html"},{"type":"function","title":"Iter.Iterable.Flattener.new/1","doc":"Creates an iterable which flattens nested iterables.","ref":"Iter.Iterable.Flattener.html#new/1"},{"type":"type","title":"Iter.Iterable.Flattener.t/0","doc":"","ref":"Iter.Iterable.Flattener.html#t:t/0"},{"type":"module","title":"Iter.Iterable.HeadDropper","doc":"An iterable which drops the first `how_many` elements.","ref":"Iter.Iterable.HeadDropper.html"},{"type":"function","title":"Iter.Iterable.HeadDropper.new/2","doc":"Creates an iterable which drops the first `how_many` elements.","ref":"Iter.Iterable.HeadDropper.html#new/2"},{"type":"type","title":"Iter.Iterable.HeadDropper.t/0","doc":"","ref":"Iter.Iterable.HeadDropper.html#t:t/0"},{"type":"module","title":"Iter.Iterable.HeadTaker","doc":"An iterable which takes the first `how_many` elements.","ref":"Iter.Iterable.HeadTaker.html"},{"type":"function","title":"Iter.Iterable.HeadTaker.new/2","doc":"Creates an iterable which takes the first `how_many` elements.","ref":"Iter.Iterable.HeadTaker.html#new/2"},{"type":"type","title":"Iter.Iterable.HeadTaker.t/0","doc":"","ref":"Iter.Iterable.HeadTaker.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Intersperser","doc":"An iterable which places a separator value in between consecutive elements.","ref":"Iter.Iterable.Intersperser.html"},{"type":"function","title":"Iter.Iterable.Intersperser.new/2","doc":"Create a new intersperser iterable out of an iterable and a separator","ref":"Iter.Iterable.Intersperser.html#new/2"},{"type":"type","title":"Iter.Iterable.Intersperser.t/0","doc":"","ref":"Iter.Iterable.Intersperser.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Map","doc":"A wrapper around Erlang's `:maps.iterator`.","ref":"Iter.Iterable.Map.html"},{"type":"function","title":"Iter.Iterable.Map.new/1","doc":"Convert a map into a map iterable.","ref":"Iter.Iterable.Map.html#new/1"},{"type":"type","title":"Iter.Iterable.Map.t/0","doc":"","ref":"Iter.Iterable.Map.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Mapper","doc":"An iterable which applies a mapper function to all it's elements and returns their new values.","ref":"Iter.Iterable.Mapper.html"},{"type":"function","title":"Iter.Iterable.Mapper.new/2","doc":"Create a new map iterable.","ref":"Iter.Iterable.Mapper.html#new/2"},{"type":"type","title":"Iter.Iterable.Mapper.t/0","doc":"","ref":"Iter.Iterable.Mapper.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Peeker","doc":"The result of \"peeking\" into an iterable.","ref":"Iter.Iterable.Peeker.html"},{"type":"function","title":"Iter.Iterable.Peeker.new/1","doc":"Create a new \"peeker\" iterable.","ref":"Iter.Iterable.Peeker.html#new/1"},{"type":"type","title":"Iter.Iterable.Peeker.t/0","doc":"","ref":"Iter.Iterable.Peeker.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Prepender","doc":"An iterable which prepends a single element to the end of another iterable.","ref":"Iter.Iterable.Prepender.html"},{"type":"function","title":"Iter.Iterable.Prepender.new/2","doc":"Create a new prepender iterable.","ref":"Iter.Iterable.Prepender.html#new/2"},{"type":"type","title":"Iter.Iterable.Prepender.t/0","doc":"","ref":"Iter.Iterable.Prepender.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Resource","doc":"An iterable which provides compatibility with `Stream.resource/3`","ref":"Iter.Iterable.Resource.html"},{"type":"function","title":"Iter.Iterable.Resource.new/3","doc":"Create an iterable from functions in a manner compatible with `Stream.resource/3`.","ref":"Iter.Iterable.Resource.html#new/3"},{"type":"type","title":"Iter.Iterable.Resource.acc/0","doc":"","ref":"Iter.Iterable.Resource.html#t:acc/0"},{"type":"type","title":"Iter.Iterable.Resource.after_fun/0","doc":"","ref":"Iter.Iterable.Resource.html#t:after_fun/0"},{"type":"type","title":"Iter.Iterable.Resource.next_fun/0","doc":"","ref":"Iter.Iterable.Resource.html#t:next_fun/0"},{"type":"type","title":"Iter.Iterable.Resource.start_fun/0","doc":"","ref":"Iter.Iterable.Resource.html#t:start_fun/0"},{"type":"type","title":"Iter.Iterable.Resource.t/0","doc":"","ref":"Iter.Iterable.Resource.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Stepper","doc":"An iterable which advances it's internal iterable by a specific amount each time.","ref":"Iter.Iterable.Stepper.html"},{"type":"function","title":"Iter.Iterable.Stepper.new/2","doc":"Create a new iterable which wraps another iterable.","ref":"Iter.Iterable.Stepper.html#new/2"},{"type":"type","title":"Iter.Iterable.Stepper.t/0","doc":"","ref":"Iter.Iterable.Stepper.html#t:t/0"},{"type":"module","title":"Iter.Iterable.TailDropper","doc":"An iterable which drops the last `how_many` elements.","ref":"Iter.Iterable.TailDropper.html"},{"type":"function","title":"Iter.Iterable.TailDropper.new/2","doc":"Creates an iterable which drops the last `how_many` elements.","ref":"Iter.Iterable.TailDropper.html#new/2"},{"type":"type","title":"Iter.Iterable.TailDropper.t/0","doc":"","ref":"Iter.Iterable.TailDropper.html#t:t/0"},{"type":"module","title":"Iter.Iterable.TailTaker","doc":"An iterable which takes `how_many` elements from the end of the iterable.","ref":"Iter.Iterable.TailTaker.html"},{"type":"function","title":"Iter.Iterable.TailTaker.new/2","doc":"Creates an iterable which takes `how_many` elements from the end of the iterable.","ref":"Iter.Iterable.TailTaker.html#new/2"},{"type":"type","title":"Iter.Iterable.TailTaker.t/0","doc":"","ref":"Iter.Iterable.TailTaker.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Uniquer","doc":"An iterable that only emits unique elements.","ref":"Iter.Iterable.Uniquer.html"},{"type":"function","title":"Iter.Iterable.Uniquer.new/1","doc":"Creates an iterable that only emits unique elements.","ref":"Iter.Iterable.Uniquer.html#new/1"},{"type":"type","title":"Iter.Iterable.Uniquer.t/0","doc":"","ref":"Iter.Iterable.Uniquer.html#t:t/0"},{"type":"module","title":"Iter.Iterable.WhileChunker","doc":"An iterable that chunks based on a chunk function.","ref":"Iter.Iterable.WhileChunker.html"},{"type":"function","title":"Iter.Iterable.WhileChunker.new/4","doc":"Creates an iterable that chunks based on a chunk function.","ref":"Iter.Iterable.WhileChunker.html#new/4"},{"type":"type","title":"Iter.Iterable.WhileChunker.acc/0","doc":"","ref":"Iter.Iterable.WhileChunker.html#t:acc/0"},{"type":"type","title":"Iter.Iterable.WhileChunker.chunk/0","doc":"","ref":"Iter.Iterable.WhileChunker.html#t:chunk/0"},{"type":"type","title":"Iter.Iterable.WhileChunker.t/0","doc":"","ref":"Iter.Iterable.WhileChunker.html#t:t/0"},{"type":"module","title":"Iter.Iterable.WhileDropper","doc":"An iterable that drops elements until `predicate` returns a truthy value.","ref":"Iter.Iterable.WhileDropper.html"},{"type":"function","title":"Iter.Iterable.WhileDropper.new/2","doc":"Creates an iterable that drops elements until `predicate` returns a truthy\nvalue.","ref":"Iter.Iterable.WhileDropper.html#new/2"},{"type":"type","title":"Iter.Iterable.WhileDropper.t/0","doc":"","ref":"Iter.Iterable.WhileDropper.html#t:t/0"},{"type":"module","title":"Iter.Iterable.WhileTaker","doc":"An iterable which emits elements until `predicate` returns `false`.","ref":"Iter.Iterable.WhileTaker.html"},{"type":"function","title":"Iter.Iterable.WhileTaker.new/2","doc":"Creates an iterable which emits elements until `predicate` returns `false`.","ref":"Iter.Iterable.WhileTaker.html#new/2"},{"type":"type","title":"Iter.Iterable.WhileTaker.t/0","doc":"","ref":"Iter.Iterable.WhileTaker.html#t:t/0"},{"type":"module","title":"Iter.Iterable.WithIndexer","doc":"Creates an iterator which emits the current iteration count as well as the next value.","ref":"Iter.Iterable.WithIndexer.html"},{"type":"function","title":"Iter.Iterable.WithIndexer.new/1","doc":"Create a new filter iterable.","ref":"Iter.Iterable.WithIndexer.html#new/1"},{"type":"type","title":"Iter.Iterable.WithIndexer.t/0","doc":"","ref":"Iter.Iterable.WithIndexer.html#t:t/0"},{"type":"module","title":"Iter.Iterable.Zipper","doc":"An iterable which returns the elements of two iterables as tuple pairs.","ref":"Iter.Iterable.Zipper.html"},{"type":"function","title":"Iter.Iterable.Zipper.new/2","doc":"Create a new zip out of two iterables.","ref":"Iter.Iterable.Zipper.html#new/2"},{"type":"type","title":"Iter.Iterable.Zipper.t/0","doc":"","ref":"Iter.Iterable.Zipper.html#t:t/0"},{"type":"extras","title":"README","doc":"# Iterex\n\n![Elixir CI](https://github.com/ash-project/iterex/actions/workflows/elixir.yml/badge.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Hex version badge](https://img.shields.io/hexpm/v/iterex.svg)](https://hex.pm/packages/iterex)\n\nIterex is a library that provides external iterators for Elixir collections.\n\nIterators provide the flexibility of `Enum` with the laziness of `Stream` and the ability to pause and resume iteration.\n\nThe `Iter` module provides the public interface to working with iterators, which wraps an `Iter.Iterable` (to make it easier to pattern match, etc). You'll find most of the functions you'd want from `Stream` and `Enum` provided by this module, but often with different return values to enable you to resume iteration where possible. The `Enumerable` and `Collectable` protocols have been implemented for `Iter` so you can use them as drop in replacements for other collection types where needed.\n\nSome differences from `Enum` and `Stream`:\n\n- `Iter.next/1` - the core advantage of iterators over streams. Allows you to retrieve the next element from an iterator and a new iterator.\n- `Iter.prepend/2`, `Iter.append/2` and `Iter.peek/1..2` - iterators can be easily composed allowing features that might otherwise break `Stream` semantics.\n\nSee the [documentation on hexdocs](https://hexdocs.pm/iterex) for more information.","ref":"readme.html"},{"type":"extras","title":"Sponsors - README","doc":"Thanks to [Alembic Pty Ltd](https://alembic.com.au/) for sponsoring a portion of\nthis project's development.","ref":"readme.html#sponsors"},{"type":"extras","title":"Installation - README","doc":"The package can be installed by adding `iterex` to your list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:iterex, \"~> 0.1.2\"}\n  ]\nend\n```","ref":"readme.html#installation"},{"type":"extras","title":"Contributing - README","doc":"- To contribute updates, fixes or new features please fork and open a pull-request against `main`.\n- Please use [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/) - this allows us to dynamically generate the changelog.","ref":"readme.html#contributing"},{"type":"extras","title":"Licence - README","doc":"`iterex` is licensed under the terms of the [MIT license](https://opensource.org/licenses/MIT). See the [`LICENSE` file in this repository](https://github.com/ash-project/iterex/blob/main/LICENSE)\nfor details.","ref":"readme.html#licence"}],"content_type":"text/markdown","producer":{"name":"ex_doc","version":[48,46,51,52,46,50]}}